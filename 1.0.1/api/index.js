Index.PACKAGES = {"sbt.internal.librarymanagement" : [{"name" : "sbt.internal.librarymanagement.FakeRawRepository", "shortDescription" : "", "object" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html", "members_object" : [{"label" : "create", "tail" : "(name: String): RawRepository", "member" : "sbt.internal.librarymanagement.FakeRawRepository.create", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#create(name:String):sbt.librarymanagement.RawRepository", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/librarymanagement\/FakeRawRepository$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "sbt.protocol.codec" : [{"name" : "sbt.protocol.codec.ChannelAcceptedEventFormats", "members_trait" : [{"label" : "ChannelAcceptedEventFormat", "tail" : ": JsonFormat[ChannelAcceptedEvent]", "member" : "sbt.protocol.codec.ChannelAcceptedEventFormats.ChannelAcceptedEventFormat", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#ChannelAcceptedEventFormat:sjsonnew.JsonFormat[sbt.protocol.ChannelAcceptedEvent]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/codec\/ChannelAcceptedEventFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.codec.CommandMessageFormats", "members_trait" : [{"label" : "CommandMessageFormat", "tail" : ": JsonFormat[CommandMessage]", "member" : "sbt.protocol.codec.CommandMessageFormats.CommandMessageFormat", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#CommandMessageFormat:sjsonnew.JsonFormat[sbt.protocol.CommandMessage]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/codec\/CommandMessageFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/codec\/CommandMessageFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.codec.EventMessageFormats", "members_trait" : [{"label" : "EventMessageFormat", "tail" : ": JsonFormat[EventMessage]", "member" : "sbt.protocol.codec.EventMessageFormats.EventMessageFormat", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#EventMessageFormat:sjsonnew.JsonFormat[sbt.protocol.EventMessage]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/codec\/EventMessageFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/codec\/EventMessageFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.codec.ExecCommandFormats", "members_trait" : [{"label" : "ExecCommandFormat", "tail" : ": JsonFormat[ExecCommand]", "member" : "sbt.protocol.codec.ExecCommandFormats.ExecCommandFormat", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#ExecCommandFormat:sjsonnew.JsonFormat[sbt.protocol.ExecCommand]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/codec\/ExecCommandFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/codec\/ExecCommandFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.codec.ExecStatusEventFormats", "members_trait" : [{"label" : "ExecStatusEventFormat", "tail" : ": JsonFormat[ExecStatusEvent]", "member" : "sbt.protocol.codec.ExecStatusEventFormats.ExecStatusEventFormat", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#ExecStatusEventFormat:sjsonnew.JsonFormat[sbt.protocol.ExecStatusEvent]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/codec\/ExecStatusEventFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.codec.ExecutionEventFormats", "members_trait" : [{"label" : "ExecutionEventFormat", "tail" : ": JsonFormat[ExecutionEvent]", "member" : "sbt.protocol.codec.ExecutionEventFormats.ExecutionEventFormat", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#ExecutionEventFormat:sjsonnew.JsonFormat[sbt.protocol.ExecutionEvent]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/codec\/ExecutionEventFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/codec\/ExecutionEventFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.codec.JsonProtocol", "members_trait" : [{"label" : "StackTraceElementFormat", "tail" : "", "member" : "sjsonnew.ThrowableFormats.StackTraceElementFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#StackTraceElementFormatextendsJsonFormat[StackTraceElement]", "kind" : "final class"}, {"label" : "ThrowableFormat", "tail" : "", "member" : "sjsonnew.ThrowableFormats.ThrowableFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#ThrowableFormatextendsJsonFormat[Throwable]", "kind" : "final class"}, {"label" : "OptionalFormat", "tail" : "", "member" : "sjsonnew.JavaExtraFormats.OptionalFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#OptionalFormat[A]extendsJsonFormat[java.util.Optional[A]]", "kind" : "final class"}, {"label" : "OptionFormat", "tail" : "", "member" : "sjsonnew.StandardFormats.OptionFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#OptionFormat[A]extendsJsonFormat[Option[A]]", "kind" : "final class"}, {"label" : "SymbolJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.SymbolJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#SymbolJsonFormat", "kind" : "implicit object"}, {"label" : "StringJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.StringJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#StringJsonFormat", "kind" : "implicit object"}, {"label" : "CharJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.CharJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#CharJsonFormat", "kind" : "implicit object"}, {"label" : "BooleanJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.BooleanJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#BooleanJsonFormat", "kind" : "implicit object"}, {"label" : "UnitJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.UnitJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#UnitJsonFormat", "kind" : "implicit object"}, {"label" : "BigIntJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.BigIntJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#BigIntJsonFormat", "kind" : "implicit object"}, {"label" : "BigDecimalJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.BigDecimalJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#BigDecimalJsonFormat", "kind" : "implicit object"}, {"label" : "ShortJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.ShortJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#ShortJsonFormat", "kind" : "implicit object"}, {"label" : "ByteJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.ByteJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#ByteJsonFormat", "kind" : "implicit object"}, {"label" : "DoubleJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.DoubleJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#DoubleJsonFormat", "kind" : "implicit object"}, {"label" : "FloatJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.FloatJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#FloatJsonFormat", "kind" : "implicit object"}, {"label" : "LongJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.LongJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#LongJsonFormat", "kind" : "implicit object"}, {"label" : "IntJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.IntJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#IntJsonFormat", "kind" : "implicit object"}, {"label" : "ExecutionEventFormat", "tail" : ": JsonFormat[ExecutionEvent]", "member" : "sbt.protocol.codec.ExecutionEventFormats.ExecutionEventFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#ExecutionEventFormat:sjsonnew.JsonFormat[sbt.protocol.ExecutionEvent]", "kind" : "implicit lazy val"}, {"label" : "SettingQueryResponseFormat", "tail" : ": JsonFormat[SettingQueryResponse]", "member" : "sbt.protocol.codec.SettingQueryResponseFormats.SettingQueryResponseFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#SettingQueryResponseFormat:sjsonnew.JsonFormat[sbt.protocol.SettingQueryResponse]", "kind" : "implicit lazy val"}, {"label" : "EventMessageFormat", "tail" : ": JsonFormat[EventMessage]", "member" : "sbt.protocol.codec.EventMessageFormats.EventMessageFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#EventMessageFormat:sjsonnew.JsonFormat[sbt.protocol.EventMessage]", "kind" : "implicit lazy val"}, {"label" : "SettingQueryFailureFormat", "tail" : ": JsonFormat[SettingQueryFailure]", "member" : "sbt.protocol.codec.SettingQueryFailureFormats.SettingQueryFailureFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#SettingQueryFailureFormat:sjsonnew.JsonFormat[sbt.protocol.SettingQueryFailure]", "kind" : "implicit lazy val"}, {"label" : "SettingQuerySuccessFormat", "tail" : ": JsonFormat[SettingQuerySuccess]", "member" : "sbt.protocol.codec.SettingQuerySuccessFormats.SettingQuerySuccessFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#SettingQuerySuccessFormat:sjsonnew.JsonFormat[sbt.protocol.SettingQuerySuccess]", "kind" : "implicit lazy val"}, {"label" : "JValueFormat", "tail" : ": JsonFormat[JValue]", "member" : "sbt.internal.util.codec.JValueFormats.JValueFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JValueFormat:sjsonnew.JsonFormat[sjsonnew.shaded.scalajson.ast.unsafe.JValue]", "kind" : "implicit lazy val"}, {"label" : "JValueJsonReader", "tail" : ": JsonReader[JValue]", "member" : "sbt.internal.util.codec.JValueFormats.JValueJsonReader", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JValueJsonReader:sjsonnew.JsonReader[sjsonnew.shaded.scalajson.ast.unsafe.JValue]", "kind" : "implicit lazy val"}, {"label" : "JValueJsonWriter", "tail" : ": JsonWriter[JValue]", "member" : "sbt.internal.util.codec.JValueFormats.JValueJsonWriter", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JValueJsonWriter:sjsonnew.JsonWriter[sjsonnew.shaded.scalajson.ast.unsafe.JValue]", "kind" : "implicit lazy val"}, {"label" : "JObjectJsonWriter", "tail" : ": JsonWriter[JObject]", "member" : "sbt.internal.util.codec.JValueFormats.JObjectJsonWriter", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JObjectJsonWriter:sjsonnew.JsonWriter[sjsonnew.shaded.scalajson.ast.unsafe.JObject]", "kind" : "implicit lazy val"}, {"label" : "JArrayFormat", "tail" : ": JsonFormat[JArray]", "member" : "sbt.internal.util.codec.JValueFormats.JArrayFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JArrayFormat:sjsonnew.JsonFormat[sjsonnew.shaded.scalajson.ast.unsafe.JArray]", "kind" : "implicit val"}, {"label" : "JNumberFormat", "tail" : ": JsonFormat[JNumber]", "member" : "sbt.internal.util.codec.JValueFormats.JNumberFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JNumberFormat:sjsonnew.JsonFormat[sjsonnew.shaded.scalajson.ast.unsafe.JNumber]", "kind" : "implicit val"}, {"label" : "JStringFormat", "tail" : ": JsonFormat[JString]", "member" : "sbt.internal.util.codec.JValueFormats.JStringFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JStringFormat:sjsonnew.JsonFormat[sjsonnew.shaded.scalajson.ast.unsafe.JString]", "kind" : "implicit val"}, {"label" : "JBooleanFormat", "tail" : ": JsonFormat[JBoolean]", "member" : "sbt.internal.util.codec.JValueFormats.JBooleanFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JBooleanFormat:sjsonnew.JsonFormat[sjsonnew.shaded.scalajson.ast.unsafe.JBoolean]", "kind" : "implicit val"}, {"label" : "JNullFormat", "tail" : ": JsonFormat[JNull.type]", "member" : "sbt.internal.util.codec.JValueFormats.JNullFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JNullFormat:sjsonnew.JsonFormat[sjsonnew.shaded.scalajson.ast.unsafe.JNull.type]", "kind" : "implicit val"}, {"label" : "ExecStatusEventFormat", "tail" : ": JsonFormat[ExecStatusEvent]", "member" : "sbt.protocol.codec.ExecStatusEventFormats.ExecStatusEventFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#ExecStatusEventFormat:sjsonnew.JsonFormat[sbt.protocol.ExecStatusEvent]", "kind" : "implicit lazy val"}, {"label" : "LogEventFormat", "tail" : ": JsonFormat[LogEvent]", "member" : "sbt.protocol.codec.LogEventFormats.LogEventFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#LogEventFormat:sjsonnew.JsonFormat[sbt.protocol.LogEvent]", "kind" : "implicit lazy val"}, {"label" : "ChannelAcceptedEventFormat", "tail" : ": JsonFormat[ChannelAcceptedEvent]", "member" : "sbt.protocol.codec.ChannelAcceptedEventFormats.ChannelAcceptedEventFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#ChannelAcceptedEventFormat:sjsonnew.JsonFormat[sbt.protocol.ChannelAcceptedEvent]", "kind" : "implicit lazy val"}, {"label" : "CommandMessageFormat", "tail" : ": JsonFormat[CommandMessage]", "member" : "sbt.protocol.codec.CommandMessageFormats.CommandMessageFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#CommandMessageFormat:sjsonnew.JsonFormat[sbt.protocol.CommandMessage]", "kind" : "implicit lazy val"}, {"label" : "SettingQueryFormat", "tail" : ": JsonFormat[SettingQuery]", "member" : "sbt.protocol.codec.SettingQueryFormats.SettingQueryFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#SettingQueryFormat:sjsonnew.JsonFormat[sbt.protocol.SettingQuery]", "kind" : "implicit lazy val"}, {"label" : "ExecCommandFormat", "tail" : ": JsonFormat[ExecCommand]", "member" : "sbt.protocol.codec.ExecCommandFormats.ExecCommandFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#ExecCommandFormat:sjsonnew.JsonFormat[sbt.protocol.ExecCommand]", "kind" : "implicit lazy val"}, {"label" : "stackTraceElementFormat", "tail" : ": JF[StackTraceElement]", "member" : "sjsonnew.ThrowableFormats.stackTraceElementFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#stackTraceElementFormat:ThrowableFormats.this.JF[StackTraceElement]", "kind" : "implicit lazy val"}, {"label" : "throwableFormat", "tail" : ": JF[Throwable]", "member" : "sjsonnew.ThrowableFormats.throwableFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#throwableFormat:ThrowableFormats.this.JF[Throwable]", "kind" : "implicit lazy val"}, {"label" : "caseClassArray22", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], A22: JF[A22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray22", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21],implicitA22:CaseClassFormats.this.JF[A22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass22", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21, key22: K22)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], A22: JF[A22], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19], K20: K[K20], K21: K[K21], K22: K[K22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass22", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass22[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,K22,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21,key22:K22)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21],implicitA22:CaseClassFormats.this.JF[A22],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19],implicitK20:CaseClassFormats.this.K[K20],implicitK21:CaseClassFormats.this.K[K21],implicitK22:CaseClassFormats.this.K[K22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19], arg19: JF[A20], arg20: JF[A21], arg21: JF[A22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$738:CaseClassFormats.this.JF[A1],implicitevidence$739:CaseClassFormats.this.JF[A2],implicitevidence$740:CaseClassFormats.this.JF[A3],implicitevidence$741:CaseClassFormats.this.JF[A4],implicitevidence$742:CaseClassFormats.this.JF[A5],implicitevidence$743:CaseClassFormats.this.JF[A6],implicitevidence$744:CaseClassFormats.this.JF[A7],implicitevidence$745:CaseClassFormats.this.JF[A8],implicitevidence$746:CaseClassFormats.this.JF[A9],implicitevidence$747:CaseClassFormats.this.JF[A10],implicitevidence$748:CaseClassFormats.this.JF[A11],implicitevidence$749:CaseClassFormats.this.JF[A12],implicitevidence$750:CaseClassFormats.this.JF[A13],implicitevidence$751:CaseClassFormats.this.JF[A14],implicitevidence$752:CaseClassFormats.this.JF[A15],implicitevidence$753:CaseClassFormats.this.JF[A16],implicitevidence$754:CaseClassFormats.this.JF[A17],implicitevidence$755:CaseClassFormats.this.JF[A18],implicitevidence$756:CaseClassFormats.this.JF[A19],implicitevidence$757:CaseClassFormats.this.JF[A20],implicitevidence$758:CaseClassFormats.this.JF[A21],implicitevidence$759:CaseClassFormats.this.JF[A22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21, key22: K22)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: K[K20], arg20: K[K21], arg21: K[K22], arg22: JF[A1], arg23: JF[A2], arg24: JF[A3], arg25: JF[A4], arg26: JF[A5], arg27: JF[A6], arg28: JF[A7], arg29: JF[A8], arg30: JF[A9], arg31: JF[A10], arg32: JF[A11], arg33: JF[A12], arg34: JF[A13], arg35: JF[A14], arg36: JF[A15], arg37: JF[A16], arg38: JF[A17], arg39: JF[A18], arg40: JF[A19], arg41: JF[A20], arg42: JF[A21], arg43: JF[A22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,K22,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21,key22:K22)(implicitevidence$694:CaseClassFormats.this.K[K1],implicitevidence$695:CaseClassFormats.this.K[K2],implicitevidence$696:CaseClassFormats.this.K[K3],implicitevidence$697:CaseClassFormats.this.K[K4],implicitevidence$698:CaseClassFormats.this.K[K5],implicitevidence$699:CaseClassFormats.this.K[K6],implicitevidence$700:CaseClassFormats.this.K[K7],implicitevidence$701:CaseClassFormats.this.K[K8],implicitevidence$702:CaseClassFormats.this.K[K9],implicitevidence$703:CaseClassFormats.this.K[K10],implicitevidence$704:CaseClassFormats.this.K[K11],implicitevidence$705:CaseClassFormats.this.K[K12],implicitevidence$706:CaseClassFormats.this.K[K13],implicitevidence$707:CaseClassFormats.this.K[K14],implicitevidence$708:CaseClassFormats.this.K[K15],implicitevidence$709:CaseClassFormats.this.K[K16],implicitevidence$710:CaseClassFormats.this.K[K17],implicitevidence$711:CaseClassFormats.this.K[K18],implicitevidence$712:CaseClassFormats.this.K[K19],implicitevidence$713:CaseClassFormats.this.K[K20],implicitevidence$714:CaseClassFormats.this.K[K21],implicitevidence$715:CaseClassFormats.this.K[K22],implicitevidence$716:CaseClassFormats.this.JF[A1],implicitevidence$717:CaseClassFormats.this.JF[A2],implicitevidence$718:CaseClassFormats.this.JF[A3],implicitevidence$719:CaseClassFormats.this.JF[A4],implicitevidence$720:CaseClassFormats.this.JF[A5],implicitevidence$721:CaseClassFormats.this.JF[A6],implicitevidence$722:CaseClassFormats.this.JF[A7],implicitevidence$723:CaseClassFormats.this.JF[A8],implicitevidence$724:CaseClassFormats.this.JF[A9],implicitevidence$725:CaseClassFormats.this.JF[A10],implicitevidence$726:CaseClassFormats.this.JF[A11],implicitevidence$727:CaseClassFormats.this.JF[A12],implicitevidence$728:CaseClassFormats.this.JF[A13],implicitevidence$729:CaseClassFormats.this.JF[A14],implicitevidence$730:CaseClassFormats.this.JF[A15],implicitevidence$731:CaseClassFormats.this.JF[A16],implicitevidence$732:CaseClassFormats.this.JF[A17],implicitevidence$733:CaseClassFormats.this.JF[A18],implicitevidence$734:CaseClassFormats.this.JF[A19],implicitevidence$735:CaseClassFormats.this.JF[A20],implicitevidence$736:CaseClassFormats.this.JF[A21],implicitevidence$737:CaseClassFormats.this.JF[A22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray21", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray21", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass21", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19], K20: K[K20], K21: K[K21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass21", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass21[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19],implicitK20:CaseClassFormats.this.K[K20],implicitK21:CaseClassFormats.this.K[K21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19], arg19: JF[A20], arg20: JF[A21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$673:CaseClassFormats.this.JF[A1],implicitevidence$674:CaseClassFormats.this.JF[A2],implicitevidence$675:CaseClassFormats.this.JF[A3],implicitevidence$676:CaseClassFormats.this.JF[A4],implicitevidence$677:CaseClassFormats.this.JF[A5],implicitevidence$678:CaseClassFormats.this.JF[A6],implicitevidence$679:CaseClassFormats.this.JF[A7],implicitevidence$680:CaseClassFormats.this.JF[A8],implicitevidence$681:CaseClassFormats.this.JF[A9],implicitevidence$682:CaseClassFormats.this.JF[A10],implicitevidence$683:CaseClassFormats.this.JF[A11],implicitevidence$684:CaseClassFormats.this.JF[A12],implicitevidence$685:CaseClassFormats.this.JF[A13],implicitevidence$686:CaseClassFormats.this.JF[A14],implicitevidence$687:CaseClassFormats.this.JF[A15],implicitevidence$688:CaseClassFormats.this.JF[A16],implicitevidence$689:CaseClassFormats.this.JF[A17],implicitevidence$690:CaseClassFormats.this.JF[A18],implicitevidence$691:CaseClassFormats.this.JF[A19],implicitevidence$692:CaseClassFormats.this.JF[A20],implicitevidence$693:CaseClassFormats.this.JF[A21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: K[K20], arg20: K[K21], arg21: JF[A1], arg22: JF[A2], arg23: JF[A3], arg24: JF[A4], arg25: JF[A5], arg26: JF[A6], arg27: JF[A7], arg28: JF[A8], arg29: JF[A9], arg30: JF[A10], arg31: JF[A11], arg32: JF[A12], arg33: JF[A13], arg34: JF[A14], arg35: JF[A15], arg36: JF[A16], arg37: JF[A17], arg38: JF[A18], arg39: JF[A19], arg40: JF[A20], arg41: JF[A21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21)(implicitevidence$631:CaseClassFormats.this.K[K1],implicitevidence$632:CaseClassFormats.this.K[K2],implicitevidence$633:CaseClassFormats.this.K[K3],implicitevidence$634:CaseClassFormats.this.K[K4],implicitevidence$635:CaseClassFormats.this.K[K5],implicitevidence$636:CaseClassFormats.this.K[K6],implicitevidence$637:CaseClassFormats.this.K[K7],implicitevidence$638:CaseClassFormats.this.K[K8],implicitevidence$639:CaseClassFormats.this.K[K9],implicitevidence$640:CaseClassFormats.this.K[K10],implicitevidence$641:CaseClassFormats.this.K[K11],implicitevidence$642:CaseClassFormats.this.K[K12],implicitevidence$643:CaseClassFormats.this.K[K13],implicitevidence$644:CaseClassFormats.this.K[K14],implicitevidence$645:CaseClassFormats.this.K[K15],implicitevidence$646:CaseClassFormats.this.K[K16],implicitevidence$647:CaseClassFormats.this.K[K17],implicitevidence$648:CaseClassFormats.this.K[K18],implicitevidence$649:CaseClassFormats.this.K[K19],implicitevidence$650:CaseClassFormats.this.K[K20],implicitevidence$651:CaseClassFormats.this.K[K21],implicitevidence$652:CaseClassFormats.this.JF[A1],implicitevidence$653:CaseClassFormats.this.JF[A2],implicitevidence$654:CaseClassFormats.this.JF[A3],implicitevidence$655:CaseClassFormats.this.JF[A4],implicitevidence$656:CaseClassFormats.this.JF[A5],implicitevidence$657:CaseClassFormats.this.JF[A6],implicitevidence$658:CaseClassFormats.this.JF[A7],implicitevidence$659:CaseClassFormats.this.JF[A8],implicitevidence$660:CaseClassFormats.this.JF[A9],implicitevidence$661:CaseClassFormats.this.JF[A10],implicitevidence$662:CaseClassFormats.this.JF[A11],implicitevidence$663:CaseClassFormats.this.JF[A12],implicitevidence$664:CaseClassFormats.this.JF[A13],implicitevidence$665:CaseClassFormats.this.JF[A14],implicitevidence$666:CaseClassFormats.this.JF[A15],implicitevidence$667:CaseClassFormats.this.JF[A16],implicitevidence$668:CaseClassFormats.this.JF[A17],implicitevidence$669:CaseClassFormats.this.JF[A18],implicitevidence$670:CaseClassFormats.this.JF[A19],implicitevidence$671:CaseClassFormats.this.JF[A20],implicitevidence$672:CaseClassFormats.this.JF[A21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray20", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray20", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass20", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19], K20: K[K20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass20", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass20[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19],implicitK20:CaseClassFormats.this.K[K20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19], arg19: JF[A20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$611:CaseClassFormats.this.JF[A1],implicitevidence$612:CaseClassFormats.this.JF[A2],implicitevidence$613:CaseClassFormats.this.JF[A3],implicitevidence$614:CaseClassFormats.this.JF[A4],implicitevidence$615:CaseClassFormats.this.JF[A5],implicitevidence$616:CaseClassFormats.this.JF[A6],implicitevidence$617:CaseClassFormats.this.JF[A7],implicitevidence$618:CaseClassFormats.this.JF[A8],implicitevidence$619:CaseClassFormats.this.JF[A9],implicitevidence$620:CaseClassFormats.this.JF[A10],implicitevidence$621:CaseClassFormats.this.JF[A11],implicitevidence$622:CaseClassFormats.this.JF[A12],implicitevidence$623:CaseClassFormats.this.JF[A13],implicitevidence$624:CaseClassFormats.this.JF[A14],implicitevidence$625:CaseClassFormats.this.JF[A15],implicitevidence$626:CaseClassFormats.this.JF[A16],implicitevidence$627:CaseClassFormats.this.JF[A17],implicitevidence$628:CaseClassFormats.this.JF[A18],implicitevidence$629:CaseClassFormats.this.JF[A19],implicitevidence$630:CaseClassFormats.this.JF[A20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: K[K20], arg20: JF[A1], arg21: JF[A2], arg22: JF[A3], arg23: JF[A4], arg24: JF[A5], arg25: JF[A6], arg26: JF[A7], arg27: JF[A8], arg28: JF[A9], arg29: JF[A10], arg30: JF[A11], arg31: JF[A12], arg32: JF[A13], arg33: JF[A14], arg34: JF[A15], arg35: JF[A16], arg36: JF[A17], arg37: JF[A18], arg38: JF[A19], arg39: JF[A20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20)(implicitevidence$571:CaseClassFormats.this.K[K1],implicitevidence$572:CaseClassFormats.this.K[K2],implicitevidence$573:CaseClassFormats.this.K[K3],implicitevidence$574:CaseClassFormats.this.K[K4],implicitevidence$575:CaseClassFormats.this.K[K5],implicitevidence$576:CaseClassFormats.this.K[K6],implicitevidence$577:CaseClassFormats.this.K[K7],implicitevidence$578:CaseClassFormats.this.K[K8],implicitevidence$579:CaseClassFormats.this.K[K9],implicitevidence$580:CaseClassFormats.this.K[K10],implicitevidence$581:CaseClassFormats.this.K[K11],implicitevidence$582:CaseClassFormats.this.K[K12],implicitevidence$583:CaseClassFormats.this.K[K13],implicitevidence$584:CaseClassFormats.this.K[K14],implicitevidence$585:CaseClassFormats.this.K[K15],implicitevidence$586:CaseClassFormats.this.K[K16],implicitevidence$587:CaseClassFormats.this.K[K17],implicitevidence$588:CaseClassFormats.this.K[K18],implicitevidence$589:CaseClassFormats.this.K[K19],implicitevidence$590:CaseClassFormats.this.K[K20],implicitevidence$591:CaseClassFormats.this.JF[A1],implicitevidence$592:CaseClassFormats.this.JF[A2],implicitevidence$593:CaseClassFormats.this.JF[A3],implicitevidence$594:CaseClassFormats.this.JF[A4],implicitevidence$595:CaseClassFormats.this.JF[A5],implicitevidence$596:CaseClassFormats.this.JF[A6],implicitevidence$597:CaseClassFormats.this.JF[A7],implicitevidence$598:CaseClassFormats.this.JF[A8],implicitevidence$599:CaseClassFormats.this.JF[A9],implicitevidence$600:CaseClassFormats.this.JF[A10],implicitevidence$601:CaseClassFormats.this.JF[A11],implicitevidence$602:CaseClassFormats.this.JF[A12],implicitevidence$603:CaseClassFormats.this.JF[A13],implicitevidence$604:CaseClassFormats.this.JF[A14],implicitevidence$605:CaseClassFormats.this.JF[A15],implicitevidence$606:CaseClassFormats.this.JF[A16],implicitevidence$607:CaseClassFormats.this.JF[A17],implicitevidence$608:CaseClassFormats.this.JF[A18],implicitevidence$609:CaseClassFormats.this.JF[A19],implicitevidence$610:CaseClassFormats.this.JF[A20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray19", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray19", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass19", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass19", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass19[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$552:CaseClassFormats.this.JF[A1],implicitevidence$553:CaseClassFormats.this.JF[A2],implicitevidence$554:CaseClassFormats.this.JF[A3],implicitevidence$555:CaseClassFormats.this.JF[A4],implicitevidence$556:CaseClassFormats.this.JF[A5],implicitevidence$557:CaseClassFormats.this.JF[A6],implicitevidence$558:CaseClassFormats.this.JF[A7],implicitevidence$559:CaseClassFormats.this.JF[A8],implicitevidence$560:CaseClassFormats.this.JF[A9],implicitevidence$561:CaseClassFormats.this.JF[A10],implicitevidence$562:CaseClassFormats.this.JF[A11],implicitevidence$563:CaseClassFormats.this.JF[A12],implicitevidence$564:CaseClassFormats.this.JF[A13],implicitevidence$565:CaseClassFormats.this.JF[A14],implicitevidence$566:CaseClassFormats.this.JF[A15],implicitevidence$567:CaseClassFormats.this.JF[A16],implicitevidence$568:CaseClassFormats.this.JF[A17],implicitevidence$569:CaseClassFormats.this.JF[A18],implicitevidence$570:CaseClassFormats.this.JF[A19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: JF[A1], arg20: JF[A2], arg21: JF[A3], arg22: JF[A4], arg23: JF[A5], arg24: JF[A6], arg25: JF[A7], arg26: JF[A8], arg27: JF[A9], arg28: JF[A10], arg29: JF[A11], arg30: JF[A12], arg31: JF[A13], arg32: JF[A14], arg33: JF[A15], arg34: JF[A16], arg35: JF[A17], arg36: JF[A18], arg37: JF[A19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19)(implicitevidence$514:CaseClassFormats.this.K[K1],implicitevidence$515:CaseClassFormats.this.K[K2],implicitevidence$516:CaseClassFormats.this.K[K3],implicitevidence$517:CaseClassFormats.this.K[K4],implicitevidence$518:CaseClassFormats.this.K[K5],implicitevidence$519:CaseClassFormats.this.K[K6],implicitevidence$520:CaseClassFormats.this.K[K7],implicitevidence$521:CaseClassFormats.this.K[K8],implicitevidence$522:CaseClassFormats.this.K[K9],implicitevidence$523:CaseClassFormats.this.K[K10],implicitevidence$524:CaseClassFormats.this.K[K11],implicitevidence$525:CaseClassFormats.this.K[K12],implicitevidence$526:CaseClassFormats.this.K[K13],implicitevidence$527:CaseClassFormats.this.K[K14],implicitevidence$528:CaseClassFormats.this.K[K15],implicitevidence$529:CaseClassFormats.this.K[K16],implicitevidence$530:CaseClassFormats.this.K[K17],implicitevidence$531:CaseClassFormats.this.K[K18],implicitevidence$532:CaseClassFormats.this.K[K19],implicitevidence$533:CaseClassFormats.this.JF[A1],implicitevidence$534:CaseClassFormats.this.JF[A2],implicitevidence$535:CaseClassFormats.this.JF[A3],implicitevidence$536:CaseClassFormats.this.JF[A4],implicitevidence$537:CaseClassFormats.this.JF[A5],implicitevidence$538:CaseClassFormats.this.JF[A6],implicitevidence$539:CaseClassFormats.this.JF[A7],implicitevidence$540:CaseClassFormats.this.JF[A8],implicitevidence$541:CaseClassFormats.this.JF[A9],implicitevidence$542:CaseClassFormats.this.JF[A10],implicitevidence$543:CaseClassFormats.this.JF[A11],implicitevidence$544:CaseClassFormats.this.JF[A12],implicitevidence$545:CaseClassFormats.this.JF[A13],implicitevidence$546:CaseClassFormats.this.JF[A14],implicitevidence$547:CaseClassFormats.this.JF[A15],implicitevidence$548:CaseClassFormats.this.JF[A16],implicitevidence$549:CaseClassFormats.this.JF[A17],implicitevidence$550:CaseClassFormats.this.JF[A18],implicitevidence$551:CaseClassFormats.this.JF[A19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray18", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray18", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass18", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass18", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass18[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$496:CaseClassFormats.this.JF[A1],implicitevidence$497:CaseClassFormats.this.JF[A2],implicitevidence$498:CaseClassFormats.this.JF[A3],implicitevidence$499:CaseClassFormats.this.JF[A4],implicitevidence$500:CaseClassFormats.this.JF[A5],implicitevidence$501:CaseClassFormats.this.JF[A6],implicitevidence$502:CaseClassFormats.this.JF[A7],implicitevidence$503:CaseClassFormats.this.JF[A8],implicitevidence$504:CaseClassFormats.this.JF[A9],implicitevidence$505:CaseClassFormats.this.JF[A10],implicitevidence$506:CaseClassFormats.this.JF[A11],implicitevidence$507:CaseClassFormats.this.JF[A12],implicitevidence$508:CaseClassFormats.this.JF[A13],implicitevidence$509:CaseClassFormats.this.JF[A14],implicitevidence$510:CaseClassFormats.this.JF[A15],implicitevidence$511:CaseClassFormats.this.JF[A16],implicitevidence$512:CaseClassFormats.this.JF[A17],implicitevidence$513:CaseClassFormats.this.JF[A18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: JF[A1], arg19: JF[A2], arg20: JF[A3], arg21: JF[A4], arg22: JF[A5], arg23: JF[A6], arg24: JF[A7], arg25: JF[A8], arg26: JF[A9], arg27: JF[A10], arg28: JF[A11], arg29: JF[A12], arg30: JF[A13], arg31: JF[A14], arg32: JF[A15], arg33: JF[A16], arg34: JF[A17], arg35: JF[A18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18)(implicitevidence$460:CaseClassFormats.this.K[K1],implicitevidence$461:CaseClassFormats.this.K[K2],implicitevidence$462:CaseClassFormats.this.K[K3],implicitevidence$463:CaseClassFormats.this.K[K4],implicitevidence$464:CaseClassFormats.this.K[K5],implicitevidence$465:CaseClassFormats.this.K[K6],implicitevidence$466:CaseClassFormats.this.K[K7],implicitevidence$467:CaseClassFormats.this.K[K8],implicitevidence$468:CaseClassFormats.this.K[K9],implicitevidence$469:CaseClassFormats.this.K[K10],implicitevidence$470:CaseClassFormats.this.K[K11],implicitevidence$471:CaseClassFormats.this.K[K12],implicitevidence$472:CaseClassFormats.this.K[K13],implicitevidence$473:CaseClassFormats.this.K[K14],implicitevidence$474:CaseClassFormats.this.K[K15],implicitevidence$475:CaseClassFormats.this.K[K16],implicitevidence$476:CaseClassFormats.this.K[K17],implicitevidence$477:CaseClassFormats.this.K[K18],implicitevidence$478:CaseClassFormats.this.JF[A1],implicitevidence$479:CaseClassFormats.this.JF[A2],implicitevidence$480:CaseClassFormats.this.JF[A3],implicitevidence$481:CaseClassFormats.this.JF[A4],implicitevidence$482:CaseClassFormats.this.JF[A5],implicitevidence$483:CaseClassFormats.this.JF[A6],implicitevidence$484:CaseClassFormats.this.JF[A7],implicitevidence$485:CaseClassFormats.this.JF[A8],implicitevidence$486:CaseClassFormats.this.JF[A9],implicitevidence$487:CaseClassFormats.this.JF[A10],implicitevidence$488:CaseClassFormats.this.JF[A11],implicitevidence$489:CaseClassFormats.this.JF[A12],implicitevidence$490:CaseClassFormats.this.JF[A13],implicitevidence$491:CaseClassFormats.this.JF[A14],implicitevidence$492:CaseClassFormats.this.JF[A15],implicitevidence$493:CaseClassFormats.this.JF[A16],implicitevidence$494:CaseClassFormats.this.JF[A17],implicitevidence$495:CaseClassFormats.this.JF[A18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray17", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray17", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass17", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass17", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass17[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$443:CaseClassFormats.this.JF[A1],implicitevidence$444:CaseClassFormats.this.JF[A2],implicitevidence$445:CaseClassFormats.this.JF[A3],implicitevidence$446:CaseClassFormats.this.JF[A4],implicitevidence$447:CaseClassFormats.this.JF[A5],implicitevidence$448:CaseClassFormats.this.JF[A6],implicitevidence$449:CaseClassFormats.this.JF[A7],implicitevidence$450:CaseClassFormats.this.JF[A8],implicitevidence$451:CaseClassFormats.this.JF[A9],implicitevidence$452:CaseClassFormats.this.JF[A10],implicitevidence$453:CaseClassFormats.this.JF[A11],implicitevidence$454:CaseClassFormats.this.JF[A12],implicitevidence$455:CaseClassFormats.this.JF[A13],implicitevidence$456:CaseClassFormats.this.JF[A14],implicitevidence$457:CaseClassFormats.this.JF[A15],implicitevidence$458:CaseClassFormats.this.JF[A16],implicitevidence$459:CaseClassFormats.this.JF[A17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: JF[A1], arg18: JF[A2], arg19: JF[A3], arg20: JF[A4], arg21: JF[A5], arg22: JF[A6], arg23: JF[A7], arg24: JF[A8], arg25: JF[A9], arg26: JF[A10], arg27: JF[A11], arg28: JF[A12], arg29: JF[A13], arg30: JF[A14], arg31: JF[A15], arg32: JF[A16], arg33: JF[A17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17)(implicitevidence$409:CaseClassFormats.this.K[K1],implicitevidence$410:CaseClassFormats.this.K[K2],implicitevidence$411:CaseClassFormats.this.K[K3],implicitevidence$412:CaseClassFormats.this.K[K4],implicitevidence$413:CaseClassFormats.this.K[K5],implicitevidence$414:CaseClassFormats.this.K[K6],implicitevidence$415:CaseClassFormats.this.K[K7],implicitevidence$416:CaseClassFormats.this.K[K8],implicitevidence$417:CaseClassFormats.this.K[K9],implicitevidence$418:CaseClassFormats.this.K[K10],implicitevidence$419:CaseClassFormats.this.K[K11],implicitevidence$420:CaseClassFormats.this.K[K12],implicitevidence$421:CaseClassFormats.this.K[K13],implicitevidence$422:CaseClassFormats.this.K[K14],implicitevidence$423:CaseClassFormats.this.K[K15],implicitevidence$424:CaseClassFormats.this.K[K16],implicitevidence$425:CaseClassFormats.this.K[K17],implicitevidence$426:CaseClassFormats.this.JF[A1],implicitevidence$427:CaseClassFormats.this.JF[A2],implicitevidence$428:CaseClassFormats.this.JF[A3],implicitevidence$429:CaseClassFormats.this.JF[A4],implicitevidence$430:CaseClassFormats.this.JF[A5],implicitevidence$431:CaseClassFormats.this.JF[A6],implicitevidence$432:CaseClassFormats.this.JF[A7],implicitevidence$433:CaseClassFormats.this.JF[A8],implicitevidence$434:CaseClassFormats.this.JF[A9],implicitevidence$435:CaseClassFormats.this.JF[A10],implicitevidence$436:CaseClassFormats.this.JF[A11],implicitevidence$437:CaseClassFormats.this.JF[A12],implicitevidence$438:CaseClassFormats.this.JF[A13],implicitevidence$439:CaseClassFormats.this.JF[A14],implicitevidence$440:CaseClassFormats.this.JF[A15],implicitevidence$441:CaseClassFormats.this.JF[A16],implicitevidence$442:CaseClassFormats.this.JF[A17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray16", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray16", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass16", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass16", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass16[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$393:CaseClassFormats.this.JF[A1],implicitevidence$394:CaseClassFormats.this.JF[A2],implicitevidence$395:CaseClassFormats.this.JF[A3],implicitevidence$396:CaseClassFormats.this.JF[A4],implicitevidence$397:CaseClassFormats.this.JF[A5],implicitevidence$398:CaseClassFormats.this.JF[A6],implicitevidence$399:CaseClassFormats.this.JF[A7],implicitevidence$400:CaseClassFormats.this.JF[A8],implicitevidence$401:CaseClassFormats.this.JF[A9],implicitevidence$402:CaseClassFormats.this.JF[A10],implicitevidence$403:CaseClassFormats.this.JF[A11],implicitevidence$404:CaseClassFormats.this.JF[A12],implicitevidence$405:CaseClassFormats.this.JF[A13],implicitevidence$406:CaseClassFormats.this.JF[A14],implicitevidence$407:CaseClassFormats.this.JF[A15],implicitevidence$408:CaseClassFormats.this.JF[A16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: JF[A1], arg17: JF[A2], arg18: JF[A3], arg19: JF[A4], arg20: JF[A5], arg21: JF[A6], arg22: JF[A7], arg23: JF[A8], arg24: JF[A9], arg25: JF[A10], arg26: JF[A11], arg27: JF[A12], arg28: JF[A13], arg29: JF[A14], arg30: JF[A15], arg31: JF[A16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16)(implicitevidence$361:CaseClassFormats.this.K[K1],implicitevidence$362:CaseClassFormats.this.K[K2],implicitevidence$363:CaseClassFormats.this.K[K3],implicitevidence$364:CaseClassFormats.this.K[K4],implicitevidence$365:CaseClassFormats.this.K[K5],implicitevidence$366:CaseClassFormats.this.K[K6],implicitevidence$367:CaseClassFormats.this.K[K7],implicitevidence$368:CaseClassFormats.this.K[K8],implicitevidence$369:CaseClassFormats.this.K[K9],implicitevidence$370:CaseClassFormats.this.K[K10],implicitevidence$371:CaseClassFormats.this.K[K11],implicitevidence$372:CaseClassFormats.this.K[K12],implicitevidence$373:CaseClassFormats.this.K[K13],implicitevidence$374:CaseClassFormats.this.K[K14],implicitevidence$375:CaseClassFormats.this.K[K15],implicitevidence$376:CaseClassFormats.this.K[K16],implicitevidence$377:CaseClassFormats.this.JF[A1],implicitevidence$378:CaseClassFormats.this.JF[A2],implicitevidence$379:CaseClassFormats.this.JF[A3],implicitevidence$380:CaseClassFormats.this.JF[A4],implicitevidence$381:CaseClassFormats.this.JF[A5],implicitevidence$382:CaseClassFormats.this.JF[A6],implicitevidence$383:CaseClassFormats.this.JF[A7],implicitevidence$384:CaseClassFormats.this.JF[A8],implicitevidence$385:CaseClassFormats.this.JF[A9],implicitevidence$386:CaseClassFormats.this.JF[A10],implicitevidence$387:CaseClassFormats.this.JF[A11],implicitevidence$388:CaseClassFormats.this.JF[A12],implicitevidence$389:CaseClassFormats.this.JF[A13],implicitevidence$390:CaseClassFormats.this.JF[A14],implicitevidence$391:CaseClassFormats.this.JF[A15],implicitevidence$392:CaseClassFormats.this.JF[A16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray15", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray15", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass15", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass15", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass15[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$346:CaseClassFormats.this.JF[A1],implicitevidence$347:CaseClassFormats.this.JF[A2],implicitevidence$348:CaseClassFormats.this.JF[A3],implicitevidence$349:CaseClassFormats.this.JF[A4],implicitevidence$350:CaseClassFormats.this.JF[A5],implicitevidence$351:CaseClassFormats.this.JF[A6],implicitevidence$352:CaseClassFormats.this.JF[A7],implicitevidence$353:CaseClassFormats.this.JF[A8],implicitevidence$354:CaseClassFormats.this.JF[A9],implicitevidence$355:CaseClassFormats.this.JF[A10],implicitevidence$356:CaseClassFormats.this.JF[A11],implicitevidence$357:CaseClassFormats.this.JF[A12],implicitevidence$358:CaseClassFormats.this.JF[A13],implicitevidence$359:CaseClassFormats.this.JF[A14],implicitevidence$360:CaseClassFormats.this.JF[A15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: JF[A1], arg16: JF[A2], arg17: JF[A3], arg18: JF[A4], arg19: JF[A5], arg20: JF[A6], arg21: JF[A7], arg22: JF[A8], arg23: JF[A9], arg24: JF[A10], arg25: JF[A11], arg26: JF[A12], arg27: JF[A13], arg28: JF[A14], arg29: JF[A15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15)(implicitevidence$316:CaseClassFormats.this.K[K1],implicitevidence$317:CaseClassFormats.this.K[K2],implicitevidence$318:CaseClassFormats.this.K[K3],implicitevidence$319:CaseClassFormats.this.K[K4],implicitevidence$320:CaseClassFormats.this.K[K5],implicitevidence$321:CaseClassFormats.this.K[K6],implicitevidence$322:CaseClassFormats.this.K[K7],implicitevidence$323:CaseClassFormats.this.K[K8],implicitevidence$324:CaseClassFormats.this.K[K9],implicitevidence$325:CaseClassFormats.this.K[K10],implicitevidence$326:CaseClassFormats.this.K[K11],implicitevidence$327:CaseClassFormats.this.K[K12],implicitevidence$328:CaseClassFormats.this.K[K13],implicitevidence$329:CaseClassFormats.this.K[K14],implicitevidence$330:CaseClassFormats.this.K[K15],implicitevidence$331:CaseClassFormats.this.JF[A1],implicitevidence$332:CaseClassFormats.this.JF[A2],implicitevidence$333:CaseClassFormats.this.JF[A3],implicitevidence$334:CaseClassFormats.this.JF[A4],implicitevidence$335:CaseClassFormats.this.JF[A5],implicitevidence$336:CaseClassFormats.this.JF[A6],implicitevidence$337:CaseClassFormats.this.JF[A7],implicitevidence$338:CaseClassFormats.this.JF[A8],implicitevidence$339:CaseClassFormats.this.JF[A9],implicitevidence$340:CaseClassFormats.this.JF[A10],implicitevidence$341:CaseClassFormats.this.JF[A11],implicitevidence$342:CaseClassFormats.this.JF[A12],implicitevidence$343:CaseClassFormats.this.JF[A13],implicitevidence$344:CaseClassFormats.this.JF[A14],implicitevidence$345:CaseClassFormats.this.JF[A15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray14", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray14", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass14", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass14", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass14[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$302:CaseClassFormats.this.JF[A1],implicitevidence$303:CaseClassFormats.this.JF[A2],implicitevidence$304:CaseClassFormats.this.JF[A3],implicitevidence$305:CaseClassFormats.this.JF[A4],implicitevidence$306:CaseClassFormats.this.JF[A5],implicitevidence$307:CaseClassFormats.this.JF[A6],implicitevidence$308:CaseClassFormats.this.JF[A7],implicitevidence$309:CaseClassFormats.this.JF[A8],implicitevidence$310:CaseClassFormats.this.JF[A9],implicitevidence$311:CaseClassFormats.this.JF[A10],implicitevidence$312:CaseClassFormats.this.JF[A11],implicitevidence$313:CaseClassFormats.this.JF[A12],implicitevidence$314:CaseClassFormats.this.JF[A13],implicitevidence$315:CaseClassFormats.this.JF[A14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: JF[A1], arg15: JF[A2], arg16: JF[A3], arg17: JF[A4], arg18: JF[A5], arg19: JF[A6], arg20: JF[A7], arg21: JF[A8], arg22: JF[A9], arg23: JF[A10], arg24: JF[A11], arg25: JF[A12], arg26: JF[A13], arg27: JF[A14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14)(implicitevidence$274:CaseClassFormats.this.K[K1],implicitevidence$275:CaseClassFormats.this.K[K2],implicitevidence$276:CaseClassFormats.this.K[K3],implicitevidence$277:CaseClassFormats.this.K[K4],implicitevidence$278:CaseClassFormats.this.K[K5],implicitevidence$279:CaseClassFormats.this.K[K6],implicitevidence$280:CaseClassFormats.this.K[K7],implicitevidence$281:CaseClassFormats.this.K[K8],implicitevidence$282:CaseClassFormats.this.K[K9],implicitevidence$283:CaseClassFormats.this.K[K10],implicitevidence$284:CaseClassFormats.this.K[K11],implicitevidence$285:CaseClassFormats.this.K[K12],implicitevidence$286:CaseClassFormats.this.K[K13],implicitevidence$287:CaseClassFormats.this.K[K14],implicitevidence$288:CaseClassFormats.this.JF[A1],implicitevidence$289:CaseClassFormats.this.JF[A2],implicitevidence$290:CaseClassFormats.this.JF[A3],implicitevidence$291:CaseClassFormats.this.JF[A4],implicitevidence$292:CaseClassFormats.this.JF[A5],implicitevidence$293:CaseClassFormats.this.JF[A6],implicitevidence$294:CaseClassFormats.this.JF[A7],implicitevidence$295:CaseClassFormats.this.JF[A8],implicitevidence$296:CaseClassFormats.this.JF[A9],implicitevidence$297:CaseClassFormats.this.JF[A10],implicitevidence$298:CaseClassFormats.this.JF[A11],implicitevidence$299:CaseClassFormats.this.JF[A12],implicitevidence$300:CaseClassFormats.this.JF[A13],implicitevidence$301:CaseClassFormats.this.JF[A14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray13", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray13", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass13", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass13", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass13[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$261:CaseClassFormats.this.JF[A1],implicitevidence$262:CaseClassFormats.this.JF[A2],implicitevidence$263:CaseClassFormats.this.JF[A3],implicitevidence$264:CaseClassFormats.this.JF[A4],implicitevidence$265:CaseClassFormats.this.JF[A5],implicitevidence$266:CaseClassFormats.this.JF[A6],implicitevidence$267:CaseClassFormats.this.JF[A7],implicitevidence$268:CaseClassFormats.this.JF[A8],implicitevidence$269:CaseClassFormats.this.JF[A9],implicitevidence$270:CaseClassFormats.this.JF[A10],implicitevidence$271:CaseClassFormats.this.JF[A11],implicitevidence$272:CaseClassFormats.this.JF[A12],implicitevidence$273:CaseClassFormats.this.JF[A13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: JF[A1], arg14: JF[A2], arg15: JF[A3], arg16: JF[A4], arg17: JF[A5], arg18: JF[A6], arg19: JF[A7], arg20: JF[A8], arg21: JF[A9], arg22: JF[A10], arg23: JF[A11], arg24: JF[A12], arg25: JF[A13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13)(implicitevidence$235:CaseClassFormats.this.K[K1],implicitevidence$236:CaseClassFormats.this.K[K2],implicitevidence$237:CaseClassFormats.this.K[K3],implicitevidence$238:CaseClassFormats.this.K[K4],implicitevidence$239:CaseClassFormats.this.K[K5],implicitevidence$240:CaseClassFormats.this.K[K6],implicitevidence$241:CaseClassFormats.this.K[K7],implicitevidence$242:CaseClassFormats.this.K[K8],implicitevidence$243:CaseClassFormats.this.K[K9],implicitevidence$244:CaseClassFormats.this.K[K10],implicitevidence$245:CaseClassFormats.this.K[K11],implicitevidence$246:CaseClassFormats.this.K[K12],implicitevidence$247:CaseClassFormats.this.K[K13],implicitevidence$248:CaseClassFormats.this.JF[A1],implicitevidence$249:CaseClassFormats.this.JF[A2],implicitevidence$250:CaseClassFormats.this.JF[A3],implicitevidence$251:CaseClassFormats.this.JF[A4],implicitevidence$252:CaseClassFormats.this.JF[A5],implicitevidence$253:CaseClassFormats.this.JF[A6],implicitevidence$254:CaseClassFormats.this.JF[A7],implicitevidence$255:CaseClassFormats.this.JF[A8],implicitevidence$256:CaseClassFormats.this.JF[A9],implicitevidence$257:CaseClassFormats.this.JF[A10],implicitevidence$258:CaseClassFormats.this.JF[A11],implicitevidence$259:CaseClassFormats.this.JF[A12],implicitevidence$260:CaseClassFormats.this.JF[A13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray12", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray12", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass12", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass12", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass12[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$223:CaseClassFormats.this.JF[A1],implicitevidence$224:CaseClassFormats.this.JF[A2],implicitevidence$225:CaseClassFormats.this.JF[A3],implicitevidence$226:CaseClassFormats.this.JF[A4],implicitevidence$227:CaseClassFormats.this.JF[A5],implicitevidence$228:CaseClassFormats.this.JF[A6],implicitevidence$229:CaseClassFormats.this.JF[A7],implicitevidence$230:CaseClassFormats.this.JF[A8],implicitevidence$231:CaseClassFormats.this.JF[A9],implicitevidence$232:CaseClassFormats.this.JF[A10],implicitevidence$233:CaseClassFormats.this.JF[A11],implicitevidence$234:CaseClassFormats.this.JF[A12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: JF[A1], arg13: JF[A2], arg14: JF[A3], arg15: JF[A4], arg16: JF[A5], arg17: JF[A6], arg18: JF[A7], arg19: JF[A8], arg20: JF[A9], arg21: JF[A10], arg22: JF[A11], arg23: JF[A12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12)(implicitevidence$199:CaseClassFormats.this.K[K1],implicitevidence$200:CaseClassFormats.this.K[K2],implicitevidence$201:CaseClassFormats.this.K[K3],implicitevidence$202:CaseClassFormats.this.K[K4],implicitevidence$203:CaseClassFormats.this.K[K5],implicitevidence$204:CaseClassFormats.this.K[K6],implicitevidence$205:CaseClassFormats.this.K[K7],implicitevidence$206:CaseClassFormats.this.K[K8],implicitevidence$207:CaseClassFormats.this.K[K9],implicitevidence$208:CaseClassFormats.this.K[K10],implicitevidence$209:CaseClassFormats.this.K[K11],implicitevidence$210:CaseClassFormats.this.K[K12],implicitevidence$211:CaseClassFormats.this.JF[A1],implicitevidence$212:CaseClassFormats.this.JF[A2],implicitevidence$213:CaseClassFormats.this.JF[A3],implicitevidence$214:CaseClassFormats.this.JF[A4],implicitevidence$215:CaseClassFormats.this.JF[A5],implicitevidence$216:CaseClassFormats.this.JF[A6],implicitevidence$217:CaseClassFormats.this.JF[A7],implicitevidence$218:CaseClassFormats.this.JF[A8],implicitevidence$219:CaseClassFormats.this.JF[A9],implicitevidence$220:CaseClassFormats.this.JF[A10],implicitevidence$221:CaseClassFormats.this.JF[A11],implicitevidence$222:CaseClassFormats.this.JF[A12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray11", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray11", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass11", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass11", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass11[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$188:CaseClassFormats.this.JF[A1],implicitevidence$189:CaseClassFormats.this.JF[A2],implicitevidence$190:CaseClassFormats.this.JF[A3],implicitevidence$191:CaseClassFormats.this.JF[A4],implicitevidence$192:CaseClassFormats.this.JF[A5],implicitevidence$193:CaseClassFormats.this.JF[A6],implicitevidence$194:CaseClassFormats.this.JF[A7],implicitevidence$195:CaseClassFormats.this.JF[A8],implicitevidence$196:CaseClassFormats.this.JF[A9],implicitevidence$197:CaseClassFormats.this.JF[A10],implicitevidence$198:CaseClassFormats.this.JF[A11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: JF[A1], arg12: JF[A2], arg13: JF[A3], arg14: JF[A4], arg15: JF[A5], arg16: JF[A6], arg17: JF[A7], arg18: JF[A8], arg19: JF[A9], arg20: JF[A10], arg21: JF[A11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11)(implicitevidence$166:CaseClassFormats.this.K[K1],implicitevidence$167:CaseClassFormats.this.K[K2],implicitevidence$168:CaseClassFormats.this.K[K3],implicitevidence$169:CaseClassFormats.this.K[K4],implicitevidence$170:CaseClassFormats.this.K[K5],implicitevidence$171:CaseClassFormats.this.K[K6],implicitevidence$172:CaseClassFormats.this.K[K7],implicitevidence$173:CaseClassFormats.this.K[K8],implicitevidence$174:CaseClassFormats.this.K[K9],implicitevidence$175:CaseClassFormats.this.K[K10],implicitevidence$176:CaseClassFormats.this.K[K11],implicitevidence$177:CaseClassFormats.this.JF[A1],implicitevidence$178:CaseClassFormats.this.JF[A2],implicitevidence$179:CaseClassFormats.this.JF[A3],implicitevidence$180:CaseClassFormats.this.JF[A4],implicitevidence$181:CaseClassFormats.this.JF[A5],implicitevidence$182:CaseClassFormats.this.JF[A6],implicitevidence$183:CaseClassFormats.this.JF[A7],implicitevidence$184:CaseClassFormats.this.JF[A8],implicitevidence$185:CaseClassFormats.this.JF[A9],implicitevidence$186:CaseClassFormats.this.JF[A10],implicitevidence$187:CaseClassFormats.this.JF[A11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray10", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray10", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass10", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass10", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass10[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$156:CaseClassFormats.this.JF[A1],implicitevidence$157:CaseClassFormats.this.JF[A2],implicitevidence$158:CaseClassFormats.this.JF[A3],implicitevidence$159:CaseClassFormats.this.JF[A4],implicitevidence$160:CaseClassFormats.this.JF[A5],implicitevidence$161:CaseClassFormats.this.JF[A6],implicitevidence$162:CaseClassFormats.this.JF[A7],implicitevidence$163:CaseClassFormats.this.JF[A8],implicitevidence$164:CaseClassFormats.this.JF[A9],implicitevidence$165:CaseClassFormats.this.JF[A10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: JF[A1], arg11: JF[A2], arg12: JF[A3], arg13: JF[A4], arg14: JF[A5], arg15: JF[A6], arg16: JF[A7], arg17: JF[A8], arg18: JF[A9], arg19: JF[A10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10)(implicitevidence$136:CaseClassFormats.this.K[K1],implicitevidence$137:CaseClassFormats.this.K[K2],implicitevidence$138:CaseClassFormats.this.K[K3],implicitevidence$139:CaseClassFormats.this.K[K4],implicitevidence$140:CaseClassFormats.this.K[K5],implicitevidence$141:CaseClassFormats.this.K[K6],implicitevidence$142:CaseClassFormats.this.K[K7],implicitevidence$143:CaseClassFormats.this.K[K8],implicitevidence$144:CaseClassFormats.this.K[K9],implicitevidence$145:CaseClassFormats.this.K[K10],implicitevidence$146:CaseClassFormats.this.JF[A1],implicitevidence$147:CaseClassFormats.this.JF[A2],implicitevidence$148:CaseClassFormats.this.JF[A3],implicitevidence$149:CaseClassFormats.this.JF[A4],implicitevidence$150:CaseClassFormats.this.JF[A5],implicitevidence$151:CaseClassFormats.this.JF[A6],implicitevidence$152:CaseClassFormats.this.JF[A7],implicitevidence$153:CaseClassFormats.this.JF[A8],implicitevidence$154:CaseClassFormats.this.JF[A9],implicitevidence$155:CaseClassFormats.this.JF[A10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray9", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray9", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray9[A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass9", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass9", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass9[K1,K2,K3,K4,K5,K6,K7,K8,K9,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$127:CaseClassFormats.this.JF[A1],implicitevidence$128:CaseClassFormats.this.JF[A2],implicitevidence$129:CaseClassFormats.this.JF[A3],implicitevidence$130:CaseClassFormats.this.JF[A4],implicitevidence$131:CaseClassFormats.this.JF[A5],implicitevidence$132:CaseClassFormats.this.JF[A6],implicitevidence$133:CaseClassFormats.this.JF[A7],implicitevidence$134:CaseClassFormats.this.JF[A8],implicitevidence$135:CaseClassFormats.this.JF[A9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: JF[A1], arg10: JF[A2], arg11: JF[A3], arg12: JF[A4], arg13: JF[A5], arg14: JF[A6], arg15: JF[A7], arg16: JF[A8], arg17: JF[A9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9)(implicitevidence$109:CaseClassFormats.this.K[K1],implicitevidence$110:CaseClassFormats.this.K[K2],implicitevidence$111:CaseClassFormats.this.K[K3],implicitevidence$112:CaseClassFormats.this.K[K4],implicitevidence$113:CaseClassFormats.this.K[K5],implicitevidence$114:CaseClassFormats.this.K[K6],implicitevidence$115:CaseClassFormats.this.K[K7],implicitevidence$116:CaseClassFormats.this.K[K8],implicitevidence$117:CaseClassFormats.this.K[K9],implicitevidence$118:CaseClassFormats.this.JF[A1],implicitevidence$119:CaseClassFormats.this.JF[A2],implicitevidence$120:CaseClassFormats.this.JF[A3],implicitevidence$121:CaseClassFormats.this.JF[A4],implicitevidence$122:CaseClassFormats.this.JF[A5],implicitevidence$123:CaseClassFormats.this.JF[A6],implicitevidence$124:CaseClassFormats.this.JF[A7],implicitevidence$125:CaseClassFormats.this.JF[A8],implicitevidence$126:CaseClassFormats.this.JF[A9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray8", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray8", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray8[A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass8", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass8", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass8[K1,K2,K3,K4,K5,K6,K7,K8,A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$101:CaseClassFormats.this.JF[A1],implicitevidence$102:CaseClassFormats.this.JF[A2],implicitevidence$103:CaseClassFormats.this.JF[A3],implicitevidence$104:CaseClassFormats.this.JF[A4],implicitevidence$105:CaseClassFormats.this.JF[A5],implicitevidence$106:CaseClassFormats.this.JF[A6],implicitevidence$107:CaseClassFormats.this.JF[A7],implicitevidence$108:CaseClassFormats.this.JF[A8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: JF[A1], arg9: JF[A2], arg10: JF[A3], arg11: JF[A4], arg12: JF[A5], arg13: JF[A6], arg14: JF[A7], arg15: JF[A8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8)(implicitevidence$85:CaseClassFormats.this.K[K1],implicitevidence$86:CaseClassFormats.this.K[K2],implicitevidence$87:CaseClassFormats.this.K[K3],implicitevidence$88:CaseClassFormats.this.K[K4],implicitevidence$89:CaseClassFormats.this.K[K5],implicitevidence$90:CaseClassFormats.this.K[K6],implicitevidence$91:CaseClassFormats.this.K[K7],implicitevidence$92:CaseClassFormats.this.K[K8],implicitevidence$93:CaseClassFormats.this.JF[A1],implicitevidence$94:CaseClassFormats.this.JF[A2],implicitevidence$95:CaseClassFormats.this.JF[A3],implicitevidence$96:CaseClassFormats.this.JF[A4],implicitevidence$97:CaseClassFormats.this.JF[A5],implicitevidence$98:CaseClassFormats.this.JF[A6],implicitevidence$99:CaseClassFormats.this.JF[A7],implicitevidence$100:CaseClassFormats.this.JF[A8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray7", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray7", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray7[A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass7", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass7", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass7[K1,K2,K3,K4,K5,K6,K7,A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$78:CaseClassFormats.this.JF[A1],implicitevidence$79:CaseClassFormats.this.JF[A2],implicitevidence$80:CaseClassFormats.this.JF[A3],implicitevidence$81:CaseClassFormats.this.JF[A4],implicitevidence$82:CaseClassFormats.this.JF[A5],implicitevidence$83:CaseClassFormats.this.JF[A6],implicitevidence$84:CaseClassFormats.this.JF[A7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: JF[A1], arg8: JF[A2], arg9: JF[A3], arg10: JF[A4], arg11: JF[A5], arg12: JF[A6], arg13: JF[A7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7)(implicitevidence$64:CaseClassFormats.this.K[K1],implicitevidence$65:CaseClassFormats.this.K[K2],implicitevidence$66:CaseClassFormats.this.K[K3],implicitevidence$67:CaseClassFormats.this.K[K4],implicitevidence$68:CaseClassFormats.this.K[K5],implicitevidence$69:CaseClassFormats.this.K[K6],implicitevidence$70:CaseClassFormats.this.K[K7],implicitevidence$71:CaseClassFormats.this.JF[A1],implicitevidence$72:CaseClassFormats.this.JF[A2],implicitevidence$73:CaseClassFormats.this.JF[A3],implicitevidence$74:CaseClassFormats.this.JF[A4],implicitevidence$75:CaseClassFormats.this.JF[A5],implicitevidence$76:CaseClassFormats.this.JF[A6],implicitevidence$77:CaseClassFormats.this.JF[A7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray6", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray6", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray6[A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass6", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass6", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass6[K1,K2,K3,K4,K5,K6,A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$58:CaseClassFormats.this.JF[A1],implicitevidence$59:CaseClassFormats.this.JF[A2],implicitevidence$60:CaseClassFormats.this.JF[A3],implicitevidence$61:CaseClassFormats.this.JF[A4],implicitevidence$62:CaseClassFormats.this.JF[A5],implicitevidence$63:CaseClassFormats.this.JF[A6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: JF[A1], arg7: JF[A2], arg8: JF[A3], arg9: JF[A4], arg10: JF[A5], arg11: JF[A6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6)(implicitevidence$46:CaseClassFormats.this.K[K1],implicitevidence$47:CaseClassFormats.this.K[K2],implicitevidence$48:CaseClassFormats.this.K[K3],implicitevidence$49:CaseClassFormats.this.K[K4],implicitevidence$50:CaseClassFormats.this.K[K5],implicitevidence$51:CaseClassFormats.this.K[K6],implicitevidence$52:CaseClassFormats.this.JF[A1],implicitevidence$53:CaseClassFormats.this.JF[A2],implicitevidence$54:CaseClassFormats.this.JF[A3],implicitevidence$55:CaseClassFormats.this.JF[A4],implicitevidence$56:CaseClassFormats.this.JF[A5],implicitevidence$57:CaseClassFormats.this.JF[A6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray5", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray5", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray5[A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass5", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass5", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass5[K1,K2,K3,K4,K5,A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$41:CaseClassFormats.this.JF[A1],implicitevidence$42:CaseClassFormats.this.JF[A2],implicitevidence$43:CaseClassFormats.this.JF[A3],implicitevidence$44:CaseClassFormats.this.JF[A4],implicitevidence$45:CaseClassFormats.this.JF[A5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: JF[A1], arg6: JF[A2], arg7: JF[A3], arg8: JF[A4], arg9: JF[A5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5)(implicitevidence$31:CaseClassFormats.this.K[K1],implicitevidence$32:CaseClassFormats.this.K[K2],implicitevidence$33:CaseClassFormats.this.K[K3],implicitevidence$34:CaseClassFormats.this.K[K4],implicitevidence$35:CaseClassFormats.this.K[K5],implicitevidence$36:CaseClassFormats.this.JF[A1],implicitevidence$37:CaseClassFormats.this.JF[A2],implicitevidence$38:CaseClassFormats.this.JF[A3],implicitevidence$39:CaseClassFormats.this.JF[A4],implicitevidence$40:CaseClassFormats.this.JF[A5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray4", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray4", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray4[A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass4", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(key1: K1, key2: K2, key3: K3, key4: K4)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass4", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass4[K1,K2,K3,K4,A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(key1:K1,key2:K2,key3:K3,key4:K4)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(implicitevidence$27:CaseClassFormats.this.JF[A1],implicitevidence$28:CaseClassFormats.this.JF[A2],implicitevidence$29:CaseClassFormats.this.JF[A3],implicitevidence$30:CaseClassFormats.this.JF[A4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(key1: K1, key2: K2, key3: K3, key4: K4)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: JF[A1], arg5: JF[A2], arg6: JF[A3], arg7: JF[A4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(key1:K1,key2:K2,key3:K3,key4:K4)(implicitevidence$19:CaseClassFormats.this.K[K1],implicitevidence$20:CaseClassFormats.this.K[K2],implicitevidence$21:CaseClassFormats.this.K[K3],implicitevidence$22:CaseClassFormats.this.K[K4],implicitevidence$23:CaseClassFormats.this.JF[A1],implicitevidence$24:CaseClassFormats.this.JF[A2],implicitevidence$25:CaseClassFormats.this.JF[A3],implicitevidence$26:CaseClassFormats.this.JF[A4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray3", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(A1: JF[A1], A2: JF[A2], A3: JF[A3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray3", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray3[A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass3", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(key1: K1, key2: K2, key3: K3)(A1: JF[A1], A2: JF[A2], A3: JF[A3], K1: K[K1], K2: K[K2], K3: K[K3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass3", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass3[K1,K2,K3,A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(key1:K1,key2:K2,key3:K3)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(implicitevidence$16:CaseClassFormats.this.JF[A1],implicitevidence$17:CaseClassFormats.this.JF[A2],implicitevidence$18:CaseClassFormats.this.JF[A3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(key1: K1, key2: K2, key3: K3)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: JF[A1], arg4: JF[A2], arg5: JF[A3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(key1:K1,key2:K2,key3:K3)(implicitevidence$10:CaseClassFormats.this.K[K1],implicitevidence$11:CaseClassFormats.this.K[K2],implicitevidence$12:CaseClassFormats.this.K[K3],implicitevidence$13:CaseClassFormats.this.JF[A1],implicitevidence$14:CaseClassFormats.this.JF[A2],implicitevidence$15:CaseClassFormats.this.JF[A3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray2", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(A1: JF[A1], A2: JF[A2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray2", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray2[A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass2", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(key1: K1, key2: K2)(A1: JF[A1], A2: JF[A2], K1: K[K1], K2: K[K2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass2", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass2[K1,K2,A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(key1:K1,key2:K2)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(arg0: JF[A1], arg1: JF[A2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(implicitevidence$8:CaseClassFormats.this.JF[A1],implicitevidence$9:CaseClassFormats.this.JF[A2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(key1: K1, key2: K2)(arg0: K[K1], arg1: K[K2], arg2: JF[A1], arg3: JF[A2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,K2,A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(key1:K1,key2:K2)(implicitevidence$4:CaseClassFormats.this.K[K1],implicitevidence$5:CaseClassFormats.this.K[K2],implicitevidence$6:CaseClassFormats.this.JF[A1],implicitevidence$7:CaseClassFormats.this.JF[A2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray1", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(A1: JF[A1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray1", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray1[A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(implicitA1:CaseClassFormats.this.JF[A1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass1", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(key1: K1)(A1: JF[A1], K1: K[K1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass1", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass1[K1,A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(key1:K1)(implicitA1:CaseClassFormats.this.JF[A1],implicitK1:CaseClassFormats.this.K[K1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(arg0: JF[A1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClassArray[A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(implicitevidence$3:CaseClassFormats.this.JF[A1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(key1: K1)(arg0: K[K1], arg1: JF[A1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#caseClass[K1,A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(key1:K1)(implicitevidence$1:CaseClassFormats.this.K[K1],implicitevidence$2:CaseClassFormats.this.JF[A1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "implicitHashWriter", "tail" : "(jsonWriter: JsonWriter[A]): HashWriter[A]", "member" : "sjsonnew.ImplicitHashWriters.implicitHashWriter", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#implicitHashWriter[A](implicitjsonWriter:sjsonnew.JsonWriter[A]):sjsonnew.HashWriter[A]", "kind" : "implicit def"}, {"label" : "localDateTimeStringIso", "tail" : ": IsoString[LocalDateTime]", "member" : "sjsonnew.CalendarFormats.localDateTimeStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#localDateTimeStringIso:sjsonnew.IsoString[java.time.LocalDateTime]", "kind" : "implicit val"}, {"label" : "localDateStringIso", "tail" : ": IsoString[LocalDate]", "member" : "sjsonnew.CalendarFormats.localDateStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#localDateStringIso:sjsonnew.IsoString[java.time.LocalDate]", "kind" : "implicit val"}, {"label" : "zonedDateTimeStringIso", "tail" : ": IsoString[ZonedDateTime]", "member" : "sjsonnew.CalendarFormats.zonedDateTimeStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#zonedDateTimeStringIso:sjsonnew.IsoString[java.time.ZonedDateTime]", "kind" : "implicit val"}, {"label" : "calendarStringIso", "tail" : ": IsoString[Calendar]", "member" : "sjsonnew.CalendarFormats.calendarStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#calendarStringIso:sjsonnew.IsoString[java.util.Calendar]", "kind" : "implicit val"}, {"label" : "instantStringIso", "tail" : ": IsoString[Instant]", "member" : "sjsonnew.CalendarFormats.instantStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#instantStringIso:sjsonnew.IsoString[java.time.Instant]", "kind" : "implicit val"}, {"label" : "offsetDateTimeStringIso", "tail" : ": IsoString[OffsetDateTime]", "member" : "sjsonnew.CalendarFormats.offsetDateTimeStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#offsetDateTimeStringIso:sjsonnew.IsoString[java.time.OffsetDateTime]", "kind" : "implicit val"}, {"label" : "optionalFormat", "tail" : "(arg0: JF[A]): JF[Optional[A]]", "member" : "sjsonnew.JavaExtraFormats.optionalFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#optionalFormat[A](implicitevidence$1:JavaExtraFormats.this.JF[A]):JavaExtraFormats.this.JF[java.util.Optional[A]]", "kind" : "implicit def"}, {"label" : "fileStringIso", "tail" : ": IsoString[File]", "member" : "sjsonnew.JavaExtraFormats.fileStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#fileStringIso:sjsonnew.IsoString[java.io.File]", "kind" : "implicit val"}, {"label" : "urlStringIso", "tail" : ": IsoString[URL]", "member" : "sjsonnew.JavaExtraFormats.urlStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#urlStringIso:sjsonnew.IsoString[java.net.URL]", "kind" : "implicit val"}, {"label" : "uriStringIso", "tail" : ": IsoString[URI]", "member" : "sjsonnew.JavaExtraFormats.uriStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#uriStringIso:sjsonnew.IsoString[java.net.URI]", "kind" : "implicit val"}, {"label" : "uuidStringIso", "tail" : ": IsoString[UUID]", "member" : "sjsonnew.JavaExtraFormats.uuidStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#uuidStringIso:sjsonnew.IsoString[java.util.UUID]", "kind" : "implicit val"}, {"label" : "javaBigDecimalFormat", "tail" : ": JF[BigDecimal]", "member" : "sjsonnew.JavaExtraFormats.javaBigDecimalFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#javaBigDecimalFormat:JavaExtraFormats.this.JF[java.math.BigDecimal]", "kind" : "implicit val"}, {"label" : "javaBigIntegerFormat", "tail" : ": JF[BigInteger]", "member" : "sjsonnew.JavaExtraFormats.javaBigIntegerFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#javaBigIntegerFormat:JavaExtraFormats.this.JF[java.math.BigInteger]", "kind" : "implicit val"}, {"label" : "JDoubleJsonKeyFormat", "tail" : ": JsonKeyFormat[Double]", "member" : "sjsonnew.JavaPrimitiveFormats.JDoubleJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JDoubleJsonKeyFormat:sjsonnew.JsonKeyFormat[Double]", "kind" : "implicit val"}, {"label" : "JFloatJsonKeyFormat", "tail" : ": JsonKeyFormat[Float]", "member" : "sjsonnew.JavaPrimitiveFormats.JFloatJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JFloatJsonKeyFormat:sjsonnew.JsonKeyFormat[Float]", "kind" : "implicit val"}, {"label" : "JLongJsonKeyFormat", "tail" : ": JsonKeyFormat[Long]", "member" : "sjsonnew.JavaPrimitiveFormats.JLongJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JLongJsonKeyFormat:sjsonnew.JsonKeyFormat[Long]", "kind" : "implicit val"}, {"label" : "JIntegerJsonKeyFormat", "tail" : ": JsonKeyFormat[Integer]", "member" : "sjsonnew.JavaPrimitiveFormats.JIntegerJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JIntegerJsonKeyFormat:sjsonnew.JsonKeyFormat[Integer]", "kind" : "implicit val"}, {"label" : "JCharacterJsonKeyFormat", "tail" : ": JsonKeyFormat[Character]", "member" : "sjsonnew.JavaPrimitiveFormats.JCharacterJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JCharacterJsonKeyFormat:sjsonnew.JsonKeyFormat[Character]", "kind" : "implicit val"}, {"label" : "JShortJsonKeyFormat", "tail" : ": JsonKeyFormat[Short]", "member" : "sjsonnew.JavaPrimitiveFormats.JShortJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JShortJsonKeyFormat:sjsonnew.JsonKeyFormat[Short]", "kind" : "implicit val"}, {"label" : "JByteJsonKeyFormat", "tail" : ": JsonKeyFormat[Byte]", "member" : "sjsonnew.JavaPrimitiveFormats.JByteJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JByteJsonKeyFormat:sjsonnew.JsonKeyFormat[Byte]", "kind" : "implicit val"}, {"label" : "JBooleanJsonKeyFormat", "tail" : ": JsonKeyFormat[Boolean]", "member" : "sjsonnew.JavaPrimitiveFormats.JBooleanJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JBooleanJsonKeyFormat:sjsonnew.JsonKeyFormat[Boolean]", "kind" : "implicit val"}, {"label" : "JCharacterJsonFormat", "tail" : ": JsonFormat[Character]", "member" : "sjsonnew.JavaPrimitiveFormats.JCharacterJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JCharacterJsonFormat:sjsonnew.JsonFormat[Character]", "kind" : "implicit lazy val"}, {"label" : "JBooleanJsonFormat", "tail" : ": JsonFormat[Boolean]", "member" : "sjsonnew.JavaPrimitiveFormats.JBooleanJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JBooleanJsonFormat:sjsonnew.JsonFormat[Boolean]", "kind" : "implicit lazy val"}, {"label" : "JShortJsonFormat", "tail" : ": JsonFormat[Short]", "member" : "sjsonnew.JavaPrimitiveFormats.JShortJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JShortJsonFormat:sjsonnew.JsonFormat[Short]", "kind" : "implicit lazy val"}, {"label" : "JByteJsonFormat", "tail" : ": JsonFormat[Byte]", "member" : "sjsonnew.JavaPrimitiveFormats.JByteJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JByteJsonFormat:sjsonnew.JsonFormat[Byte]", "kind" : "implicit lazy val"}, {"label" : "JDoubleJsonFormat", "tail" : ": JsonFormat[Double]", "member" : "sjsonnew.JavaPrimitiveFormats.JDoubleJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JDoubleJsonFormat:sjsonnew.JsonFormat[Double]", "kind" : "implicit lazy val"}, {"label" : "JFloatJsonFormat", "tail" : ": JsonFormat[Float]", "member" : "sjsonnew.JavaPrimitiveFormats.JFloatJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JFloatJsonFormat:sjsonnew.JsonFormat[Float]", "kind" : "implicit lazy val"}, {"label" : "JLongJsonFormat", "tail" : ": JsonFormat[Long]", "member" : "sjsonnew.JavaPrimitiveFormats.JLongJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JLongJsonFormat:sjsonnew.JsonFormat[Long]", "kind" : "implicit lazy val"}, {"label" : "JIntegerJsonFormat", "tail" : ": JsonFormat[Integer]", "member" : "sjsonnew.JavaPrimitiveFormats.JIntegerJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#JIntegerJsonFormat:sjsonnew.JsonFormat[Integer]", "kind" : "implicit lazy val"}, {"label" : "isoStringKeyFormat", "tail" : "(z: IsoString[A]): JsonKeyFormat[A]", "member" : "sjsonnew.IsoFormats.isoStringKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#isoStringKeyFormat[A](implicitz:sjsonnew.IsoString[A]):sjsonnew.JsonKeyFormat[A]", "kind" : "implicit def"}, {"label" : "isoStringFormat", "tail" : "(arg0: IsoString[A]): JsonFormat[A]", "member" : "sjsonnew.IsoFormats.isoStringFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#isoStringFormat[A](implicitevidence$2:sjsonnew.IsoString[A]):sjsonnew.JsonFormat[A]", "kind" : "implicit def"}, {"label" : "isolistFormat", "tail" : "(arg0: IsoLList[A]): JsonFormat[A]", "member" : "sjsonnew.IsoFormats.isolistFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#isolistFormat[A](implicitevidence$1:sjsonnew.IsoLList[A]):sjsonnew.JsonFormat[A]", "kind" : "implicit def"}, {"label" : "flatUnionFormat22", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21], arg42: JF[A22], arg43: Manifest[A22]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat22", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat22[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](typeFieldName:String)(implicitevidence$969:FlatUnionFormats.this.JF[A1],implicitevidence$970:Manifest[A1],implicitevidence$971:FlatUnionFormats.this.JF[A2],implicitevidence$972:Manifest[A2],implicitevidence$973:FlatUnionFormats.this.JF[A3],implicitevidence$974:Manifest[A3],implicitevidence$975:FlatUnionFormats.this.JF[A4],implicitevidence$976:Manifest[A4],implicitevidence$977:FlatUnionFormats.this.JF[A5],implicitevidence$978:Manifest[A5],implicitevidence$979:FlatUnionFormats.this.JF[A6],implicitevidence$980:Manifest[A6],implicitevidence$981:FlatUnionFormats.this.JF[A7],implicitevidence$982:Manifest[A7],implicitevidence$983:FlatUnionFormats.this.JF[A8],implicitevidence$984:Manifest[A8],implicitevidence$985:FlatUnionFormats.this.JF[A9],implicitevidence$986:Manifest[A9],implicitevidence$987:FlatUnionFormats.this.JF[A10],implicitevidence$988:Manifest[A10],implicitevidence$989:FlatUnionFormats.this.JF[A11],implicitevidence$990:Manifest[A11],implicitevidence$991:FlatUnionFormats.this.JF[A12],implicitevidence$992:Manifest[A12],implicitevidence$993:FlatUnionFormats.this.JF[A13],implicitevidence$994:Manifest[A13],implicitevidence$995:FlatUnionFormats.this.JF[A14],implicitevidence$996:Manifest[A14],implicitevidence$997:FlatUnionFormats.this.JF[A15],implicitevidence$998:Manifest[A15],implicitevidence$999:FlatUnionFormats.this.JF[A16],implicitevidence$1000:Manifest[A16],implicitevidence$1001:FlatUnionFormats.this.JF[A17],implicitevidence$1002:Manifest[A17],implicitevidence$1003:FlatUnionFormats.this.JF[A18],implicitevidence$1004:Manifest[A18],implicitevidence$1005:FlatUnionFormats.this.JF[A19],implicitevidence$1006:Manifest[A19],implicitevidence$1007:FlatUnionFormats.this.JF[A20],implicitevidence$1008:Manifest[A20],implicitevidence$1009:FlatUnionFormats.this.JF[A21],implicitevidence$1010:Manifest[A21],implicitevidence$1011:FlatUnionFormats.this.JF[A22],implicitevidence$1012:Manifest[A22]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat21", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat21", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat21[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](typeFieldName:String)(implicitevidence$927:FlatUnionFormats.this.JF[A1],implicitevidence$928:Manifest[A1],implicitevidence$929:FlatUnionFormats.this.JF[A2],implicitevidence$930:Manifest[A2],implicitevidence$931:FlatUnionFormats.this.JF[A3],implicitevidence$932:Manifest[A3],implicitevidence$933:FlatUnionFormats.this.JF[A4],implicitevidence$934:Manifest[A4],implicitevidence$935:FlatUnionFormats.this.JF[A5],implicitevidence$936:Manifest[A5],implicitevidence$937:FlatUnionFormats.this.JF[A6],implicitevidence$938:Manifest[A6],implicitevidence$939:FlatUnionFormats.this.JF[A7],implicitevidence$940:Manifest[A7],implicitevidence$941:FlatUnionFormats.this.JF[A8],implicitevidence$942:Manifest[A8],implicitevidence$943:FlatUnionFormats.this.JF[A9],implicitevidence$944:Manifest[A9],implicitevidence$945:FlatUnionFormats.this.JF[A10],implicitevidence$946:Manifest[A10],implicitevidence$947:FlatUnionFormats.this.JF[A11],implicitevidence$948:Manifest[A11],implicitevidence$949:FlatUnionFormats.this.JF[A12],implicitevidence$950:Manifest[A12],implicitevidence$951:FlatUnionFormats.this.JF[A13],implicitevidence$952:Manifest[A13],implicitevidence$953:FlatUnionFormats.this.JF[A14],implicitevidence$954:Manifest[A14],implicitevidence$955:FlatUnionFormats.this.JF[A15],implicitevidence$956:Manifest[A15],implicitevidence$957:FlatUnionFormats.this.JF[A16],implicitevidence$958:Manifest[A16],implicitevidence$959:FlatUnionFormats.this.JF[A17],implicitevidence$960:Manifest[A17],implicitevidence$961:FlatUnionFormats.this.JF[A18],implicitevidence$962:Manifest[A18],implicitevidence$963:FlatUnionFormats.this.JF[A19],implicitevidence$964:Manifest[A19],implicitevidence$965:FlatUnionFormats.this.JF[A20],implicitevidence$966:Manifest[A20],implicitevidence$967:FlatUnionFormats.this.JF[A21],implicitevidence$968:Manifest[A21]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat20", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat20", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat20[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](typeFieldName:String)(implicitevidence$887:FlatUnionFormats.this.JF[A1],implicitevidence$888:Manifest[A1],implicitevidence$889:FlatUnionFormats.this.JF[A2],implicitevidence$890:Manifest[A2],implicitevidence$891:FlatUnionFormats.this.JF[A3],implicitevidence$892:Manifest[A3],implicitevidence$893:FlatUnionFormats.this.JF[A4],implicitevidence$894:Manifest[A4],implicitevidence$895:FlatUnionFormats.this.JF[A5],implicitevidence$896:Manifest[A5],implicitevidence$897:FlatUnionFormats.this.JF[A6],implicitevidence$898:Manifest[A6],implicitevidence$899:FlatUnionFormats.this.JF[A7],implicitevidence$900:Manifest[A7],implicitevidence$901:FlatUnionFormats.this.JF[A8],implicitevidence$902:Manifest[A8],implicitevidence$903:FlatUnionFormats.this.JF[A9],implicitevidence$904:Manifest[A9],implicitevidence$905:FlatUnionFormats.this.JF[A10],implicitevidence$906:Manifest[A10],implicitevidence$907:FlatUnionFormats.this.JF[A11],implicitevidence$908:Manifest[A11],implicitevidence$909:FlatUnionFormats.this.JF[A12],implicitevidence$910:Manifest[A12],implicitevidence$911:FlatUnionFormats.this.JF[A13],implicitevidence$912:Manifest[A13],implicitevidence$913:FlatUnionFormats.this.JF[A14],implicitevidence$914:Manifest[A14],implicitevidence$915:FlatUnionFormats.this.JF[A15],implicitevidence$916:Manifest[A15],implicitevidence$917:FlatUnionFormats.this.JF[A16],implicitevidence$918:Manifest[A16],implicitevidence$919:FlatUnionFormats.this.JF[A17],implicitevidence$920:Manifest[A17],implicitevidence$921:FlatUnionFormats.this.JF[A18],implicitevidence$922:Manifest[A18],implicitevidence$923:FlatUnionFormats.this.JF[A19],implicitevidence$924:Manifest[A19],implicitevidence$925:FlatUnionFormats.this.JF[A20],implicitevidence$926:Manifest[A20]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat19", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat19", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat19[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](typeFieldName:String)(implicitevidence$849:FlatUnionFormats.this.JF[A1],implicitevidence$850:Manifest[A1],implicitevidence$851:FlatUnionFormats.this.JF[A2],implicitevidence$852:Manifest[A2],implicitevidence$853:FlatUnionFormats.this.JF[A3],implicitevidence$854:Manifest[A3],implicitevidence$855:FlatUnionFormats.this.JF[A4],implicitevidence$856:Manifest[A4],implicitevidence$857:FlatUnionFormats.this.JF[A5],implicitevidence$858:Manifest[A5],implicitevidence$859:FlatUnionFormats.this.JF[A6],implicitevidence$860:Manifest[A6],implicitevidence$861:FlatUnionFormats.this.JF[A7],implicitevidence$862:Manifest[A7],implicitevidence$863:FlatUnionFormats.this.JF[A8],implicitevidence$864:Manifest[A8],implicitevidence$865:FlatUnionFormats.this.JF[A9],implicitevidence$866:Manifest[A9],implicitevidence$867:FlatUnionFormats.this.JF[A10],implicitevidence$868:Manifest[A10],implicitevidence$869:FlatUnionFormats.this.JF[A11],implicitevidence$870:Manifest[A11],implicitevidence$871:FlatUnionFormats.this.JF[A12],implicitevidence$872:Manifest[A12],implicitevidence$873:FlatUnionFormats.this.JF[A13],implicitevidence$874:Manifest[A13],implicitevidence$875:FlatUnionFormats.this.JF[A14],implicitevidence$876:Manifest[A14],implicitevidence$877:FlatUnionFormats.this.JF[A15],implicitevidence$878:Manifest[A15],implicitevidence$879:FlatUnionFormats.this.JF[A16],implicitevidence$880:Manifest[A16],implicitevidence$881:FlatUnionFormats.this.JF[A17],implicitevidence$882:Manifest[A17],implicitevidence$883:FlatUnionFormats.this.JF[A18],implicitevidence$884:Manifest[A18],implicitevidence$885:FlatUnionFormats.this.JF[A19],implicitevidence$886:Manifest[A19]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat18", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat18", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat18[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](typeFieldName:String)(implicitevidence$813:FlatUnionFormats.this.JF[A1],implicitevidence$814:Manifest[A1],implicitevidence$815:FlatUnionFormats.this.JF[A2],implicitevidence$816:Manifest[A2],implicitevidence$817:FlatUnionFormats.this.JF[A3],implicitevidence$818:Manifest[A3],implicitevidence$819:FlatUnionFormats.this.JF[A4],implicitevidence$820:Manifest[A4],implicitevidence$821:FlatUnionFormats.this.JF[A5],implicitevidence$822:Manifest[A5],implicitevidence$823:FlatUnionFormats.this.JF[A6],implicitevidence$824:Manifest[A6],implicitevidence$825:FlatUnionFormats.this.JF[A7],implicitevidence$826:Manifest[A7],implicitevidence$827:FlatUnionFormats.this.JF[A8],implicitevidence$828:Manifest[A8],implicitevidence$829:FlatUnionFormats.this.JF[A9],implicitevidence$830:Manifest[A9],implicitevidence$831:FlatUnionFormats.this.JF[A10],implicitevidence$832:Manifest[A10],implicitevidence$833:FlatUnionFormats.this.JF[A11],implicitevidence$834:Manifest[A11],implicitevidence$835:FlatUnionFormats.this.JF[A12],implicitevidence$836:Manifest[A12],implicitevidence$837:FlatUnionFormats.this.JF[A13],implicitevidence$838:Manifest[A13],implicitevidence$839:FlatUnionFormats.this.JF[A14],implicitevidence$840:Manifest[A14],implicitevidence$841:FlatUnionFormats.this.JF[A15],implicitevidence$842:Manifest[A15],implicitevidence$843:FlatUnionFormats.this.JF[A16],implicitevidence$844:Manifest[A16],implicitevidence$845:FlatUnionFormats.this.JF[A17],implicitevidence$846:Manifest[A17],implicitevidence$847:FlatUnionFormats.this.JF[A18],implicitevidence$848:Manifest[A18]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat17", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat17", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat17[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](typeFieldName:String)(implicitevidence$779:FlatUnionFormats.this.JF[A1],implicitevidence$780:Manifest[A1],implicitevidence$781:FlatUnionFormats.this.JF[A2],implicitevidence$782:Manifest[A2],implicitevidence$783:FlatUnionFormats.this.JF[A3],implicitevidence$784:Manifest[A3],implicitevidence$785:FlatUnionFormats.this.JF[A4],implicitevidence$786:Manifest[A4],implicitevidence$787:FlatUnionFormats.this.JF[A5],implicitevidence$788:Manifest[A5],implicitevidence$789:FlatUnionFormats.this.JF[A6],implicitevidence$790:Manifest[A6],implicitevidence$791:FlatUnionFormats.this.JF[A7],implicitevidence$792:Manifest[A7],implicitevidence$793:FlatUnionFormats.this.JF[A8],implicitevidence$794:Manifest[A8],implicitevidence$795:FlatUnionFormats.this.JF[A9],implicitevidence$796:Manifest[A9],implicitevidence$797:FlatUnionFormats.this.JF[A10],implicitevidence$798:Manifest[A10],implicitevidence$799:FlatUnionFormats.this.JF[A11],implicitevidence$800:Manifest[A11],implicitevidence$801:FlatUnionFormats.this.JF[A12],implicitevidence$802:Manifest[A12],implicitevidence$803:FlatUnionFormats.this.JF[A13],implicitevidence$804:Manifest[A13],implicitevidence$805:FlatUnionFormats.this.JF[A14],implicitevidence$806:Manifest[A14],implicitevidence$807:FlatUnionFormats.this.JF[A15],implicitevidence$808:Manifest[A15],implicitevidence$809:FlatUnionFormats.this.JF[A16],implicitevidence$810:Manifest[A16],implicitevidence$811:FlatUnionFormats.this.JF[A17],implicitevidence$812:Manifest[A17]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat16", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat16", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat16[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](typeFieldName:String)(implicitevidence$747:FlatUnionFormats.this.JF[A1],implicitevidence$748:Manifest[A1],implicitevidence$749:FlatUnionFormats.this.JF[A2],implicitevidence$750:Manifest[A2],implicitevidence$751:FlatUnionFormats.this.JF[A3],implicitevidence$752:Manifest[A3],implicitevidence$753:FlatUnionFormats.this.JF[A4],implicitevidence$754:Manifest[A4],implicitevidence$755:FlatUnionFormats.this.JF[A5],implicitevidence$756:Manifest[A5],implicitevidence$757:FlatUnionFormats.this.JF[A6],implicitevidence$758:Manifest[A6],implicitevidence$759:FlatUnionFormats.this.JF[A7],implicitevidence$760:Manifest[A7],implicitevidence$761:FlatUnionFormats.this.JF[A8],implicitevidence$762:Manifest[A8],implicitevidence$763:FlatUnionFormats.this.JF[A9],implicitevidence$764:Manifest[A9],implicitevidence$765:FlatUnionFormats.this.JF[A10],implicitevidence$766:Manifest[A10],implicitevidence$767:FlatUnionFormats.this.JF[A11],implicitevidence$768:Manifest[A11],implicitevidence$769:FlatUnionFormats.this.JF[A12],implicitevidence$770:Manifest[A12],implicitevidence$771:FlatUnionFormats.this.JF[A13],implicitevidence$772:Manifest[A13],implicitevidence$773:FlatUnionFormats.this.JF[A14],implicitevidence$774:Manifest[A14],implicitevidence$775:FlatUnionFormats.this.JF[A15],implicitevidence$776:Manifest[A15],implicitevidence$777:FlatUnionFormats.this.JF[A16],implicitevidence$778:Manifest[A16]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat15", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat15", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat15[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](typeFieldName:String)(implicitevidence$717:FlatUnionFormats.this.JF[A1],implicitevidence$718:Manifest[A1],implicitevidence$719:FlatUnionFormats.this.JF[A2],implicitevidence$720:Manifest[A2],implicitevidence$721:FlatUnionFormats.this.JF[A3],implicitevidence$722:Manifest[A3],implicitevidence$723:FlatUnionFormats.this.JF[A4],implicitevidence$724:Manifest[A4],implicitevidence$725:FlatUnionFormats.this.JF[A5],implicitevidence$726:Manifest[A5],implicitevidence$727:FlatUnionFormats.this.JF[A6],implicitevidence$728:Manifest[A6],implicitevidence$729:FlatUnionFormats.this.JF[A7],implicitevidence$730:Manifest[A7],implicitevidence$731:FlatUnionFormats.this.JF[A8],implicitevidence$732:Manifest[A8],implicitevidence$733:FlatUnionFormats.this.JF[A9],implicitevidence$734:Manifest[A9],implicitevidence$735:FlatUnionFormats.this.JF[A10],implicitevidence$736:Manifest[A10],implicitevidence$737:FlatUnionFormats.this.JF[A11],implicitevidence$738:Manifest[A11],implicitevidence$739:FlatUnionFormats.this.JF[A12],implicitevidence$740:Manifest[A12],implicitevidence$741:FlatUnionFormats.this.JF[A13],implicitevidence$742:Manifest[A13],implicitevidence$743:FlatUnionFormats.this.JF[A14],implicitevidence$744:Manifest[A14],implicitevidence$745:FlatUnionFormats.this.JF[A15],implicitevidence$746:Manifest[A15]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat14", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat14", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat14[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](typeFieldName:String)(implicitevidence$689:FlatUnionFormats.this.JF[A1],implicitevidence$690:Manifest[A1],implicitevidence$691:FlatUnionFormats.this.JF[A2],implicitevidence$692:Manifest[A2],implicitevidence$693:FlatUnionFormats.this.JF[A3],implicitevidence$694:Manifest[A3],implicitevidence$695:FlatUnionFormats.this.JF[A4],implicitevidence$696:Manifest[A4],implicitevidence$697:FlatUnionFormats.this.JF[A5],implicitevidence$698:Manifest[A5],implicitevidence$699:FlatUnionFormats.this.JF[A6],implicitevidence$700:Manifest[A6],implicitevidence$701:FlatUnionFormats.this.JF[A7],implicitevidence$702:Manifest[A7],implicitevidence$703:FlatUnionFormats.this.JF[A8],implicitevidence$704:Manifest[A8],implicitevidence$705:FlatUnionFormats.this.JF[A9],implicitevidence$706:Manifest[A9],implicitevidence$707:FlatUnionFormats.this.JF[A10],implicitevidence$708:Manifest[A10],implicitevidence$709:FlatUnionFormats.this.JF[A11],implicitevidence$710:Manifest[A11],implicitevidence$711:FlatUnionFormats.this.JF[A12],implicitevidence$712:Manifest[A12],implicitevidence$713:FlatUnionFormats.this.JF[A13],implicitevidence$714:Manifest[A13],implicitevidence$715:FlatUnionFormats.this.JF[A14],implicitevidence$716:Manifest[A14]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat13", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat13", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat13[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](typeFieldName:String)(implicitevidence$663:FlatUnionFormats.this.JF[A1],implicitevidence$664:Manifest[A1],implicitevidence$665:FlatUnionFormats.this.JF[A2],implicitevidence$666:Manifest[A2],implicitevidence$667:FlatUnionFormats.this.JF[A3],implicitevidence$668:Manifest[A3],implicitevidence$669:FlatUnionFormats.this.JF[A4],implicitevidence$670:Manifest[A4],implicitevidence$671:FlatUnionFormats.this.JF[A5],implicitevidence$672:Manifest[A5],implicitevidence$673:FlatUnionFormats.this.JF[A6],implicitevidence$674:Manifest[A6],implicitevidence$675:FlatUnionFormats.this.JF[A7],implicitevidence$676:Manifest[A7],implicitevidence$677:FlatUnionFormats.this.JF[A8],implicitevidence$678:Manifest[A8],implicitevidence$679:FlatUnionFormats.this.JF[A9],implicitevidence$680:Manifest[A9],implicitevidence$681:FlatUnionFormats.this.JF[A10],implicitevidence$682:Manifest[A10],implicitevidence$683:FlatUnionFormats.this.JF[A11],implicitevidence$684:Manifest[A11],implicitevidence$685:FlatUnionFormats.this.JF[A12],implicitevidence$686:Manifest[A12],implicitevidence$687:FlatUnionFormats.this.JF[A13],implicitevidence$688:Manifest[A13]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat12", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat12", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat12[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](typeFieldName:String)(implicitevidence$639:FlatUnionFormats.this.JF[A1],implicitevidence$640:Manifest[A1],implicitevidence$641:FlatUnionFormats.this.JF[A2],implicitevidence$642:Manifest[A2],implicitevidence$643:FlatUnionFormats.this.JF[A3],implicitevidence$644:Manifest[A3],implicitevidence$645:FlatUnionFormats.this.JF[A4],implicitevidence$646:Manifest[A4],implicitevidence$647:FlatUnionFormats.this.JF[A5],implicitevidence$648:Manifest[A5],implicitevidence$649:FlatUnionFormats.this.JF[A6],implicitevidence$650:Manifest[A6],implicitevidence$651:FlatUnionFormats.this.JF[A7],implicitevidence$652:Manifest[A7],implicitevidence$653:FlatUnionFormats.this.JF[A8],implicitevidence$654:Manifest[A8],implicitevidence$655:FlatUnionFormats.this.JF[A9],implicitevidence$656:Manifest[A9],implicitevidence$657:FlatUnionFormats.this.JF[A10],implicitevidence$658:Manifest[A10],implicitevidence$659:FlatUnionFormats.this.JF[A11],implicitevidence$660:Manifest[A11],implicitevidence$661:FlatUnionFormats.this.JF[A12],implicitevidence$662:Manifest[A12]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat11", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat11", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat11[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](typeFieldName:String)(implicitevidence$617:FlatUnionFormats.this.JF[A1],implicitevidence$618:Manifest[A1],implicitevidence$619:FlatUnionFormats.this.JF[A2],implicitevidence$620:Manifest[A2],implicitevidence$621:FlatUnionFormats.this.JF[A3],implicitevidence$622:Manifest[A3],implicitevidence$623:FlatUnionFormats.this.JF[A4],implicitevidence$624:Manifest[A4],implicitevidence$625:FlatUnionFormats.this.JF[A5],implicitevidence$626:Manifest[A5],implicitevidence$627:FlatUnionFormats.this.JF[A6],implicitevidence$628:Manifest[A6],implicitevidence$629:FlatUnionFormats.this.JF[A7],implicitevidence$630:Manifest[A7],implicitevidence$631:FlatUnionFormats.this.JF[A8],implicitevidence$632:Manifest[A8],implicitevidence$633:FlatUnionFormats.this.JF[A9],implicitevidence$634:Manifest[A9],implicitevidence$635:FlatUnionFormats.this.JF[A10],implicitevidence$636:Manifest[A10],implicitevidence$637:FlatUnionFormats.this.JF[A11],implicitevidence$638:Manifest[A11]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat10", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat10", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat10[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](typeFieldName:String)(implicitevidence$597:FlatUnionFormats.this.JF[A1],implicitevidence$598:Manifest[A1],implicitevidence$599:FlatUnionFormats.this.JF[A2],implicitevidence$600:Manifest[A2],implicitevidence$601:FlatUnionFormats.this.JF[A3],implicitevidence$602:Manifest[A3],implicitevidence$603:FlatUnionFormats.this.JF[A4],implicitevidence$604:Manifest[A4],implicitevidence$605:FlatUnionFormats.this.JF[A5],implicitevidence$606:Manifest[A5],implicitevidence$607:FlatUnionFormats.this.JF[A6],implicitevidence$608:Manifest[A6],implicitevidence$609:FlatUnionFormats.this.JF[A7],implicitevidence$610:Manifest[A7],implicitevidence$611:FlatUnionFormats.this.JF[A8],implicitevidence$612:Manifest[A8],implicitevidence$613:FlatUnionFormats.this.JF[A9],implicitevidence$614:Manifest[A9],implicitevidence$615:FlatUnionFormats.this.JF[A10],implicitevidence$616:Manifest[A10]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat9", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat9", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat9[U,A1,A2,A3,A4,A5,A6,A7,A8,A9](typeFieldName:String)(implicitevidence$579:FlatUnionFormats.this.JF[A1],implicitevidence$580:Manifest[A1],implicitevidence$581:FlatUnionFormats.this.JF[A2],implicitevidence$582:Manifest[A2],implicitevidence$583:FlatUnionFormats.this.JF[A3],implicitevidence$584:Manifest[A3],implicitevidence$585:FlatUnionFormats.this.JF[A4],implicitevidence$586:Manifest[A4],implicitevidence$587:FlatUnionFormats.this.JF[A5],implicitevidence$588:Manifest[A5],implicitevidence$589:FlatUnionFormats.this.JF[A6],implicitevidence$590:Manifest[A6],implicitevidence$591:FlatUnionFormats.this.JF[A7],implicitevidence$592:Manifest[A7],implicitevidence$593:FlatUnionFormats.this.JF[A8],implicitevidence$594:Manifest[A8],implicitevidence$595:FlatUnionFormats.this.JF[A9],implicitevidence$596:Manifest[A9]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat8", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat8", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat8[U,A1,A2,A3,A4,A5,A6,A7,A8](typeFieldName:String)(implicitevidence$563:FlatUnionFormats.this.JF[A1],implicitevidence$564:Manifest[A1],implicitevidence$565:FlatUnionFormats.this.JF[A2],implicitevidence$566:Manifest[A2],implicitevidence$567:FlatUnionFormats.this.JF[A3],implicitevidence$568:Manifest[A3],implicitevidence$569:FlatUnionFormats.this.JF[A4],implicitevidence$570:Manifest[A4],implicitevidence$571:FlatUnionFormats.this.JF[A5],implicitevidence$572:Manifest[A5],implicitevidence$573:FlatUnionFormats.this.JF[A6],implicitevidence$574:Manifest[A6],implicitevidence$575:FlatUnionFormats.this.JF[A7],implicitevidence$576:Manifest[A7],implicitevidence$577:FlatUnionFormats.this.JF[A8],implicitevidence$578:Manifest[A8]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat7", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat7", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat7[U,A1,A2,A3,A4,A5,A6,A7](typeFieldName:String)(implicitevidence$549:FlatUnionFormats.this.JF[A1],implicitevidence$550:Manifest[A1],implicitevidence$551:FlatUnionFormats.this.JF[A2],implicitevidence$552:Manifest[A2],implicitevidence$553:FlatUnionFormats.this.JF[A3],implicitevidence$554:Manifest[A3],implicitevidence$555:FlatUnionFormats.this.JF[A4],implicitevidence$556:Manifest[A4],implicitevidence$557:FlatUnionFormats.this.JF[A5],implicitevidence$558:Manifest[A5],implicitevidence$559:FlatUnionFormats.this.JF[A6],implicitevidence$560:Manifest[A6],implicitevidence$561:FlatUnionFormats.this.JF[A7],implicitevidence$562:Manifest[A7]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat6", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat6", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat6[U,A1,A2,A3,A4,A5,A6](typeFieldName:String)(implicitevidence$537:FlatUnionFormats.this.JF[A1],implicitevidence$538:Manifest[A1],implicitevidence$539:FlatUnionFormats.this.JF[A2],implicitevidence$540:Manifest[A2],implicitevidence$541:FlatUnionFormats.this.JF[A3],implicitevidence$542:Manifest[A3],implicitevidence$543:FlatUnionFormats.this.JF[A4],implicitevidence$544:Manifest[A4],implicitevidence$545:FlatUnionFormats.this.JF[A5],implicitevidence$546:Manifest[A5],implicitevidence$547:FlatUnionFormats.this.JF[A6],implicitevidence$548:Manifest[A6]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat5", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat5", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat5[U,A1,A2,A3,A4,A5](typeFieldName:String)(implicitevidence$527:FlatUnionFormats.this.JF[A1],implicitevidence$528:Manifest[A1],implicitevidence$529:FlatUnionFormats.this.JF[A2],implicitevidence$530:Manifest[A2],implicitevidence$531:FlatUnionFormats.this.JF[A3],implicitevidence$532:Manifest[A3],implicitevidence$533:FlatUnionFormats.this.JF[A4],implicitevidence$534:Manifest[A4],implicitevidence$535:FlatUnionFormats.this.JF[A5],implicitevidence$536:Manifest[A5]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat4", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat4", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat4[U,A1,A2,A3,A4](typeFieldName:String)(implicitevidence$519:FlatUnionFormats.this.JF[A1],implicitevidence$520:Manifest[A1],implicitevidence$521:FlatUnionFormats.this.JF[A2],implicitevidence$522:Manifest[A2],implicitevidence$523:FlatUnionFormats.this.JF[A3],implicitevidence$524:Manifest[A3],implicitevidence$525:FlatUnionFormats.this.JF[A4],implicitevidence$526:Manifest[A4]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat3", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat3", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat3[U,A1,A2,A3](typeFieldName:String)(implicitevidence$513:FlatUnionFormats.this.JF[A1],implicitevidence$514:Manifest[A1],implicitevidence$515:FlatUnionFormats.this.JF[A2],implicitevidence$516:Manifest[A2],implicitevidence$517:FlatUnionFormats.this.JF[A3],implicitevidence$518:Manifest[A3]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat2", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat2", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat2[U,A1,A2](typeFieldName:String)(implicitevidence$509:FlatUnionFormats.this.JF[A1],implicitevidence$510:Manifest[A1],implicitevidence$511:FlatUnionFormats.this.JF[A2],implicitevidence$512:Manifest[A2]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat1", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat1", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat1[U,A1](typeFieldName:String)(implicitevidence$507:FlatUnionFormats.this.JF[A1],implicitevidence$508:Manifest[A1]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat22", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21], arg42: JF[A22], arg43: Manifest[A22]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat22", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat22[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitevidence$463:FlatUnionFormats.this.JF[A1],implicitevidence$464:Manifest[A1],implicitevidence$465:FlatUnionFormats.this.JF[A2],implicitevidence$466:Manifest[A2],implicitevidence$467:FlatUnionFormats.this.JF[A3],implicitevidence$468:Manifest[A3],implicitevidence$469:FlatUnionFormats.this.JF[A4],implicitevidence$470:Manifest[A4],implicitevidence$471:FlatUnionFormats.this.JF[A5],implicitevidence$472:Manifest[A5],implicitevidence$473:FlatUnionFormats.this.JF[A6],implicitevidence$474:Manifest[A6],implicitevidence$475:FlatUnionFormats.this.JF[A7],implicitevidence$476:Manifest[A7],implicitevidence$477:FlatUnionFormats.this.JF[A8],implicitevidence$478:Manifest[A8],implicitevidence$479:FlatUnionFormats.this.JF[A9],implicitevidence$480:Manifest[A9],implicitevidence$481:FlatUnionFormats.this.JF[A10],implicitevidence$482:Manifest[A10],implicitevidence$483:FlatUnionFormats.this.JF[A11],implicitevidence$484:Manifest[A11],implicitevidence$485:FlatUnionFormats.this.JF[A12],implicitevidence$486:Manifest[A12],implicitevidence$487:FlatUnionFormats.this.JF[A13],implicitevidence$488:Manifest[A13],implicitevidence$489:FlatUnionFormats.this.JF[A14],implicitevidence$490:Manifest[A14],implicitevidence$491:FlatUnionFormats.this.JF[A15],implicitevidence$492:Manifest[A15],implicitevidence$493:FlatUnionFormats.this.JF[A16],implicitevidence$494:Manifest[A16],implicitevidence$495:FlatUnionFormats.this.JF[A17],implicitevidence$496:Manifest[A17],implicitevidence$497:FlatUnionFormats.this.JF[A18],implicitevidence$498:Manifest[A18],implicitevidence$499:FlatUnionFormats.this.JF[A19],implicitevidence$500:Manifest[A19],implicitevidence$501:FlatUnionFormats.this.JF[A20],implicitevidence$502:Manifest[A20],implicitevidence$503:FlatUnionFormats.this.JF[A21],implicitevidence$504:Manifest[A21],implicitevidence$505:FlatUnionFormats.this.JF[A22],implicitevidence$506:Manifest[A22]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat21", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat21", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat21[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitevidence$421:FlatUnionFormats.this.JF[A1],implicitevidence$422:Manifest[A1],implicitevidence$423:FlatUnionFormats.this.JF[A2],implicitevidence$424:Manifest[A2],implicitevidence$425:FlatUnionFormats.this.JF[A3],implicitevidence$426:Manifest[A3],implicitevidence$427:FlatUnionFormats.this.JF[A4],implicitevidence$428:Manifest[A4],implicitevidence$429:FlatUnionFormats.this.JF[A5],implicitevidence$430:Manifest[A5],implicitevidence$431:FlatUnionFormats.this.JF[A6],implicitevidence$432:Manifest[A6],implicitevidence$433:FlatUnionFormats.this.JF[A7],implicitevidence$434:Manifest[A7],implicitevidence$435:FlatUnionFormats.this.JF[A8],implicitevidence$436:Manifest[A8],implicitevidence$437:FlatUnionFormats.this.JF[A9],implicitevidence$438:Manifest[A9],implicitevidence$439:FlatUnionFormats.this.JF[A10],implicitevidence$440:Manifest[A10],implicitevidence$441:FlatUnionFormats.this.JF[A11],implicitevidence$442:Manifest[A11],implicitevidence$443:FlatUnionFormats.this.JF[A12],implicitevidence$444:Manifest[A12],implicitevidence$445:FlatUnionFormats.this.JF[A13],implicitevidence$446:Manifest[A13],implicitevidence$447:FlatUnionFormats.this.JF[A14],implicitevidence$448:Manifest[A14],implicitevidence$449:FlatUnionFormats.this.JF[A15],implicitevidence$450:Manifest[A15],implicitevidence$451:FlatUnionFormats.this.JF[A16],implicitevidence$452:Manifest[A16],implicitevidence$453:FlatUnionFormats.this.JF[A17],implicitevidence$454:Manifest[A17],implicitevidence$455:FlatUnionFormats.this.JF[A18],implicitevidence$456:Manifest[A18],implicitevidence$457:FlatUnionFormats.this.JF[A19],implicitevidence$458:Manifest[A19],implicitevidence$459:FlatUnionFormats.this.JF[A20],implicitevidence$460:Manifest[A20],implicitevidence$461:FlatUnionFormats.this.JF[A21],implicitevidence$462:Manifest[A21]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat20", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat20", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat20[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitevidence$381:FlatUnionFormats.this.JF[A1],implicitevidence$382:Manifest[A1],implicitevidence$383:FlatUnionFormats.this.JF[A2],implicitevidence$384:Manifest[A2],implicitevidence$385:FlatUnionFormats.this.JF[A3],implicitevidence$386:Manifest[A3],implicitevidence$387:FlatUnionFormats.this.JF[A4],implicitevidence$388:Manifest[A4],implicitevidence$389:FlatUnionFormats.this.JF[A5],implicitevidence$390:Manifest[A5],implicitevidence$391:FlatUnionFormats.this.JF[A6],implicitevidence$392:Manifest[A6],implicitevidence$393:FlatUnionFormats.this.JF[A7],implicitevidence$394:Manifest[A7],implicitevidence$395:FlatUnionFormats.this.JF[A8],implicitevidence$396:Manifest[A8],implicitevidence$397:FlatUnionFormats.this.JF[A9],implicitevidence$398:Manifest[A9],implicitevidence$399:FlatUnionFormats.this.JF[A10],implicitevidence$400:Manifest[A10],implicitevidence$401:FlatUnionFormats.this.JF[A11],implicitevidence$402:Manifest[A11],implicitevidence$403:FlatUnionFormats.this.JF[A12],implicitevidence$404:Manifest[A12],implicitevidence$405:FlatUnionFormats.this.JF[A13],implicitevidence$406:Manifest[A13],implicitevidence$407:FlatUnionFormats.this.JF[A14],implicitevidence$408:Manifest[A14],implicitevidence$409:FlatUnionFormats.this.JF[A15],implicitevidence$410:Manifest[A15],implicitevidence$411:FlatUnionFormats.this.JF[A16],implicitevidence$412:Manifest[A16],implicitevidence$413:FlatUnionFormats.this.JF[A17],implicitevidence$414:Manifest[A17],implicitevidence$415:FlatUnionFormats.this.JF[A18],implicitevidence$416:Manifest[A18],implicitevidence$417:FlatUnionFormats.this.JF[A19],implicitevidence$418:Manifest[A19],implicitevidence$419:FlatUnionFormats.this.JF[A20],implicitevidence$420:Manifest[A20]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat19", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat19", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat19[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitevidence$343:FlatUnionFormats.this.JF[A1],implicitevidence$344:Manifest[A1],implicitevidence$345:FlatUnionFormats.this.JF[A2],implicitevidence$346:Manifest[A2],implicitevidence$347:FlatUnionFormats.this.JF[A3],implicitevidence$348:Manifest[A3],implicitevidence$349:FlatUnionFormats.this.JF[A4],implicitevidence$350:Manifest[A4],implicitevidence$351:FlatUnionFormats.this.JF[A5],implicitevidence$352:Manifest[A5],implicitevidence$353:FlatUnionFormats.this.JF[A6],implicitevidence$354:Manifest[A6],implicitevidence$355:FlatUnionFormats.this.JF[A7],implicitevidence$356:Manifest[A7],implicitevidence$357:FlatUnionFormats.this.JF[A8],implicitevidence$358:Manifest[A8],implicitevidence$359:FlatUnionFormats.this.JF[A9],implicitevidence$360:Manifest[A9],implicitevidence$361:FlatUnionFormats.this.JF[A10],implicitevidence$362:Manifest[A10],implicitevidence$363:FlatUnionFormats.this.JF[A11],implicitevidence$364:Manifest[A11],implicitevidence$365:FlatUnionFormats.this.JF[A12],implicitevidence$366:Manifest[A12],implicitevidence$367:FlatUnionFormats.this.JF[A13],implicitevidence$368:Manifest[A13],implicitevidence$369:FlatUnionFormats.this.JF[A14],implicitevidence$370:Manifest[A14],implicitevidence$371:FlatUnionFormats.this.JF[A15],implicitevidence$372:Manifest[A15],implicitevidence$373:FlatUnionFormats.this.JF[A16],implicitevidence$374:Manifest[A16],implicitevidence$375:FlatUnionFormats.this.JF[A17],implicitevidence$376:Manifest[A17],implicitevidence$377:FlatUnionFormats.this.JF[A18],implicitevidence$378:Manifest[A18],implicitevidence$379:FlatUnionFormats.this.JF[A19],implicitevidence$380:Manifest[A19]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat18", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat18", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat18[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitevidence$307:FlatUnionFormats.this.JF[A1],implicitevidence$308:Manifest[A1],implicitevidence$309:FlatUnionFormats.this.JF[A2],implicitevidence$310:Manifest[A2],implicitevidence$311:FlatUnionFormats.this.JF[A3],implicitevidence$312:Manifest[A3],implicitevidence$313:FlatUnionFormats.this.JF[A4],implicitevidence$314:Manifest[A4],implicitevidence$315:FlatUnionFormats.this.JF[A5],implicitevidence$316:Manifest[A5],implicitevidence$317:FlatUnionFormats.this.JF[A6],implicitevidence$318:Manifest[A6],implicitevidence$319:FlatUnionFormats.this.JF[A7],implicitevidence$320:Manifest[A7],implicitevidence$321:FlatUnionFormats.this.JF[A8],implicitevidence$322:Manifest[A8],implicitevidence$323:FlatUnionFormats.this.JF[A9],implicitevidence$324:Manifest[A9],implicitevidence$325:FlatUnionFormats.this.JF[A10],implicitevidence$326:Manifest[A10],implicitevidence$327:FlatUnionFormats.this.JF[A11],implicitevidence$328:Manifest[A11],implicitevidence$329:FlatUnionFormats.this.JF[A12],implicitevidence$330:Manifest[A12],implicitevidence$331:FlatUnionFormats.this.JF[A13],implicitevidence$332:Manifest[A13],implicitevidence$333:FlatUnionFormats.this.JF[A14],implicitevidence$334:Manifest[A14],implicitevidence$335:FlatUnionFormats.this.JF[A15],implicitevidence$336:Manifest[A15],implicitevidence$337:FlatUnionFormats.this.JF[A16],implicitevidence$338:Manifest[A16],implicitevidence$339:FlatUnionFormats.this.JF[A17],implicitevidence$340:Manifest[A17],implicitevidence$341:FlatUnionFormats.this.JF[A18],implicitevidence$342:Manifest[A18]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat17", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat17", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat17[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitevidence$273:FlatUnionFormats.this.JF[A1],implicitevidence$274:Manifest[A1],implicitevidence$275:FlatUnionFormats.this.JF[A2],implicitevidence$276:Manifest[A2],implicitevidence$277:FlatUnionFormats.this.JF[A3],implicitevidence$278:Manifest[A3],implicitevidence$279:FlatUnionFormats.this.JF[A4],implicitevidence$280:Manifest[A4],implicitevidence$281:FlatUnionFormats.this.JF[A5],implicitevidence$282:Manifest[A5],implicitevidence$283:FlatUnionFormats.this.JF[A6],implicitevidence$284:Manifest[A6],implicitevidence$285:FlatUnionFormats.this.JF[A7],implicitevidence$286:Manifest[A7],implicitevidence$287:FlatUnionFormats.this.JF[A8],implicitevidence$288:Manifest[A8],implicitevidence$289:FlatUnionFormats.this.JF[A9],implicitevidence$290:Manifest[A9],implicitevidence$291:FlatUnionFormats.this.JF[A10],implicitevidence$292:Manifest[A10],implicitevidence$293:FlatUnionFormats.this.JF[A11],implicitevidence$294:Manifest[A11],implicitevidence$295:FlatUnionFormats.this.JF[A12],implicitevidence$296:Manifest[A12],implicitevidence$297:FlatUnionFormats.this.JF[A13],implicitevidence$298:Manifest[A13],implicitevidence$299:FlatUnionFormats.this.JF[A14],implicitevidence$300:Manifest[A14],implicitevidence$301:FlatUnionFormats.this.JF[A15],implicitevidence$302:Manifest[A15],implicitevidence$303:FlatUnionFormats.this.JF[A16],implicitevidence$304:Manifest[A16],implicitevidence$305:FlatUnionFormats.this.JF[A17],implicitevidence$306:Manifest[A17]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat16", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat16", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat16[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitevidence$241:FlatUnionFormats.this.JF[A1],implicitevidence$242:Manifest[A1],implicitevidence$243:FlatUnionFormats.this.JF[A2],implicitevidence$244:Manifest[A2],implicitevidence$245:FlatUnionFormats.this.JF[A3],implicitevidence$246:Manifest[A3],implicitevidence$247:FlatUnionFormats.this.JF[A4],implicitevidence$248:Manifest[A4],implicitevidence$249:FlatUnionFormats.this.JF[A5],implicitevidence$250:Manifest[A5],implicitevidence$251:FlatUnionFormats.this.JF[A6],implicitevidence$252:Manifest[A6],implicitevidence$253:FlatUnionFormats.this.JF[A7],implicitevidence$254:Manifest[A7],implicitevidence$255:FlatUnionFormats.this.JF[A8],implicitevidence$256:Manifest[A8],implicitevidence$257:FlatUnionFormats.this.JF[A9],implicitevidence$258:Manifest[A9],implicitevidence$259:FlatUnionFormats.this.JF[A10],implicitevidence$260:Manifest[A10],implicitevidence$261:FlatUnionFormats.this.JF[A11],implicitevidence$262:Manifest[A11],implicitevidence$263:FlatUnionFormats.this.JF[A12],implicitevidence$264:Manifest[A12],implicitevidence$265:FlatUnionFormats.this.JF[A13],implicitevidence$266:Manifest[A13],implicitevidence$267:FlatUnionFormats.this.JF[A14],implicitevidence$268:Manifest[A14],implicitevidence$269:FlatUnionFormats.this.JF[A15],implicitevidence$270:Manifest[A15],implicitevidence$271:FlatUnionFormats.this.JF[A16],implicitevidence$272:Manifest[A16]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat15", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat15", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat15[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitevidence$211:FlatUnionFormats.this.JF[A1],implicitevidence$212:Manifest[A1],implicitevidence$213:FlatUnionFormats.this.JF[A2],implicitevidence$214:Manifest[A2],implicitevidence$215:FlatUnionFormats.this.JF[A3],implicitevidence$216:Manifest[A3],implicitevidence$217:FlatUnionFormats.this.JF[A4],implicitevidence$218:Manifest[A4],implicitevidence$219:FlatUnionFormats.this.JF[A5],implicitevidence$220:Manifest[A5],implicitevidence$221:FlatUnionFormats.this.JF[A6],implicitevidence$222:Manifest[A6],implicitevidence$223:FlatUnionFormats.this.JF[A7],implicitevidence$224:Manifest[A7],implicitevidence$225:FlatUnionFormats.this.JF[A8],implicitevidence$226:Manifest[A8],implicitevidence$227:FlatUnionFormats.this.JF[A9],implicitevidence$228:Manifest[A9],implicitevidence$229:FlatUnionFormats.this.JF[A10],implicitevidence$230:Manifest[A10],implicitevidence$231:FlatUnionFormats.this.JF[A11],implicitevidence$232:Manifest[A11],implicitevidence$233:FlatUnionFormats.this.JF[A12],implicitevidence$234:Manifest[A12],implicitevidence$235:FlatUnionFormats.this.JF[A13],implicitevidence$236:Manifest[A13],implicitevidence$237:FlatUnionFormats.this.JF[A14],implicitevidence$238:Manifest[A14],implicitevidence$239:FlatUnionFormats.this.JF[A15],implicitevidence$240:Manifest[A15]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat14", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat14", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat14[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitevidence$183:FlatUnionFormats.this.JF[A1],implicitevidence$184:Manifest[A1],implicitevidence$185:FlatUnionFormats.this.JF[A2],implicitevidence$186:Manifest[A2],implicitevidence$187:FlatUnionFormats.this.JF[A3],implicitevidence$188:Manifest[A3],implicitevidence$189:FlatUnionFormats.this.JF[A4],implicitevidence$190:Manifest[A4],implicitevidence$191:FlatUnionFormats.this.JF[A5],implicitevidence$192:Manifest[A5],implicitevidence$193:FlatUnionFormats.this.JF[A6],implicitevidence$194:Manifest[A6],implicitevidence$195:FlatUnionFormats.this.JF[A7],implicitevidence$196:Manifest[A7],implicitevidence$197:FlatUnionFormats.this.JF[A8],implicitevidence$198:Manifest[A8],implicitevidence$199:FlatUnionFormats.this.JF[A9],implicitevidence$200:Manifest[A9],implicitevidence$201:FlatUnionFormats.this.JF[A10],implicitevidence$202:Manifest[A10],implicitevidence$203:FlatUnionFormats.this.JF[A11],implicitevidence$204:Manifest[A11],implicitevidence$205:FlatUnionFormats.this.JF[A12],implicitevidence$206:Manifest[A12],implicitevidence$207:FlatUnionFormats.this.JF[A13],implicitevidence$208:Manifest[A13],implicitevidence$209:FlatUnionFormats.this.JF[A14],implicitevidence$210:Manifest[A14]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat13", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat13", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat13[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitevidence$157:FlatUnionFormats.this.JF[A1],implicitevidence$158:Manifest[A1],implicitevidence$159:FlatUnionFormats.this.JF[A2],implicitevidence$160:Manifest[A2],implicitevidence$161:FlatUnionFormats.this.JF[A3],implicitevidence$162:Manifest[A3],implicitevidence$163:FlatUnionFormats.this.JF[A4],implicitevidence$164:Manifest[A4],implicitevidence$165:FlatUnionFormats.this.JF[A5],implicitevidence$166:Manifest[A5],implicitevidence$167:FlatUnionFormats.this.JF[A6],implicitevidence$168:Manifest[A6],implicitevidence$169:FlatUnionFormats.this.JF[A7],implicitevidence$170:Manifest[A7],implicitevidence$171:FlatUnionFormats.this.JF[A8],implicitevidence$172:Manifest[A8],implicitevidence$173:FlatUnionFormats.this.JF[A9],implicitevidence$174:Manifest[A9],implicitevidence$175:FlatUnionFormats.this.JF[A10],implicitevidence$176:Manifest[A10],implicitevidence$177:FlatUnionFormats.this.JF[A11],implicitevidence$178:Manifest[A11],implicitevidence$179:FlatUnionFormats.this.JF[A12],implicitevidence$180:Manifest[A12],implicitevidence$181:FlatUnionFormats.this.JF[A13],implicitevidence$182:Manifest[A13]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat12", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat12", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat12[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitevidence$133:FlatUnionFormats.this.JF[A1],implicitevidence$134:Manifest[A1],implicitevidence$135:FlatUnionFormats.this.JF[A2],implicitevidence$136:Manifest[A2],implicitevidence$137:FlatUnionFormats.this.JF[A3],implicitevidence$138:Manifest[A3],implicitevidence$139:FlatUnionFormats.this.JF[A4],implicitevidence$140:Manifest[A4],implicitevidence$141:FlatUnionFormats.this.JF[A5],implicitevidence$142:Manifest[A5],implicitevidence$143:FlatUnionFormats.this.JF[A6],implicitevidence$144:Manifest[A6],implicitevidence$145:FlatUnionFormats.this.JF[A7],implicitevidence$146:Manifest[A7],implicitevidence$147:FlatUnionFormats.this.JF[A8],implicitevidence$148:Manifest[A8],implicitevidence$149:FlatUnionFormats.this.JF[A9],implicitevidence$150:Manifest[A9],implicitevidence$151:FlatUnionFormats.this.JF[A10],implicitevidence$152:Manifest[A10],implicitevidence$153:FlatUnionFormats.this.JF[A11],implicitevidence$154:Manifest[A11],implicitevidence$155:FlatUnionFormats.this.JF[A12],implicitevidence$156:Manifest[A12]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat11", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat11", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat11[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitevidence$111:FlatUnionFormats.this.JF[A1],implicitevidence$112:Manifest[A1],implicitevidence$113:FlatUnionFormats.this.JF[A2],implicitevidence$114:Manifest[A2],implicitevidence$115:FlatUnionFormats.this.JF[A3],implicitevidence$116:Manifest[A3],implicitevidence$117:FlatUnionFormats.this.JF[A4],implicitevidence$118:Manifest[A4],implicitevidence$119:FlatUnionFormats.this.JF[A5],implicitevidence$120:Manifest[A5],implicitevidence$121:FlatUnionFormats.this.JF[A6],implicitevidence$122:Manifest[A6],implicitevidence$123:FlatUnionFormats.this.JF[A7],implicitevidence$124:Manifest[A7],implicitevidence$125:FlatUnionFormats.this.JF[A8],implicitevidence$126:Manifest[A8],implicitevidence$127:FlatUnionFormats.this.JF[A9],implicitevidence$128:Manifest[A9],implicitevidence$129:FlatUnionFormats.this.JF[A10],implicitevidence$130:Manifest[A10],implicitevidence$131:FlatUnionFormats.this.JF[A11],implicitevidence$132:Manifest[A11]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat10", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat10", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat10[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitevidence$91:FlatUnionFormats.this.JF[A1],implicitevidence$92:Manifest[A1],implicitevidence$93:FlatUnionFormats.this.JF[A2],implicitevidence$94:Manifest[A2],implicitevidence$95:FlatUnionFormats.this.JF[A3],implicitevidence$96:Manifest[A3],implicitevidence$97:FlatUnionFormats.this.JF[A4],implicitevidence$98:Manifest[A4],implicitevidence$99:FlatUnionFormats.this.JF[A5],implicitevidence$100:Manifest[A5],implicitevidence$101:FlatUnionFormats.this.JF[A6],implicitevidence$102:Manifest[A6],implicitevidence$103:FlatUnionFormats.this.JF[A7],implicitevidence$104:Manifest[A7],implicitevidence$105:FlatUnionFormats.this.JF[A8],implicitevidence$106:Manifest[A8],implicitevidence$107:FlatUnionFormats.this.JF[A9],implicitevidence$108:Manifest[A9],implicitevidence$109:FlatUnionFormats.this.JF[A10],implicitevidence$110:Manifest[A10]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat9", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat9", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat9[U,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitevidence$73:FlatUnionFormats.this.JF[A1],implicitevidence$74:Manifest[A1],implicitevidence$75:FlatUnionFormats.this.JF[A2],implicitevidence$76:Manifest[A2],implicitevidence$77:FlatUnionFormats.this.JF[A3],implicitevidence$78:Manifest[A3],implicitevidence$79:FlatUnionFormats.this.JF[A4],implicitevidence$80:Manifest[A4],implicitevidence$81:FlatUnionFormats.this.JF[A5],implicitevidence$82:Manifest[A5],implicitevidence$83:FlatUnionFormats.this.JF[A6],implicitevidence$84:Manifest[A6],implicitevidence$85:FlatUnionFormats.this.JF[A7],implicitevidence$86:Manifest[A7],implicitevidence$87:FlatUnionFormats.this.JF[A8],implicitevidence$88:Manifest[A8],implicitevidence$89:FlatUnionFormats.this.JF[A9],implicitevidence$90:Manifest[A9]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat8", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat8", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat8[U,A1,A2,A3,A4,A5,A6,A7,A8](implicitevidence$57:FlatUnionFormats.this.JF[A1],implicitevidence$58:Manifest[A1],implicitevidence$59:FlatUnionFormats.this.JF[A2],implicitevidence$60:Manifest[A2],implicitevidence$61:FlatUnionFormats.this.JF[A3],implicitevidence$62:Manifest[A3],implicitevidence$63:FlatUnionFormats.this.JF[A4],implicitevidence$64:Manifest[A4],implicitevidence$65:FlatUnionFormats.this.JF[A5],implicitevidence$66:Manifest[A5],implicitevidence$67:FlatUnionFormats.this.JF[A6],implicitevidence$68:Manifest[A6],implicitevidence$69:FlatUnionFormats.this.JF[A7],implicitevidence$70:Manifest[A7],implicitevidence$71:FlatUnionFormats.this.JF[A8],implicitevidence$72:Manifest[A8]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat7", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat7", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat7[U,A1,A2,A3,A4,A5,A6,A7](implicitevidence$43:FlatUnionFormats.this.JF[A1],implicitevidence$44:Manifest[A1],implicitevidence$45:FlatUnionFormats.this.JF[A2],implicitevidence$46:Manifest[A2],implicitevidence$47:FlatUnionFormats.this.JF[A3],implicitevidence$48:Manifest[A3],implicitevidence$49:FlatUnionFormats.this.JF[A4],implicitevidence$50:Manifest[A4],implicitevidence$51:FlatUnionFormats.this.JF[A5],implicitevidence$52:Manifest[A5],implicitevidence$53:FlatUnionFormats.this.JF[A6],implicitevidence$54:Manifest[A6],implicitevidence$55:FlatUnionFormats.this.JF[A7],implicitevidence$56:Manifest[A7]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat6", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat6", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat6[U,A1,A2,A3,A4,A5,A6](implicitevidence$31:FlatUnionFormats.this.JF[A1],implicitevidence$32:Manifest[A1],implicitevidence$33:FlatUnionFormats.this.JF[A2],implicitevidence$34:Manifest[A2],implicitevidence$35:FlatUnionFormats.this.JF[A3],implicitevidence$36:Manifest[A3],implicitevidence$37:FlatUnionFormats.this.JF[A4],implicitevidence$38:Manifest[A4],implicitevidence$39:FlatUnionFormats.this.JF[A5],implicitevidence$40:Manifest[A5],implicitevidence$41:FlatUnionFormats.this.JF[A6],implicitevidence$42:Manifest[A6]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat5", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat5", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat5[U,A1,A2,A3,A4,A5](implicitevidence$21:FlatUnionFormats.this.JF[A1],implicitevidence$22:Manifest[A1],implicitevidence$23:FlatUnionFormats.this.JF[A2],implicitevidence$24:Manifest[A2],implicitevidence$25:FlatUnionFormats.this.JF[A3],implicitevidence$26:Manifest[A3],implicitevidence$27:FlatUnionFormats.this.JF[A4],implicitevidence$28:Manifest[A4],implicitevidence$29:FlatUnionFormats.this.JF[A5],implicitevidence$30:Manifest[A5]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat4", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat4", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat4[U,A1,A2,A3,A4](implicitevidence$13:FlatUnionFormats.this.JF[A1],implicitevidence$14:Manifest[A1],implicitevidence$15:FlatUnionFormats.this.JF[A2],implicitevidence$16:Manifest[A2],implicitevidence$17:FlatUnionFormats.this.JF[A3],implicitevidence$18:Manifest[A3],implicitevidence$19:FlatUnionFormats.this.JF[A4],implicitevidence$20:Manifest[A4]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat3", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat3", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat3[U,A1,A2,A3](implicitevidence$7:FlatUnionFormats.this.JF[A1],implicitevidence$8:Manifest[A1],implicitevidence$9:FlatUnionFormats.this.JF[A2],implicitevidence$10:Manifest[A2],implicitevidence$11:FlatUnionFormats.this.JF[A3],implicitevidence$12:Manifest[A3]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat2", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat2", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat2[U,A1,A2](implicitevidence$3:FlatUnionFormats.this.JF[A1],implicitevidence$4:Manifest[A1],implicitevidence$5:FlatUnionFormats.this.JF[A2],implicitevidence$6:Manifest[A2]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat1", "tail" : "(arg0: JF[A1], arg1: Manifest[A1]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat1", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#flatUnionFormat1[U,A1](implicitevidence$1:FlatUnionFormats.this.JF[A1],implicitevidence$2:Manifest[A1]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat22", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21], arg42: JF[A22], arg43: Manifest[A22]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat22", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat22[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitevidence$463:UnionFormats.this.JF[A1],implicitevidence$464:Manifest[A1],implicitevidence$465:UnionFormats.this.JF[A2],implicitevidence$466:Manifest[A2],implicitevidence$467:UnionFormats.this.JF[A3],implicitevidence$468:Manifest[A3],implicitevidence$469:UnionFormats.this.JF[A4],implicitevidence$470:Manifest[A4],implicitevidence$471:UnionFormats.this.JF[A5],implicitevidence$472:Manifest[A5],implicitevidence$473:UnionFormats.this.JF[A6],implicitevidence$474:Manifest[A6],implicitevidence$475:UnionFormats.this.JF[A7],implicitevidence$476:Manifest[A7],implicitevidence$477:UnionFormats.this.JF[A8],implicitevidence$478:Manifest[A8],implicitevidence$479:UnionFormats.this.JF[A9],implicitevidence$480:Manifest[A9],implicitevidence$481:UnionFormats.this.JF[A10],implicitevidence$482:Manifest[A10],implicitevidence$483:UnionFormats.this.JF[A11],implicitevidence$484:Manifest[A11],implicitevidence$485:UnionFormats.this.JF[A12],implicitevidence$486:Manifest[A12],implicitevidence$487:UnionFormats.this.JF[A13],implicitevidence$488:Manifest[A13],implicitevidence$489:UnionFormats.this.JF[A14],implicitevidence$490:Manifest[A14],implicitevidence$491:UnionFormats.this.JF[A15],implicitevidence$492:Manifest[A15],implicitevidence$493:UnionFormats.this.JF[A16],implicitevidence$494:Manifest[A16],implicitevidence$495:UnionFormats.this.JF[A17],implicitevidence$496:Manifest[A17],implicitevidence$497:UnionFormats.this.JF[A18],implicitevidence$498:Manifest[A18],implicitevidence$499:UnionFormats.this.JF[A19],implicitevidence$500:Manifest[A19],implicitevidence$501:UnionFormats.this.JF[A20],implicitevidence$502:Manifest[A20],implicitevidence$503:UnionFormats.this.JF[A21],implicitevidence$504:Manifest[A21],implicitevidence$505:UnionFormats.this.JF[A22],implicitevidence$506:Manifest[A22]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat21", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat21", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat21[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitevidence$421:UnionFormats.this.JF[A1],implicitevidence$422:Manifest[A1],implicitevidence$423:UnionFormats.this.JF[A2],implicitevidence$424:Manifest[A2],implicitevidence$425:UnionFormats.this.JF[A3],implicitevidence$426:Manifest[A3],implicitevidence$427:UnionFormats.this.JF[A4],implicitevidence$428:Manifest[A4],implicitevidence$429:UnionFormats.this.JF[A5],implicitevidence$430:Manifest[A5],implicitevidence$431:UnionFormats.this.JF[A6],implicitevidence$432:Manifest[A6],implicitevidence$433:UnionFormats.this.JF[A7],implicitevidence$434:Manifest[A7],implicitevidence$435:UnionFormats.this.JF[A8],implicitevidence$436:Manifest[A8],implicitevidence$437:UnionFormats.this.JF[A9],implicitevidence$438:Manifest[A9],implicitevidence$439:UnionFormats.this.JF[A10],implicitevidence$440:Manifest[A10],implicitevidence$441:UnionFormats.this.JF[A11],implicitevidence$442:Manifest[A11],implicitevidence$443:UnionFormats.this.JF[A12],implicitevidence$444:Manifest[A12],implicitevidence$445:UnionFormats.this.JF[A13],implicitevidence$446:Manifest[A13],implicitevidence$447:UnionFormats.this.JF[A14],implicitevidence$448:Manifest[A14],implicitevidence$449:UnionFormats.this.JF[A15],implicitevidence$450:Manifest[A15],implicitevidence$451:UnionFormats.this.JF[A16],implicitevidence$452:Manifest[A16],implicitevidence$453:UnionFormats.this.JF[A17],implicitevidence$454:Manifest[A17],implicitevidence$455:UnionFormats.this.JF[A18],implicitevidence$456:Manifest[A18],implicitevidence$457:UnionFormats.this.JF[A19],implicitevidence$458:Manifest[A19],implicitevidence$459:UnionFormats.this.JF[A20],implicitevidence$460:Manifest[A20],implicitevidence$461:UnionFormats.this.JF[A21],implicitevidence$462:Manifest[A21]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat20", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat20", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat20[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitevidence$381:UnionFormats.this.JF[A1],implicitevidence$382:Manifest[A1],implicitevidence$383:UnionFormats.this.JF[A2],implicitevidence$384:Manifest[A2],implicitevidence$385:UnionFormats.this.JF[A3],implicitevidence$386:Manifest[A3],implicitevidence$387:UnionFormats.this.JF[A4],implicitevidence$388:Manifest[A4],implicitevidence$389:UnionFormats.this.JF[A5],implicitevidence$390:Manifest[A5],implicitevidence$391:UnionFormats.this.JF[A6],implicitevidence$392:Manifest[A6],implicitevidence$393:UnionFormats.this.JF[A7],implicitevidence$394:Manifest[A7],implicitevidence$395:UnionFormats.this.JF[A8],implicitevidence$396:Manifest[A8],implicitevidence$397:UnionFormats.this.JF[A9],implicitevidence$398:Manifest[A9],implicitevidence$399:UnionFormats.this.JF[A10],implicitevidence$400:Manifest[A10],implicitevidence$401:UnionFormats.this.JF[A11],implicitevidence$402:Manifest[A11],implicitevidence$403:UnionFormats.this.JF[A12],implicitevidence$404:Manifest[A12],implicitevidence$405:UnionFormats.this.JF[A13],implicitevidence$406:Manifest[A13],implicitevidence$407:UnionFormats.this.JF[A14],implicitevidence$408:Manifest[A14],implicitevidence$409:UnionFormats.this.JF[A15],implicitevidence$410:Manifest[A15],implicitevidence$411:UnionFormats.this.JF[A16],implicitevidence$412:Manifest[A16],implicitevidence$413:UnionFormats.this.JF[A17],implicitevidence$414:Manifest[A17],implicitevidence$415:UnionFormats.this.JF[A18],implicitevidence$416:Manifest[A18],implicitevidence$417:UnionFormats.this.JF[A19],implicitevidence$418:Manifest[A19],implicitevidence$419:UnionFormats.this.JF[A20],implicitevidence$420:Manifest[A20]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat19", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat19", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat19[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitevidence$343:UnionFormats.this.JF[A1],implicitevidence$344:Manifest[A1],implicitevidence$345:UnionFormats.this.JF[A2],implicitevidence$346:Manifest[A2],implicitevidence$347:UnionFormats.this.JF[A3],implicitevidence$348:Manifest[A3],implicitevidence$349:UnionFormats.this.JF[A4],implicitevidence$350:Manifest[A4],implicitevidence$351:UnionFormats.this.JF[A5],implicitevidence$352:Manifest[A5],implicitevidence$353:UnionFormats.this.JF[A6],implicitevidence$354:Manifest[A6],implicitevidence$355:UnionFormats.this.JF[A7],implicitevidence$356:Manifest[A7],implicitevidence$357:UnionFormats.this.JF[A8],implicitevidence$358:Manifest[A8],implicitevidence$359:UnionFormats.this.JF[A9],implicitevidence$360:Manifest[A9],implicitevidence$361:UnionFormats.this.JF[A10],implicitevidence$362:Manifest[A10],implicitevidence$363:UnionFormats.this.JF[A11],implicitevidence$364:Manifest[A11],implicitevidence$365:UnionFormats.this.JF[A12],implicitevidence$366:Manifest[A12],implicitevidence$367:UnionFormats.this.JF[A13],implicitevidence$368:Manifest[A13],implicitevidence$369:UnionFormats.this.JF[A14],implicitevidence$370:Manifest[A14],implicitevidence$371:UnionFormats.this.JF[A15],implicitevidence$372:Manifest[A15],implicitevidence$373:UnionFormats.this.JF[A16],implicitevidence$374:Manifest[A16],implicitevidence$375:UnionFormats.this.JF[A17],implicitevidence$376:Manifest[A17],implicitevidence$377:UnionFormats.this.JF[A18],implicitevidence$378:Manifest[A18],implicitevidence$379:UnionFormats.this.JF[A19],implicitevidence$380:Manifest[A19]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat18", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat18", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat18[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitevidence$307:UnionFormats.this.JF[A1],implicitevidence$308:Manifest[A1],implicitevidence$309:UnionFormats.this.JF[A2],implicitevidence$310:Manifest[A2],implicitevidence$311:UnionFormats.this.JF[A3],implicitevidence$312:Manifest[A3],implicitevidence$313:UnionFormats.this.JF[A4],implicitevidence$314:Manifest[A4],implicitevidence$315:UnionFormats.this.JF[A5],implicitevidence$316:Manifest[A5],implicitevidence$317:UnionFormats.this.JF[A6],implicitevidence$318:Manifest[A6],implicitevidence$319:UnionFormats.this.JF[A7],implicitevidence$320:Manifest[A7],implicitevidence$321:UnionFormats.this.JF[A8],implicitevidence$322:Manifest[A8],implicitevidence$323:UnionFormats.this.JF[A9],implicitevidence$324:Manifest[A9],implicitevidence$325:UnionFormats.this.JF[A10],implicitevidence$326:Manifest[A10],implicitevidence$327:UnionFormats.this.JF[A11],implicitevidence$328:Manifest[A11],implicitevidence$329:UnionFormats.this.JF[A12],implicitevidence$330:Manifest[A12],implicitevidence$331:UnionFormats.this.JF[A13],implicitevidence$332:Manifest[A13],implicitevidence$333:UnionFormats.this.JF[A14],implicitevidence$334:Manifest[A14],implicitevidence$335:UnionFormats.this.JF[A15],implicitevidence$336:Manifest[A15],implicitevidence$337:UnionFormats.this.JF[A16],implicitevidence$338:Manifest[A16],implicitevidence$339:UnionFormats.this.JF[A17],implicitevidence$340:Manifest[A17],implicitevidence$341:UnionFormats.this.JF[A18],implicitevidence$342:Manifest[A18]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat17", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat17", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat17[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitevidence$273:UnionFormats.this.JF[A1],implicitevidence$274:Manifest[A1],implicitevidence$275:UnionFormats.this.JF[A2],implicitevidence$276:Manifest[A2],implicitevidence$277:UnionFormats.this.JF[A3],implicitevidence$278:Manifest[A3],implicitevidence$279:UnionFormats.this.JF[A4],implicitevidence$280:Manifest[A4],implicitevidence$281:UnionFormats.this.JF[A5],implicitevidence$282:Manifest[A5],implicitevidence$283:UnionFormats.this.JF[A6],implicitevidence$284:Manifest[A6],implicitevidence$285:UnionFormats.this.JF[A7],implicitevidence$286:Manifest[A7],implicitevidence$287:UnionFormats.this.JF[A8],implicitevidence$288:Manifest[A8],implicitevidence$289:UnionFormats.this.JF[A9],implicitevidence$290:Manifest[A9],implicitevidence$291:UnionFormats.this.JF[A10],implicitevidence$292:Manifest[A10],implicitevidence$293:UnionFormats.this.JF[A11],implicitevidence$294:Manifest[A11],implicitevidence$295:UnionFormats.this.JF[A12],implicitevidence$296:Manifest[A12],implicitevidence$297:UnionFormats.this.JF[A13],implicitevidence$298:Manifest[A13],implicitevidence$299:UnionFormats.this.JF[A14],implicitevidence$300:Manifest[A14],implicitevidence$301:UnionFormats.this.JF[A15],implicitevidence$302:Manifest[A15],implicitevidence$303:UnionFormats.this.JF[A16],implicitevidence$304:Manifest[A16],implicitevidence$305:UnionFormats.this.JF[A17],implicitevidence$306:Manifest[A17]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat16", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat16", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat16[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitevidence$241:UnionFormats.this.JF[A1],implicitevidence$242:Manifest[A1],implicitevidence$243:UnionFormats.this.JF[A2],implicitevidence$244:Manifest[A2],implicitevidence$245:UnionFormats.this.JF[A3],implicitevidence$246:Manifest[A3],implicitevidence$247:UnionFormats.this.JF[A4],implicitevidence$248:Manifest[A4],implicitevidence$249:UnionFormats.this.JF[A5],implicitevidence$250:Manifest[A5],implicitevidence$251:UnionFormats.this.JF[A6],implicitevidence$252:Manifest[A6],implicitevidence$253:UnionFormats.this.JF[A7],implicitevidence$254:Manifest[A7],implicitevidence$255:UnionFormats.this.JF[A8],implicitevidence$256:Manifest[A8],implicitevidence$257:UnionFormats.this.JF[A9],implicitevidence$258:Manifest[A9],implicitevidence$259:UnionFormats.this.JF[A10],implicitevidence$260:Manifest[A10],implicitevidence$261:UnionFormats.this.JF[A11],implicitevidence$262:Manifest[A11],implicitevidence$263:UnionFormats.this.JF[A12],implicitevidence$264:Manifest[A12],implicitevidence$265:UnionFormats.this.JF[A13],implicitevidence$266:Manifest[A13],implicitevidence$267:UnionFormats.this.JF[A14],implicitevidence$268:Manifest[A14],implicitevidence$269:UnionFormats.this.JF[A15],implicitevidence$270:Manifest[A15],implicitevidence$271:UnionFormats.this.JF[A16],implicitevidence$272:Manifest[A16]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat15", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat15", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat15[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitevidence$211:UnionFormats.this.JF[A1],implicitevidence$212:Manifest[A1],implicitevidence$213:UnionFormats.this.JF[A2],implicitevidence$214:Manifest[A2],implicitevidence$215:UnionFormats.this.JF[A3],implicitevidence$216:Manifest[A3],implicitevidence$217:UnionFormats.this.JF[A4],implicitevidence$218:Manifest[A4],implicitevidence$219:UnionFormats.this.JF[A5],implicitevidence$220:Manifest[A5],implicitevidence$221:UnionFormats.this.JF[A6],implicitevidence$222:Manifest[A6],implicitevidence$223:UnionFormats.this.JF[A7],implicitevidence$224:Manifest[A7],implicitevidence$225:UnionFormats.this.JF[A8],implicitevidence$226:Manifest[A8],implicitevidence$227:UnionFormats.this.JF[A9],implicitevidence$228:Manifest[A9],implicitevidence$229:UnionFormats.this.JF[A10],implicitevidence$230:Manifest[A10],implicitevidence$231:UnionFormats.this.JF[A11],implicitevidence$232:Manifest[A11],implicitevidence$233:UnionFormats.this.JF[A12],implicitevidence$234:Manifest[A12],implicitevidence$235:UnionFormats.this.JF[A13],implicitevidence$236:Manifest[A13],implicitevidence$237:UnionFormats.this.JF[A14],implicitevidence$238:Manifest[A14],implicitevidence$239:UnionFormats.this.JF[A15],implicitevidence$240:Manifest[A15]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat14", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat14", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat14[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitevidence$183:UnionFormats.this.JF[A1],implicitevidence$184:Manifest[A1],implicitevidence$185:UnionFormats.this.JF[A2],implicitevidence$186:Manifest[A2],implicitevidence$187:UnionFormats.this.JF[A3],implicitevidence$188:Manifest[A3],implicitevidence$189:UnionFormats.this.JF[A4],implicitevidence$190:Manifest[A4],implicitevidence$191:UnionFormats.this.JF[A5],implicitevidence$192:Manifest[A5],implicitevidence$193:UnionFormats.this.JF[A6],implicitevidence$194:Manifest[A6],implicitevidence$195:UnionFormats.this.JF[A7],implicitevidence$196:Manifest[A7],implicitevidence$197:UnionFormats.this.JF[A8],implicitevidence$198:Manifest[A8],implicitevidence$199:UnionFormats.this.JF[A9],implicitevidence$200:Manifest[A9],implicitevidence$201:UnionFormats.this.JF[A10],implicitevidence$202:Manifest[A10],implicitevidence$203:UnionFormats.this.JF[A11],implicitevidence$204:Manifest[A11],implicitevidence$205:UnionFormats.this.JF[A12],implicitevidence$206:Manifest[A12],implicitevidence$207:UnionFormats.this.JF[A13],implicitevidence$208:Manifest[A13],implicitevidence$209:UnionFormats.this.JF[A14],implicitevidence$210:Manifest[A14]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat13", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat13", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat13[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitevidence$157:UnionFormats.this.JF[A1],implicitevidence$158:Manifest[A1],implicitevidence$159:UnionFormats.this.JF[A2],implicitevidence$160:Manifest[A2],implicitevidence$161:UnionFormats.this.JF[A3],implicitevidence$162:Manifest[A3],implicitevidence$163:UnionFormats.this.JF[A4],implicitevidence$164:Manifest[A4],implicitevidence$165:UnionFormats.this.JF[A5],implicitevidence$166:Manifest[A5],implicitevidence$167:UnionFormats.this.JF[A6],implicitevidence$168:Manifest[A6],implicitevidence$169:UnionFormats.this.JF[A7],implicitevidence$170:Manifest[A7],implicitevidence$171:UnionFormats.this.JF[A8],implicitevidence$172:Manifest[A8],implicitevidence$173:UnionFormats.this.JF[A9],implicitevidence$174:Manifest[A9],implicitevidence$175:UnionFormats.this.JF[A10],implicitevidence$176:Manifest[A10],implicitevidence$177:UnionFormats.this.JF[A11],implicitevidence$178:Manifest[A11],implicitevidence$179:UnionFormats.this.JF[A12],implicitevidence$180:Manifest[A12],implicitevidence$181:UnionFormats.this.JF[A13],implicitevidence$182:Manifest[A13]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat12", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat12", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat12[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitevidence$133:UnionFormats.this.JF[A1],implicitevidence$134:Manifest[A1],implicitevidence$135:UnionFormats.this.JF[A2],implicitevidence$136:Manifest[A2],implicitevidence$137:UnionFormats.this.JF[A3],implicitevidence$138:Manifest[A3],implicitevidence$139:UnionFormats.this.JF[A4],implicitevidence$140:Manifest[A4],implicitevidence$141:UnionFormats.this.JF[A5],implicitevidence$142:Manifest[A5],implicitevidence$143:UnionFormats.this.JF[A6],implicitevidence$144:Manifest[A6],implicitevidence$145:UnionFormats.this.JF[A7],implicitevidence$146:Manifest[A7],implicitevidence$147:UnionFormats.this.JF[A8],implicitevidence$148:Manifest[A8],implicitevidence$149:UnionFormats.this.JF[A9],implicitevidence$150:Manifest[A9],implicitevidence$151:UnionFormats.this.JF[A10],implicitevidence$152:Manifest[A10],implicitevidence$153:UnionFormats.this.JF[A11],implicitevidence$154:Manifest[A11],implicitevidence$155:UnionFormats.this.JF[A12],implicitevidence$156:Manifest[A12]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat11", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat11", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat11[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitevidence$111:UnionFormats.this.JF[A1],implicitevidence$112:Manifest[A1],implicitevidence$113:UnionFormats.this.JF[A2],implicitevidence$114:Manifest[A2],implicitevidence$115:UnionFormats.this.JF[A3],implicitevidence$116:Manifest[A3],implicitevidence$117:UnionFormats.this.JF[A4],implicitevidence$118:Manifest[A4],implicitevidence$119:UnionFormats.this.JF[A5],implicitevidence$120:Manifest[A5],implicitevidence$121:UnionFormats.this.JF[A6],implicitevidence$122:Manifest[A6],implicitevidence$123:UnionFormats.this.JF[A7],implicitevidence$124:Manifest[A7],implicitevidence$125:UnionFormats.this.JF[A8],implicitevidence$126:Manifest[A8],implicitevidence$127:UnionFormats.this.JF[A9],implicitevidence$128:Manifest[A9],implicitevidence$129:UnionFormats.this.JF[A10],implicitevidence$130:Manifest[A10],implicitevidence$131:UnionFormats.this.JF[A11],implicitevidence$132:Manifest[A11]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat10", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat10", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat10[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitevidence$91:UnionFormats.this.JF[A1],implicitevidence$92:Manifest[A1],implicitevidence$93:UnionFormats.this.JF[A2],implicitevidence$94:Manifest[A2],implicitevidence$95:UnionFormats.this.JF[A3],implicitevidence$96:Manifest[A3],implicitevidence$97:UnionFormats.this.JF[A4],implicitevidence$98:Manifest[A4],implicitevidence$99:UnionFormats.this.JF[A5],implicitevidence$100:Manifest[A5],implicitevidence$101:UnionFormats.this.JF[A6],implicitevidence$102:Manifest[A6],implicitevidence$103:UnionFormats.this.JF[A7],implicitevidence$104:Manifest[A7],implicitevidence$105:UnionFormats.this.JF[A8],implicitevidence$106:Manifest[A8],implicitevidence$107:UnionFormats.this.JF[A9],implicitevidence$108:Manifest[A9],implicitevidence$109:UnionFormats.this.JF[A10],implicitevidence$110:Manifest[A10]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat9", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat9", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat9[U,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitevidence$73:UnionFormats.this.JF[A1],implicitevidence$74:Manifest[A1],implicitevidence$75:UnionFormats.this.JF[A2],implicitevidence$76:Manifest[A2],implicitevidence$77:UnionFormats.this.JF[A3],implicitevidence$78:Manifest[A3],implicitevidence$79:UnionFormats.this.JF[A4],implicitevidence$80:Manifest[A4],implicitevidence$81:UnionFormats.this.JF[A5],implicitevidence$82:Manifest[A5],implicitevidence$83:UnionFormats.this.JF[A6],implicitevidence$84:Manifest[A6],implicitevidence$85:UnionFormats.this.JF[A7],implicitevidence$86:Manifest[A7],implicitevidence$87:UnionFormats.this.JF[A8],implicitevidence$88:Manifest[A8],implicitevidence$89:UnionFormats.this.JF[A9],implicitevidence$90:Manifest[A9]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat8", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat8", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat8[U,A1,A2,A3,A4,A5,A6,A7,A8](implicitevidence$57:UnionFormats.this.JF[A1],implicitevidence$58:Manifest[A1],implicitevidence$59:UnionFormats.this.JF[A2],implicitevidence$60:Manifest[A2],implicitevidence$61:UnionFormats.this.JF[A3],implicitevidence$62:Manifest[A3],implicitevidence$63:UnionFormats.this.JF[A4],implicitevidence$64:Manifest[A4],implicitevidence$65:UnionFormats.this.JF[A5],implicitevidence$66:Manifest[A5],implicitevidence$67:UnionFormats.this.JF[A6],implicitevidence$68:Manifest[A6],implicitevidence$69:UnionFormats.this.JF[A7],implicitevidence$70:Manifest[A7],implicitevidence$71:UnionFormats.this.JF[A8],implicitevidence$72:Manifest[A8]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat7", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat7", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat7[U,A1,A2,A3,A4,A5,A6,A7](implicitevidence$43:UnionFormats.this.JF[A1],implicitevidence$44:Manifest[A1],implicitevidence$45:UnionFormats.this.JF[A2],implicitevidence$46:Manifest[A2],implicitevidence$47:UnionFormats.this.JF[A3],implicitevidence$48:Manifest[A3],implicitevidence$49:UnionFormats.this.JF[A4],implicitevidence$50:Manifest[A4],implicitevidence$51:UnionFormats.this.JF[A5],implicitevidence$52:Manifest[A5],implicitevidence$53:UnionFormats.this.JF[A6],implicitevidence$54:Manifest[A6],implicitevidence$55:UnionFormats.this.JF[A7],implicitevidence$56:Manifest[A7]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat6", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat6", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat6[U,A1,A2,A3,A4,A5,A6](implicitevidence$31:UnionFormats.this.JF[A1],implicitevidence$32:Manifest[A1],implicitevidence$33:UnionFormats.this.JF[A2],implicitevidence$34:Manifest[A2],implicitevidence$35:UnionFormats.this.JF[A3],implicitevidence$36:Manifest[A3],implicitevidence$37:UnionFormats.this.JF[A4],implicitevidence$38:Manifest[A4],implicitevidence$39:UnionFormats.this.JF[A5],implicitevidence$40:Manifest[A5],implicitevidence$41:UnionFormats.this.JF[A6],implicitevidence$42:Manifest[A6]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat5", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat5", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat5[U,A1,A2,A3,A4,A5](implicitevidence$21:UnionFormats.this.JF[A1],implicitevidence$22:Manifest[A1],implicitevidence$23:UnionFormats.this.JF[A2],implicitevidence$24:Manifest[A2],implicitevidence$25:UnionFormats.this.JF[A3],implicitevidence$26:Manifest[A3],implicitevidence$27:UnionFormats.this.JF[A4],implicitevidence$28:Manifest[A4],implicitevidence$29:UnionFormats.this.JF[A5],implicitevidence$30:Manifest[A5]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat4", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat4", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat4[U,A1,A2,A3,A4](implicitevidence$13:UnionFormats.this.JF[A1],implicitevidence$14:Manifest[A1],implicitevidence$15:UnionFormats.this.JF[A2],implicitevidence$16:Manifest[A2],implicitevidence$17:UnionFormats.this.JF[A3],implicitevidence$18:Manifest[A3],implicitevidence$19:UnionFormats.this.JF[A4],implicitevidence$20:Manifest[A4]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat3", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat3", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat3[U,A1,A2,A3](implicitevidence$7:UnionFormats.this.JF[A1],implicitevidence$8:Manifest[A1],implicitevidence$9:UnionFormats.this.JF[A2],implicitevidence$10:Manifest[A2],implicitevidence$11:UnionFormats.this.JF[A3],implicitevidence$12:Manifest[A3]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat2", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat2", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat2[U,A1,A2](implicitevidence$3:UnionFormats.this.JF[A1],implicitevidence$4:Manifest[A1],implicitevidence$5:UnionFormats.this.JF[A2],implicitevidence$6:Manifest[A2]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat1", "tail" : "(arg0: JF[A1], arg1: Manifest[A1]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat1", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#unionFormat1[U,A1](implicitevidence$1:UnionFormats.this.JF[A1],implicitevidence$2:Manifest[A1]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "contramapKeyWriter", "tail" : "(f: (B) ⇒ A)(ev: JsonKeyWriter[A]): JsonKeyWriter[B]", "member" : "sjsonnew.AdditionalFormats.contramapKeyWriter", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#contramapKeyWriter[A,B](f:B=>A)(implicitev:sjsonnew.JsonKeyWriter[A]):sjsonnew.JsonKeyWriter[B]", "kind" : "def"}, {"label" : "mapKeyReader", "tail" : "(f: (A) ⇒ B)(ev: JsonKeyReader[A]): JsonKeyReader[B]", "member" : "sjsonnew.AdditionalFormats.mapKeyReader", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#mapKeyReader[A,B](f:A=>B)(implicitev:sjsonnew.JsonKeyReader[A]):sjsonnew.JsonKeyReader[B]", "kind" : "def"}, {"label" : "contramapWriter", "tail" : "(f: (B) ⇒ A)(ev: JsonWriter[A]): JsonWriter[B]", "member" : "sjsonnew.AdditionalFormats.contramapWriter", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#contramapWriter[A,B](f:B=>A)(implicitev:sjsonnew.JsonWriter[A]):sjsonnew.JsonWriter[B]", "kind" : "def"}, {"label" : "mapReader", "tail" : "(f: (A) ⇒ B)(ev: JsonReader[A]): JsonReader[B]", "member" : "sjsonnew.AdditionalFormats.mapReader", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#mapReader[A,B](f:A=>B)(implicitev:sjsonnew.JsonReader[A]):sjsonnew.JsonReader[B]", "kind" : "def"}, {"label" : "projectFormat", "tail" : "(f1: (T) ⇒ U, f2: (U) ⇒ T)(fu: JsonFormat[U]): JsonFormat[T]", "member" : "sjsonnew.AdditionalFormats.projectFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#projectFormat[T,U](f1:T=>U,f2:U=>T)(implicitfu:sjsonnew.JsonFormat[U]):sjsonnew.JsonFormat[T]", "kind" : "def"}, {"label" : "asSingleton", "tail" : "(a: A): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.asSingleton", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#asSingleton[A](a:A):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "safeReader", "tail" : "(arg0: JsonReader[A]): JsonReader[Either[Exception, A]]", "member" : "sjsonnew.AdditionalFormats.safeReader", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#safeReader[A](implicitevidence$1:sjsonnew.JsonReader[A]):sjsonnew.JsonReader[Either[Exception,A]]", "kind" : "def"}, {"label" : "lazyFormat", "tail" : "(format: ⇒ JsonFormat[A]): JsonFormat[A] { lazy val delegate: sjsonnew.JsonFormat[A] }", "member" : "sjsonnew.AdditionalFormats.lazyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#lazyFormat[A](format:=>sjsonnew.JsonFormat[A]):sjsonnew.JsonFormat[A]{lazyvaldelegate:sjsonnew.JsonFormat[A]}", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(reader: RootJsonReader[A]): RootJsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#liftFormat[A<:AnyRef](reader:sjsonnew.RootJsonReader[A]):sjsonnew.RootJsonFormat[A]", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(reader: JsonReader[A]): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#liftFormat[A<:AnyRef](reader:sjsonnew.JsonReader[A]):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(writer: RootJsonWriter[A]): RootJsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#liftFormat[A](writer:sjsonnew.RootJsonWriter[A]):sjsonnew.RootJsonFormat[A]", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(writer: JsonWriter[A]): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#liftFormat[A](writer:sjsonnew.JsonWriter[A]):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "rootFormat", "tail" : "(format: JsonFormat[A]): RootJsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.rootFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#rootFormat[A](format:sjsonnew.JsonFormat[A]):sjsonnew.RootJsonFormat[A]", "kind" : "def"}, {"label" : "rootJsonFormat", "tail" : "(reader: RootJsonReader[T], writer: RootJsonWriter[T]): RootJsonFormat[T]", "member" : "sjsonnew.AdditionalFormats.rootJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#rootJsonFormat[T](reader:sjsonnew.RootJsonReader[T],writer:sjsonnew.RootJsonWriter[T]):sjsonnew.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(reader: JsonReader[A], writer: JsonWriter[A]): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.jsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#jsonFormat[A](reader:sjsonnew.JsonReader[A],writer:sjsonnew.JsonWriter[A]):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "viaSeq", "tail" : "(f: (Seq[A]) ⇒ I)(arg0: JsonFormat[A]): RootJsonFormat[I]", "member" : "sjsonnew.CollectionFormats.viaSeq", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#viaSeq[I<:Iterable[A],A](f:scala.collection.immutable.Seq[A]=>I)(implicitevidence$17:sjsonnew.JsonFormat[A]):sjsonnew.RootJsonFormat[I]", "kind" : "def"}, {"label" : "setFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "sjsonnew.CollectionFormats.setFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#setFormat[T](implicitevidence$16:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.Set[T]]", "kind" : "implicit def"}, {"label" : "linearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "sjsonnew.CollectionFormats.linearSeqFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#linearSeqFormat[T](implicitevidence$15:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "indexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "sjsonnew.CollectionFormats.indexedSeqFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#indexedSeqFormat[T](implicitevidence$14:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "seqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "sjsonnew.CollectionFormats.seqFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#seqFormat[T](implicitevidence$13:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[Seq[T]]", "kind" : "implicit def"}, {"label" : "iterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "sjsonnew.CollectionFormats.iterableFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#iterableFormat[T](implicitevidence$12:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[Iterable[T]]", "kind" : "implicit def"}, {"label" : "vectorFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Vector[T]]", "member" : "sjsonnew.CollectionFormats.vectorFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#vectorFormat[T](implicitevidence$11:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[Vector[T]]", "kind" : "implicit def"}, {"label" : "immSetFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "sjsonnew.CollectionFormats.immSetFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#immSetFormat[T](implicitevidence$10:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.Set[T]]", "kind" : "implicit def"}, {"label" : "immLinearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "sjsonnew.CollectionFormats.immLinearSeqFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#immLinearSeqFormat[T](implicitevidence$9:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "immIndexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "sjsonnew.CollectionFormats.immIndexedSeqFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#immIndexedSeqFormat[T](implicitevidence$8:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "immSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "sjsonnew.CollectionFormats.immSeqFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#immSeqFormat[T](implicitevidence$7:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.Seq[T]]", "kind" : "implicit def"}, {"label" : "immIterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "sjsonnew.CollectionFormats.immIterableFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#immIterableFormat[T](implicitevidence$6:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.Iterable[T]]", "kind" : "implicit def"}, {"label" : "mapFormat", "tail" : "(arg0: JsonKeyFormat[K], arg1: JsonFormat[V]): RootJsonFormat[Map[K, V]]", "member" : "sjsonnew.CollectionFormats.mapFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#mapFormat[K,V](implicitevidence$4:sjsonnew.JsonKeyFormat[K],implicitevidence$5:sjsonnew.JsonFormat[V]):sjsonnew.RootJsonFormat[Map[K,V]]", "kind" : "implicit def"}, {"label" : "arrayFormat", "tail" : "(arg0: JsonFormat[A], arg1: ClassTag[A]): RootJsonFormat[Array[A]]", "member" : "sjsonnew.CollectionFormats.arrayFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#arrayFormat[A](implicitevidence$2:sjsonnew.JsonFormat[A],implicitevidence$3:scala.reflect.ClassTag[A]):sjsonnew.RootJsonFormat[Array[A]]", "kind" : "implicit def"}, {"label" : "listFormat", "tail" : "(arg0: JsonFormat[A]): RootJsonFormat[List[A]]", "member" : "sjsonnew.CollectionFormats.listFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#listFormat[A](implicitevidence$1:sjsonnew.JsonFormat[A]):sjsonnew.RootJsonFormat[List[A]]", "kind" : "implicit def"}, {"label" : "tuple22Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], A22: JF[A22]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]", "member" : "sjsonnew.TupleFormats.tuple22Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple22Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19],implicitA20:TupleFormats.this.JF[A20],implicitA21:TupleFormats.this.JF[A21],implicitA22:TupleFormats.this.JF[A22]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]", "kind" : "implicit def"}, {"label" : "tuple21Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "sjsonnew.TupleFormats.tuple21Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple21Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19],implicitA20:TupleFormats.this.JF[A20],implicitA21:TupleFormats.this.JF[A21]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tuple20Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "sjsonnew.TupleFormats.tuple20Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple20Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19],implicitA20:TupleFormats.this.JF[A20]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tuple19Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "sjsonnew.TupleFormats.tuple19Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple19Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tuple18Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "sjsonnew.TupleFormats.tuple18Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple18Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tuple17Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "sjsonnew.TupleFormats.tuple17Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple17Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tuple16Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "sjsonnew.TupleFormats.tuple16Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple16Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tuple15Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "sjsonnew.TupleFormats.tuple15Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple15Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tuple14Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "sjsonnew.TupleFormats.tuple14Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple14Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tuple13Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "sjsonnew.TupleFormats.tuple13Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple13Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tuple12Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "sjsonnew.TupleFormats.tuple12Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple12Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tuple11Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "sjsonnew.TupleFormats.tuple11Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple11Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tuple10Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "sjsonnew.TupleFormats.tuple10Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple10Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tuple9Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "sjsonnew.TupleFormats.tuple9Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple9Format[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tuple8Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8]): JF[(A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "sjsonnew.TupleFormats.tuple8Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple8Format[A1,A2,A3,A4,A5,A6,A7,A8](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tuple7Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7]): JF[(A1, A2, A3, A4, A5, A6, A7)]", "member" : "sjsonnew.TupleFormats.tuple7Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple7Format[A1,A2,A3,A4,A5,A6,A7](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tuple6Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6]): JF[(A1, A2, A3, A4, A5, A6)]", "member" : "sjsonnew.TupleFormats.tuple6Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple6Format[A1,A2,A3,A4,A5,A6](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tuple5Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5]): JF[(A1, A2, A3, A4, A5)]", "member" : "sjsonnew.TupleFormats.tuple5Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple5Format[A1,A2,A3,A4,A5](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5]):TupleFormats.this.JF[(A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tuple4Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4]): JF[(A1, A2, A3, A4)]", "member" : "sjsonnew.TupleFormats.tuple4Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple4Format[A1,A2,A3,A4](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4]):TupleFormats.this.JF[(A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tuple3Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3]): JF[(A1, A2, A3)]", "member" : "sjsonnew.TupleFormats.tuple3Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple3Format[A1,A2,A3](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3]):TupleFormats.this.JF[(A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tuple2Format", "tail" : "(A1: JF[A1], A2: JF[A2]): JF[(A1, A2)]", "member" : "sjsonnew.TupleFormats.tuple2Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple2Format[A1,A2](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2]):TupleFormats.this.JF[(A1,A2)]", "kind" : "implicit def"}, {"label" : "tuple1Format", "tail" : "(A1: JF[A1]): JF[(A1)]", "member" : "sjsonnew.TupleFormats.tuple1Format", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#tuple1Format[A1](implicitA1:TupleFormats.this.JF[A1]):TupleFormats.this.JF[(A1,)]", "kind" : "implicit def"}, {"label" : "eitherFormat", "tail" : "(arg0: JF[A], arg1: JF[B]): JF[Either[A, B]] { ... \/* 2 definitions in type refinement *\/ }", "member" : "sjsonnew.StandardFormats.eitherFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#eitherFormat[A,B](implicitevidence$3:StandardFormats.this.JF[A],implicitevidence$4:StandardFormats.this.JF[B]):StandardFormats.this.JF[Either[A,B]]{lazyvalleftFormat:StandardFormats.this.JF[A];lazyvalrightFormat:StandardFormats.this.JF[B]}", "kind" : "implicit def"}, {"label" : "optionFormat", "tail" : "(arg0: JF[A]): JF[Option[A]]", "member" : "sjsonnew.StandardFormats.optionFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#optionFormat[A](implicitevidence$1:StandardFormats.this.JF[A]):StandardFormats.this.JF[Option[A]]", "kind" : "implicit def"}, {"label" : "BigIntJsonKeyFormat", "tail" : ": JsonKeyFormat[BigInt]", "member" : "sjsonnew.PrimitiveFormats.BigIntJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#BigIntJsonKeyFormat:sjsonnew.JsonKeyFormat[BigInt]", "kind" : "implicit val"}, {"label" : "BigDecimalJsonKeyFormat", "tail" : ": JsonKeyFormat[BigDecimal]", "member" : "sjsonnew.PrimitiveFormats.BigDecimalJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#BigDecimalJsonKeyFormat:sjsonnew.JsonKeyFormat[BigDecimal]", "kind" : "implicit val"}, {"label" : "DoubleJsonKeyFormat", "tail" : ": JsonKeyFormat[Double]", "member" : "sjsonnew.PrimitiveFormats.DoubleJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#DoubleJsonKeyFormat:sjsonnew.JsonKeyFormat[Double]", "kind" : "implicit val"}, {"label" : "FloatJsonKeyFormat", "tail" : ": JsonKeyFormat[Float]", "member" : "sjsonnew.PrimitiveFormats.FloatJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#FloatJsonKeyFormat:sjsonnew.JsonKeyFormat[Float]", "kind" : "implicit val"}, {"label" : "LongJsonKeyFormat", "tail" : ": JsonKeyFormat[Long]", "member" : "sjsonnew.PrimitiveFormats.LongJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#LongJsonKeyFormat:sjsonnew.JsonKeyFormat[Long]", "kind" : "implicit val"}, {"label" : "IntJsonKeyFormat", "tail" : ": JsonKeyFormat[Int]", "member" : "sjsonnew.PrimitiveFormats.IntJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#IntJsonKeyFormat:sjsonnew.JsonKeyFormat[Int]", "kind" : "implicit val"}, {"label" : "CharJsonKeyFormat", "tail" : ": JsonKeyFormat[Char]", "member" : "sjsonnew.PrimitiveFormats.CharJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#CharJsonKeyFormat:sjsonnew.JsonKeyFormat[Char]", "kind" : "implicit val"}, {"label" : "ShortJsonKeyFormat", "tail" : ": JsonKeyFormat[Short]", "member" : "sjsonnew.PrimitiveFormats.ShortJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#ShortJsonKeyFormat:sjsonnew.JsonKeyFormat[Short]", "kind" : "implicit val"}, {"label" : "ByteJsonKeyFormat", "tail" : ": JsonKeyFormat[Byte]", "member" : "sjsonnew.PrimitiveFormats.ByteJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#ByteJsonKeyFormat:sjsonnew.JsonKeyFormat[Byte]", "kind" : "implicit val"}, {"label" : "BooleanJsonKeyFormat", "tail" : ": JsonKeyFormat[Boolean]", "member" : "sjsonnew.PrimitiveFormats.BooleanJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#BooleanJsonKeyFormat:sjsonnew.JsonKeyFormat[Boolean]", "kind" : "implicit val"}, {"label" : "UnitJsonKeyFormat", "tail" : ": JsonKeyFormat[Unit]", "member" : "sjsonnew.PrimitiveFormats.UnitJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#UnitJsonKeyFormat:sjsonnew.JsonKeyFormat[Unit]", "kind" : "implicit val"}, {"label" : "SymbolJsonKeyFormat", "tail" : ": JsonKeyFormat[Symbol]", "member" : "sjsonnew.PrimitiveFormats.SymbolJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#SymbolJsonKeyFormat:sjsonnew.JsonKeyFormat[Symbol]", "kind" : "implicit val"}, {"label" : "StringJsonKeyFormat", "tail" : ": JsonKeyFormat[String]", "member" : "sjsonnew.PrimitiveFormats.StringJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#StringJsonKeyFormat:sjsonnew.JsonKeyFormat[String]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/codec\/JsonProtocol.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/codec\/JsonProtocol.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/protocol\/codec\/JsonProtocol$.html", "members_object" : [{"label" : "StackTraceElementFormat", "tail" : "", "member" : "sjsonnew.ThrowableFormats.StackTraceElementFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#StackTraceElementFormatextendsJsonFormat[StackTraceElement]", "kind" : "final class"}, {"label" : "ThrowableFormat", "tail" : "", "member" : "sjsonnew.ThrowableFormats.ThrowableFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#ThrowableFormatextendsJsonFormat[Throwable]", "kind" : "final class"}, {"label" : "OptionalFormat", "tail" : "", "member" : "sjsonnew.JavaExtraFormats.OptionalFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#OptionalFormat[A<:<?>]extendsJsonFormat[java.util.Optional[A]]", "kind" : "final class"}, {"label" : "OptionFormat", "tail" : "", "member" : "sjsonnew.StandardFormats.OptionFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#OptionFormat[A<:<?>]extendsJsonFormat[Option[A]]", "kind" : "final class"}, {"label" : "SymbolJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.SymbolJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#SymbolJsonFormat", "kind" : "implicit object"}, {"label" : "StringJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.StringJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#StringJsonFormat", "kind" : "implicit object"}, {"label" : "CharJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.CharJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#CharJsonFormat", "kind" : "implicit object"}, {"label" : "BooleanJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.BooleanJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#BooleanJsonFormat", "kind" : "implicit object"}, {"label" : "UnitJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.UnitJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#UnitJsonFormat", "kind" : "implicit object"}, {"label" : "BigIntJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.BigIntJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#BigIntJsonFormat", "kind" : "implicit object"}, {"label" : "BigDecimalJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.BigDecimalJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#BigDecimalJsonFormat", "kind" : "implicit object"}, {"label" : "ShortJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.ShortJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#ShortJsonFormat", "kind" : "implicit object"}, {"label" : "ByteJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.ByteJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#ByteJsonFormat", "kind" : "implicit object"}, {"label" : "DoubleJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.DoubleJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#DoubleJsonFormat", "kind" : "implicit object"}, {"label" : "FloatJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.FloatJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#FloatJsonFormat", "kind" : "implicit object"}, {"label" : "LongJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.LongJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#LongJsonFormat", "kind" : "implicit object"}, {"label" : "IntJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.IntJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#IntJsonFormat", "kind" : "implicit object"}, {"label" : "ExecutionEventFormat", "tail" : ": JsonFormat[ExecutionEvent]", "member" : "sbt.protocol.codec.ExecutionEventFormats.ExecutionEventFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#ExecutionEventFormat:sjsonnew.JsonFormat[sbt.protocol.ExecutionEvent]", "kind" : "implicit lazy val"}, {"label" : "SettingQueryResponseFormat", "tail" : ": JsonFormat[SettingQueryResponse]", "member" : "sbt.protocol.codec.SettingQueryResponseFormats.SettingQueryResponseFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#SettingQueryResponseFormat:sjsonnew.JsonFormat[sbt.protocol.SettingQueryResponse]", "kind" : "implicit lazy val"}, {"label" : "EventMessageFormat", "tail" : ": JsonFormat[EventMessage]", "member" : "sbt.protocol.codec.EventMessageFormats.EventMessageFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#EventMessageFormat:sjsonnew.JsonFormat[sbt.protocol.EventMessage]", "kind" : "implicit lazy val"}, {"label" : "SettingQueryFailureFormat", "tail" : ": JsonFormat[SettingQueryFailure]", "member" : "sbt.protocol.codec.SettingQueryFailureFormats.SettingQueryFailureFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#SettingQueryFailureFormat:sjsonnew.JsonFormat[sbt.protocol.SettingQueryFailure]", "kind" : "implicit lazy val"}, {"label" : "SettingQuerySuccessFormat", "tail" : ": JsonFormat[SettingQuerySuccess]", "member" : "sbt.protocol.codec.SettingQuerySuccessFormats.SettingQuerySuccessFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#SettingQuerySuccessFormat:sjsonnew.JsonFormat[sbt.protocol.SettingQuerySuccess]", "kind" : "implicit lazy val"}, {"label" : "JValueFormat", "tail" : ": JsonFormat[JValue]", "member" : "sbt.internal.util.codec.JValueFormats.JValueFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JValueFormat:sjsonnew.JsonFormat[sjsonnew.shaded.scalajson.ast.unsafe.JValue]", "kind" : "implicit lazy val"}, {"label" : "JValueJsonReader", "tail" : ": JsonReader[JValue]", "member" : "sbt.internal.util.codec.JValueFormats.JValueJsonReader", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JValueJsonReader:sjsonnew.JsonReader[sjsonnew.shaded.scalajson.ast.unsafe.JValue]", "kind" : "implicit lazy val"}, {"label" : "JValueJsonWriter", "tail" : ": JsonWriter[JValue]", "member" : "sbt.internal.util.codec.JValueFormats.JValueJsonWriter", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JValueJsonWriter:sjsonnew.JsonWriter[sjsonnew.shaded.scalajson.ast.unsafe.JValue]", "kind" : "implicit lazy val"}, {"label" : "JObjectJsonWriter", "tail" : ": JsonWriter[JObject]", "member" : "sbt.internal.util.codec.JValueFormats.JObjectJsonWriter", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JObjectJsonWriter:sjsonnew.JsonWriter[sjsonnew.shaded.scalajson.ast.unsafe.JObject]", "kind" : "implicit lazy val"}, {"label" : "JArrayFormat", "tail" : ": JsonFormat[JArray]", "member" : "sbt.internal.util.codec.JValueFormats.JArrayFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JArrayFormat:sjsonnew.JsonFormat[sjsonnew.shaded.scalajson.ast.unsafe.JArray]", "kind" : "implicit val"}, {"label" : "JNumberFormat", "tail" : ": JsonFormat[JNumber]", "member" : "sbt.internal.util.codec.JValueFormats.JNumberFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JNumberFormat:sjsonnew.JsonFormat[sjsonnew.shaded.scalajson.ast.unsafe.JNumber]", "kind" : "implicit val"}, {"label" : "JStringFormat", "tail" : ": JsonFormat[JString]", "member" : "sbt.internal.util.codec.JValueFormats.JStringFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JStringFormat:sjsonnew.JsonFormat[sjsonnew.shaded.scalajson.ast.unsafe.JString]", "kind" : "implicit val"}, {"label" : "JBooleanFormat", "tail" : ": JsonFormat[JBoolean]", "member" : "sbt.internal.util.codec.JValueFormats.JBooleanFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JBooleanFormat:sjsonnew.JsonFormat[sjsonnew.shaded.scalajson.ast.unsafe.JBoolean]", "kind" : "implicit val"}, {"label" : "JNullFormat", "tail" : ": JsonFormat[JNull.type]", "member" : "sbt.internal.util.codec.JValueFormats.JNullFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JNullFormat:sjsonnew.JsonFormat[sjsonnew.shaded.scalajson.ast.unsafe.JNull.type]", "kind" : "implicit val"}, {"label" : "ExecStatusEventFormat", "tail" : ": JsonFormat[ExecStatusEvent]", "member" : "sbt.protocol.codec.ExecStatusEventFormats.ExecStatusEventFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#ExecStatusEventFormat:sjsonnew.JsonFormat[sbt.protocol.ExecStatusEvent]", "kind" : "implicit lazy val"}, {"label" : "LogEventFormat", "tail" : ": JsonFormat[LogEvent]", "member" : "sbt.protocol.codec.LogEventFormats.LogEventFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#LogEventFormat:sjsonnew.JsonFormat[sbt.protocol.LogEvent]", "kind" : "implicit lazy val"}, {"label" : "ChannelAcceptedEventFormat", "tail" : ": JsonFormat[ChannelAcceptedEvent]", "member" : "sbt.protocol.codec.ChannelAcceptedEventFormats.ChannelAcceptedEventFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#ChannelAcceptedEventFormat:sjsonnew.JsonFormat[sbt.protocol.ChannelAcceptedEvent]", "kind" : "implicit lazy val"}, {"label" : "CommandMessageFormat", "tail" : ": JsonFormat[CommandMessage]", "member" : "sbt.protocol.codec.CommandMessageFormats.CommandMessageFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#CommandMessageFormat:sjsonnew.JsonFormat[sbt.protocol.CommandMessage]", "kind" : "implicit lazy val"}, {"label" : "SettingQueryFormat", "tail" : ": JsonFormat[SettingQuery]", "member" : "sbt.protocol.codec.SettingQueryFormats.SettingQueryFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#SettingQueryFormat:sjsonnew.JsonFormat[sbt.protocol.SettingQuery]", "kind" : "implicit lazy val"}, {"label" : "ExecCommandFormat", "tail" : ": JsonFormat[ExecCommand]", "member" : "sbt.protocol.codec.ExecCommandFormats.ExecCommandFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#ExecCommandFormat:sjsonnew.JsonFormat[sbt.protocol.ExecCommand]", "kind" : "implicit lazy val"}, {"label" : "stackTraceElementFormat", "tail" : ": JF[StackTraceElement]", "member" : "sjsonnew.ThrowableFormats.stackTraceElementFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#stackTraceElementFormat:ThrowableFormats.this.JF[StackTraceElement]", "kind" : "implicit lazy val"}, {"label" : "throwableFormat", "tail" : ": JF[Throwable]", "member" : "sjsonnew.ThrowableFormats.throwableFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#throwableFormat:ThrowableFormats.this.JF[Throwable]", "kind" : "implicit lazy val"}, {"label" : "caseClassArray22", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], A22: JF[A22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray22", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21],implicitA22:CaseClassFormats.this.JF[A22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass22", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21, key22: K22)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], A22: JF[A22], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19], K20: K[K20], K21: K[K21], K22: K[K22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass22", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass22[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,K22,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21,key22:K22)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21],implicitA22:CaseClassFormats.this.JF[A22],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19],implicitK20:CaseClassFormats.this.K[K20],implicitK21:CaseClassFormats.this.K[K21],implicitK22:CaseClassFormats.this.K[K22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19], arg19: JF[A20], arg20: JF[A21], arg21: JF[A22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$738:CaseClassFormats.this.JF[A1],implicitevidence$739:CaseClassFormats.this.JF[A2],implicitevidence$740:CaseClassFormats.this.JF[A3],implicitevidence$741:CaseClassFormats.this.JF[A4],implicitevidence$742:CaseClassFormats.this.JF[A5],implicitevidence$743:CaseClassFormats.this.JF[A6],implicitevidence$744:CaseClassFormats.this.JF[A7],implicitevidence$745:CaseClassFormats.this.JF[A8],implicitevidence$746:CaseClassFormats.this.JF[A9],implicitevidence$747:CaseClassFormats.this.JF[A10],implicitevidence$748:CaseClassFormats.this.JF[A11],implicitevidence$749:CaseClassFormats.this.JF[A12],implicitevidence$750:CaseClassFormats.this.JF[A13],implicitevidence$751:CaseClassFormats.this.JF[A14],implicitevidence$752:CaseClassFormats.this.JF[A15],implicitevidence$753:CaseClassFormats.this.JF[A16],implicitevidence$754:CaseClassFormats.this.JF[A17],implicitevidence$755:CaseClassFormats.this.JF[A18],implicitevidence$756:CaseClassFormats.this.JF[A19],implicitevidence$757:CaseClassFormats.this.JF[A20],implicitevidence$758:CaseClassFormats.this.JF[A21],implicitevidence$759:CaseClassFormats.this.JF[A22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21, key22: K22)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: K[K20], arg20: K[K21], arg21: K[K22], arg22: JF[A1], arg23: JF[A2], arg24: JF[A3], arg25: JF[A4], arg26: JF[A5], arg27: JF[A6], arg28: JF[A7], arg29: JF[A8], arg30: JF[A9], arg31: JF[A10], arg32: JF[A11], arg33: JF[A12], arg34: JF[A13], arg35: JF[A14], arg36: JF[A15], arg37: JF[A16], arg38: JF[A17], arg39: JF[A18], arg40: JF[A19], arg41: JF[A20], arg42: JF[A21], arg43: JF[A22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,K22,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21,key22:K22)(implicitevidence$694:CaseClassFormats.this.K[K1],implicitevidence$695:CaseClassFormats.this.K[K2],implicitevidence$696:CaseClassFormats.this.K[K3],implicitevidence$697:CaseClassFormats.this.K[K4],implicitevidence$698:CaseClassFormats.this.K[K5],implicitevidence$699:CaseClassFormats.this.K[K6],implicitevidence$700:CaseClassFormats.this.K[K7],implicitevidence$701:CaseClassFormats.this.K[K8],implicitevidence$702:CaseClassFormats.this.K[K9],implicitevidence$703:CaseClassFormats.this.K[K10],implicitevidence$704:CaseClassFormats.this.K[K11],implicitevidence$705:CaseClassFormats.this.K[K12],implicitevidence$706:CaseClassFormats.this.K[K13],implicitevidence$707:CaseClassFormats.this.K[K14],implicitevidence$708:CaseClassFormats.this.K[K15],implicitevidence$709:CaseClassFormats.this.K[K16],implicitevidence$710:CaseClassFormats.this.K[K17],implicitevidence$711:CaseClassFormats.this.K[K18],implicitevidence$712:CaseClassFormats.this.K[K19],implicitevidence$713:CaseClassFormats.this.K[K20],implicitevidence$714:CaseClassFormats.this.K[K21],implicitevidence$715:CaseClassFormats.this.K[K22],implicitevidence$716:CaseClassFormats.this.JF[A1],implicitevidence$717:CaseClassFormats.this.JF[A2],implicitevidence$718:CaseClassFormats.this.JF[A3],implicitevidence$719:CaseClassFormats.this.JF[A4],implicitevidence$720:CaseClassFormats.this.JF[A5],implicitevidence$721:CaseClassFormats.this.JF[A6],implicitevidence$722:CaseClassFormats.this.JF[A7],implicitevidence$723:CaseClassFormats.this.JF[A8],implicitevidence$724:CaseClassFormats.this.JF[A9],implicitevidence$725:CaseClassFormats.this.JF[A10],implicitevidence$726:CaseClassFormats.this.JF[A11],implicitevidence$727:CaseClassFormats.this.JF[A12],implicitevidence$728:CaseClassFormats.this.JF[A13],implicitevidence$729:CaseClassFormats.this.JF[A14],implicitevidence$730:CaseClassFormats.this.JF[A15],implicitevidence$731:CaseClassFormats.this.JF[A16],implicitevidence$732:CaseClassFormats.this.JF[A17],implicitevidence$733:CaseClassFormats.this.JF[A18],implicitevidence$734:CaseClassFormats.this.JF[A19],implicitevidence$735:CaseClassFormats.this.JF[A20],implicitevidence$736:CaseClassFormats.this.JF[A21],implicitevidence$737:CaseClassFormats.this.JF[A22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray21", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray21", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass21", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19], K20: K[K20], K21: K[K21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass21", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass21[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19],implicitK20:CaseClassFormats.this.K[K20],implicitK21:CaseClassFormats.this.K[K21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19], arg19: JF[A20], arg20: JF[A21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$673:CaseClassFormats.this.JF[A1],implicitevidence$674:CaseClassFormats.this.JF[A2],implicitevidence$675:CaseClassFormats.this.JF[A3],implicitevidence$676:CaseClassFormats.this.JF[A4],implicitevidence$677:CaseClassFormats.this.JF[A5],implicitevidence$678:CaseClassFormats.this.JF[A6],implicitevidence$679:CaseClassFormats.this.JF[A7],implicitevidence$680:CaseClassFormats.this.JF[A8],implicitevidence$681:CaseClassFormats.this.JF[A9],implicitevidence$682:CaseClassFormats.this.JF[A10],implicitevidence$683:CaseClassFormats.this.JF[A11],implicitevidence$684:CaseClassFormats.this.JF[A12],implicitevidence$685:CaseClassFormats.this.JF[A13],implicitevidence$686:CaseClassFormats.this.JF[A14],implicitevidence$687:CaseClassFormats.this.JF[A15],implicitevidence$688:CaseClassFormats.this.JF[A16],implicitevidence$689:CaseClassFormats.this.JF[A17],implicitevidence$690:CaseClassFormats.this.JF[A18],implicitevidence$691:CaseClassFormats.this.JF[A19],implicitevidence$692:CaseClassFormats.this.JF[A20],implicitevidence$693:CaseClassFormats.this.JF[A21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: K[K20], arg20: K[K21], arg21: JF[A1], arg22: JF[A2], arg23: JF[A3], arg24: JF[A4], arg25: JF[A5], arg26: JF[A6], arg27: JF[A7], arg28: JF[A8], arg29: JF[A9], arg30: JF[A10], arg31: JF[A11], arg32: JF[A12], arg33: JF[A13], arg34: JF[A14], arg35: JF[A15], arg36: JF[A16], arg37: JF[A17], arg38: JF[A18], arg39: JF[A19], arg40: JF[A20], arg41: JF[A21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21)(implicitevidence$631:CaseClassFormats.this.K[K1],implicitevidence$632:CaseClassFormats.this.K[K2],implicitevidence$633:CaseClassFormats.this.K[K3],implicitevidence$634:CaseClassFormats.this.K[K4],implicitevidence$635:CaseClassFormats.this.K[K5],implicitevidence$636:CaseClassFormats.this.K[K6],implicitevidence$637:CaseClassFormats.this.K[K7],implicitevidence$638:CaseClassFormats.this.K[K8],implicitevidence$639:CaseClassFormats.this.K[K9],implicitevidence$640:CaseClassFormats.this.K[K10],implicitevidence$641:CaseClassFormats.this.K[K11],implicitevidence$642:CaseClassFormats.this.K[K12],implicitevidence$643:CaseClassFormats.this.K[K13],implicitevidence$644:CaseClassFormats.this.K[K14],implicitevidence$645:CaseClassFormats.this.K[K15],implicitevidence$646:CaseClassFormats.this.K[K16],implicitevidence$647:CaseClassFormats.this.K[K17],implicitevidence$648:CaseClassFormats.this.K[K18],implicitevidence$649:CaseClassFormats.this.K[K19],implicitevidence$650:CaseClassFormats.this.K[K20],implicitevidence$651:CaseClassFormats.this.K[K21],implicitevidence$652:CaseClassFormats.this.JF[A1],implicitevidence$653:CaseClassFormats.this.JF[A2],implicitevidence$654:CaseClassFormats.this.JF[A3],implicitevidence$655:CaseClassFormats.this.JF[A4],implicitevidence$656:CaseClassFormats.this.JF[A5],implicitevidence$657:CaseClassFormats.this.JF[A6],implicitevidence$658:CaseClassFormats.this.JF[A7],implicitevidence$659:CaseClassFormats.this.JF[A8],implicitevidence$660:CaseClassFormats.this.JF[A9],implicitevidence$661:CaseClassFormats.this.JF[A10],implicitevidence$662:CaseClassFormats.this.JF[A11],implicitevidence$663:CaseClassFormats.this.JF[A12],implicitevidence$664:CaseClassFormats.this.JF[A13],implicitevidence$665:CaseClassFormats.this.JF[A14],implicitevidence$666:CaseClassFormats.this.JF[A15],implicitevidence$667:CaseClassFormats.this.JF[A16],implicitevidence$668:CaseClassFormats.this.JF[A17],implicitevidence$669:CaseClassFormats.this.JF[A18],implicitevidence$670:CaseClassFormats.this.JF[A19],implicitevidence$671:CaseClassFormats.this.JF[A20],implicitevidence$672:CaseClassFormats.this.JF[A21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray20", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray20", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass20", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19], K20: K[K20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass20", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass20[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19],implicitK20:CaseClassFormats.this.K[K20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19], arg19: JF[A20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$611:CaseClassFormats.this.JF[A1],implicitevidence$612:CaseClassFormats.this.JF[A2],implicitevidence$613:CaseClassFormats.this.JF[A3],implicitevidence$614:CaseClassFormats.this.JF[A4],implicitevidence$615:CaseClassFormats.this.JF[A5],implicitevidence$616:CaseClassFormats.this.JF[A6],implicitevidence$617:CaseClassFormats.this.JF[A7],implicitevidence$618:CaseClassFormats.this.JF[A8],implicitevidence$619:CaseClassFormats.this.JF[A9],implicitevidence$620:CaseClassFormats.this.JF[A10],implicitevidence$621:CaseClassFormats.this.JF[A11],implicitevidence$622:CaseClassFormats.this.JF[A12],implicitevidence$623:CaseClassFormats.this.JF[A13],implicitevidence$624:CaseClassFormats.this.JF[A14],implicitevidence$625:CaseClassFormats.this.JF[A15],implicitevidence$626:CaseClassFormats.this.JF[A16],implicitevidence$627:CaseClassFormats.this.JF[A17],implicitevidence$628:CaseClassFormats.this.JF[A18],implicitevidence$629:CaseClassFormats.this.JF[A19],implicitevidence$630:CaseClassFormats.this.JF[A20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: K[K20], arg20: JF[A1], arg21: JF[A2], arg22: JF[A3], arg23: JF[A4], arg24: JF[A5], arg25: JF[A6], arg26: JF[A7], arg27: JF[A8], arg28: JF[A9], arg29: JF[A10], arg30: JF[A11], arg31: JF[A12], arg32: JF[A13], arg33: JF[A14], arg34: JF[A15], arg35: JF[A16], arg36: JF[A17], arg37: JF[A18], arg38: JF[A19], arg39: JF[A20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20)(implicitevidence$571:CaseClassFormats.this.K[K1],implicitevidence$572:CaseClassFormats.this.K[K2],implicitevidence$573:CaseClassFormats.this.K[K3],implicitevidence$574:CaseClassFormats.this.K[K4],implicitevidence$575:CaseClassFormats.this.K[K5],implicitevidence$576:CaseClassFormats.this.K[K6],implicitevidence$577:CaseClassFormats.this.K[K7],implicitevidence$578:CaseClassFormats.this.K[K8],implicitevidence$579:CaseClassFormats.this.K[K9],implicitevidence$580:CaseClassFormats.this.K[K10],implicitevidence$581:CaseClassFormats.this.K[K11],implicitevidence$582:CaseClassFormats.this.K[K12],implicitevidence$583:CaseClassFormats.this.K[K13],implicitevidence$584:CaseClassFormats.this.K[K14],implicitevidence$585:CaseClassFormats.this.K[K15],implicitevidence$586:CaseClassFormats.this.K[K16],implicitevidence$587:CaseClassFormats.this.K[K17],implicitevidence$588:CaseClassFormats.this.K[K18],implicitevidence$589:CaseClassFormats.this.K[K19],implicitevidence$590:CaseClassFormats.this.K[K20],implicitevidence$591:CaseClassFormats.this.JF[A1],implicitevidence$592:CaseClassFormats.this.JF[A2],implicitevidence$593:CaseClassFormats.this.JF[A3],implicitevidence$594:CaseClassFormats.this.JF[A4],implicitevidence$595:CaseClassFormats.this.JF[A5],implicitevidence$596:CaseClassFormats.this.JF[A6],implicitevidence$597:CaseClassFormats.this.JF[A7],implicitevidence$598:CaseClassFormats.this.JF[A8],implicitevidence$599:CaseClassFormats.this.JF[A9],implicitevidence$600:CaseClassFormats.this.JF[A10],implicitevidence$601:CaseClassFormats.this.JF[A11],implicitevidence$602:CaseClassFormats.this.JF[A12],implicitevidence$603:CaseClassFormats.this.JF[A13],implicitevidence$604:CaseClassFormats.this.JF[A14],implicitevidence$605:CaseClassFormats.this.JF[A15],implicitevidence$606:CaseClassFormats.this.JF[A16],implicitevidence$607:CaseClassFormats.this.JF[A17],implicitevidence$608:CaseClassFormats.this.JF[A18],implicitevidence$609:CaseClassFormats.this.JF[A19],implicitevidence$610:CaseClassFormats.this.JF[A20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray19", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray19", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass19", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass19", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass19[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$552:CaseClassFormats.this.JF[A1],implicitevidence$553:CaseClassFormats.this.JF[A2],implicitevidence$554:CaseClassFormats.this.JF[A3],implicitevidence$555:CaseClassFormats.this.JF[A4],implicitevidence$556:CaseClassFormats.this.JF[A5],implicitevidence$557:CaseClassFormats.this.JF[A6],implicitevidence$558:CaseClassFormats.this.JF[A7],implicitevidence$559:CaseClassFormats.this.JF[A8],implicitevidence$560:CaseClassFormats.this.JF[A9],implicitevidence$561:CaseClassFormats.this.JF[A10],implicitevidence$562:CaseClassFormats.this.JF[A11],implicitevidence$563:CaseClassFormats.this.JF[A12],implicitevidence$564:CaseClassFormats.this.JF[A13],implicitevidence$565:CaseClassFormats.this.JF[A14],implicitevidence$566:CaseClassFormats.this.JF[A15],implicitevidence$567:CaseClassFormats.this.JF[A16],implicitevidence$568:CaseClassFormats.this.JF[A17],implicitevidence$569:CaseClassFormats.this.JF[A18],implicitevidence$570:CaseClassFormats.this.JF[A19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: JF[A1], arg20: JF[A2], arg21: JF[A3], arg22: JF[A4], arg23: JF[A5], arg24: JF[A6], arg25: JF[A7], arg26: JF[A8], arg27: JF[A9], arg28: JF[A10], arg29: JF[A11], arg30: JF[A12], arg31: JF[A13], arg32: JF[A14], arg33: JF[A15], arg34: JF[A16], arg35: JF[A17], arg36: JF[A18], arg37: JF[A19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19)(implicitevidence$514:CaseClassFormats.this.K[K1],implicitevidence$515:CaseClassFormats.this.K[K2],implicitevidence$516:CaseClassFormats.this.K[K3],implicitevidence$517:CaseClassFormats.this.K[K4],implicitevidence$518:CaseClassFormats.this.K[K5],implicitevidence$519:CaseClassFormats.this.K[K6],implicitevidence$520:CaseClassFormats.this.K[K7],implicitevidence$521:CaseClassFormats.this.K[K8],implicitevidence$522:CaseClassFormats.this.K[K9],implicitevidence$523:CaseClassFormats.this.K[K10],implicitevidence$524:CaseClassFormats.this.K[K11],implicitevidence$525:CaseClassFormats.this.K[K12],implicitevidence$526:CaseClassFormats.this.K[K13],implicitevidence$527:CaseClassFormats.this.K[K14],implicitevidence$528:CaseClassFormats.this.K[K15],implicitevidence$529:CaseClassFormats.this.K[K16],implicitevidence$530:CaseClassFormats.this.K[K17],implicitevidence$531:CaseClassFormats.this.K[K18],implicitevidence$532:CaseClassFormats.this.K[K19],implicitevidence$533:CaseClassFormats.this.JF[A1],implicitevidence$534:CaseClassFormats.this.JF[A2],implicitevidence$535:CaseClassFormats.this.JF[A3],implicitevidence$536:CaseClassFormats.this.JF[A4],implicitevidence$537:CaseClassFormats.this.JF[A5],implicitevidence$538:CaseClassFormats.this.JF[A6],implicitevidence$539:CaseClassFormats.this.JF[A7],implicitevidence$540:CaseClassFormats.this.JF[A8],implicitevidence$541:CaseClassFormats.this.JF[A9],implicitevidence$542:CaseClassFormats.this.JF[A10],implicitevidence$543:CaseClassFormats.this.JF[A11],implicitevidence$544:CaseClassFormats.this.JF[A12],implicitevidence$545:CaseClassFormats.this.JF[A13],implicitevidence$546:CaseClassFormats.this.JF[A14],implicitevidence$547:CaseClassFormats.this.JF[A15],implicitevidence$548:CaseClassFormats.this.JF[A16],implicitevidence$549:CaseClassFormats.this.JF[A17],implicitevidence$550:CaseClassFormats.this.JF[A18],implicitevidence$551:CaseClassFormats.this.JF[A19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray18", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray18", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass18", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass18", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass18[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$496:CaseClassFormats.this.JF[A1],implicitevidence$497:CaseClassFormats.this.JF[A2],implicitevidence$498:CaseClassFormats.this.JF[A3],implicitevidence$499:CaseClassFormats.this.JF[A4],implicitevidence$500:CaseClassFormats.this.JF[A5],implicitevidence$501:CaseClassFormats.this.JF[A6],implicitevidence$502:CaseClassFormats.this.JF[A7],implicitevidence$503:CaseClassFormats.this.JF[A8],implicitevidence$504:CaseClassFormats.this.JF[A9],implicitevidence$505:CaseClassFormats.this.JF[A10],implicitevidence$506:CaseClassFormats.this.JF[A11],implicitevidence$507:CaseClassFormats.this.JF[A12],implicitevidence$508:CaseClassFormats.this.JF[A13],implicitevidence$509:CaseClassFormats.this.JF[A14],implicitevidence$510:CaseClassFormats.this.JF[A15],implicitevidence$511:CaseClassFormats.this.JF[A16],implicitevidence$512:CaseClassFormats.this.JF[A17],implicitevidence$513:CaseClassFormats.this.JF[A18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: JF[A1], arg19: JF[A2], arg20: JF[A3], arg21: JF[A4], arg22: JF[A5], arg23: JF[A6], arg24: JF[A7], arg25: JF[A8], arg26: JF[A9], arg27: JF[A10], arg28: JF[A11], arg29: JF[A12], arg30: JF[A13], arg31: JF[A14], arg32: JF[A15], arg33: JF[A16], arg34: JF[A17], arg35: JF[A18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18)(implicitevidence$460:CaseClassFormats.this.K[K1],implicitevidence$461:CaseClassFormats.this.K[K2],implicitevidence$462:CaseClassFormats.this.K[K3],implicitevidence$463:CaseClassFormats.this.K[K4],implicitevidence$464:CaseClassFormats.this.K[K5],implicitevidence$465:CaseClassFormats.this.K[K6],implicitevidence$466:CaseClassFormats.this.K[K7],implicitevidence$467:CaseClassFormats.this.K[K8],implicitevidence$468:CaseClassFormats.this.K[K9],implicitevidence$469:CaseClassFormats.this.K[K10],implicitevidence$470:CaseClassFormats.this.K[K11],implicitevidence$471:CaseClassFormats.this.K[K12],implicitevidence$472:CaseClassFormats.this.K[K13],implicitevidence$473:CaseClassFormats.this.K[K14],implicitevidence$474:CaseClassFormats.this.K[K15],implicitevidence$475:CaseClassFormats.this.K[K16],implicitevidence$476:CaseClassFormats.this.K[K17],implicitevidence$477:CaseClassFormats.this.K[K18],implicitevidence$478:CaseClassFormats.this.JF[A1],implicitevidence$479:CaseClassFormats.this.JF[A2],implicitevidence$480:CaseClassFormats.this.JF[A3],implicitevidence$481:CaseClassFormats.this.JF[A4],implicitevidence$482:CaseClassFormats.this.JF[A5],implicitevidence$483:CaseClassFormats.this.JF[A6],implicitevidence$484:CaseClassFormats.this.JF[A7],implicitevidence$485:CaseClassFormats.this.JF[A8],implicitevidence$486:CaseClassFormats.this.JF[A9],implicitevidence$487:CaseClassFormats.this.JF[A10],implicitevidence$488:CaseClassFormats.this.JF[A11],implicitevidence$489:CaseClassFormats.this.JF[A12],implicitevidence$490:CaseClassFormats.this.JF[A13],implicitevidence$491:CaseClassFormats.this.JF[A14],implicitevidence$492:CaseClassFormats.this.JF[A15],implicitevidence$493:CaseClassFormats.this.JF[A16],implicitevidence$494:CaseClassFormats.this.JF[A17],implicitevidence$495:CaseClassFormats.this.JF[A18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray17", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray17", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass17", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass17", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass17[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$443:CaseClassFormats.this.JF[A1],implicitevidence$444:CaseClassFormats.this.JF[A2],implicitevidence$445:CaseClassFormats.this.JF[A3],implicitevidence$446:CaseClassFormats.this.JF[A4],implicitevidence$447:CaseClassFormats.this.JF[A5],implicitevidence$448:CaseClassFormats.this.JF[A6],implicitevidence$449:CaseClassFormats.this.JF[A7],implicitevidence$450:CaseClassFormats.this.JF[A8],implicitevidence$451:CaseClassFormats.this.JF[A9],implicitevidence$452:CaseClassFormats.this.JF[A10],implicitevidence$453:CaseClassFormats.this.JF[A11],implicitevidence$454:CaseClassFormats.this.JF[A12],implicitevidence$455:CaseClassFormats.this.JF[A13],implicitevidence$456:CaseClassFormats.this.JF[A14],implicitevidence$457:CaseClassFormats.this.JF[A15],implicitevidence$458:CaseClassFormats.this.JF[A16],implicitevidence$459:CaseClassFormats.this.JF[A17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: JF[A1], arg18: JF[A2], arg19: JF[A3], arg20: JF[A4], arg21: JF[A5], arg22: JF[A6], arg23: JF[A7], arg24: JF[A8], arg25: JF[A9], arg26: JF[A10], arg27: JF[A11], arg28: JF[A12], arg29: JF[A13], arg30: JF[A14], arg31: JF[A15], arg32: JF[A16], arg33: JF[A17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17)(implicitevidence$409:CaseClassFormats.this.K[K1],implicitevidence$410:CaseClassFormats.this.K[K2],implicitevidence$411:CaseClassFormats.this.K[K3],implicitevidence$412:CaseClassFormats.this.K[K4],implicitevidence$413:CaseClassFormats.this.K[K5],implicitevidence$414:CaseClassFormats.this.K[K6],implicitevidence$415:CaseClassFormats.this.K[K7],implicitevidence$416:CaseClassFormats.this.K[K8],implicitevidence$417:CaseClassFormats.this.K[K9],implicitevidence$418:CaseClassFormats.this.K[K10],implicitevidence$419:CaseClassFormats.this.K[K11],implicitevidence$420:CaseClassFormats.this.K[K12],implicitevidence$421:CaseClassFormats.this.K[K13],implicitevidence$422:CaseClassFormats.this.K[K14],implicitevidence$423:CaseClassFormats.this.K[K15],implicitevidence$424:CaseClassFormats.this.K[K16],implicitevidence$425:CaseClassFormats.this.K[K17],implicitevidence$426:CaseClassFormats.this.JF[A1],implicitevidence$427:CaseClassFormats.this.JF[A2],implicitevidence$428:CaseClassFormats.this.JF[A3],implicitevidence$429:CaseClassFormats.this.JF[A4],implicitevidence$430:CaseClassFormats.this.JF[A5],implicitevidence$431:CaseClassFormats.this.JF[A6],implicitevidence$432:CaseClassFormats.this.JF[A7],implicitevidence$433:CaseClassFormats.this.JF[A8],implicitevidence$434:CaseClassFormats.this.JF[A9],implicitevidence$435:CaseClassFormats.this.JF[A10],implicitevidence$436:CaseClassFormats.this.JF[A11],implicitevidence$437:CaseClassFormats.this.JF[A12],implicitevidence$438:CaseClassFormats.this.JF[A13],implicitevidence$439:CaseClassFormats.this.JF[A14],implicitevidence$440:CaseClassFormats.this.JF[A15],implicitevidence$441:CaseClassFormats.this.JF[A16],implicitevidence$442:CaseClassFormats.this.JF[A17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray16", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray16", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass16", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass16", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass16[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$393:CaseClassFormats.this.JF[A1],implicitevidence$394:CaseClassFormats.this.JF[A2],implicitevidence$395:CaseClassFormats.this.JF[A3],implicitevidence$396:CaseClassFormats.this.JF[A4],implicitevidence$397:CaseClassFormats.this.JF[A5],implicitevidence$398:CaseClassFormats.this.JF[A6],implicitevidence$399:CaseClassFormats.this.JF[A7],implicitevidence$400:CaseClassFormats.this.JF[A8],implicitevidence$401:CaseClassFormats.this.JF[A9],implicitevidence$402:CaseClassFormats.this.JF[A10],implicitevidence$403:CaseClassFormats.this.JF[A11],implicitevidence$404:CaseClassFormats.this.JF[A12],implicitevidence$405:CaseClassFormats.this.JF[A13],implicitevidence$406:CaseClassFormats.this.JF[A14],implicitevidence$407:CaseClassFormats.this.JF[A15],implicitevidence$408:CaseClassFormats.this.JF[A16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: JF[A1], arg17: JF[A2], arg18: JF[A3], arg19: JF[A4], arg20: JF[A5], arg21: JF[A6], arg22: JF[A7], arg23: JF[A8], arg24: JF[A9], arg25: JF[A10], arg26: JF[A11], arg27: JF[A12], arg28: JF[A13], arg29: JF[A14], arg30: JF[A15], arg31: JF[A16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16)(implicitevidence$361:CaseClassFormats.this.K[K1],implicitevidence$362:CaseClassFormats.this.K[K2],implicitevidence$363:CaseClassFormats.this.K[K3],implicitevidence$364:CaseClassFormats.this.K[K4],implicitevidence$365:CaseClassFormats.this.K[K5],implicitevidence$366:CaseClassFormats.this.K[K6],implicitevidence$367:CaseClassFormats.this.K[K7],implicitevidence$368:CaseClassFormats.this.K[K8],implicitevidence$369:CaseClassFormats.this.K[K9],implicitevidence$370:CaseClassFormats.this.K[K10],implicitevidence$371:CaseClassFormats.this.K[K11],implicitevidence$372:CaseClassFormats.this.K[K12],implicitevidence$373:CaseClassFormats.this.K[K13],implicitevidence$374:CaseClassFormats.this.K[K14],implicitevidence$375:CaseClassFormats.this.K[K15],implicitevidence$376:CaseClassFormats.this.K[K16],implicitevidence$377:CaseClassFormats.this.JF[A1],implicitevidence$378:CaseClassFormats.this.JF[A2],implicitevidence$379:CaseClassFormats.this.JF[A3],implicitevidence$380:CaseClassFormats.this.JF[A4],implicitevidence$381:CaseClassFormats.this.JF[A5],implicitevidence$382:CaseClassFormats.this.JF[A6],implicitevidence$383:CaseClassFormats.this.JF[A7],implicitevidence$384:CaseClassFormats.this.JF[A8],implicitevidence$385:CaseClassFormats.this.JF[A9],implicitevidence$386:CaseClassFormats.this.JF[A10],implicitevidence$387:CaseClassFormats.this.JF[A11],implicitevidence$388:CaseClassFormats.this.JF[A12],implicitevidence$389:CaseClassFormats.this.JF[A13],implicitevidence$390:CaseClassFormats.this.JF[A14],implicitevidence$391:CaseClassFormats.this.JF[A15],implicitevidence$392:CaseClassFormats.this.JF[A16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray15", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray15", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass15", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass15", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass15[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$346:CaseClassFormats.this.JF[A1],implicitevidence$347:CaseClassFormats.this.JF[A2],implicitevidence$348:CaseClassFormats.this.JF[A3],implicitevidence$349:CaseClassFormats.this.JF[A4],implicitevidence$350:CaseClassFormats.this.JF[A5],implicitevidence$351:CaseClassFormats.this.JF[A6],implicitevidence$352:CaseClassFormats.this.JF[A7],implicitevidence$353:CaseClassFormats.this.JF[A8],implicitevidence$354:CaseClassFormats.this.JF[A9],implicitevidence$355:CaseClassFormats.this.JF[A10],implicitevidence$356:CaseClassFormats.this.JF[A11],implicitevidence$357:CaseClassFormats.this.JF[A12],implicitevidence$358:CaseClassFormats.this.JF[A13],implicitevidence$359:CaseClassFormats.this.JF[A14],implicitevidence$360:CaseClassFormats.this.JF[A15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: JF[A1], arg16: JF[A2], arg17: JF[A3], arg18: JF[A4], arg19: JF[A5], arg20: JF[A6], arg21: JF[A7], arg22: JF[A8], arg23: JF[A9], arg24: JF[A10], arg25: JF[A11], arg26: JF[A12], arg27: JF[A13], arg28: JF[A14], arg29: JF[A15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15)(implicitevidence$316:CaseClassFormats.this.K[K1],implicitevidence$317:CaseClassFormats.this.K[K2],implicitevidence$318:CaseClassFormats.this.K[K3],implicitevidence$319:CaseClassFormats.this.K[K4],implicitevidence$320:CaseClassFormats.this.K[K5],implicitevidence$321:CaseClassFormats.this.K[K6],implicitevidence$322:CaseClassFormats.this.K[K7],implicitevidence$323:CaseClassFormats.this.K[K8],implicitevidence$324:CaseClassFormats.this.K[K9],implicitevidence$325:CaseClassFormats.this.K[K10],implicitevidence$326:CaseClassFormats.this.K[K11],implicitevidence$327:CaseClassFormats.this.K[K12],implicitevidence$328:CaseClassFormats.this.K[K13],implicitevidence$329:CaseClassFormats.this.K[K14],implicitevidence$330:CaseClassFormats.this.K[K15],implicitevidence$331:CaseClassFormats.this.JF[A1],implicitevidence$332:CaseClassFormats.this.JF[A2],implicitevidence$333:CaseClassFormats.this.JF[A3],implicitevidence$334:CaseClassFormats.this.JF[A4],implicitevidence$335:CaseClassFormats.this.JF[A5],implicitevidence$336:CaseClassFormats.this.JF[A6],implicitevidence$337:CaseClassFormats.this.JF[A7],implicitevidence$338:CaseClassFormats.this.JF[A8],implicitevidence$339:CaseClassFormats.this.JF[A9],implicitevidence$340:CaseClassFormats.this.JF[A10],implicitevidence$341:CaseClassFormats.this.JF[A11],implicitevidence$342:CaseClassFormats.this.JF[A12],implicitevidence$343:CaseClassFormats.this.JF[A13],implicitevidence$344:CaseClassFormats.this.JF[A14],implicitevidence$345:CaseClassFormats.this.JF[A15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray14", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray14", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass14", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass14", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass14[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$302:CaseClassFormats.this.JF[A1],implicitevidence$303:CaseClassFormats.this.JF[A2],implicitevidence$304:CaseClassFormats.this.JF[A3],implicitevidence$305:CaseClassFormats.this.JF[A4],implicitevidence$306:CaseClassFormats.this.JF[A5],implicitevidence$307:CaseClassFormats.this.JF[A6],implicitevidence$308:CaseClassFormats.this.JF[A7],implicitevidence$309:CaseClassFormats.this.JF[A8],implicitevidence$310:CaseClassFormats.this.JF[A9],implicitevidence$311:CaseClassFormats.this.JF[A10],implicitevidence$312:CaseClassFormats.this.JF[A11],implicitevidence$313:CaseClassFormats.this.JF[A12],implicitevidence$314:CaseClassFormats.this.JF[A13],implicitevidence$315:CaseClassFormats.this.JF[A14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: JF[A1], arg15: JF[A2], arg16: JF[A3], arg17: JF[A4], arg18: JF[A5], arg19: JF[A6], arg20: JF[A7], arg21: JF[A8], arg22: JF[A9], arg23: JF[A10], arg24: JF[A11], arg25: JF[A12], arg26: JF[A13], arg27: JF[A14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14)(implicitevidence$274:CaseClassFormats.this.K[K1],implicitevidence$275:CaseClassFormats.this.K[K2],implicitevidence$276:CaseClassFormats.this.K[K3],implicitevidence$277:CaseClassFormats.this.K[K4],implicitevidence$278:CaseClassFormats.this.K[K5],implicitevidence$279:CaseClassFormats.this.K[K6],implicitevidence$280:CaseClassFormats.this.K[K7],implicitevidence$281:CaseClassFormats.this.K[K8],implicitevidence$282:CaseClassFormats.this.K[K9],implicitevidence$283:CaseClassFormats.this.K[K10],implicitevidence$284:CaseClassFormats.this.K[K11],implicitevidence$285:CaseClassFormats.this.K[K12],implicitevidence$286:CaseClassFormats.this.K[K13],implicitevidence$287:CaseClassFormats.this.K[K14],implicitevidence$288:CaseClassFormats.this.JF[A1],implicitevidence$289:CaseClassFormats.this.JF[A2],implicitevidence$290:CaseClassFormats.this.JF[A3],implicitevidence$291:CaseClassFormats.this.JF[A4],implicitevidence$292:CaseClassFormats.this.JF[A5],implicitevidence$293:CaseClassFormats.this.JF[A6],implicitevidence$294:CaseClassFormats.this.JF[A7],implicitevidence$295:CaseClassFormats.this.JF[A8],implicitevidence$296:CaseClassFormats.this.JF[A9],implicitevidence$297:CaseClassFormats.this.JF[A10],implicitevidence$298:CaseClassFormats.this.JF[A11],implicitevidence$299:CaseClassFormats.this.JF[A12],implicitevidence$300:CaseClassFormats.this.JF[A13],implicitevidence$301:CaseClassFormats.this.JF[A14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray13", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray13", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass13", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass13", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass13[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$261:CaseClassFormats.this.JF[A1],implicitevidence$262:CaseClassFormats.this.JF[A2],implicitevidence$263:CaseClassFormats.this.JF[A3],implicitevidence$264:CaseClassFormats.this.JF[A4],implicitevidence$265:CaseClassFormats.this.JF[A5],implicitevidence$266:CaseClassFormats.this.JF[A6],implicitevidence$267:CaseClassFormats.this.JF[A7],implicitevidence$268:CaseClassFormats.this.JF[A8],implicitevidence$269:CaseClassFormats.this.JF[A9],implicitevidence$270:CaseClassFormats.this.JF[A10],implicitevidence$271:CaseClassFormats.this.JF[A11],implicitevidence$272:CaseClassFormats.this.JF[A12],implicitevidence$273:CaseClassFormats.this.JF[A13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: JF[A1], arg14: JF[A2], arg15: JF[A3], arg16: JF[A4], arg17: JF[A5], arg18: JF[A6], arg19: JF[A7], arg20: JF[A8], arg21: JF[A9], arg22: JF[A10], arg23: JF[A11], arg24: JF[A12], arg25: JF[A13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13)(implicitevidence$235:CaseClassFormats.this.K[K1],implicitevidence$236:CaseClassFormats.this.K[K2],implicitevidence$237:CaseClassFormats.this.K[K3],implicitevidence$238:CaseClassFormats.this.K[K4],implicitevidence$239:CaseClassFormats.this.K[K5],implicitevidence$240:CaseClassFormats.this.K[K6],implicitevidence$241:CaseClassFormats.this.K[K7],implicitevidence$242:CaseClassFormats.this.K[K8],implicitevidence$243:CaseClassFormats.this.K[K9],implicitevidence$244:CaseClassFormats.this.K[K10],implicitevidence$245:CaseClassFormats.this.K[K11],implicitevidence$246:CaseClassFormats.this.K[K12],implicitevidence$247:CaseClassFormats.this.K[K13],implicitevidence$248:CaseClassFormats.this.JF[A1],implicitevidence$249:CaseClassFormats.this.JF[A2],implicitevidence$250:CaseClassFormats.this.JF[A3],implicitevidence$251:CaseClassFormats.this.JF[A4],implicitevidence$252:CaseClassFormats.this.JF[A5],implicitevidence$253:CaseClassFormats.this.JF[A6],implicitevidence$254:CaseClassFormats.this.JF[A7],implicitevidence$255:CaseClassFormats.this.JF[A8],implicitevidence$256:CaseClassFormats.this.JF[A9],implicitevidence$257:CaseClassFormats.this.JF[A10],implicitevidence$258:CaseClassFormats.this.JF[A11],implicitevidence$259:CaseClassFormats.this.JF[A12],implicitevidence$260:CaseClassFormats.this.JF[A13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray12", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray12", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass12", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass12", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass12[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$223:CaseClassFormats.this.JF[A1],implicitevidence$224:CaseClassFormats.this.JF[A2],implicitevidence$225:CaseClassFormats.this.JF[A3],implicitevidence$226:CaseClassFormats.this.JF[A4],implicitevidence$227:CaseClassFormats.this.JF[A5],implicitevidence$228:CaseClassFormats.this.JF[A6],implicitevidence$229:CaseClassFormats.this.JF[A7],implicitevidence$230:CaseClassFormats.this.JF[A8],implicitevidence$231:CaseClassFormats.this.JF[A9],implicitevidence$232:CaseClassFormats.this.JF[A10],implicitevidence$233:CaseClassFormats.this.JF[A11],implicitevidence$234:CaseClassFormats.this.JF[A12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: JF[A1], arg13: JF[A2], arg14: JF[A3], arg15: JF[A4], arg16: JF[A5], arg17: JF[A6], arg18: JF[A7], arg19: JF[A8], arg20: JF[A9], arg21: JF[A10], arg22: JF[A11], arg23: JF[A12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12)(implicitevidence$199:CaseClassFormats.this.K[K1],implicitevidence$200:CaseClassFormats.this.K[K2],implicitevidence$201:CaseClassFormats.this.K[K3],implicitevidence$202:CaseClassFormats.this.K[K4],implicitevidence$203:CaseClassFormats.this.K[K5],implicitevidence$204:CaseClassFormats.this.K[K6],implicitevidence$205:CaseClassFormats.this.K[K7],implicitevidence$206:CaseClassFormats.this.K[K8],implicitevidence$207:CaseClassFormats.this.K[K9],implicitevidence$208:CaseClassFormats.this.K[K10],implicitevidence$209:CaseClassFormats.this.K[K11],implicitevidence$210:CaseClassFormats.this.K[K12],implicitevidence$211:CaseClassFormats.this.JF[A1],implicitevidence$212:CaseClassFormats.this.JF[A2],implicitevidence$213:CaseClassFormats.this.JF[A3],implicitevidence$214:CaseClassFormats.this.JF[A4],implicitevidence$215:CaseClassFormats.this.JF[A5],implicitevidence$216:CaseClassFormats.this.JF[A6],implicitevidence$217:CaseClassFormats.this.JF[A7],implicitevidence$218:CaseClassFormats.this.JF[A8],implicitevidence$219:CaseClassFormats.this.JF[A9],implicitevidence$220:CaseClassFormats.this.JF[A10],implicitevidence$221:CaseClassFormats.this.JF[A11],implicitevidence$222:CaseClassFormats.this.JF[A12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray11", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray11", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass11", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass11", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass11[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$188:CaseClassFormats.this.JF[A1],implicitevidence$189:CaseClassFormats.this.JF[A2],implicitevidence$190:CaseClassFormats.this.JF[A3],implicitevidence$191:CaseClassFormats.this.JF[A4],implicitevidence$192:CaseClassFormats.this.JF[A5],implicitevidence$193:CaseClassFormats.this.JF[A6],implicitevidence$194:CaseClassFormats.this.JF[A7],implicitevidence$195:CaseClassFormats.this.JF[A8],implicitevidence$196:CaseClassFormats.this.JF[A9],implicitevidence$197:CaseClassFormats.this.JF[A10],implicitevidence$198:CaseClassFormats.this.JF[A11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: JF[A1], arg12: JF[A2], arg13: JF[A3], arg14: JF[A4], arg15: JF[A5], arg16: JF[A6], arg17: JF[A7], arg18: JF[A8], arg19: JF[A9], arg20: JF[A10], arg21: JF[A11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11)(implicitevidence$166:CaseClassFormats.this.K[K1],implicitevidence$167:CaseClassFormats.this.K[K2],implicitevidence$168:CaseClassFormats.this.K[K3],implicitevidence$169:CaseClassFormats.this.K[K4],implicitevidence$170:CaseClassFormats.this.K[K5],implicitevidence$171:CaseClassFormats.this.K[K6],implicitevidence$172:CaseClassFormats.this.K[K7],implicitevidence$173:CaseClassFormats.this.K[K8],implicitevidence$174:CaseClassFormats.this.K[K9],implicitevidence$175:CaseClassFormats.this.K[K10],implicitevidence$176:CaseClassFormats.this.K[K11],implicitevidence$177:CaseClassFormats.this.JF[A1],implicitevidence$178:CaseClassFormats.this.JF[A2],implicitevidence$179:CaseClassFormats.this.JF[A3],implicitevidence$180:CaseClassFormats.this.JF[A4],implicitevidence$181:CaseClassFormats.this.JF[A5],implicitevidence$182:CaseClassFormats.this.JF[A6],implicitevidence$183:CaseClassFormats.this.JF[A7],implicitevidence$184:CaseClassFormats.this.JF[A8],implicitevidence$185:CaseClassFormats.this.JF[A9],implicitevidence$186:CaseClassFormats.this.JF[A10],implicitevidence$187:CaseClassFormats.this.JF[A11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray10", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray10", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass10", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass10", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass10[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$156:CaseClassFormats.this.JF[A1],implicitevidence$157:CaseClassFormats.this.JF[A2],implicitevidence$158:CaseClassFormats.this.JF[A3],implicitevidence$159:CaseClassFormats.this.JF[A4],implicitevidence$160:CaseClassFormats.this.JF[A5],implicitevidence$161:CaseClassFormats.this.JF[A6],implicitevidence$162:CaseClassFormats.this.JF[A7],implicitevidence$163:CaseClassFormats.this.JF[A8],implicitevidence$164:CaseClassFormats.this.JF[A9],implicitevidence$165:CaseClassFormats.this.JF[A10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: JF[A1], arg11: JF[A2], arg12: JF[A3], arg13: JF[A4], arg14: JF[A5], arg15: JF[A6], arg16: JF[A7], arg17: JF[A8], arg18: JF[A9], arg19: JF[A10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10)(implicitevidence$136:CaseClassFormats.this.K[K1],implicitevidence$137:CaseClassFormats.this.K[K2],implicitevidence$138:CaseClassFormats.this.K[K3],implicitevidence$139:CaseClassFormats.this.K[K4],implicitevidence$140:CaseClassFormats.this.K[K5],implicitevidence$141:CaseClassFormats.this.K[K6],implicitevidence$142:CaseClassFormats.this.K[K7],implicitevidence$143:CaseClassFormats.this.K[K8],implicitevidence$144:CaseClassFormats.this.K[K9],implicitevidence$145:CaseClassFormats.this.K[K10],implicitevidence$146:CaseClassFormats.this.JF[A1],implicitevidence$147:CaseClassFormats.this.JF[A2],implicitevidence$148:CaseClassFormats.this.JF[A3],implicitevidence$149:CaseClassFormats.this.JF[A4],implicitevidence$150:CaseClassFormats.this.JF[A5],implicitevidence$151:CaseClassFormats.this.JF[A6],implicitevidence$152:CaseClassFormats.this.JF[A7],implicitevidence$153:CaseClassFormats.this.JF[A8],implicitevidence$154:CaseClassFormats.this.JF[A9],implicitevidence$155:CaseClassFormats.this.JF[A10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray9", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray9", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray9[A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass9", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass9", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass9[K1,K2,K3,K4,K5,K6,K7,K8,K9,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$127:CaseClassFormats.this.JF[A1],implicitevidence$128:CaseClassFormats.this.JF[A2],implicitevidence$129:CaseClassFormats.this.JF[A3],implicitevidence$130:CaseClassFormats.this.JF[A4],implicitevidence$131:CaseClassFormats.this.JF[A5],implicitevidence$132:CaseClassFormats.this.JF[A6],implicitevidence$133:CaseClassFormats.this.JF[A7],implicitevidence$134:CaseClassFormats.this.JF[A8],implicitevidence$135:CaseClassFormats.this.JF[A9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: JF[A1], arg10: JF[A2], arg11: JF[A3], arg12: JF[A4], arg13: JF[A5], arg14: JF[A6], arg15: JF[A7], arg16: JF[A8], arg17: JF[A9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9)(implicitevidence$109:CaseClassFormats.this.K[K1],implicitevidence$110:CaseClassFormats.this.K[K2],implicitevidence$111:CaseClassFormats.this.K[K3],implicitevidence$112:CaseClassFormats.this.K[K4],implicitevidence$113:CaseClassFormats.this.K[K5],implicitevidence$114:CaseClassFormats.this.K[K6],implicitevidence$115:CaseClassFormats.this.K[K7],implicitevidence$116:CaseClassFormats.this.K[K8],implicitevidence$117:CaseClassFormats.this.K[K9],implicitevidence$118:CaseClassFormats.this.JF[A1],implicitevidence$119:CaseClassFormats.this.JF[A2],implicitevidence$120:CaseClassFormats.this.JF[A3],implicitevidence$121:CaseClassFormats.this.JF[A4],implicitevidence$122:CaseClassFormats.this.JF[A5],implicitevidence$123:CaseClassFormats.this.JF[A6],implicitevidence$124:CaseClassFormats.this.JF[A7],implicitevidence$125:CaseClassFormats.this.JF[A8],implicitevidence$126:CaseClassFormats.this.JF[A9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray8", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray8", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray8[A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass8", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass8", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass8[K1,K2,K3,K4,K5,K6,K7,K8,A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$101:CaseClassFormats.this.JF[A1],implicitevidence$102:CaseClassFormats.this.JF[A2],implicitevidence$103:CaseClassFormats.this.JF[A3],implicitevidence$104:CaseClassFormats.this.JF[A4],implicitevidence$105:CaseClassFormats.this.JF[A5],implicitevidence$106:CaseClassFormats.this.JF[A6],implicitevidence$107:CaseClassFormats.this.JF[A7],implicitevidence$108:CaseClassFormats.this.JF[A8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: JF[A1], arg9: JF[A2], arg10: JF[A3], arg11: JF[A4], arg12: JF[A5], arg13: JF[A6], arg14: JF[A7], arg15: JF[A8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8)(implicitevidence$85:CaseClassFormats.this.K[K1],implicitevidence$86:CaseClassFormats.this.K[K2],implicitevidence$87:CaseClassFormats.this.K[K3],implicitevidence$88:CaseClassFormats.this.K[K4],implicitevidence$89:CaseClassFormats.this.K[K5],implicitevidence$90:CaseClassFormats.this.K[K6],implicitevidence$91:CaseClassFormats.this.K[K7],implicitevidence$92:CaseClassFormats.this.K[K8],implicitevidence$93:CaseClassFormats.this.JF[A1],implicitevidence$94:CaseClassFormats.this.JF[A2],implicitevidence$95:CaseClassFormats.this.JF[A3],implicitevidence$96:CaseClassFormats.this.JF[A4],implicitevidence$97:CaseClassFormats.this.JF[A5],implicitevidence$98:CaseClassFormats.this.JF[A6],implicitevidence$99:CaseClassFormats.this.JF[A7],implicitevidence$100:CaseClassFormats.this.JF[A8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray7", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray7", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray7[A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass7", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass7", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass7[K1,K2,K3,K4,K5,K6,K7,A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$78:CaseClassFormats.this.JF[A1],implicitevidence$79:CaseClassFormats.this.JF[A2],implicitevidence$80:CaseClassFormats.this.JF[A3],implicitevidence$81:CaseClassFormats.this.JF[A4],implicitevidence$82:CaseClassFormats.this.JF[A5],implicitevidence$83:CaseClassFormats.this.JF[A6],implicitevidence$84:CaseClassFormats.this.JF[A7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: JF[A1], arg8: JF[A2], arg9: JF[A3], arg10: JF[A4], arg11: JF[A5], arg12: JF[A6], arg13: JF[A7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7)(implicitevidence$64:CaseClassFormats.this.K[K1],implicitevidence$65:CaseClassFormats.this.K[K2],implicitevidence$66:CaseClassFormats.this.K[K3],implicitevidence$67:CaseClassFormats.this.K[K4],implicitevidence$68:CaseClassFormats.this.K[K5],implicitevidence$69:CaseClassFormats.this.K[K6],implicitevidence$70:CaseClassFormats.this.K[K7],implicitevidence$71:CaseClassFormats.this.JF[A1],implicitevidence$72:CaseClassFormats.this.JF[A2],implicitevidence$73:CaseClassFormats.this.JF[A3],implicitevidence$74:CaseClassFormats.this.JF[A4],implicitevidence$75:CaseClassFormats.this.JF[A5],implicitevidence$76:CaseClassFormats.this.JF[A6],implicitevidence$77:CaseClassFormats.this.JF[A7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray6", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray6", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray6[A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass6", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass6", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass6[K1,K2,K3,K4,K5,K6,A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$58:CaseClassFormats.this.JF[A1],implicitevidence$59:CaseClassFormats.this.JF[A2],implicitevidence$60:CaseClassFormats.this.JF[A3],implicitevidence$61:CaseClassFormats.this.JF[A4],implicitevidence$62:CaseClassFormats.this.JF[A5],implicitevidence$63:CaseClassFormats.this.JF[A6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: JF[A1], arg7: JF[A2], arg8: JF[A3], arg9: JF[A4], arg10: JF[A5], arg11: JF[A6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6)(implicitevidence$46:CaseClassFormats.this.K[K1],implicitevidence$47:CaseClassFormats.this.K[K2],implicitevidence$48:CaseClassFormats.this.K[K3],implicitevidence$49:CaseClassFormats.this.K[K4],implicitevidence$50:CaseClassFormats.this.K[K5],implicitevidence$51:CaseClassFormats.this.K[K6],implicitevidence$52:CaseClassFormats.this.JF[A1],implicitevidence$53:CaseClassFormats.this.JF[A2],implicitevidence$54:CaseClassFormats.this.JF[A3],implicitevidence$55:CaseClassFormats.this.JF[A4],implicitevidence$56:CaseClassFormats.this.JF[A5],implicitevidence$57:CaseClassFormats.this.JF[A6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray5", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray5", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray5[A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass5", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass5", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass5[K1,K2,K3,K4,K5,A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$41:CaseClassFormats.this.JF[A1],implicitevidence$42:CaseClassFormats.this.JF[A2],implicitevidence$43:CaseClassFormats.this.JF[A3],implicitevidence$44:CaseClassFormats.this.JF[A4],implicitevidence$45:CaseClassFormats.this.JF[A5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: JF[A1], arg6: JF[A2], arg7: JF[A3], arg8: JF[A4], arg9: JF[A5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5)(implicitevidence$31:CaseClassFormats.this.K[K1],implicitevidence$32:CaseClassFormats.this.K[K2],implicitevidence$33:CaseClassFormats.this.K[K3],implicitevidence$34:CaseClassFormats.this.K[K4],implicitevidence$35:CaseClassFormats.this.K[K5],implicitevidence$36:CaseClassFormats.this.JF[A1],implicitevidence$37:CaseClassFormats.this.JF[A2],implicitevidence$38:CaseClassFormats.this.JF[A3],implicitevidence$39:CaseClassFormats.this.JF[A4],implicitevidence$40:CaseClassFormats.this.JF[A5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray4", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray4", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray4[A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass4", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(key1: K1, key2: K2, key3: K3, key4: K4)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass4", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass4[K1,K2,K3,K4,A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(key1:K1,key2:K2,key3:K3,key4:K4)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(implicitevidence$27:CaseClassFormats.this.JF[A1],implicitevidence$28:CaseClassFormats.this.JF[A2],implicitevidence$29:CaseClassFormats.this.JF[A3],implicitevidence$30:CaseClassFormats.this.JF[A4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(key1: K1, key2: K2, key3: K3, key4: K4)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: JF[A1], arg5: JF[A2], arg6: JF[A3], arg7: JF[A4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(key1:K1,key2:K2,key3:K3,key4:K4)(implicitevidence$19:CaseClassFormats.this.K[K1],implicitevidence$20:CaseClassFormats.this.K[K2],implicitevidence$21:CaseClassFormats.this.K[K3],implicitevidence$22:CaseClassFormats.this.K[K4],implicitevidence$23:CaseClassFormats.this.JF[A1],implicitevidence$24:CaseClassFormats.this.JF[A2],implicitevidence$25:CaseClassFormats.this.JF[A3],implicitevidence$26:CaseClassFormats.this.JF[A4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray3", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(A1: JF[A1], A2: JF[A2], A3: JF[A3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray3", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray3[A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass3", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(key1: K1, key2: K2, key3: K3)(A1: JF[A1], A2: JF[A2], A3: JF[A3], K1: K[K1], K2: K[K2], K3: K[K3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass3", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass3[K1,K2,K3,A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(key1:K1,key2:K2,key3:K3)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(implicitevidence$16:CaseClassFormats.this.JF[A1],implicitevidence$17:CaseClassFormats.this.JF[A2],implicitevidence$18:CaseClassFormats.this.JF[A3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(key1: K1, key2: K2, key3: K3)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: JF[A1], arg4: JF[A2], arg5: JF[A3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(key1:K1,key2:K2,key3:K3)(implicitevidence$10:CaseClassFormats.this.K[K1],implicitevidence$11:CaseClassFormats.this.K[K2],implicitevidence$12:CaseClassFormats.this.K[K3],implicitevidence$13:CaseClassFormats.this.JF[A1],implicitevidence$14:CaseClassFormats.this.JF[A2],implicitevidence$15:CaseClassFormats.this.JF[A3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray2", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(A1: JF[A1], A2: JF[A2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray2", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray2[A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass2", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(key1: K1, key2: K2)(A1: JF[A1], A2: JF[A2], K1: K[K1], K2: K[K2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass2", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass2[K1,K2,A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(key1:K1,key2:K2)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(arg0: JF[A1], arg1: JF[A2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(implicitevidence$8:CaseClassFormats.this.JF[A1],implicitevidence$9:CaseClassFormats.this.JF[A2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(key1: K1, key2: K2)(arg0: K[K1], arg1: K[K2], arg2: JF[A1], arg3: JF[A2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,K2,A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(key1:K1,key2:K2)(implicitevidence$4:CaseClassFormats.this.K[K1],implicitevidence$5:CaseClassFormats.this.K[K2],implicitevidence$6:CaseClassFormats.this.JF[A1],implicitevidence$7:CaseClassFormats.this.JF[A2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray1", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(A1: JF[A1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray1", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray1[A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(implicitA1:CaseClassFormats.this.JF[A1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass1", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(key1: K1)(A1: JF[A1], K1: K[K1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass1", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass1[K1,A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(key1:K1)(implicitA1:CaseClassFormats.this.JF[A1],implicitK1:CaseClassFormats.this.K[K1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(arg0: JF[A1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClassArray[A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(implicitevidence$3:CaseClassFormats.this.JF[A1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(key1: K1)(arg0: K[K1], arg1: JF[A1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#caseClass[K1,A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(key1:K1)(implicitevidence$1:CaseClassFormats.this.K[K1],implicitevidence$2:CaseClassFormats.this.JF[A1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "implicitHashWriter", "tail" : "(jsonWriter: JsonWriter[A]): HashWriter[A]", "member" : "sjsonnew.ImplicitHashWriters.implicitHashWriter", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#implicitHashWriter[A](implicitjsonWriter:sjsonnew.JsonWriter[A]):sjsonnew.HashWriter[A]", "kind" : "implicit def"}, {"label" : "localDateTimeStringIso", "tail" : ": IsoString[LocalDateTime]", "member" : "sjsonnew.CalendarFormats.localDateTimeStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#localDateTimeStringIso:sjsonnew.IsoString[java.time.LocalDateTime]", "kind" : "implicit val"}, {"label" : "localDateStringIso", "tail" : ": IsoString[LocalDate]", "member" : "sjsonnew.CalendarFormats.localDateStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#localDateStringIso:sjsonnew.IsoString[java.time.LocalDate]", "kind" : "implicit val"}, {"label" : "zonedDateTimeStringIso", "tail" : ": IsoString[ZonedDateTime]", "member" : "sjsonnew.CalendarFormats.zonedDateTimeStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#zonedDateTimeStringIso:sjsonnew.IsoString[java.time.ZonedDateTime]", "kind" : "implicit val"}, {"label" : "calendarStringIso", "tail" : ": IsoString[Calendar]", "member" : "sjsonnew.CalendarFormats.calendarStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#calendarStringIso:sjsonnew.IsoString[java.util.Calendar]", "kind" : "implicit val"}, {"label" : "instantStringIso", "tail" : ": IsoString[Instant]", "member" : "sjsonnew.CalendarFormats.instantStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#instantStringIso:sjsonnew.IsoString[java.time.Instant]", "kind" : "implicit val"}, {"label" : "offsetDateTimeStringIso", "tail" : ": IsoString[OffsetDateTime]", "member" : "sjsonnew.CalendarFormats.offsetDateTimeStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#offsetDateTimeStringIso:sjsonnew.IsoString[java.time.OffsetDateTime]", "kind" : "implicit val"}, {"label" : "optionalFormat", "tail" : "(arg0: JF[A]): JF[Optional[A]]", "member" : "sjsonnew.JavaExtraFormats.optionalFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#optionalFormat[A](implicitevidence$1:JavaExtraFormats.this.JF[A]):JavaExtraFormats.this.JF[java.util.Optional[A]]", "kind" : "implicit def"}, {"label" : "fileStringIso", "tail" : ": IsoString[File]", "member" : "sjsonnew.JavaExtraFormats.fileStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#fileStringIso:sjsonnew.IsoString[java.io.File]", "kind" : "implicit val"}, {"label" : "urlStringIso", "tail" : ": IsoString[URL]", "member" : "sjsonnew.JavaExtraFormats.urlStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#urlStringIso:sjsonnew.IsoString[java.net.URL]", "kind" : "implicit val"}, {"label" : "uriStringIso", "tail" : ": IsoString[URI]", "member" : "sjsonnew.JavaExtraFormats.uriStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#uriStringIso:sjsonnew.IsoString[java.net.URI]", "kind" : "implicit val"}, {"label" : "uuidStringIso", "tail" : ": IsoString[UUID]", "member" : "sjsonnew.JavaExtraFormats.uuidStringIso", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#uuidStringIso:sjsonnew.IsoString[java.util.UUID]", "kind" : "implicit val"}, {"label" : "javaBigDecimalFormat", "tail" : ": JF[BigDecimal]", "member" : "sjsonnew.JavaExtraFormats.javaBigDecimalFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#javaBigDecimalFormat:JavaExtraFormats.this.JF[java.math.BigDecimal]", "kind" : "implicit val"}, {"label" : "javaBigIntegerFormat", "tail" : ": JF[BigInteger]", "member" : "sjsonnew.JavaExtraFormats.javaBigIntegerFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#javaBigIntegerFormat:JavaExtraFormats.this.JF[java.math.BigInteger]", "kind" : "implicit val"}, {"label" : "JDoubleJsonKeyFormat", "tail" : ": JsonKeyFormat[Double]", "member" : "sjsonnew.JavaPrimitiveFormats.JDoubleJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JDoubleJsonKeyFormat:sjsonnew.JsonKeyFormat[Double]", "kind" : "implicit val"}, {"label" : "JFloatJsonKeyFormat", "tail" : ": JsonKeyFormat[Float]", "member" : "sjsonnew.JavaPrimitiveFormats.JFloatJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JFloatJsonKeyFormat:sjsonnew.JsonKeyFormat[Float]", "kind" : "implicit val"}, {"label" : "JLongJsonKeyFormat", "tail" : ": JsonKeyFormat[Long]", "member" : "sjsonnew.JavaPrimitiveFormats.JLongJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JLongJsonKeyFormat:sjsonnew.JsonKeyFormat[Long]", "kind" : "implicit val"}, {"label" : "JIntegerJsonKeyFormat", "tail" : ": JsonKeyFormat[Integer]", "member" : "sjsonnew.JavaPrimitiveFormats.JIntegerJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JIntegerJsonKeyFormat:sjsonnew.JsonKeyFormat[Integer]", "kind" : "implicit val"}, {"label" : "JCharacterJsonKeyFormat", "tail" : ": JsonKeyFormat[Character]", "member" : "sjsonnew.JavaPrimitiveFormats.JCharacterJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JCharacterJsonKeyFormat:sjsonnew.JsonKeyFormat[Character]", "kind" : "implicit val"}, {"label" : "JShortJsonKeyFormat", "tail" : ": JsonKeyFormat[Short]", "member" : "sjsonnew.JavaPrimitiveFormats.JShortJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JShortJsonKeyFormat:sjsonnew.JsonKeyFormat[Short]", "kind" : "implicit val"}, {"label" : "JByteJsonKeyFormat", "tail" : ": JsonKeyFormat[Byte]", "member" : "sjsonnew.JavaPrimitiveFormats.JByteJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JByteJsonKeyFormat:sjsonnew.JsonKeyFormat[Byte]", "kind" : "implicit val"}, {"label" : "JBooleanJsonKeyFormat", "tail" : ": JsonKeyFormat[Boolean]", "member" : "sjsonnew.JavaPrimitiveFormats.JBooleanJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JBooleanJsonKeyFormat:sjsonnew.JsonKeyFormat[Boolean]", "kind" : "implicit val"}, {"label" : "JCharacterJsonFormat", "tail" : ": JsonFormat[Character]", "member" : "sjsonnew.JavaPrimitiveFormats.JCharacterJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JCharacterJsonFormat:sjsonnew.JsonFormat[Character]", "kind" : "implicit lazy val"}, {"label" : "JBooleanJsonFormat", "tail" : ": JsonFormat[Boolean]", "member" : "sjsonnew.JavaPrimitiveFormats.JBooleanJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JBooleanJsonFormat:sjsonnew.JsonFormat[Boolean]", "kind" : "implicit lazy val"}, {"label" : "JShortJsonFormat", "tail" : ": JsonFormat[Short]", "member" : "sjsonnew.JavaPrimitiveFormats.JShortJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JShortJsonFormat:sjsonnew.JsonFormat[Short]", "kind" : "implicit lazy val"}, {"label" : "JByteJsonFormat", "tail" : ": JsonFormat[Byte]", "member" : "sjsonnew.JavaPrimitiveFormats.JByteJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JByteJsonFormat:sjsonnew.JsonFormat[Byte]", "kind" : "implicit lazy val"}, {"label" : "JDoubleJsonFormat", "tail" : ": JsonFormat[Double]", "member" : "sjsonnew.JavaPrimitiveFormats.JDoubleJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JDoubleJsonFormat:sjsonnew.JsonFormat[Double]", "kind" : "implicit lazy val"}, {"label" : "JFloatJsonFormat", "tail" : ": JsonFormat[Float]", "member" : "sjsonnew.JavaPrimitiveFormats.JFloatJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JFloatJsonFormat:sjsonnew.JsonFormat[Float]", "kind" : "implicit lazy val"}, {"label" : "JLongJsonFormat", "tail" : ": JsonFormat[Long]", "member" : "sjsonnew.JavaPrimitiveFormats.JLongJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JLongJsonFormat:sjsonnew.JsonFormat[Long]", "kind" : "implicit lazy val"}, {"label" : "JIntegerJsonFormat", "tail" : ": JsonFormat[Integer]", "member" : "sjsonnew.JavaPrimitiveFormats.JIntegerJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#JIntegerJsonFormat:sjsonnew.JsonFormat[Integer]", "kind" : "implicit lazy val"}, {"label" : "isoStringKeyFormat", "tail" : "(z: IsoString[A]): JsonKeyFormat[A]", "member" : "sjsonnew.IsoFormats.isoStringKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#isoStringKeyFormat[A](implicitz:sjsonnew.IsoString[A]):sjsonnew.JsonKeyFormat[A]", "kind" : "implicit def"}, {"label" : "isoStringFormat", "tail" : "(arg0: IsoString[A]): JsonFormat[A]", "member" : "sjsonnew.IsoFormats.isoStringFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#isoStringFormat[A](implicitevidence$2:sjsonnew.IsoString[A]):sjsonnew.JsonFormat[A]", "kind" : "implicit def"}, {"label" : "isolistFormat", "tail" : "(arg0: IsoLList[A]): JsonFormat[A]", "member" : "sjsonnew.IsoFormats.isolistFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#isolistFormat[A](implicitevidence$1:sjsonnew.IsoLList[A]):sjsonnew.JsonFormat[A]", "kind" : "implicit def"}, {"label" : "flatUnionFormat22", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21], arg42: JF[A22], arg43: Manifest[A22]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat22", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat22[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](typeFieldName:String)(implicitevidence$969:FlatUnionFormats.this.JF[A1],implicitevidence$970:Manifest[A1],implicitevidence$971:FlatUnionFormats.this.JF[A2],implicitevidence$972:Manifest[A2],implicitevidence$973:FlatUnionFormats.this.JF[A3],implicitevidence$974:Manifest[A3],implicitevidence$975:FlatUnionFormats.this.JF[A4],implicitevidence$976:Manifest[A4],implicitevidence$977:FlatUnionFormats.this.JF[A5],implicitevidence$978:Manifest[A5],implicitevidence$979:FlatUnionFormats.this.JF[A6],implicitevidence$980:Manifest[A6],implicitevidence$981:FlatUnionFormats.this.JF[A7],implicitevidence$982:Manifest[A7],implicitevidence$983:FlatUnionFormats.this.JF[A8],implicitevidence$984:Manifest[A8],implicitevidence$985:FlatUnionFormats.this.JF[A9],implicitevidence$986:Manifest[A9],implicitevidence$987:FlatUnionFormats.this.JF[A10],implicitevidence$988:Manifest[A10],implicitevidence$989:FlatUnionFormats.this.JF[A11],implicitevidence$990:Manifest[A11],implicitevidence$991:FlatUnionFormats.this.JF[A12],implicitevidence$992:Manifest[A12],implicitevidence$993:FlatUnionFormats.this.JF[A13],implicitevidence$994:Manifest[A13],implicitevidence$995:FlatUnionFormats.this.JF[A14],implicitevidence$996:Manifest[A14],implicitevidence$997:FlatUnionFormats.this.JF[A15],implicitevidence$998:Manifest[A15],implicitevidence$999:FlatUnionFormats.this.JF[A16],implicitevidence$1000:Manifest[A16],implicitevidence$1001:FlatUnionFormats.this.JF[A17],implicitevidence$1002:Manifest[A17],implicitevidence$1003:FlatUnionFormats.this.JF[A18],implicitevidence$1004:Manifest[A18],implicitevidence$1005:FlatUnionFormats.this.JF[A19],implicitevidence$1006:Manifest[A19],implicitevidence$1007:FlatUnionFormats.this.JF[A20],implicitevidence$1008:Manifest[A20],implicitevidence$1009:FlatUnionFormats.this.JF[A21],implicitevidence$1010:Manifest[A21],implicitevidence$1011:FlatUnionFormats.this.JF[A22],implicitevidence$1012:Manifest[A22]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat21", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat21", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat21[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](typeFieldName:String)(implicitevidence$927:FlatUnionFormats.this.JF[A1],implicitevidence$928:Manifest[A1],implicitevidence$929:FlatUnionFormats.this.JF[A2],implicitevidence$930:Manifest[A2],implicitevidence$931:FlatUnionFormats.this.JF[A3],implicitevidence$932:Manifest[A3],implicitevidence$933:FlatUnionFormats.this.JF[A4],implicitevidence$934:Manifest[A4],implicitevidence$935:FlatUnionFormats.this.JF[A5],implicitevidence$936:Manifest[A5],implicitevidence$937:FlatUnionFormats.this.JF[A6],implicitevidence$938:Manifest[A6],implicitevidence$939:FlatUnionFormats.this.JF[A7],implicitevidence$940:Manifest[A7],implicitevidence$941:FlatUnionFormats.this.JF[A8],implicitevidence$942:Manifest[A8],implicitevidence$943:FlatUnionFormats.this.JF[A9],implicitevidence$944:Manifest[A9],implicitevidence$945:FlatUnionFormats.this.JF[A10],implicitevidence$946:Manifest[A10],implicitevidence$947:FlatUnionFormats.this.JF[A11],implicitevidence$948:Manifest[A11],implicitevidence$949:FlatUnionFormats.this.JF[A12],implicitevidence$950:Manifest[A12],implicitevidence$951:FlatUnionFormats.this.JF[A13],implicitevidence$952:Manifest[A13],implicitevidence$953:FlatUnionFormats.this.JF[A14],implicitevidence$954:Manifest[A14],implicitevidence$955:FlatUnionFormats.this.JF[A15],implicitevidence$956:Manifest[A15],implicitevidence$957:FlatUnionFormats.this.JF[A16],implicitevidence$958:Manifest[A16],implicitevidence$959:FlatUnionFormats.this.JF[A17],implicitevidence$960:Manifest[A17],implicitevidence$961:FlatUnionFormats.this.JF[A18],implicitevidence$962:Manifest[A18],implicitevidence$963:FlatUnionFormats.this.JF[A19],implicitevidence$964:Manifest[A19],implicitevidence$965:FlatUnionFormats.this.JF[A20],implicitevidence$966:Manifest[A20],implicitevidence$967:FlatUnionFormats.this.JF[A21],implicitevidence$968:Manifest[A21]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat20", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat20", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat20[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](typeFieldName:String)(implicitevidence$887:FlatUnionFormats.this.JF[A1],implicitevidence$888:Manifest[A1],implicitevidence$889:FlatUnionFormats.this.JF[A2],implicitevidence$890:Manifest[A2],implicitevidence$891:FlatUnionFormats.this.JF[A3],implicitevidence$892:Manifest[A3],implicitevidence$893:FlatUnionFormats.this.JF[A4],implicitevidence$894:Manifest[A4],implicitevidence$895:FlatUnionFormats.this.JF[A5],implicitevidence$896:Manifest[A5],implicitevidence$897:FlatUnionFormats.this.JF[A6],implicitevidence$898:Manifest[A6],implicitevidence$899:FlatUnionFormats.this.JF[A7],implicitevidence$900:Manifest[A7],implicitevidence$901:FlatUnionFormats.this.JF[A8],implicitevidence$902:Manifest[A8],implicitevidence$903:FlatUnionFormats.this.JF[A9],implicitevidence$904:Manifest[A9],implicitevidence$905:FlatUnionFormats.this.JF[A10],implicitevidence$906:Manifest[A10],implicitevidence$907:FlatUnionFormats.this.JF[A11],implicitevidence$908:Manifest[A11],implicitevidence$909:FlatUnionFormats.this.JF[A12],implicitevidence$910:Manifest[A12],implicitevidence$911:FlatUnionFormats.this.JF[A13],implicitevidence$912:Manifest[A13],implicitevidence$913:FlatUnionFormats.this.JF[A14],implicitevidence$914:Manifest[A14],implicitevidence$915:FlatUnionFormats.this.JF[A15],implicitevidence$916:Manifest[A15],implicitevidence$917:FlatUnionFormats.this.JF[A16],implicitevidence$918:Manifest[A16],implicitevidence$919:FlatUnionFormats.this.JF[A17],implicitevidence$920:Manifest[A17],implicitevidence$921:FlatUnionFormats.this.JF[A18],implicitevidence$922:Manifest[A18],implicitevidence$923:FlatUnionFormats.this.JF[A19],implicitevidence$924:Manifest[A19],implicitevidence$925:FlatUnionFormats.this.JF[A20],implicitevidence$926:Manifest[A20]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat19", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat19", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat19[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](typeFieldName:String)(implicitevidence$849:FlatUnionFormats.this.JF[A1],implicitevidence$850:Manifest[A1],implicitevidence$851:FlatUnionFormats.this.JF[A2],implicitevidence$852:Manifest[A2],implicitevidence$853:FlatUnionFormats.this.JF[A3],implicitevidence$854:Manifest[A3],implicitevidence$855:FlatUnionFormats.this.JF[A4],implicitevidence$856:Manifest[A4],implicitevidence$857:FlatUnionFormats.this.JF[A5],implicitevidence$858:Manifest[A5],implicitevidence$859:FlatUnionFormats.this.JF[A6],implicitevidence$860:Manifest[A6],implicitevidence$861:FlatUnionFormats.this.JF[A7],implicitevidence$862:Manifest[A7],implicitevidence$863:FlatUnionFormats.this.JF[A8],implicitevidence$864:Manifest[A8],implicitevidence$865:FlatUnionFormats.this.JF[A9],implicitevidence$866:Manifest[A9],implicitevidence$867:FlatUnionFormats.this.JF[A10],implicitevidence$868:Manifest[A10],implicitevidence$869:FlatUnionFormats.this.JF[A11],implicitevidence$870:Manifest[A11],implicitevidence$871:FlatUnionFormats.this.JF[A12],implicitevidence$872:Manifest[A12],implicitevidence$873:FlatUnionFormats.this.JF[A13],implicitevidence$874:Manifest[A13],implicitevidence$875:FlatUnionFormats.this.JF[A14],implicitevidence$876:Manifest[A14],implicitevidence$877:FlatUnionFormats.this.JF[A15],implicitevidence$878:Manifest[A15],implicitevidence$879:FlatUnionFormats.this.JF[A16],implicitevidence$880:Manifest[A16],implicitevidence$881:FlatUnionFormats.this.JF[A17],implicitevidence$882:Manifest[A17],implicitevidence$883:FlatUnionFormats.this.JF[A18],implicitevidence$884:Manifest[A18],implicitevidence$885:FlatUnionFormats.this.JF[A19],implicitevidence$886:Manifest[A19]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat18", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat18", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat18[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](typeFieldName:String)(implicitevidence$813:FlatUnionFormats.this.JF[A1],implicitevidence$814:Manifest[A1],implicitevidence$815:FlatUnionFormats.this.JF[A2],implicitevidence$816:Manifest[A2],implicitevidence$817:FlatUnionFormats.this.JF[A3],implicitevidence$818:Manifest[A3],implicitevidence$819:FlatUnionFormats.this.JF[A4],implicitevidence$820:Manifest[A4],implicitevidence$821:FlatUnionFormats.this.JF[A5],implicitevidence$822:Manifest[A5],implicitevidence$823:FlatUnionFormats.this.JF[A6],implicitevidence$824:Manifest[A6],implicitevidence$825:FlatUnionFormats.this.JF[A7],implicitevidence$826:Manifest[A7],implicitevidence$827:FlatUnionFormats.this.JF[A8],implicitevidence$828:Manifest[A8],implicitevidence$829:FlatUnionFormats.this.JF[A9],implicitevidence$830:Manifest[A9],implicitevidence$831:FlatUnionFormats.this.JF[A10],implicitevidence$832:Manifest[A10],implicitevidence$833:FlatUnionFormats.this.JF[A11],implicitevidence$834:Manifest[A11],implicitevidence$835:FlatUnionFormats.this.JF[A12],implicitevidence$836:Manifest[A12],implicitevidence$837:FlatUnionFormats.this.JF[A13],implicitevidence$838:Manifest[A13],implicitevidence$839:FlatUnionFormats.this.JF[A14],implicitevidence$840:Manifest[A14],implicitevidence$841:FlatUnionFormats.this.JF[A15],implicitevidence$842:Manifest[A15],implicitevidence$843:FlatUnionFormats.this.JF[A16],implicitevidence$844:Manifest[A16],implicitevidence$845:FlatUnionFormats.this.JF[A17],implicitevidence$846:Manifest[A17],implicitevidence$847:FlatUnionFormats.this.JF[A18],implicitevidence$848:Manifest[A18]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat17", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat17", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat17[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](typeFieldName:String)(implicitevidence$779:FlatUnionFormats.this.JF[A1],implicitevidence$780:Manifest[A1],implicitevidence$781:FlatUnionFormats.this.JF[A2],implicitevidence$782:Manifest[A2],implicitevidence$783:FlatUnionFormats.this.JF[A3],implicitevidence$784:Manifest[A3],implicitevidence$785:FlatUnionFormats.this.JF[A4],implicitevidence$786:Manifest[A4],implicitevidence$787:FlatUnionFormats.this.JF[A5],implicitevidence$788:Manifest[A5],implicitevidence$789:FlatUnionFormats.this.JF[A6],implicitevidence$790:Manifest[A6],implicitevidence$791:FlatUnionFormats.this.JF[A7],implicitevidence$792:Manifest[A7],implicitevidence$793:FlatUnionFormats.this.JF[A8],implicitevidence$794:Manifest[A8],implicitevidence$795:FlatUnionFormats.this.JF[A9],implicitevidence$796:Manifest[A9],implicitevidence$797:FlatUnionFormats.this.JF[A10],implicitevidence$798:Manifest[A10],implicitevidence$799:FlatUnionFormats.this.JF[A11],implicitevidence$800:Manifest[A11],implicitevidence$801:FlatUnionFormats.this.JF[A12],implicitevidence$802:Manifest[A12],implicitevidence$803:FlatUnionFormats.this.JF[A13],implicitevidence$804:Manifest[A13],implicitevidence$805:FlatUnionFormats.this.JF[A14],implicitevidence$806:Manifest[A14],implicitevidence$807:FlatUnionFormats.this.JF[A15],implicitevidence$808:Manifest[A15],implicitevidence$809:FlatUnionFormats.this.JF[A16],implicitevidence$810:Manifest[A16],implicitevidence$811:FlatUnionFormats.this.JF[A17],implicitevidence$812:Manifest[A17]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat16", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat16", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat16[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](typeFieldName:String)(implicitevidence$747:FlatUnionFormats.this.JF[A1],implicitevidence$748:Manifest[A1],implicitevidence$749:FlatUnionFormats.this.JF[A2],implicitevidence$750:Manifest[A2],implicitevidence$751:FlatUnionFormats.this.JF[A3],implicitevidence$752:Manifest[A3],implicitevidence$753:FlatUnionFormats.this.JF[A4],implicitevidence$754:Manifest[A4],implicitevidence$755:FlatUnionFormats.this.JF[A5],implicitevidence$756:Manifest[A5],implicitevidence$757:FlatUnionFormats.this.JF[A6],implicitevidence$758:Manifest[A6],implicitevidence$759:FlatUnionFormats.this.JF[A7],implicitevidence$760:Manifest[A7],implicitevidence$761:FlatUnionFormats.this.JF[A8],implicitevidence$762:Manifest[A8],implicitevidence$763:FlatUnionFormats.this.JF[A9],implicitevidence$764:Manifest[A9],implicitevidence$765:FlatUnionFormats.this.JF[A10],implicitevidence$766:Manifest[A10],implicitevidence$767:FlatUnionFormats.this.JF[A11],implicitevidence$768:Manifest[A11],implicitevidence$769:FlatUnionFormats.this.JF[A12],implicitevidence$770:Manifest[A12],implicitevidence$771:FlatUnionFormats.this.JF[A13],implicitevidence$772:Manifest[A13],implicitevidence$773:FlatUnionFormats.this.JF[A14],implicitevidence$774:Manifest[A14],implicitevidence$775:FlatUnionFormats.this.JF[A15],implicitevidence$776:Manifest[A15],implicitevidence$777:FlatUnionFormats.this.JF[A16],implicitevidence$778:Manifest[A16]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat15", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat15", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat15[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](typeFieldName:String)(implicitevidence$717:FlatUnionFormats.this.JF[A1],implicitevidence$718:Manifest[A1],implicitevidence$719:FlatUnionFormats.this.JF[A2],implicitevidence$720:Manifest[A2],implicitevidence$721:FlatUnionFormats.this.JF[A3],implicitevidence$722:Manifest[A3],implicitevidence$723:FlatUnionFormats.this.JF[A4],implicitevidence$724:Manifest[A4],implicitevidence$725:FlatUnionFormats.this.JF[A5],implicitevidence$726:Manifest[A5],implicitevidence$727:FlatUnionFormats.this.JF[A6],implicitevidence$728:Manifest[A6],implicitevidence$729:FlatUnionFormats.this.JF[A7],implicitevidence$730:Manifest[A7],implicitevidence$731:FlatUnionFormats.this.JF[A8],implicitevidence$732:Manifest[A8],implicitevidence$733:FlatUnionFormats.this.JF[A9],implicitevidence$734:Manifest[A9],implicitevidence$735:FlatUnionFormats.this.JF[A10],implicitevidence$736:Manifest[A10],implicitevidence$737:FlatUnionFormats.this.JF[A11],implicitevidence$738:Manifest[A11],implicitevidence$739:FlatUnionFormats.this.JF[A12],implicitevidence$740:Manifest[A12],implicitevidence$741:FlatUnionFormats.this.JF[A13],implicitevidence$742:Manifest[A13],implicitevidence$743:FlatUnionFormats.this.JF[A14],implicitevidence$744:Manifest[A14],implicitevidence$745:FlatUnionFormats.this.JF[A15],implicitevidence$746:Manifest[A15]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat14", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat14", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat14[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](typeFieldName:String)(implicitevidence$689:FlatUnionFormats.this.JF[A1],implicitevidence$690:Manifest[A1],implicitevidence$691:FlatUnionFormats.this.JF[A2],implicitevidence$692:Manifest[A2],implicitevidence$693:FlatUnionFormats.this.JF[A3],implicitevidence$694:Manifest[A3],implicitevidence$695:FlatUnionFormats.this.JF[A4],implicitevidence$696:Manifest[A4],implicitevidence$697:FlatUnionFormats.this.JF[A5],implicitevidence$698:Manifest[A5],implicitevidence$699:FlatUnionFormats.this.JF[A6],implicitevidence$700:Manifest[A6],implicitevidence$701:FlatUnionFormats.this.JF[A7],implicitevidence$702:Manifest[A7],implicitevidence$703:FlatUnionFormats.this.JF[A8],implicitevidence$704:Manifest[A8],implicitevidence$705:FlatUnionFormats.this.JF[A9],implicitevidence$706:Manifest[A9],implicitevidence$707:FlatUnionFormats.this.JF[A10],implicitevidence$708:Manifest[A10],implicitevidence$709:FlatUnionFormats.this.JF[A11],implicitevidence$710:Manifest[A11],implicitevidence$711:FlatUnionFormats.this.JF[A12],implicitevidence$712:Manifest[A12],implicitevidence$713:FlatUnionFormats.this.JF[A13],implicitevidence$714:Manifest[A13],implicitevidence$715:FlatUnionFormats.this.JF[A14],implicitevidence$716:Manifest[A14]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat13", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat13", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat13[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](typeFieldName:String)(implicitevidence$663:FlatUnionFormats.this.JF[A1],implicitevidence$664:Manifest[A1],implicitevidence$665:FlatUnionFormats.this.JF[A2],implicitevidence$666:Manifest[A2],implicitevidence$667:FlatUnionFormats.this.JF[A3],implicitevidence$668:Manifest[A3],implicitevidence$669:FlatUnionFormats.this.JF[A4],implicitevidence$670:Manifest[A4],implicitevidence$671:FlatUnionFormats.this.JF[A5],implicitevidence$672:Manifest[A5],implicitevidence$673:FlatUnionFormats.this.JF[A6],implicitevidence$674:Manifest[A6],implicitevidence$675:FlatUnionFormats.this.JF[A7],implicitevidence$676:Manifest[A7],implicitevidence$677:FlatUnionFormats.this.JF[A8],implicitevidence$678:Manifest[A8],implicitevidence$679:FlatUnionFormats.this.JF[A9],implicitevidence$680:Manifest[A9],implicitevidence$681:FlatUnionFormats.this.JF[A10],implicitevidence$682:Manifest[A10],implicitevidence$683:FlatUnionFormats.this.JF[A11],implicitevidence$684:Manifest[A11],implicitevidence$685:FlatUnionFormats.this.JF[A12],implicitevidence$686:Manifest[A12],implicitevidence$687:FlatUnionFormats.this.JF[A13],implicitevidence$688:Manifest[A13]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat12", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat12", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat12[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](typeFieldName:String)(implicitevidence$639:FlatUnionFormats.this.JF[A1],implicitevidence$640:Manifest[A1],implicitevidence$641:FlatUnionFormats.this.JF[A2],implicitevidence$642:Manifest[A2],implicitevidence$643:FlatUnionFormats.this.JF[A3],implicitevidence$644:Manifest[A3],implicitevidence$645:FlatUnionFormats.this.JF[A4],implicitevidence$646:Manifest[A4],implicitevidence$647:FlatUnionFormats.this.JF[A5],implicitevidence$648:Manifest[A5],implicitevidence$649:FlatUnionFormats.this.JF[A6],implicitevidence$650:Manifest[A6],implicitevidence$651:FlatUnionFormats.this.JF[A7],implicitevidence$652:Manifest[A7],implicitevidence$653:FlatUnionFormats.this.JF[A8],implicitevidence$654:Manifest[A8],implicitevidence$655:FlatUnionFormats.this.JF[A9],implicitevidence$656:Manifest[A9],implicitevidence$657:FlatUnionFormats.this.JF[A10],implicitevidence$658:Manifest[A10],implicitevidence$659:FlatUnionFormats.this.JF[A11],implicitevidence$660:Manifest[A11],implicitevidence$661:FlatUnionFormats.this.JF[A12],implicitevidence$662:Manifest[A12]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat11", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat11", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat11[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](typeFieldName:String)(implicitevidence$617:FlatUnionFormats.this.JF[A1],implicitevidence$618:Manifest[A1],implicitevidence$619:FlatUnionFormats.this.JF[A2],implicitevidence$620:Manifest[A2],implicitevidence$621:FlatUnionFormats.this.JF[A3],implicitevidence$622:Manifest[A3],implicitevidence$623:FlatUnionFormats.this.JF[A4],implicitevidence$624:Manifest[A4],implicitevidence$625:FlatUnionFormats.this.JF[A5],implicitevidence$626:Manifest[A5],implicitevidence$627:FlatUnionFormats.this.JF[A6],implicitevidence$628:Manifest[A6],implicitevidence$629:FlatUnionFormats.this.JF[A7],implicitevidence$630:Manifest[A7],implicitevidence$631:FlatUnionFormats.this.JF[A8],implicitevidence$632:Manifest[A8],implicitevidence$633:FlatUnionFormats.this.JF[A9],implicitevidence$634:Manifest[A9],implicitevidence$635:FlatUnionFormats.this.JF[A10],implicitevidence$636:Manifest[A10],implicitevidence$637:FlatUnionFormats.this.JF[A11],implicitevidence$638:Manifest[A11]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat10", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat10", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat10[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](typeFieldName:String)(implicitevidence$597:FlatUnionFormats.this.JF[A1],implicitevidence$598:Manifest[A1],implicitevidence$599:FlatUnionFormats.this.JF[A2],implicitevidence$600:Manifest[A2],implicitevidence$601:FlatUnionFormats.this.JF[A3],implicitevidence$602:Manifest[A3],implicitevidence$603:FlatUnionFormats.this.JF[A4],implicitevidence$604:Manifest[A4],implicitevidence$605:FlatUnionFormats.this.JF[A5],implicitevidence$606:Manifest[A5],implicitevidence$607:FlatUnionFormats.this.JF[A6],implicitevidence$608:Manifest[A6],implicitevidence$609:FlatUnionFormats.this.JF[A7],implicitevidence$610:Manifest[A7],implicitevidence$611:FlatUnionFormats.this.JF[A8],implicitevidence$612:Manifest[A8],implicitevidence$613:FlatUnionFormats.this.JF[A9],implicitevidence$614:Manifest[A9],implicitevidence$615:FlatUnionFormats.this.JF[A10],implicitevidence$616:Manifest[A10]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat9", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat9", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat9[U,A1,A2,A3,A4,A5,A6,A7,A8,A9](typeFieldName:String)(implicitevidence$579:FlatUnionFormats.this.JF[A1],implicitevidence$580:Manifest[A1],implicitevidence$581:FlatUnionFormats.this.JF[A2],implicitevidence$582:Manifest[A2],implicitevidence$583:FlatUnionFormats.this.JF[A3],implicitevidence$584:Manifest[A3],implicitevidence$585:FlatUnionFormats.this.JF[A4],implicitevidence$586:Manifest[A4],implicitevidence$587:FlatUnionFormats.this.JF[A5],implicitevidence$588:Manifest[A5],implicitevidence$589:FlatUnionFormats.this.JF[A6],implicitevidence$590:Manifest[A6],implicitevidence$591:FlatUnionFormats.this.JF[A7],implicitevidence$592:Manifest[A7],implicitevidence$593:FlatUnionFormats.this.JF[A8],implicitevidence$594:Manifest[A8],implicitevidence$595:FlatUnionFormats.this.JF[A9],implicitevidence$596:Manifest[A9]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat8", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat8", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat8[U,A1,A2,A3,A4,A5,A6,A7,A8](typeFieldName:String)(implicitevidence$563:FlatUnionFormats.this.JF[A1],implicitevidence$564:Manifest[A1],implicitevidence$565:FlatUnionFormats.this.JF[A2],implicitevidence$566:Manifest[A2],implicitevidence$567:FlatUnionFormats.this.JF[A3],implicitevidence$568:Manifest[A3],implicitevidence$569:FlatUnionFormats.this.JF[A4],implicitevidence$570:Manifest[A4],implicitevidence$571:FlatUnionFormats.this.JF[A5],implicitevidence$572:Manifest[A5],implicitevidence$573:FlatUnionFormats.this.JF[A6],implicitevidence$574:Manifest[A6],implicitevidence$575:FlatUnionFormats.this.JF[A7],implicitevidence$576:Manifest[A7],implicitevidence$577:FlatUnionFormats.this.JF[A8],implicitevidence$578:Manifest[A8]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat7", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat7", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat7[U,A1,A2,A3,A4,A5,A6,A7](typeFieldName:String)(implicitevidence$549:FlatUnionFormats.this.JF[A1],implicitevidence$550:Manifest[A1],implicitevidence$551:FlatUnionFormats.this.JF[A2],implicitevidence$552:Manifest[A2],implicitevidence$553:FlatUnionFormats.this.JF[A3],implicitevidence$554:Manifest[A3],implicitevidence$555:FlatUnionFormats.this.JF[A4],implicitevidence$556:Manifest[A4],implicitevidence$557:FlatUnionFormats.this.JF[A5],implicitevidence$558:Manifest[A5],implicitevidence$559:FlatUnionFormats.this.JF[A6],implicitevidence$560:Manifest[A6],implicitevidence$561:FlatUnionFormats.this.JF[A7],implicitevidence$562:Manifest[A7]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat6", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat6", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat6[U,A1,A2,A3,A4,A5,A6](typeFieldName:String)(implicitevidence$537:FlatUnionFormats.this.JF[A1],implicitevidence$538:Manifest[A1],implicitevidence$539:FlatUnionFormats.this.JF[A2],implicitevidence$540:Manifest[A2],implicitevidence$541:FlatUnionFormats.this.JF[A3],implicitevidence$542:Manifest[A3],implicitevidence$543:FlatUnionFormats.this.JF[A4],implicitevidence$544:Manifest[A4],implicitevidence$545:FlatUnionFormats.this.JF[A5],implicitevidence$546:Manifest[A5],implicitevidence$547:FlatUnionFormats.this.JF[A6],implicitevidence$548:Manifest[A6]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat5", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat5", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat5[U,A1,A2,A3,A4,A5](typeFieldName:String)(implicitevidence$527:FlatUnionFormats.this.JF[A1],implicitevidence$528:Manifest[A1],implicitevidence$529:FlatUnionFormats.this.JF[A2],implicitevidence$530:Manifest[A2],implicitevidence$531:FlatUnionFormats.this.JF[A3],implicitevidence$532:Manifest[A3],implicitevidence$533:FlatUnionFormats.this.JF[A4],implicitevidence$534:Manifest[A4],implicitevidence$535:FlatUnionFormats.this.JF[A5],implicitevidence$536:Manifest[A5]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat4", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat4", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat4[U,A1,A2,A3,A4](typeFieldName:String)(implicitevidence$519:FlatUnionFormats.this.JF[A1],implicitevidence$520:Manifest[A1],implicitevidence$521:FlatUnionFormats.this.JF[A2],implicitevidence$522:Manifest[A2],implicitevidence$523:FlatUnionFormats.this.JF[A3],implicitevidence$524:Manifest[A3],implicitevidence$525:FlatUnionFormats.this.JF[A4],implicitevidence$526:Manifest[A4]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat3", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat3", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat3[U,A1,A2,A3](typeFieldName:String)(implicitevidence$513:FlatUnionFormats.this.JF[A1],implicitevidence$514:Manifest[A1],implicitevidence$515:FlatUnionFormats.this.JF[A2],implicitevidence$516:Manifest[A2],implicitevidence$517:FlatUnionFormats.this.JF[A3],implicitevidence$518:Manifest[A3]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat2", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat2", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat2[U,A1,A2](typeFieldName:String)(implicitevidence$509:FlatUnionFormats.this.JF[A1],implicitevidence$510:Manifest[A1],implicitevidence$511:FlatUnionFormats.this.JF[A2],implicitevidence$512:Manifest[A2]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat1", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat1", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat1[U,A1](typeFieldName:String)(implicitevidence$507:FlatUnionFormats.this.JF[A1],implicitevidence$508:Manifest[A1]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat22", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21], arg42: JF[A22], arg43: Manifest[A22]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat22", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat22[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitevidence$463:FlatUnionFormats.this.JF[A1],implicitevidence$464:Manifest[A1],implicitevidence$465:FlatUnionFormats.this.JF[A2],implicitevidence$466:Manifest[A2],implicitevidence$467:FlatUnionFormats.this.JF[A3],implicitevidence$468:Manifest[A3],implicitevidence$469:FlatUnionFormats.this.JF[A4],implicitevidence$470:Manifest[A4],implicitevidence$471:FlatUnionFormats.this.JF[A5],implicitevidence$472:Manifest[A5],implicitevidence$473:FlatUnionFormats.this.JF[A6],implicitevidence$474:Manifest[A6],implicitevidence$475:FlatUnionFormats.this.JF[A7],implicitevidence$476:Manifest[A7],implicitevidence$477:FlatUnionFormats.this.JF[A8],implicitevidence$478:Manifest[A8],implicitevidence$479:FlatUnionFormats.this.JF[A9],implicitevidence$480:Manifest[A9],implicitevidence$481:FlatUnionFormats.this.JF[A10],implicitevidence$482:Manifest[A10],implicitevidence$483:FlatUnionFormats.this.JF[A11],implicitevidence$484:Manifest[A11],implicitevidence$485:FlatUnionFormats.this.JF[A12],implicitevidence$486:Manifest[A12],implicitevidence$487:FlatUnionFormats.this.JF[A13],implicitevidence$488:Manifest[A13],implicitevidence$489:FlatUnionFormats.this.JF[A14],implicitevidence$490:Manifest[A14],implicitevidence$491:FlatUnionFormats.this.JF[A15],implicitevidence$492:Manifest[A15],implicitevidence$493:FlatUnionFormats.this.JF[A16],implicitevidence$494:Manifest[A16],implicitevidence$495:FlatUnionFormats.this.JF[A17],implicitevidence$496:Manifest[A17],implicitevidence$497:FlatUnionFormats.this.JF[A18],implicitevidence$498:Manifest[A18],implicitevidence$499:FlatUnionFormats.this.JF[A19],implicitevidence$500:Manifest[A19],implicitevidence$501:FlatUnionFormats.this.JF[A20],implicitevidence$502:Manifest[A20],implicitevidence$503:FlatUnionFormats.this.JF[A21],implicitevidence$504:Manifest[A21],implicitevidence$505:FlatUnionFormats.this.JF[A22],implicitevidence$506:Manifest[A22]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat21", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat21", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat21[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitevidence$421:FlatUnionFormats.this.JF[A1],implicitevidence$422:Manifest[A1],implicitevidence$423:FlatUnionFormats.this.JF[A2],implicitevidence$424:Manifest[A2],implicitevidence$425:FlatUnionFormats.this.JF[A3],implicitevidence$426:Manifest[A3],implicitevidence$427:FlatUnionFormats.this.JF[A4],implicitevidence$428:Manifest[A4],implicitevidence$429:FlatUnionFormats.this.JF[A5],implicitevidence$430:Manifest[A5],implicitevidence$431:FlatUnionFormats.this.JF[A6],implicitevidence$432:Manifest[A6],implicitevidence$433:FlatUnionFormats.this.JF[A7],implicitevidence$434:Manifest[A7],implicitevidence$435:FlatUnionFormats.this.JF[A8],implicitevidence$436:Manifest[A8],implicitevidence$437:FlatUnionFormats.this.JF[A9],implicitevidence$438:Manifest[A9],implicitevidence$439:FlatUnionFormats.this.JF[A10],implicitevidence$440:Manifest[A10],implicitevidence$441:FlatUnionFormats.this.JF[A11],implicitevidence$442:Manifest[A11],implicitevidence$443:FlatUnionFormats.this.JF[A12],implicitevidence$444:Manifest[A12],implicitevidence$445:FlatUnionFormats.this.JF[A13],implicitevidence$446:Manifest[A13],implicitevidence$447:FlatUnionFormats.this.JF[A14],implicitevidence$448:Manifest[A14],implicitevidence$449:FlatUnionFormats.this.JF[A15],implicitevidence$450:Manifest[A15],implicitevidence$451:FlatUnionFormats.this.JF[A16],implicitevidence$452:Manifest[A16],implicitevidence$453:FlatUnionFormats.this.JF[A17],implicitevidence$454:Manifest[A17],implicitevidence$455:FlatUnionFormats.this.JF[A18],implicitevidence$456:Manifest[A18],implicitevidence$457:FlatUnionFormats.this.JF[A19],implicitevidence$458:Manifest[A19],implicitevidence$459:FlatUnionFormats.this.JF[A20],implicitevidence$460:Manifest[A20],implicitevidence$461:FlatUnionFormats.this.JF[A21],implicitevidence$462:Manifest[A21]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat20", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat20", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat20[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitevidence$381:FlatUnionFormats.this.JF[A1],implicitevidence$382:Manifest[A1],implicitevidence$383:FlatUnionFormats.this.JF[A2],implicitevidence$384:Manifest[A2],implicitevidence$385:FlatUnionFormats.this.JF[A3],implicitevidence$386:Manifest[A3],implicitevidence$387:FlatUnionFormats.this.JF[A4],implicitevidence$388:Manifest[A4],implicitevidence$389:FlatUnionFormats.this.JF[A5],implicitevidence$390:Manifest[A5],implicitevidence$391:FlatUnionFormats.this.JF[A6],implicitevidence$392:Manifest[A6],implicitevidence$393:FlatUnionFormats.this.JF[A7],implicitevidence$394:Manifest[A7],implicitevidence$395:FlatUnionFormats.this.JF[A8],implicitevidence$396:Manifest[A8],implicitevidence$397:FlatUnionFormats.this.JF[A9],implicitevidence$398:Manifest[A9],implicitevidence$399:FlatUnionFormats.this.JF[A10],implicitevidence$400:Manifest[A10],implicitevidence$401:FlatUnionFormats.this.JF[A11],implicitevidence$402:Manifest[A11],implicitevidence$403:FlatUnionFormats.this.JF[A12],implicitevidence$404:Manifest[A12],implicitevidence$405:FlatUnionFormats.this.JF[A13],implicitevidence$406:Manifest[A13],implicitevidence$407:FlatUnionFormats.this.JF[A14],implicitevidence$408:Manifest[A14],implicitevidence$409:FlatUnionFormats.this.JF[A15],implicitevidence$410:Manifest[A15],implicitevidence$411:FlatUnionFormats.this.JF[A16],implicitevidence$412:Manifest[A16],implicitevidence$413:FlatUnionFormats.this.JF[A17],implicitevidence$414:Manifest[A17],implicitevidence$415:FlatUnionFormats.this.JF[A18],implicitevidence$416:Manifest[A18],implicitevidence$417:FlatUnionFormats.this.JF[A19],implicitevidence$418:Manifest[A19],implicitevidence$419:FlatUnionFormats.this.JF[A20],implicitevidence$420:Manifest[A20]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat19", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat19", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat19[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitevidence$343:FlatUnionFormats.this.JF[A1],implicitevidence$344:Manifest[A1],implicitevidence$345:FlatUnionFormats.this.JF[A2],implicitevidence$346:Manifest[A2],implicitevidence$347:FlatUnionFormats.this.JF[A3],implicitevidence$348:Manifest[A3],implicitevidence$349:FlatUnionFormats.this.JF[A4],implicitevidence$350:Manifest[A4],implicitevidence$351:FlatUnionFormats.this.JF[A5],implicitevidence$352:Manifest[A5],implicitevidence$353:FlatUnionFormats.this.JF[A6],implicitevidence$354:Manifest[A6],implicitevidence$355:FlatUnionFormats.this.JF[A7],implicitevidence$356:Manifest[A7],implicitevidence$357:FlatUnionFormats.this.JF[A8],implicitevidence$358:Manifest[A8],implicitevidence$359:FlatUnionFormats.this.JF[A9],implicitevidence$360:Manifest[A9],implicitevidence$361:FlatUnionFormats.this.JF[A10],implicitevidence$362:Manifest[A10],implicitevidence$363:FlatUnionFormats.this.JF[A11],implicitevidence$364:Manifest[A11],implicitevidence$365:FlatUnionFormats.this.JF[A12],implicitevidence$366:Manifest[A12],implicitevidence$367:FlatUnionFormats.this.JF[A13],implicitevidence$368:Manifest[A13],implicitevidence$369:FlatUnionFormats.this.JF[A14],implicitevidence$370:Manifest[A14],implicitevidence$371:FlatUnionFormats.this.JF[A15],implicitevidence$372:Manifest[A15],implicitevidence$373:FlatUnionFormats.this.JF[A16],implicitevidence$374:Manifest[A16],implicitevidence$375:FlatUnionFormats.this.JF[A17],implicitevidence$376:Manifest[A17],implicitevidence$377:FlatUnionFormats.this.JF[A18],implicitevidence$378:Manifest[A18],implicitevidence$379:FlatUnionFormats.this.JF[A19],implicitevidence$380:Manifest[A19]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat18", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat18", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat18[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitevidence$307:FlatUnionFormats.this.JF[A1],implicitevidence$308:Manifest[A1],implicitevidence$309:FlatUnionFormats.this.JF[A2],implicitevidence$310:Manifest[A2],implicitevidence$311:FlatUnionFormats.this.JF[A3],implicitevidence$312:Manifest[A3],implicitevidence$313:FlatUnionFormats.this.JF[A4],implicitevidence$314:Manifest[A4],implicitevidence$315:FlatUnionFormats.this.JF[A5],implicitevidence$316:Manifest[A5],implicitevidence$317:FlatUnionFormats.this.JF[A6],implicitevidence$318:Manifest[A6],implicitevidence$319:FlatUnionFormats.this.JF[A7],implicitevidence$320:Manifest[A7],implicitevidence$321:FlatUnionFormats.this.JF[A8],implicitevidence$322:Manifest[A8],implicitevidence$323:FlatUnionFormats.this.JF[A9],implicitevidence$324:Manifest[A9],implicitevidence$325:FlatUnionFormats.this.JF[A10],implicitevidence$326:Manifest[A10],implicitevidence$327:FlatUnionFormats.this.JF[A11],implicitevidence$328:Manifest[A11],implicitevidence$329:FlatUnionFormats.this.JF[A12],implicitevidence$330:Manifest[A12],implicitevidence$331:FlatUnionFormats.this.JF[A13],implicitevidence$332:Manifest[A13],implicitevidence$333:FlatUnionFormats.this.JF[A14],implicitevidence$334:Manifest[A14],implicitevidence$335:FlatUnionFormats.this.JF[A15],implicitevidence$336:Manifest[A15],implicitevidence$337:FlatUnionFormats.this.JF[A16],implicitevidence$338:Manifest[A16],implicitevidence$339:FlatUnionFormats.this.JF[A17],implicitevidence$340:Manifest[A17],implicitevidence$341:FlatUnionFormats.this.JF[A18],implicitevidence$342:Manifest[A18]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat17", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat17", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat17[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitevidence$273:FlatUnionFormats.this.JF[A1],implicitevidence$274:Manifest[A1],implicitevidence$275:FlatUnionFormats.this.JF[A2],implicitevidence$276:Manifest[A2],implicitevidence$277:FlatUnionFormats.this.JF[A3],implicitevidence$278:Manifest[A3],implicitevidence$279:FlatUnionFormats.this.JF[A4],implicitevidence$280:Manifest[A4],implicitevidence$281:FlatUnionFormats.this.JF[A5],implicitevidence$282:Manifest[A5],implicitevidence$283:FlatUnionFormats.this.JF[A6],implicitevidence$284:Manifest[A6],implicitevidence$285:FlatUnionFormats.this.JF[A7],implicitevidence$286:Manifest[A7],implicitevidence$287:FlatUnionFormats.this.JF[A8],implicitevidence$288:Manifest[A8],implicitevidence$289:FlatUnionFormats.this.JF[A9],implicitevidence$290:Manifest[A9],implicitevidence$291:FlatUnionFormats.this.JF[A10],implicitevidence$292:Manifest[A10],implicitevidence$293:FlatUnionFormats.this.JF[A11],implicitevidence$294:Manifest[A11],implicitevidence$295:FlatUnionFormats.this.JF[A12],implicitevidence$296:Manifest[A12],implicitevidence$297:FlatUnionFormats.this.JF[A13],implicitevidence$298:Manifest[A13],implicitevidence$299:FlatUnionFormats.this.JF[A14],implicitevidence$300:Manifest[A14],implicitevidence$301:FlatUnionFormats.this.JF[A15],implicitevidence$302:Manifest[A15],implicitevidence$303:FlatUnionFormats.this.JF[A16],implicitevidence$304:Manifest[A16],implicitevidence$305:FlatUnionFormats.this.JF[A17],implicitevidence$306:Manifest[A17]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat16", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat16", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat16[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitevidence$241:FlatUnionFormats.this.JF[A1],implicitevidence$242:Manifest[A1],implicitevidence$243:FlatUnionFormats.this.JF[A2],implicitevidence$244:Manifest[A2],implicitevidence$245:FlatUnionFormats.this.JF[A3],implicitevidence$246:Manifest[A3],implicitevidence$247:FlatUnionFormats.this.JF[A4],implicitevidence$248:Manifest[A4],implicitevidence$249:FlatUnionFormats.this.JF[A5],implicitevidence$250:Manifest[A5],implicitevidence$251:FlatUnionFormats.this.JF[A6],implicitevidence$252:Manifest[A6],implicitevidence$253:FlatUnionFormats.this.JF[A7],implicitevidence$254:Manifest[A7],implicitevidence$255:FlatUnionFormats.this.JF[A8],implicitevidence$256:Manifest[A8],implicitevidence$257:FlatUnionFormats.this.JF[A9],implicitevidence$258:Manifest[A9],implicitevidence$259:FlatUnionFormats.this.JF[A10],implicitevidence$260:Manifest[A10],implicitevidence$261:FlatUnionFormats.this.JF[A11],implicitevidence$262:Manifest[A11],implicitevidence$263:FlatUnionFormats.this.JF[A12],implicitevidence$264:Manifest[A12],implicitevidence$265:FlatUnionFormats.this.JF[A13],implicitevidence$266:Manifest[A13],implicitevidence$267:FlatUnionFormats.this.JF[A14],implicitevidence$268:Manifest[A14],implicitevidence$269:FlatUnionFormats.this.JF[A15],implicitevidence$270:Manifest[A15],implicitevidence$271:FlatUnionFormats.this.JF[A16],implicitevidence$272:Manifest[A16]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat15", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat15", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat15[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitevidence$211:FlatUnionFormats.this.JF[A1],implicitevidence$212:Manifest[A1],implicitevidence$213:FlatUnionFormats.this.JF[A2],implicitevidence$214:Manifest[A2],implicitevidence$215:FlatUnionFormats.this.JF[A3],implicitevidence$216:Manifest[A3],implicitevidence$217:FlatUnionFormats.this.JF[A4],implicitevidence$218:Manifest[A4],implicitevidence$219:FlatUnionFormats.this.JF[A5],implicitevidence$220:Manifest[A5],implicitevidence$221:FlatUnionFormats.this.JF[A6],implicitevidence$222:Manifest[A6],implicitevidence$223:FlatUnionFormats.this.JF[A7],implicitevidence$224:Manifest[A7],implicitevidence$225:FlatUnionFormats.this.JF[A8],implicitevidence$226:Manifest[A8],implicitevidence$227:FlatUnionFormats.this.JF[A9],implicitevidence$228:Manifest[A9],implicitevidence$229:FlatUnionFormats.this.JF[A10],implicitevidence$230:Manifest[A10],implicitevidence$231:FlatUnionFormats.this.JF[A11],implicitevidence$232:Manifest[A11],implicitevidence$233:FlatUnionFormats.this.JF[A12],implicitevidence$234:Manifest[A12],implicitevidence$235:FlatUnionFormats.this.JF[A13],implicitevidence$236:Manifest[A13],implicitevidence$237:FlatUnionFormats.this.JF[A14],implicitevidence$238:Manifest[A14],implicitevidence$239:FlatUnionFormats.this.JF[A15],implicitevidence$240:Manifest[A15]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat14", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat14", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat14[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitevidence$183:FlatUnionFormats.this.JF[A1],implicitevidence$184:Manifest[A1],implicitevidence$185:FlatUnionFormats.this.JF[A2],implicitevidence$186:Manifest[A2],implicitevidence$187:FlatUnionFormats.this.JF[A3],implicitevidence$188:Manifest[A3],implicitevidence$189:FlatUnionFormats.this.JF[A4],implicitevidence$190:Manifest[A4],implicitevidence$191:FlatUnionFormats.this.JF[A5],implicitevidence$192:Manifest[A5],implicitevidence$193:FlatUnionFormats.this.JF[A6],implicitevidence$194:Manifest[A6],implicitevidence$195:FlatUnionFormats.this.JF[A7],implicitevidence$196:Manifest[A7],implicitevidence$197:FlatUnionFormats.this.JF[A8],implicitevidence$198:Manifest[A8],implicitevidence$199:FlatUnionFormats.this.JF[A9],implicitevidence$200:Manifest[A9],implicitevidence$201:FlatUnionFormats.this.JF[A10],implicitevidence$202:Manifest[A10],implicitevidence$203:FlatUnionFormats.this.JF[A11],implicitevidence$204:Manifest[A11],implicitevidence$205:FlatUnionFormats.this.JF[A12],implicitevidence$206:Manifest[A12],implicitevidence$207:FlatUnionFormats.this.JF[A13],implicitevidence$208:Manifest[A13],implicitevidence$209:FlatUnionFormats.this.JF[A14],implicitevidence$210:Manifest[A14]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat13", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat13", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat13[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitevidence$157:FlatUnionFormats.this.JF[A1],implicitevidence$158:Manifest[A1],implicitevidence$159:FlatUnionFormats.this.JF[A2],implicitevidence$160:Manifest[A2],implicitevidence$161:FlatUnionFormats.this.JF[A3],implicitevidence$162:Manifest[A3],implicitevidence$163:FlatUnionFormats.this.JF[A4],implicitevidence$164:Manifest[A4],implicitevidence$165:FlatUnionFormats.this.JF[A5],implicitevidence$166:Manifest[A5],implicitevidence$167:FlatUnionFormats.this.JF[A6],implicitevidence$168:Manifest[A6],implicitevidence$169:FlatUnionFormats.this.JF[A7],implicitevidence$170:Manifest[A7],implicitevidence$171:FlatUnionFormats.this.JF[A8],implicitevidence$172:Manifest[A8],implicitevidence$173:FlatUnionFormats.this.JF[A9],implicitevidence$174:Manifest[A9],implicitevidence$175:FlatUnionFormats.this.JF[A10],implicitevidence$176:Manifest[A10],implicitevidence$177:FlatUnionFormats.this.JF[A11],implicitevidence$178:Manifest[A11],implicitevidence$179:FlatUnionFormats.this.JF[A12],implicitevidence$180:Manifest[A12],implicitevidence$181:FlatUnionFormats.this.JF[A13],implicitevidence$182:Manifest[A13]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat12", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat12", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat12[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitevidence$133:FlatUnionFormats.this.JF[A1],implicitevidence$134:Manifest[A1],implicitevidence$135:FlatUnionFormats.this.JF[A2],implicitevidence$136:Manifest[A2],implicitevidence$137:FlatUnionFormats.this.JF[A3],implicitevidence$138:Manifest[A3],implicitevidence$139:FlatUnionFormats.this.JF[A4],implicitevidence$140:Manifest[A4],implicitevidence$141:FlatUnionFormats.this.JF[A5],implicitevidence$142:Manifest[A5],implicitevidence$143:FlatUnionFormats.this.JF[A6],implicitevidence$144:Manifest[A6],implicitevidence$145:FlatUnionFormats.this.JF[A7],implicitevidence$146:Manifest[A7],implicitevidence$147:FlatUnionFormats.this.JF[A8],implicitevidence$148:Manifest[A8],implicitevidence$149:FlatUnionFormats.this.JF[A9],implicitevidence$150:Manifest[A9],implicitevidence$151:FlatUnionFormats.this.JF[A10],implicitevidence$152:Manifest[A10],implicitevidence$153:FlatUnionFormats.this.JF[A11],implicitevidence$154:Manifest[A11],implicitevidence$155:FlatUnionFormats.this.JF[A12],implicitevidence$156:Manifest[A12]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat11", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat11", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat11[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitevidence$111:FlatUnionFormats.this.JF[A1],implicitevidence$112:Manifest[A1],implicitevidence$113:FlatUnionFormats.this.JF[A2],implicitevidence$114:Manifest[A2],implicitevidence$115:FlatUnionFormats.this.JF[A3],implicitevidence$116:Manifest[A3],implicitevidence$117:FlatUnionFormats.this.JF[A4],implicitevidence$118:Manifest[A4],implicitevidence$119:FlatUnionFormats.this.JF[A5],implicitevidence$120:Manifest[A5],implicitevidence$121:FlatUnionFormats.this.JF[A6],implicitevidence$122:Manifest[A6],implicitevidence$123:FlatUnionFormats.this.JF[A7],implicitevidence$124:Manifest[A7],implicitevidence$125:FlatUnionFormats.this.JF[A8],implicitevidence$126:Manifest[A8],implicitevidence$127:FlatUnionFormats.this.JF[A9],implicitevidence$128:Manifest[A9],implicitevidence$129:FlatUnionFormats.this.JF[A10],implicitevidence$130:Manifest[A10],implicitevidence$131:FlatUnionFormats.this.JF[A11],implicitevidence$132:Manifest[A11]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat10", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat10", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat10[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitevidence$91:FlatUnionFormats.this.JF[A1],implicitevidence$92:Manifest[A1],implicitevidence$93:FlatUnionFormats.this.JF[A2],implicitevidence$94:Manifest[A2],implicitevidence$95:FlatUnionFormats.this.JF[A3],implicitevidence$96:Manifest[A3],implicitevidence$97:FlatUnionFormats.this.JF[A4],implicitevidence$98:Manifest[A4],implicitevidence$99:FlatUnionFormats.this.JF[A5],implicitevidence$100:Manifest[A5],implicitevidence$101:FlatUnionFormats.this.JF[A6],implicitevidence$102:Manifest[A6],implicitevidence$103:FlatUnionFormats.this.JF[A7],implicitevidence$104:Manifest[A7],implicitevidence$105:FlatUnionFormats.this.JF[A8],implicitevidence$106:Manifest[A8],implicitevidence$107:FlatUnionFormats.this.JF[A9],implicitevidence$108:Manifest[A9],implicitevidence$109:FlatUnionFormats.this.JF[A10],implicitevidence$110:Manifest[A10]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat9", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat9", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat9[U,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitevidence$73:FlatUnionFormats.this.JF[A1],implicitevidence$74:Manifest[A1],implicitevidence$75:FlatUnionFormats.this.JF[A2],implicitevidence$76:Manifest[A2],implicitevidence$77:FlatUnionFormats.this.JF[A3],implicitevidence$78:Manifest[A3],implicitevidence$79:FlatUnionFormats.this.JF[A4],implicitevidence$80:Manifest[A4],implicitevidence$81:FlatUnionFormats.this.JF[A5],implicitevidence$82:Manifest[A5],implicitevidence$83:FlatUnionFormats.this.JF[A6],implicitevidence$84:Manifest[A6],implicitevidence$85:FlatUnionFormats.this.JF[A7],implicitevidence$86:Manifest[A7],implicitevidence$87:FlatUnionFormats.this.JF[A8],implicitevidence$88:Manifest[A8],implicitevidence$89:FlatUnionFormats.this.JF[A9],implicitevidence$90:Manifest[A9]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat8", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat8", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat8[U,A1,A2,A3,A4,A5,A6,A7,A8](implicitevidence$57:FlatUnionFormats.this.JF[A1],implicitevidence$58:Manifest[A1],implicitevidence$59:FlatUnionFormats.this.JF[A2],implicitevidence$60:Manifest[A2],implicitevidence$61:FlatUnionFormats.this.JF[A3],implicitevidence$62:Manifest[A3],implicitevidence$63:FlatUnionFormats.this.JF[A4],implicitevidence$64:Manifest[A4],implicitevidence$65:FlatUnionFormats.this.JF[A5],implicitevidence$66:Manifest[A5],implicitevidence$67:FlatUnionFormats.this.JF[A6],implicitevidence$68:Manifest[A6],implicitevidence$69:FlatUnionFormats.this.JF[A7],implicitevidence$70:Manifest[A7],implicitevidence$71:FlatUnionFormats.this.JF[A8],implicitevidence$72:Manifest[A8]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat7", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat7", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat7[U,A1,A2,A3,A4,A5,A6,A7](implicitevidence$43:FlatUnionFormats.this.JF[A1],implicitevidence$44:Manifest[A1],implicitevidence$45:FlatUnionFormats.this.JF[A2],implicitevidence$46:Manifest[A2],implicitevidence$47:FlatUnionFormats.this.JF[A3],implicitevidence$48:Manifest[A3],implicitevidence$49:FlatUnionFormats.this.JF[A4],implicitevidence$50:Manifest[A4],implicitevidence$51:FlatUnionFormats.this.JF[A5],implicitevidence$52:Manifest[A5],implicitevidence$53:FlatUnionFormats.this.JF[A6],implicitevidence$54:Manifest[A6],implicitevidence$55:FlatUnionFormats.this.JF[A7],implicitevidence$56:Manifest[A7]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat6", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat6", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat6[U,A1,A2,A3,A4,A5,A6](implicitevidence$31:FlatUnionFormats.this.JF[A1],implicitevidence$32:Manifest[A1],implicitevidence$33:FlatUnionFormats.this.JF[A2],implicitevidence$34:Manifest[A2],implicitevidence$35:FlatUnionFormats.this.JF[A3],implicitevidence$36:Manifest[A3],implicitevidence$37:FlatUnionFormats.this.JF[A4],implicitevidence$38:Manifest[A4],implicitevidence$39:FlatUnionFormats.this.JF[A5],implicitevidence$40:Manifest[A5],implicitevidence$41:FlatUnionFormats.this.JF[A6],implicitevidence$42:Manifest[A6]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat5", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat5", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat5[U,A1,A2,A3,A4,A5](implicitevidence$21:FlatUnionFormats.this.JF[A1],implicitevidence$22:Manifest[A1],implicitevidence$23:FlatUnionFormats.this.JF[A2],implicitevidence$24:Manifest[A2],implicitevidence$25:FlatUnionFormats.this.JF[A3],implicitevidence$26:Manifest[A3],implicitevidence$27:FlatUnionFormats.this.JF[A4],implicitevidence$28:Manifest[A4],implicitevidence$29:FlatUnionFormats.this.JF[A5],implicitevidence$30:Manifest[A5]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat4", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat4", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat4[U,A1,A2,A3,A4](implicitevidence$13:FlatUnionFormats.this.JF[A1],implicitevidence$14:Manifest[A1],implicitevidence$15:FlatUnionFormats.this.JF[A2],implicitevidence$16:Manifest[A2],implicitevidence$17:FlatUnionFormats.this.JF[A3],implicitevidence$18:Manifest[A3],implicitevidence$19:FlatUnionFormats.this.JF[A4],implicitevidence$20:Manifest[A4]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat3", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat3", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat3[U,A1,A2,A3](implicitevidence$7:FlatUnionFormats.this.JF[A1],implicitevidence$8:Manifest[A1],implicitevidence$9:FlatUnionFormats.this.JF[A2],implicitevidence$10:Manifest[A2],implicitevidence$11:FlatUnionFormats.this.JF[A3],implicitevidence$12:Manifest[A3]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat2", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat2", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat2[U,A1,A2](implicitevidence$3:FlatUnionFormats.this.JF[A1],implicitevidence$4:Manifest[A1],implicitevidence$5:FlatUnionFormats.this.JF[A2],implicitevidence$6:Manifest[A2]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat1", "tail" : "(arg0: JF[A1], arg1: Manifest[A1]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat1", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#flatUnionFormat1[U,A1](implicitevidence$1:FlatUnionFormats.this.JF[A1],implicitevidence$2:Manifest[A1]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat22", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21], arg42: JF[A22], arg43: Manifest[A22]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat22", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat22[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitevidence$463:UnionFormats.this.JF[A1],implicitevidence$464:Manifest[A1],implicitevidence$465:UnionFormats.this.JF[A2],implicitevidence$466:Manifest[A2],implicitevidence$467:UnionFormats.this.JF[A3],implicitevidence$468:Manifest[A3],implicitevidence$469:UnionFormats.this.JF[A4],implicitevidence$470:Manifest[A4],implicitevidence$471:UnionFormats.this.JF[A5],implicitevidence$472:Manifest[A5],implicitevidence$473:UnionFormats.this.JF[A6],implicitevidence$474:Manifest[A6],implicitevidence$475:UnionFormats.this.JF[A7],implicitevidence$476:Manifest[A7],implicitevidence$477:UnionFormats.this.JF[A8],implicitevidence$478:Manifest[A8],implicitevidence$479:UnionFormats.this.JF[A9],implicitevidence$480:Manifest[A9],implicitevidence$481:UnionFormats.this.JF[A10],implicitevidence$482:Manifest[A10],implicitevidence$483:UnionFormats.this.JF[A11],implicitevidence$484:Manifest[A11],implicitevidence$485:UnionFormats.this.JF[A12],implicitevidence$486:Manifest[A12],implicitevidence$487:UnionFormats.this.JF[A13],implicitevidence$488:Manifest[A13],implicitevidence$489:UnionFormats.this.JF[A14],implicitevidence$490:Manifest[A14],implicitevidence$491:UnionFormats.this.JF[A15],implicitevidence$492:Manifest[A15],implicitevidence$493:UnionFormats.this.JF[A16],implicitevidence$494:Manifest[A16],implicitevidence$495:UnionFormats.this.JF[A17],implicitevidence$496:Manifest[A17],implicitevidence$497:UnionFormats.this.JF[A18],implicitevidence$498:Manifest[A18],implicitevidence$499:UnionFormats.this.JF[A19],implicitevidence$500:Manifest[A19],implicitevidence$501:UnionFormats.this.JF[A20],implicitevidence$502:Manifest[A20],implicitevidence$503:UnionFormats.this.JF[A21],implicitevidence$504:Manifest[A21],implicitevidence$505:UnionFormats.this.JF[A22],implicitevidence$506:Manifest[A22]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat21", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat21", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat21[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitevidence$421:UnionFormats.this.JF[A1],implicitevidence$422:Manifest[A1],implicitevidence$423:UnionFormats.this.JF[A2],implicitevidence$424:Manifest[A2],implicitevidence$425:UnionFormats.this.JF[A3],implicitevidence$426:Manifest[A3],implicitevidence$427:UnionFormats.this.JF[A4],implicitevidence$428:Manifest[A4],implicitevidence$429:UnionFormats.this.JF[A5],implicitevidence$430:Manifest[A5],implicitevidence$431:UnionFormats.this.JF[A6],implicitevidence$432:Manifest[A6],implicitevidence$433:UnionFormats.this.JF[A7],implicitevidence$434:Manifest[A7],implicitevidence$435:UnionFormats.this.JF[A8],implicitevidence$436:Manifest[A8],implicitevidence$437:UnionFormats.this.JF[A9],implicitevidence$438:Manifest[A9],implicitevidence$439:UnionFormats.this.JF[A10],implicitevidence$440:Manifest[A10],implicitevidence$441:UnionFormats.this.JF[A11],implicitevidence$442:Manifest[A11],implicitevidence$443:UnionFormats.this.JF[A12],implicitevidence$444:Manifest[A12],implicitevidence$445:UnionFormats.this.JF[A13],implicitevidence$446:Manifest[A13],implicitevidence$447:UnionFormats.this.JF[A14],implicitevidence$448:Manifest[A14],implicitevidence$449:UnionFormats.this.JF[A15],implicitevidence$450:Manifest[A15],implicitevidence$451:UnionFormats.this.JF[A16],implicitevidence$452:Manifest[A16],implicitevidence$453:UnionFormats.this.JF[A17],implicitevidence$454:Manifest[A17],implicitevidence$455:UnionFormats.this.JF[A18],implicitevidence$456:Manifest[A18],implicitevidence$457:UnionFormats.this.JF[A19],implicitevidence$458:Manifest[A19],implicitevidence$459:UnionFormats.this.JF[A20],implicitevidence$460:Manifest[A20],implicitevidence$461:UnionFormats.this.JF[A21],implicitevidence$462:Manifest[A21]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat20", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat20", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat20[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitevidence$381:UnionFormats.this.JF[A1],implicitevidence$382:Manifest[A1],implicitevidence$383:UnionFormats.this.JF[A2],implicitevidence$384:Manifest[A2],implicitevidence$385:UnionFormats.this.JF[A3],implicitevidence$386:Manifest[A3],implicitevidence$387:UnionFormats.this.JF[A4],implicitevidence$388:Manifest[A4],implicitevidence$389:UnionFormats.this.JF[A5],implicitevidence$390:Manifest[A5],implicitevidence$391:UnionFormats.this.JF[A6],implicitevidence$392:Manifest[A6],implicitevidence$393:UnionFormats.this.JF[A7],implicitevidence$394:Manifest[A7],implicitevidence$395:UnionFormats.this.JF[A8],implicitevidence$396:Manifest[A8],implicitevidence$397:UnionFormats.this.JF[A9],implicitevidence$398:Manifest[A9],implicitevidence$399:UnionFormats.this.JF[A10],implicitevidence$400:Manifest[A10],implicitevidence$401:UnionFormats.this.JF[A11],implicitevidence$402:Manifest[A11],implicitevidence$403:UnionFormats.this.JF[A12],implicitevidence$404:Manifest[A12],implicitevidence$405:UnionFormats.this.JF[A13],implicitevidence$406:Manifest[A13],implicitevidence$407:UnionFormats.this.JF[A14],implicitevidence$408:Manifest[A14],implicitevidence$409:UnionFormats.this.JF[A15],implicitevidence$410:Manifest[A15],implicitevidence$411:UnionFormats.this.JF[A16],implicitevidence$412:Manifest[A16],implicitevidence$413:UnionFormats.this.JF[A17],implicitevidence$414:Manifest[A17],implicitevidence$415:UnionFormats.this.JF[A18],implicitevidence$416:Manifest[A18],implicitevidence$417:UnionFormats.this.JF[A19],implicitevidence$418:Manifest[A19],implicitevidence$419:UnionFormats.this.JF[A20],implicitevidence$420:Manifest[A20]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat19", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat19", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat19[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitevidence$343:UnionFormats.this.JF[A1],implicitevidence$344:Manifest[A1],implicitevidence$345:UnionFormats.this.JF[A2],implicitevidence$346:Manifest[A2],implicitevidence$347:UnionFormats.this.JF[A3],implicitevidence$348:Manifest[A3],implicitevidence$349:UnionFormats.this.JF[A4],implicitevidence$350:Manifest[A4],implicitevidence$351:UnionFormats.this.JF[A5],implicitevidence$352:Manifest[A5],implicitevidence$353:UnionFormats.this.JF[A6],implicitevidence$354:Manifest[A6],implicitevidence$355:UnionFormats.this.JF[A7],implicitevidence$356:Manifest[A7],implicitevidence$357:UnionFormats.this.JF[A8],implicitevidence$358:Manifest[A8],implicitevidence$359:UnionFormats.this.JF[A9],implicitevidence$360:Manifest[A9],implicitevidence$361:UnionFormats.this.JF[A10],implicitevidence$362:Manifest[A10],implicitevidence$363:UnionFormats.this.JF[A11],implicitevidence$364:Manifest[A11],implicitevidence$365:UnionFormats.this.JF[A12],implicitevidence$366:Manifest[A12],implicitevidence$367:UnionFormats.this.JF[A13],implicitevidence$368:Manifest[A13],implicitevidence$369:UnionFormats.this.JF[A14],implicitevidence$370:Manifest[A14],implicitevidence$371:UnionFormats.this.JF[A15],implicitevidence$372:Manifest[A15],implicitevidence$373:UnionFormats.this.JF[A16],implicitevidence$374:Manifest[A16],implicitevidence$375:UnionFormats.this.JF[A17],implicitevidence$376:Manifest[A17],implicitevidence$377:UnionFormats.this.JF[A18],implicitevidence$378:Manifest[A18],implicitevidence$379:UnionFormats.this.JF[A19],implicitevidence$380:Manifest[A19]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat18", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat18", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat18[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitevidence$307:UnionFormats.this.JF[A1],implicitevidence$308:Manifest[A1],implicitevidence$309:UnionFormats.this.JF[A2],implicitevidence$310:Manifest[A2],implicitevidence$311:UnionFormats.this.JF[A3],implicitevidence$312:Manifest[A3],implicitevidence$313:UnionFormats.this.JF[A4],implicitevidence$314:Manifest[A4],implicitevidence$315:UnionFormats.this.JF[A5],implicitevidence$316:Manifest[A5],implicitevidence$317:UnionFormats.this.JF[A6],implicitevidence$318:Manifest[A6],implicitevidence$319:UnionFormats.this.JF[A7],implicitevidence$320:Manifest[A7],implicitevidence$321:UnionFormats.this.JF[A8],implicitevidence$322:Manifest[A8],implicitevidence$323:UnionFormats.this.JF[A9],implicitevidence$324:Manifest[A9],implicitevidence$325:UnionFormats.this.JF[A10],implicitevidence$326:Manifest[A10],implicitevidence$327:UnionFormats.this.JF[A11],implicitevidence$328:Manifest[A11],implicitevidence$329:UnionFormats.this.JF[A12],implicitevidence$330:Manifest[A12],implicitevidence$331:UnionFormats.this.JF[A13],implicitevidence$332:Manifest[A13],implicitevidence$333:UnionFormats.this.JF[A14],implicitevidence$334:Manifest[A14],implicitevidence$335:UnionFormats.this.JF[A15],implicitevidence$336:Manifest[A15],implicitevidence$337:UnionFormats.this.JF[A16],implicitevidence$338:Manifest[A16],implicitevidence$339:UnionFormats.this.JF[A17],implicitevidence$340:Manifest[A17],implicitevidence$341:UnionFormats.this.JF[A18],implicitevidence$342:Manifest[A18]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat17", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat17", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat17[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitevidence$273:UnionFormats.this.JF[A1],implicitevidence$274:Manifest[A1],implicitevidence$275:UnionFormats.this.JF[A2],implicitevidence$276:Manifest[A2],implicitevidence$277:UnionFormats.this.JF[A3],implicitevidence$278:Manifest[A3],implicitevidence$279:UnionFormats.this.JF[A4],implicitevidence$280:Manifest[A4],implicitevidence$281:UnionFormats.this.JF[A5],implicitevidence$282:Manifest[A5],implicitevidence$283:UnionFormats.this.JF[A6],implicitevidence$284:Manifest[A6],implicitevidence$285:UnionFormats.this.JF[A7],implicitevidence$286:Manifest[A7],implicitevidence$287:UnionFormats.this.JF[A8],implicitevidence$288:Manifest[A8],implicitevidence$289:UnionFormats.this.JF[A9],implicitevidence$290:Manifest[A9],implicitevidence$291:UnionFormats.this.JF[A10],implicitevidence$292:Manifest[A10],implicitevidence$293:UnionFormats.this.JF[A11],implicitevidence$294:Manifest[A11],implicitevidence$295:UnionFormats.this.JF[A12],implicitevidence$296:Manifest[A12],implicitevidence$297:UnionFormats.this.JF[A13],implicitevidence$298:Manifest[A13],implicitevidence$299:UnionFormats.this.JF[A14],implicitevidence$300:Manifest[A14],implicitevidence$301:UnionFormats.this.JF[A15],implicitevidence$302:Manifest[A15],implicitevidence$303:UnionFormats.this.JF[A16],implicitevidence$304:Manifest[A16],implicitevidence$305:UnionFormats.this.JF[A17],implicitevidence$306:Manifest[A17]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat16", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat16", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat16[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitevidence$241:UnionFormats.this.JF[A1],implicitevidence$242:Manifest[A1],implicitevidence$243:UnionFormats.this.JF[A2],implicitevidence$244:Manifest[A2],implicitevidence$245:UnionFormats.this.JF[A3],implicitevidence$246:Manifest[A3],implicitevidence$247:UnionFormats.this.JF[A4],implicitevidence$248:Manifest[A4],implicitevidence$249:UnionFormats.this.JF[A5],implicitevidence$250:Manifest[A5],implicitevidence$251:UnionFormats.this.JF[A6],implicitevidence$252:Manifest[A6],implicitevidence$253:UnionFormats.this.JF[A7],implicitevidence$254:Manifest[A7],implicitevidence$255:UnionFormats.this.JF[A8],implicitevidence$256:Manifest[A8],implicitevidence$257:UnionFormats.this.JF[A9],implicitevidence$258:Manifest[A9],implicitevidence$259:UnionFormats.this.JF[A10],implicitevidence$260:Manifest[A10],implicitevidence$261:UnionFormats.this.JF[A11],implicitevidence$262:Manifest[A11],implicitevidence$263:UnionFormats.this.JF[A12],implicitevidence$264:Manifest[A12],implicitevidence$265:UnionFormats.this.JF[A13],implicitevidence$266:Manifest[A13],implicitevidence$267:UnionFormats.this.JF[A14],implicitevidence$268:Manifest[A14],implicitevidence$269:UnionFormats.this.JF[A15],implicitevidence$270:Manifest[A15],implicitevidence$271:UnionFormats.this.JF[A16],implicitevidence$272:Manifest[A16]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat15", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat15", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat15[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitevidence$211:UnionFormats.this.JF[A1],implicitevidence$212:Manifest[A1],implicitevidence$213:UnionFormats.this.JF[A2],implicitevidence$214:Manifest[A2],implicitevidence$215:UnionFormats.this.JF[A3],implicitevidence$216:Manifest[A3],implicitevidence$217:UnionFormats.this.JF[A4],implicitevidence$218:Manifest[A4],implicitevidence$219:UnionFormats.this.JF[A5],implicitevidence$220:Manifest[A5],implicitevidence$221:UnionFormats.this.JF[A6],implicitevidence$222:Manifest[A6],implicitevidence$223:UnionFormats.this.JF[A7],implicitevidence$224:Manifest[A7],implicitevidence$225:UnionFormats.this.JF[A8],implicitevidence$226:Manifest[A8],implicitevidence$227:UnionFormats.this.JF[A9],implicitevidence$228:Manifest[A9],implicitevidence$229:UnionFormats.this.JF[A10],implicitevidence$230:Manifest[A10],implicitevidence$231:UnionFormats.this.JF[A11],implicitevidence$232:Manifest[A11],implicitevidence$233:UnionFormats.this.JF[A12],implicitevidence$234:Manifest[A12],implicitevidence$235:UnionFormats.this.JF[A13],implicitevidence$236:Manifest[A13],implicitevidence$237:UnionFormats.this.JF[A14],implicitevidence$238:Manifest[A14],implicitevidence$239:UnionFormats.this.JF[A15],implicitevidence$240:Manifest[A15]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat14", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat14", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat14[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitevidence$183:UnionFormats.this.JF[A1],implicitevidence$184:Manifest[A1],implicitevidence$185:UnionFormats.this.JF[A2],implicitevidence$186:Manifest[A2],implicitevidence$187:UnionFormats.this.JF[A3],implicitevidence$188:Manifest[A3],implicitevidence$189:UnionFormats.this.JF[A4],implicitevidence$190:Manifest[A4],implicitevidence$191:UnionFormats.this.JF[A5],implicitevidence$192:Manifest[A5],implicitevidence$193:UnionFormats.this.JF[A6],implicitevidence$194:Manifest[A6],implicitevidence$195:UnionFormats.this.JF[A7],implicitevidence$196:Manifest[A7],implicitevidence$197:UnionFormats.this.JF[A8],implicitevidence$198:Manifest[A8],implicitevidence$199:UnionFormats.this.JF[A9],implicitevidence$200:Manifest[A9],implicitevidence$201:UnionFormats.this.JF[A10],implicitevidence$202:Manifest[A10],implicitevidence$203:UnionFormats.this.JF[A11],implicitevidence$204:Manifest[A11],implicitevidence$205:UnionFormats.this.JF[A12],implicitevidence$206:Manifest[A12],implicitevidence$207:UnionFormats.this.JF[A13],implicitevidence$208:Manifest[A13],implicitevidence$209:UnionFormats.this.JF[A14],implicitevidence$210:Manifest[A14]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat13", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat13", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat13[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitevidence$157:UnionFormats.this.JF[A1],implicitevidence$158:Manifest[A1],implicitevidence$159:UnionFormats.this.JF[A2],implicitevidence$160:Manifest[A2],implicitevidence$161:UnionFormats.this.JF[A3],implicitevidence$162:Manifest[A3],implicitevidence$163:UnionFormats.this.JF[A4],implicitevidence$164:Manifest[A4],implicitevidence$165:UnionFormats.this.JF[A5],implicitevidence$166:Manifest[A5],implicitevidence$167:UnionFormats.this.JF[A6],implicitevidence$168:Manifest[A6],implicitevidence$169:UnionFormats.this.JF[A7],implicitevidence$170:Manifest[A7],implicitevidence$171:UnionFormats.this.JF[A8],implicitevidence$172:Manifest[A8],implicitevidence$173:UnionFormats.this.JF[A9],implicitevidence$174:Manifest[A9],implicitevidence$175:UnionFormats.this.JF[A10],implicitevidence$176:Manifest[A10],implicitevidence$177:UnionFormats.this.JF[A11],implicitevidence$178:Manifest[A11],implicitevidence$179:UnionFormats.this.JF[A12],implicitevidence$180:Manifest[A12],implicitevidence$181:UnionFormats.this.JF[A13],implicitevidence$182:Manifest[A13]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat12", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat12", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat12[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitevidence$133:UnionFormats.this.JF[A1],implicitevidence$134:Manifest[A1],implicitevidence$135:UnionFormats.this.JF[A2],implicitevidence$136:Manifest[A2],implicitevidence$137:UnionFormats.this.JF[A3],implicitevidence$138:Manifest[A3],implicitevidence$139:UnionFormats.this.JF[A4],implicitevidence$140:Manifest[A4],implicitevidence$141:UnionFormats.this.JF[A5],implicitevidence$142:Manifest[A5],implicitevidence$143:UnionFormats.this.JF[A6],implicitevidence$144:Manifest[A6],implicitevidence$145:UnionFormats.this.JF[A7],implicitevidence$146:Manifest[A7],implicitevidence$147:UnionFormats.this.JF[A8],implicitevidence$148:Manifest[A8],implicitevidence$149:UnionFormats.this.JF[A9],implicitevidence$150:Manifest[A9],implicitevidence$151:UnionFormats.this.JF[A10],implicitevidence$152:Manifest[A10],implicitevidence$153:UnionFormats.this.JF[A11],implicitevidence$154:Manifest[A11],implicitevidence$155:UnionFormats.this.JF[A12],implicitevidence$156:Manifest[A12]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat11", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat11", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat11[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitevidence$111:UnionFormats.this.JF[A1],implicitevidence$112:Manifest[A1],implicitevidence$113:UnionFormats.this.JF[A2],implicitevidence$114:Manifest[A2],implicitevidence$115:UnionFormats.this.JF[A3],implicitevidence$116:Manifest[A3],implicitevidence$117:UnionFormats.this.JF[A4],implicitevidence$118:Manifest[A4],implicitevidence$119:UnionFormats.this.JF[A5],implicitevidence$120:Manifest[A5],implicitevidence$121:UnionFormats.this.JF[A6],implicitevidence$122:Manifest[A6],implicitevidence$123:UnionFormats.this.JF[A7],implicitevidence$124:Manifest[A7],implicitevidence$125:UnionFormats.this.JF[A8],implicitevidence$126:Manifest[A8],implicitevidence$127:UnionFormats.this.JF[A9],implicitevidence$128:Manifest[A9],implicitevidence$129:UnionFormats.this.JF[A10],implicitevidence$130:Manifest[A10],implicitevidence$131:UnionFormats.this.JF[A11],implicitevidence$132:Manifest[A11]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat10", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat10", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat10[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitevidence$91:UnionFormats.this.JF[A1],implicitevidence$92:Manifest[A1],implicitevidence$93:UnionFormats.this.JF[A2],implicitevidence$94:Manifest[A2],implicitevidence$95:UnionFormats.this.JF[A3],implicitevidence$96:Manifest[A3],implicitevidence$97:UnionFormats.this.JF[A4],implicitevidence$98:Manifest[A4],implicitevidence$99:UnionFormats.this.JF[A5],implicitevidence$100:Manifest[A5],implicitevidence$101:UnionFormats.this.JF[A6],implicitevidence$102:Manifest[A6],implicitevidence$103:UnionFormats.this.JF[A7],implicitevidence$104:Manifest[A7],implicitevidence$105:UnionFormats.this.JF[A8],implicitevidence$106:Manifest[A8],implicitevidence$107:UnionFormats.this.JF[A9],implicitevidence$108:Manifest[A9],implicitevidence$109:UnionFormats.this.JF[A10],implicitevidence$110:Manifest[A10]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat9", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat9", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat9[U,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitevidence$73:UnionFormats.this.JF[A1],implicitevidence$74:Manifest[A1],implicitevidence$75:UnionFormats.this.JF[A2],implicitevidence$76:Manifest[A2],implicitevidence$77:UnionFormats.this.JF[A3],implicitevidence$78:Manifest[A3],implicitevidence$79:UnionFormats.this.JF[A4],implicitevidence$80:Manifest[A4],implicitevidence$81:UnionFormats.this.JF[A5],implicitevidence$82:Manifest[A5],implicitevidence$83:UnionFormats.this.JF[A6],implicitevidence$84:Manifest[A6],implicitevidence$85:UnionFormats.this.JF[A7],implicitevidence$86:Manifest[A7],implicitevidence$87:UnionFormats.this.JF[A8],implicitevidence$88:Manifest[A8],implicitevidence$89:UnionFormats.this.JF[A9],implicitevidence$90:Manifest[A9]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat8", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat8", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat8[U,A1,A2,A3,A4,A5,A6,A7,A8](implicitevidence$57:UnionFormats.this.JF[A1],implicitevidence$58:Manifest[A1],implicitevidence$59:UnionFormats.this.JF[A2],implicitevidence$60:Manifest[A2],implicitevidence$61:UnionFormats.this.JF[A3],implicitevidence$62:Manifest[A3],implicitevidence$63:UnionFormats.this.JF[A4],implicitevidence$64:Manifest[A4],implicitevidence$65:UnionFormats.this.JF[A5],implicitevidence$66:Manifest[A5],implicitevidence$67:UnionFormats.this.JF[A6],implicitevidence$68:Manifest[A6],implicitevidence$69:UnionFormats.this.JF[A7],implicitevidence$70:Manifest[A7],implicitevidence$71:UnionFormats.this.JF[A8],implicitevidence$72:Manifest[A8]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat7", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat7", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat7[U,A1,A2,A3,A4,A5,A6,A7](implicitevidence$43:UnionFormats.this.JF[A1],implicitevidence$44:Manifest[A1],implicitevidence$45:UnionFormats.this.JF[A2],implicitevidence$46:Manifest[A2],implicitevidence$47:UnionFormats.this.JF[A3],implicitevidence$48:Manifest[A3],implicitevidence$49:UnionFormats.this.JF[A4],implicitevidence$50:Manifest[A4],implicitevidence$51:UnionFormats.this.JF[A5],implicitevidence$52:Manifest[A5],implicitevidence$53:UnionFormats.this.JF[A6],implicitevidence$54:Manifest[A6],implicitevidence$55:UnionFormats.this.JF[A7],implicitevidence$56:Manifest[A7]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat6", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat6", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat6[U,A1,A2,A3,A4,A5,A6](implicitevidence$31:UnionFormats.this.JF[A1],implicitevidence$32:Manifest[A1],implicitevidence$33:UnionFormats.this.JF[A2],implicitevidence$34:Manifest[A2],implicitevidence$35:UnionFormats.this.JF[A3],implicitevidence$36:Manifest[A3],implicitevidence$37:UnionFormats.this.JF[A4],implicitevidence$38:Manifest[A4],implicitevidence$39:UnionFormats.this.JF[A5],implicitevidence$40:Manifest[A5],implicitevidence$41:UnionFormats.this.JF[A6],implicitevidence$42:Manifest[A6]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat5", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat5", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat5[U,A1,A2,A3,A4,A5](implicitevidence$21:UnionFormats.this.JF[A1],implicitevidence$22:Manifest[A1],implicitevidence$23:UnionFormats.this.JF[A2],implicitevidence$24:Manifest[A2],implicitevidence$25:UnionFormats.this.JF[A3],implicitevidence$26:Manifest[A3],implicitevidence$27:UnionFormats.this.JF[A4],implicitevidence$28:Manifest[A4],implicitevidence$29:UnionFormats.this.JF[A5],implicitevidence$30:Manifest[A5]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat4", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat4", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat4[U,A1,A2,A3,A4](implicitevidence$13:UnionFormats.this.JF[A1],implicitevidence$14:Manifest[A1],implicitevidence$15:UnionFormats.this.JF[A2],implicitevidence$16:Manifest[A2],implicitevidence$17:UnionFormats.this.JF[A3],implicitevidence$18:Manifest[A3],implicitevidence$19:UnionFormats.this.JF[A4],implicitevidence$20:Manifest[A4]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat3", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat3", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat3[U,A1,A2,A3](implicitevidence$7:UnionFormats.this.JF[A1],implicitevidence$8:Manifest[A1],implicitevidence$9:UnionFormats.this.JF[A2],implicitevidence$10:Manifest[A2],implicitevidence$11:UnionFormats.this.JF[A3],implicitevidence$12:Manifest[A3]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat2", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat2", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat2[U,A1,A2](implicitevidence$3:UnionFormats.this.JF[A1],implicitevidence$4:Manifest[A1],implicitevidence$5:UnionFormats.this.JF[A2],implicitevidence$6:Manifest[A2]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat1", "tail" : "(arg0: JF[A1], arg1: Manifest[A1]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat1", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#unionFormat1[U,A1](implicitevidence$1:UnionFormats.this.JF[A1],implicitevidence$2:Manifest[A1]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "contramapKeyWriter", "tail" : "(f: (B) ⇒ A)(ev: JsonKeyWriter[A]): JsonKeyWriter[B]", "member" : "sjsonnew.AdditionalFormats.contramapKeyWriter", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#contramapKeyWriter[A,B](f:B=>A)(implicitev:sjsonnew.JsonKeyWriter[A]):sjsonnew.JsonKeyWriter[B]", "kind" : "def"}, {"label" : "mapKeyReader", "tail" : "(f: (A) ⇒ B)(ev: JsonKeyReader[A]): JsonKeyReader[B]", "member" : "sjsonnew.AdditionalFormats.mapKeyReader", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#mapKeyReader[A,B](f:A=>B)(implicitev:sjsonnew.JsonKeyReader[A]):sjsonnew.JsonKeyReader[B]", "kind" : "def"}, {"label" : "contramapWriter", "tail" : "(f: (B) ⇒ A)(ev: JsonWriter[A]): JsonWriter[B]", "member" : "sjsonnew.AdditionalFormats.contramapWriter", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#contramapWriter[A,B](f:B=>A)(implicitev:sjsonnew.JsonWriter[A]):sjsonnew.JsonWriter[B]", "kind" : "def"}, {"label" : "mapReader", "tail" : "(f: (A) ⇒ B)(ev: JsonReader[A]): JsonReader[B]", "member" : "sjsonnew.AdditionalFormats.mapReader", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#mapReader[A,B](f:A=>B)(implicitev:sjsonnew.JsonReader[A]):sjsonnew.JsonReader[B]", "kind" : "def"}, {"label" : "projectFormat", "tail" : "(f1: (T) ⇒ U, f2: (U) ⇒ T)(fu: JsonFormat[U]): JsonFormat[T]", "member" : "sjsonnew.AdditionalFormats.projectFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#projectFormat[T,U](f1:T=>U,f2:U=>T)(implicitfu:sjsonnew.JsonFormat[U]):sjsonnew.JsonFormat[T]", "kind" : "def"}, {"label" : "asSingleton", "tail" : "(a: A): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.asSingleton", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#asSingleton[A](a:A):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "safeReader", "tail" : "(arg0: JsonReader[A]): JsonReader[Either[Exception, A]]", "member" : "sjsonnew.AdditionalFormats.safeReader", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#safeReader[A](implicitevidence$1:sjsonnew.JsonReader[A]):sjsonnew.JsonReader[Either[Exception,A]]", "kind" : "def"}, {"label" : "lazyFormat", "tail" : "(format: ⇒ JsonFormat[A]): JsonFormat[A] { lazy val delegate: sjsonnew.JsonFormat[A] }", "member" : "sjsonnew.AdditionalFormats.lazyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#lazyFormat[A](format:=>sjsonnew.JsonFormat[A]):sjsonnew.JsonFormat[A]{lazyvaldelegate:sjsonnew.JsonFormat[A]}", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(reader: RootJsonReader[A]): RootJsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#liftFormat[A<:AnyRef](reader:sjsonnew.RootJsonReader[A]):sjsonnew.RootJsonFormat[A]", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(reader: JsonReader[A]): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#liftFormat[A<:AnyRef](reader:sjsonnew.JsonReader[A]):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(writer: RootJsonWriter[A]): RootJsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#liftFormat[A](writer:sjsonnew.RootJsonWriter[A]):sjsonnew.RootJsonFormat[A]", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(writer: JsonWriter[A]): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#liftFormat[A](writer:sjsonnew.JsonWriter[A]):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "rootFormat", "tail" : "(format: JsonFormat[A]): RootJsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.rootFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#rootFormat[A](format:sjsonnew.JsonFormat[A]):sjsonnew.RootJsonFormat[A]", "kind" : "def"}, {"label" : "rootJsonFormat", "tail" : "(reader: RootJsonReader[T], writer: RootJsonWriter[T]): RootJsonFormat[T]", "member" : "sjsonnew.AdditionalFormats.rootJsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#rootJsonFormat[T](reader:sjsonnew.RootJsonReader[T],writer:sjsonnew.RootJsonWriter[T]):sjsonnew.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(reader: JsonReader[A], writer: JsonWriter[A]): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.jsonFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#jsonFormat[A](reader:sjsonnew.JsonReader[A],writer:sjsonnew.JsonWriter[A]):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "viaSeq", "tail" : "(f: (Seq[A]) ⇒ I)(arg0: JsonFormat[A]): RootJsonFormat[I]", "member" : "sjsonnew.CollectionFormats.viaSeq", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#viaSeq[I<:Iterable[A],A](f:scala.collection.immutable.Seq[A]=>I)(implicitevidence$17:sjsonnew.JsonFormat[A]):sjsonnew.RootJsonFormat[I]", "kind" : "def"}, {"label" : "setFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "sjsonnew.CollectionFormats.setFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#setFormat[T](implicitevidence$16:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.Set[T]]", "kind" : "implicit def"}, {"label" : "linearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "sjsonnew.CollectionFormats.linearSeqFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#linearSeqFormat[T](implicitevidence$15:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "indexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "sjsonnew.CollectionFormats.indexedSeqFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#indexedSeqFormat[T](implicitevidence$14:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "seqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "sjsonnew.CollectionFormats.seqFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#seqFormat[T](implicitevidence$13:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[Seq[T]]", "kind" : "implicit def"}, {"label" : "iterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "sjsonnew.CollectionFormats.iterableFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#iterableFormat[T](implicitevidence$12:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[Iterable[T]]", "kind" : "implicit def"}, {"label" : "vectorFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Vector[T]]", "member" : "sjsonnew.CollectionFormats.vectorFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#vectorFormat[T](implicitevidence$11:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[Vector[T]]", "kind" : "implicit def"}, {"label" : "immSetFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "sjsonnew.CollectionFormats.immSetFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#immSetFormat[T](implicitevidence$10:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.Set[T]]", "kind" : "implicit def"}, {"label" : "immLinearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "sjsonnew.CollectionFormats.immLinearSeqFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#immLinearSeqFormat[T](implicitevidence$9:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "immIndexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "sjsonnew.CollectionFormats.immIndexedSeqFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#immIndexedSeqFormat[T](implicitevidence$8:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "immSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "sjsonnew.CollectionFormats.immSeqFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#immSeqFormat[T](implicitevidence$7:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.Seq[T]]", "kind" : "implicit def"}, {"label" : "immIterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "sjsonnew.CollectionFormats.immIterableFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#immIterableFormat[T](implicitevidence$6:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.Iterable[T]]", "kind" : "implicit def"}, {"label" : "mapFormat", "tail" : "(arg0: JsonKeyFormat[K], arg1: JsonFormat[V]): RootJsonFormat[Map[K, V]]", "member" : "sjsonnew.CollectionFormats.mapFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#mapFormat[K,V](implicitevidence$4:sjsonnew.JsonKeyFormat[K],implicitevidence$5:sjsonnew.JsonFormat[V]):sjsonnew.RootJsonFormat[Map[K,V]]", "kind" : "implicit def"}, {"label" : "arrayFormat", "tail" : "(arg0: JsonFormat[A], arg1: ClassTag[A]): RootJsonFormat[Array[A]]", "member" : "sjsonnew.CollectionFormats.arrayFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#arrayFormat[A](implicitevidence$2:sjsonnew.JsonFormat[A],implicitevidence$3:scala.reflect.ClassTag[A]):sjsonnew.RootJsonFormat[Array[A]]", "kind" : "implicit def"}, {"label" : "listFormat", "tail" : "(arg0: JsonFormat[A]): RootJsonFormat[List[A]]", "member" : "sjsonnew.CollectionFormats.listFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#listFormat[A](implicitevidence$1:sjsonnew.JsonFormat[A]):sjsonnew.RootJsonFormat[List[A]]", "kind" : "implicit def"}, {"label" : "tuple22Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], A22: JF[A22]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]", "member" : "sjsonnew.TupleFormats.tuple22Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple22Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19],implicitA20:TupleFormats.this.JF[A20],implicitA21:TupleFormats.this.JF[A21],implicitA22:TupleFormats.this.JF[A22]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]", "kind" : "implicit def"}, {"label" : "tuple21Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "sjsonnew.TupleFormats.tuple21Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple21Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19],implicitA20:TupleFormats.this.JF[A20],implicitA21:TupleFormats.this.JF[A21]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tuple20Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "sjsonnew.TupleFormats.tuple20Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple20Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19],implicitA20:TupleFormats.this.JF[A20]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tuple19Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "sjsonnew.TupleFormats.tuple19Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple19Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tuple18Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "sjsonnew.TupleFormats.tuple18Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple18Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tuple17Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "sjsonnew.TupleFormats.tuple17Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple17Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tuple16Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "sjsonnew.TupleFormats.tuple16Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple16Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tuple15Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "sjsonnew.TupleFormats.tuple15Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple15Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tuple14Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "sjsonnew.TupleFormats.tuple14Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple14Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tuple13Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "sjsonnew.TupleFormats.tuple13Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple13Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tuple12Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "sjsonnew.TupleFormats.tuple12Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple12Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tuple11Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "sjsonnew.TupleFormats.tuple11Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple11Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tuple10Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "sjsonnew.TupleFormats.tuple10Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple10Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tuple9Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "sjsonnew.TupleFormats.tuple9Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple9Format[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tuple8Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8]): JF[(A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "sjsonnew.TupleFormats.tuple8Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple8Format[A1,A2,A3,A4,A5,A6,A7,A8](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tuple7Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7]): JF[(A1, A2, A3, A4, A5, A6, A7)]", "member" : "sjsonnew.TupleFormats.tuple7Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple7Format[A1,A2,A3,A4,A5,A6,A7](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tuple6Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6]): JF[(A1, A2, A3, A4, A5, A6)]", "member" : "sjsonnew.TupleFormats.tuple6Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple6Format[A1,A2,A3,A4,A5,A6](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tuple5Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5]): JF[(A1, A2, A3, A4, A5)]", "member" : "sjsonnew.TupleFormats.tuple5Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple5Format[A1,A2,A3,A4,A5](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5]):TupleFormats.this.JF[(A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tuple4Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4]): JF[(A1, A2, A3, A4)]", "member" : "sjsonnew.TupleFormats.tuple4Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple4Format[A1,A2,A3,A4](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4]):TupleFormats.this.JF[(A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tuple3Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3]): JF[(A1, A2, A3)]", "member" : "sjsonnew.TupleFormats.tuple3Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple3Format[A1,A2,A3](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3]):TupleFormats.this.JF[(A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tuple2Format", "tail" : "(A1: JF[A1], A2: JF[A2]): JF[(A1, A2)]", "member" : "sjsonnew.TupleFormats.tuple2Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple2Format[A1,A2](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2]):TupleFormats.this.JF[(A1,A2)]", "kind" : "implicit def"}, {"label" : "tuple1Format", "tail" : "(A1: JF[A1]): JF[(A1)]", "member" : "sjsonnew.TupleFormats.tuple1Format", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#tuple1Format[A1](implicitA1:TupleFormats.this.JF[A1]):TupleFormats.this.JF[(A1,)]", "kind" : "implicit def"}, {"label" : "eitherFormat", "tail" : "(arg0: JF[A], arg1: JF[B]): JF[Either[A, B]] { ... \/* 2 definitions in type refinement *\/ }", "member" : "sjsonnew.StandardFormats.eitherFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#eitherFormat[A,B](implicitevidence$3:StandardFormats.this.JF[A],implicitevidence$4:StandardFormats.this.JF[B]):StandardFormats.this.JF[Either[A,B]]{lazyvalleftFormat:StandardFormats.this.JF[A];lazyvalrightFormat:StandardFormats.this.JF[B]}", "kind" : "implicit def"}, {"label" : "optionFormat", "tail" : "(arg0: JF[A]): JF[Option[A]]", "member" : "sjsonnew.StandardFormats.optionFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#optionFormat[A](implicitevidence$1:StandardFormats.this.JF[A]):StandardFormats.this.JF[Option[A]]", "kind" : "implicit def"}, {"label" : "BigIntJsonKeyFormat", "tail" : ": JsonKeyFormat[BigInt]", "member" : "sjsonnew.PrimitiveFormats.BigIntJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#BigIntJsonKeyFormat:sjsonnew.JsonKeyFormat[BigInt]", "kind" : "implicit val"}, {"label" : "BigDecimalJsonKeyFormat", "tail" : ": JsonKeyFormat[BigDecimal]", "member" : "sjsonnew.PrimitiveFormats.BigDecimalJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#BigDecimalJsonKeyFormat:sjsonnew.JsonKeyFormat[BigDecimal]", "kind" : "implicit val"}, {"label" : "DoubleJsonKeyFormat", "tail" : ": JsonKeyFormat[Double]", "member" : "sjsonnew.PrimitiveFormats.DoubleJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#DoubleJsonKeyFormat:sjsonnew.JsonKeyFormat[Double]", "kind" : "implicit val"}, {"label" : "FloatJsonKeyFormat", "tail" : ": JsonKeyFormat[Float]", "member" : "sjsonnew.PrimitiveFormats.FloatJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#FloatJsonKeyFormat:sjsonnew.JsonKeyFormat[Float]", "kind" : "implicit val"}, {"label" : "LongJsonKeyFormat", "tail" : ": JsonKeyFormat[Long]", "member" : "sjsonnew.PrimitiveFormats.LongJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#LongJsonKeyFormat:sjsonnew.JsonKeyFormat[Long]", "kind" : "implicit val"}, {"label" : "IntJsonKeyFormat", "tail" : ": JsonKeyFormat[Int]", "member" : "sjsonnew.PrimitiveFormats.IntJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#IntJsonKeyFormat:sjsonnew.JsonKeyFormat[Int]", "kind" : "implicit val"}, {"label" : "CharJsonKeyFormat", "tail" : ": JsonKeyFormat[Char]", "member" : "sjsonnew.PrimitiveFormats.CharJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#CharJsonKeyFormat:sjsonnew.JsonKeyFormat[Char]", "kind" : "implicit val"}, {"label" : "ShortJsonKeyFormat", "tail" : ": JsonKeyFormat[Short]", "member" : "sjsonnew.PrimitiveFormats.ShortJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#ShortJsonKeyFormat:sjsonnew.JsonKeyFormat[Short]", "kind" : "implicit val"}, {"label" : "ByteJsonKeyFormat", "tail" : ": JsonKeyFormat[Byte]", "member" : "sjsonnew.PrimitiveFormats.ByteJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#ByteJsonKeyFormat:sjsonnew.JsonKeyFormat[Byte]", "kind" : "implicit val"}, {"label" : "BooleanJsonKeyFormat", "tail" : ": JsonKeyFormat[Boolean]", "member" : "sjsonnew.PrimitiveFormats.BooleanJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#BooleanJsonKeyFormat:sjsonnew.JsonKeyFormat[Boolean]", "kind" : "implicit val"}, {"label" : "UnitJsonKeyFormat", "tail" : ": JsonKeyFormat[Unit]", "member" : "sjsonnew.PrimitiveFormats.UnitJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#UnitJsonKeyFormat:sjsonnew.JsonKeyFormat[Unit]", "kind" : "implicit val"}, {"label" : "SymbolJsonKeyFormat", "tail" : ": JsonKeyFormat[Symbol]", "member" : "sjsonnew.PrimitiveFormats.SymbolJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#SymbolJsonKeyFormat:sjsonnew.JsonKeyFormat[Symbol]", "kind" : "implicit val"}, {"label" : "StringJsonKeyFormat", "tail" : ": JsonKeyFormat[String]", "member" : "sjsonnew.PrimitiveFormats.StringJsonKeyFormat", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#StringJsonKeyFormat:sjsonnew.JsonKeyFormat[String]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/codec\/JsonProtocol$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/protocol\/codec\/JsonProtocol.html", "kind" : "trait"}, {"name" : "sbt.protocol.codec.LogEventFormats", "members_trait" : [{"label" : "LogEventFormat", "tail" : ": JsonFormat[LogEvent]", "member" : "sbt.protocol.codec.LogEventFormats.LogEventFormat", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#LogEventFormat:sjsonnew.JsonFormat[sbt.protocol.LogEvent]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/codec\/LogEventFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/codec\/LogEventFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/codec\/LogEventFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.codec.SettingQueryFailureFormats", "members_trait" : [{"label" : "SettingQueryFailureFormat", "tail" : ": JsonFormat[SettingQueryFailure]", "member" : "sbt.protocol.codec.SettingQueryFailureFormats.SettingQueryFailureFormat", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#SettingQueryFailureFormat:sjsonnew.JsonFormat[sbt.protocol.SettingQueryFailure]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/codec\/SettingQueryFailureFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.codec.SettingQueryFormats", "members_trait" : [{"label" : "SettingQueryFormat", "tail" : ": JsonFormat[SettingQuery]", "member" : "sbt.protocol.codec.SettingQueryFormats.SettingQueryFormat", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#SettingQueryFormat:sjsonnew.JsonFormat[sbt.protocol.SettingQuery]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/codec\/SettingQueryFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/codec\/SettingQueryFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.codec.SettingQueryResponseFormats", "members_trait" : [{"label" : "SettingQueryResponseFormat", "tail" : ": JsonFormat[SettingQueryResponse]", "member" : "sbt.protocol.codec.SettingQueryResponseFormats.SettingQueryResponseFormat", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#SettingQueryResponseFormat:sjsonnew.JsonFormat[sbt.protocol.SettingQueryResponse]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/codec\/SettingQueryResponseFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.codec.SettingQuerySuccessFormats", "members_trait" : [{"label" : "SettingQuerySuccessFormat", "tail" : ": JsonFormat[SettingQuerySuccess]", "member" : "sbt.protocol.codec.SettingQuerySuccessFormats.SettingQuerySuccessFormat", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#SettingQuerySuccessFormat:sjsonnew.JsonFormat[sbt.protocol.SettingQuerySuccess]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/codec\/SettingQuerySuccessFormats.html", "kind" : "trait"}], "sbt.protocol" : [{"name" : "sbt.protocol.ChannelAcceptedEvent", "shortDescription" : "", "object" : "sbt\/protocol\/ChannelAcceptedEvent$.html", "members_class" : [{"label" : "withChannelName", "tail" : "(channelName: String): ChannelAcceptedEvent", "member" : "sbt.protocol.ChannelAcceptedEvent.withChannelName", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#withChannelName(channelName:String):sbt.protocol.ChannelAcceptedEvent", "kind" : "def"}, {"label" : "copy", "tail" : "(channelName: String): ChannelAcceptedEvent", "member" : "sbt.protocol.ChannelAcceptedEvent.copy", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#copy(channelName:String):sbt.protocol.ChannelAcceptedEvent", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.ChannelAcceptedEvent.toString", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.ChannelAcceptedEvent.hashCode", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.ChannelAcceptedEvent.equals", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "channelName", "tail" : ": String", "member" : "sbt.protocol.ChannelAcceptedEvent.channelName", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#channelName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/ChannelAcceptedEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(channelName: String): ChannelAcceptedEvent", "member" : "sbt.protocol.ChannelAcceptedEvent.apply", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#apply(channelName:String):sbt.protocol.ChannelAcceptedEvent", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/ChannelAcceptedEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/ChannelAcceptedEvent.html", "kind" : "class"}, {"name" : "sbt.protocol.CommandMessage", "shortDescription" : "Message to invoke command.", "object" : "sbt\/protocol\/CommandMessage$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.CommandMessage.toString", "link" : "sbt\/protocol\/CommandMessage.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.CommandMessage.hashCode", "link" : "sbt\/protocol\/CommandMessage.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.CommandMessage.equals", "link" : "sbt\/protocol\/CommandMessage.html#equals(o:Any):Boolean", "kind" : "def"}, {"member" : "sbt.protocol.CommandMessage#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/CommandMessage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/CommandMessage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/CommandMessage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/CommandMessage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/CommandMessage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/CommandMessage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/CommandMessage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/CommandMessage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/CommandMessage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/CommandMessage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/CommandMessage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/CommandMessage.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/CommandMessage.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/CommandMessage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/CommandMessage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/CommandMessage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/CommandMessage$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/CommandMessage$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/CommandMessage$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/CommandMessage$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/CommandMessage$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/CommandMessage$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/CommandMessage$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/CommandMessage$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/CommandMessage$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/CommandMessage$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/CommandMessage$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/CommandMessage$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/CommandMessage$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/CommandMessage$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/CommandMessage$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/CommandMessage$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/CommandMessage$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/CommandMessage$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/CommandMessage$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/CommandMessage.html", "kind" : "class"}, {"name" : "sbt.protocol.EventMessage", "shortDescription" : "Message for events.", "object" : "sbt\/protocol\/EventMessage$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.EventMessage.toString", "link" : "sbt\/protocol\/EventMessage.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.EventMessage.hashCode", "link" : "sbt\/protocol\/EventMessage.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.EventMessage.equals", "link" : "sbt\/protocol\/EventMessage.html#equals(o:Any):Boolean", "kind" : "def"}, {"member" : "sbt.protocol.EventMessage#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/EventMessage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/EventMessage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/EventMessage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/EventMessage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/EventMessage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/EventMessage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/EventMessage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/EventMessage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/EventMessage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/EventMessage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/EventMessage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/EventMessage.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/EventMessage.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/EventMessage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/EventMessage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/EventMessage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/EventMessage$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/EventMessage$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/EventMessage$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/EventMessage$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/EventMessage$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/EventMessage$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/EventMessage$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/EventMessage$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/EventMessage$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/EventMessage$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/EventMessage$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/EventMessage$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/EventMessage$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/EventMessage$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/EventMessage$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/EventMessage$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/EventMessage$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/EventMessage$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/EventMessage$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/EventMessage.html", "kind" : "class"}, {"name" : "sbt.protocol.ExecCommand", "shortDescription" : "Command to execute sbt command.", "object" : "sbt\/protocol\/ExecCommand$.html", "members_class" : [{"label" : "withExecId", "tail" : "(execId: String): ExecCommand", "member" : "sbt.protocol.ExecCommand.withExecId", "link" : "sbt\/protocol\/ExecCommand.html#withExecId(execId:String):sbt.protocol.ExecCommand", "kind" : "def"}, {"label" : "withExecId", "tail" : "(execId: Option[String]): ExecCommand", "member" : "sbt.protocol.ExecCommand.withExecId", "link" : "sbt\/protocol\/ExecCommand.html#withExecId(execId:Option[String]):sbt.protocol.ExecCommand", "kind" : "def"}, {"label" : "withCommandLine", "tail" : "(commandLine: String): ExecCommand", "member" : "sbt.protocol.ExecCommand.withCommandLine", "link" : "sbt\/protocol\/ExecCommand.html#withCommandLine(commandLine:String):sbt.protocol.ExecCommand", "kind" : "def"}, {"label" : "copy", "tail" : "(commandLine: String, execId: Option[String]): ExecCommand", "member" : "sbt.protocol.ExecCommand.copy", "link" : "sbt\/protocol\/ExecCommand.html#copy(commandLine:String,execId:Option[String]):sbt.protocol.ExecCommand", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.ExecCommand.toString", "link" : "sbt\/protocol\/ExecCommand.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.ExecCommand.hashCode", "link" : "sbt\/protocol\/ExecCommand.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.ExecCommand.equals", "link" : "sbt\/protocol\/ExecCommand.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "execId", "tail" : ": Option[String]", "member" : "sbt.protocol.ExecCommand.execId", "link" : "sbt\/protocol\/ExecCommand.html#execId:Option[String]", "kind" : "val"}, {"label" : "commandLine", "tail" : ": String", "member" : "sbt.protocol.ExecCommand.commandLine", "link" : "sbt\/protocol\/ExecCommand.html#commandLine:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/ExecCommand.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/ExecCommand.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/ExecCommand.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/ExecCommand.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/ExecCommand.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/ExecCommand.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/ExecCommand.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecCommand.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecCommand.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecCommand.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/ExecCommand.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/ExecCommand.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/ExecCommand.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/ExecCommand.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/ExecCommand.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/ExecCommand.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(commandLine: String, execId: String): ExecCommand", "member" : "sbt.protocol.ExecCommand.apply", "link" : "sbt\/protocol\/ExecCommand$.html#apply(commandLine:String,execId:String):sbt.protocol.ExecCommand", "kind" : "def"}, {"label" : "apply", "tail" : "(commandLine: String, execId: Option[String]): ExecCommand", "member" : "sbt.protocol.ExecCommand.apply", "link" : "sbt\/protocol\/ExecCommand$.html#apply(commandLine:String,execId:Option[String]):sbt.protocol.ExecCommand", "kind" : "def"}, {"label" : "apply", "tail" : "(commandLine: String): ExecCommand", "member" : "sbt.protocol.ExecCommand.apply", "link" : "sbt\/protocol\/ExecCommand$.html#apply(commandLine:String):sbt.protocol.ExecCommand", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/ExecCommand$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/ExecCommand$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/ExecCommand$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/ExecCommand$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/ExecCommand$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/ExecCommand$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/ExecCommand$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecCommand$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecCommand$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecCommand$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/ExecCommand$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/ExecCommand$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/ExecCommand$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/ExecCommand$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/ExecCommand$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/ExecCommand$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/ExecCommand$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/ExecCommand$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/ExecCommand$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/ExecCommand.html", "kind" : "class"}, {"name" : "sbt.protocol.ExecStatusEvent", "shortDescription" : "Status event.", "object" : "sbt\/protocol\/ExecStatusEvent$.html", "members_class" : [{"label" : "withCommandQueue", "tail" : "(commandQueue: Vector[String]): ExecStatusEvent", "member" : "sbt.protocol.ExecStatusEvent.withCommandQueue", "link" : "sbt\/protocol\/ExecStatusEvent.html#withCommandQueue(commandQueue:Vector[String]):sbt.protocol.ExecStatusEvent", "kind" : "def"}, {"label" : "withExecId", "tail" : "(execId: String): ExecStatusEvent", "member" : "sbt.protocol.ExecStatusEvent.withExecId", "link" : "sbt\/protocol\/ExecStatusEvent.html#withExecId(execId:String):sbt.protocol.ExecStatusEvent", "kind" : "def"}, {"label" : "withExecId", "tail" : "(execId: Option[String]): ExecStatusEvent", "member" : "sbt.protocol.ExecStatusEvent.withExecId", "link" : "sbt\/protocol\/ExecStatusEvent.html#withExecId(execId:Option[String]):sbt.protocol.ExecStatusEvent", "kind" : "def"}, {"label" : "withChannelName", "tail" : "(channelName: String): ExecStatusEvent", "member" : "sbt.protocol.ExecStatusEvent.withChannelName", "link" : "sbt\/protocol\/ExecStatusEvent.html#withChannelName(channelName:String):sbt.protocol.ExecStatusEvent", "kind" : "def"}, {"label" : "withChannelName", "tail" : "(channelName: Option[String]): ExecStatusEvent", "member" : "sbt.protocol.ExecStatusEvent.withChannelName", "link" : "sbt\/protocol\/ExecStatusEvent.html#withChannelName(channelName:Option[String]):sbt.protocol.ExecStatusEvent", "kind" : "def"}, {"label" : "withStatus", "tail" : "(status: String): ExecStatusEvent", "member" : "sbt.protocol.ExecStatusEvent.withStatus", "link" : "sbt\/protocol\/ExecStatusEvent.html#withStatus(status:String):sbt.protocol.ExecStatusEvent", "kind" : "def"}, {"label" : "copy", "tail" : "(status: String, channelName: Option[String], execId: Option[String], commandQueue: Vector[String]): ExecStatusEvent", "member" : "sbt.protocol.ExecStatusEvent.copy", "link" : "sbt\/protocol\/ExecStatusEvent.html#copy(status:String,channelName:Option[String],execId:Option[String],commandQueue:Vector[String]):sbt.protocol.ExecStatusEvent", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.ExecStatusEvent.toString", "link" : "sbt\/protocol\/ExecStatusEvent.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.ExecStatusEvent.hashCode", "link" : "sbt\/protocol\/ExecStatusEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.ExecStatusEvent.equals", "link" : "sbt\/protocol\/ExecStatusEvent.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "commandQueue", "tail" : ": Vector[String]", "member" : "sbt.protocol.ExecStatusEvent.commandQueue", "link" : "sbt\/protocol\/ExecStatusEvent.html#commandQueue:Vector[String]", "kind" : "val"}, {"label" : "execId", "tail" : ": Option[String]", "member" : "sbt.protocol.ExecStatusEvent.execId", "link" : "sbt\/protocol\/ExecStatusEvent.html#execId:Option[String]", "kind" : "val"}, {"label" : "channelName", "tail" : ": Option[String]", "member" : "sbt.protocol.ExecStatusEvent.channelName", "link" : "sbt\/protocol\/ExecStatusEvent.html#channelName:Option[String]", "kind" : "val"}, {"label" : "status", "tail" : ": String", "member" : "sbt.protocol.ExecStatusEvent.status", "link" : "sbt\/protocol\/ExecStatusEvent.html#status:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/ExecStatusEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/ExecStatusEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/ExecStatusEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/ExecStatusEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/ExecStatusEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/ExecStatusEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/ExecStatusEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecStatusEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecStatusEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecStatusEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/ExecStatusEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/ExecStatusEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/ExecStatusEvent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/ExecStatusEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/ExecStatusEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/ExecStatusEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(status: String, channelName: String, execId: String, commandQueue: Vector[String]): ExecStatusEvent", "member" : "sbt.protocol.ExecStatusEvent.apply", "link" : "sbt\/protocol\/ExecStatusEvent$.html#apply(status:String,channelName:String,execId:String,commandQueue:Vector[String]):sbt.protocol.ExecStatusEvent", "kind" : "def"}, {"label" : "apply", "tail" : "(status: String, channelName: Option[String], execId: Option[String], commandQueue: Vector[String]): ExecStatusEvent", "member" : "sbt.protocol.ExecStatusEvent.apply", "link" : "sbt\/protocol\/ExecStatusEvent$.html#apply(status:String,channelName:Option[String],execId:Option[String],commandQueue:Vector[String]):sbt.protocol.ExecStatusEvent", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/ExecStatusEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/ExecStatusEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/ExecStatusEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/ExecStatusEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/ExecStatusEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/ExecStatusEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/ExecStatusEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecStatusEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecStatusEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecStatusEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/ExecStatusEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/ExecStatusEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/ExecStatusEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/ExecStatusEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/ExecStatusEvent$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/ExecStatusEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/ExecStatusEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/ExecStatusEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/ExecStatusEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/ExecStatusEvent.html", "kind" : "class"}, {"name" : "sbt.protocol.ExecutionEvent", "shortDescription" : "Execution event.", "object" : "sbt\/protocol\/ExecutionEvent$.html", "members_class" : [{"label" : "withCommandLine", "tail" : "(commandLine: String): ExecutionEvent", "member" : "sbt.protocol.ExecutionEvent.withCommandLine", "link" : "sbt\/protocol\/ExecutionEvent.html#withCommandLine(commandLine:String):sbt.protocol.ExecutionEvent", "kind" : "def"}, {"label" : "withSuccess", "tail" : "(success: String): ExecutionEvent", "member" : "sbt.protocol.ExecutionEvent.withSuccess", "link" : "sbt\/protocol\/ExecutionEvent.html#withSuccess(success:String):sbt.protocol.ExecutionEvent", "kind" : "def"}, {"label" : "copy", "tail" : "(success: String, commandLine: String): ExecutionEvent", "member" : "sbt.protocol.ExecutionEvent.copy", "link" : "sbt\/protocol\/ExecutionEvent.html#copy(success:String,commandLine:String):sbt.protocol.ExecutionEvent", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.ExecutionEvent.toString", "link" : "sbt\/protocol\/ExecutionEvent.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.ExecutionEvent.hashCode", "link" : "sbt\/protocol\/ExecutionEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.ExecutionEvent.equals", "link" : "sbt\/protocol\/ExecutionEvent.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "commandLine", "tail" : ": String", "member" : "sbt.protocol.ExecutionEvent.commandLine", "link" : "sbt\/protocol\/ExecutionEvent.html#commandLine:String", "kind" : "val"}, {"label" : "success", "tail" : ": String", "member" : "sbt.protocol.ExecutionEvent.success", "link" : "sbt\/protocol\/ExecutionEvent.html#success:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/ExecutionEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/ExecutionEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/ExecutionEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/ExecutionEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/ExecutionEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/ExecutionEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/ExecutionEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecutionEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecutionEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecutionEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/ExecutionEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/ExecutionEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/ExecutionEvent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/ExecutionEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/ExecutionEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/ExecutionEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(success: String, commandLine: String): ExecutionEvent", "member" : "sbt.protocol.ExecutionEvent.apply", "link" : "sbt\/protocol\/ExecutionEvent$.html#apply(success:String,commandLine:String):sbt.protocol.ExecutionEvent", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/ExecutionEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/ExecutionEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/ExecutionEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/ExecutionEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/ExecutionEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/ExecutionEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/ExecutionEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecutionEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecutionEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/ExecutionEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/ExecutionEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/ExecutionEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/ExecutionEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/ExecutionEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/ExecutionEvent$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/ExecutionEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/ExecutionEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/ExecutionEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/ExecutionEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/ExecutionEvent.html", "kind" : "class"}, {"name" : "sbt.protocol.LogEvent", "shortDescription" : "Log event.", "object" : "sbt\/protocol\/LogEvent$.html", "members_class" : [{"label" : "withMessage", "tail" : "(message: String): LogEvent", "member" : "sbt.protocol.LogEvent.withMessage", "link" : "sbt\/protocol\/LogEvent.html#withMessage(message:String):sbt.protocol.LogEvent", "kind" : "def"}, {"label" : "withLevel", "tail" : "(level: String): LogEvent", "member" : "sbt.protocol.LogEvent.withLevel", "link" : "sbt\/protocol\/LogEvent.html#withLevel(level:String):sbt.protocol.LogEvent", "kind" : "def"}, {"label" : "copy", "tail" : "(level: String, message: String): LogEvent", "member" : "sbt.protocol.LogEvent.copy", "link" : "sbt\/protocol\/LogEvent.html#copy(level:String,message:String):sbt.protocol.LogEvent", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.LogEvent.toString", "link" : "sbt\/protocol\/LogEvent.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.LogEvent.hashCode", "link" : "sbt\/protocol\/LogEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.LogEvent.equals", "link" : "sbt\/protocol\/LogEvent.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "sbt.protocol.LogEvent.message", "link" : "sbt\/protocol\/LogEvent.html#message:String", "kind" : "val"}, {"label" : "level", "tail" : ": String", "member" : "sbt.protocol.LogEvent.level", "link" : "sbt\/protocol\/LogEvent.html#level:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/LogEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/LogEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/LogEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/LogEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/LogEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/LogEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/LogEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/LogEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/LogEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/LogEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/LogEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/LogEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/LogEvent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/LogEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/LogEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/LogEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(level: String, message: String): LogEvent", "member" : "sbt.protocol.LogEvent.apply", "link" : "sbt\/protocol\/LogEvent$.html#apply(level:String,message:String):sbt.protocol.LogEvent", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/LogEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/LogEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/LogEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/LogEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/LogEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/LogEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/LogEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/LogEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/LogEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/LogEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/LogEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/LogEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/LogEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/LogEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/LogEvent$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/LogEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/LogEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/LogEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/LogEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/LogEvent.html", "kind" : "class"}, {"name" : "sbt.protocol.Serialization", "shortDescription" : "", "object" : "sbt\/protocol\/Serialization$.html", "members_object" : [{"label" : "deserializeEventMessage", "tail" : "(bytes: Seq[Byte]): Either[String, EventMessage]", "member" : "sbt.protocol.Serialization.deserializeEventMessage", "link" : "sbt\/protocol\/Serialization$.html#deserializeEventMessage(bytes:Seq[Byte]):Either[String,sbt.protocol.EventMessage]", "kind" : "def"}, {"label" : "detectType", "tail" : "(json: JValue): Option[String]", "member" : "sbt.protocol.Serialization.detectType", "link" : "sbt\/protocol\/Serialization$.html#detectType(json:sjsonnew.shaded.scalajson.ast.unsafe.JValue):Option[String]", "kind" : "def"}, {"label" : "deserializeEvent", "tail" : "(bytes: Seq[Byte]): Either[String, Any]", "member" : "sbt.protocol.Serialization.deserializeEvent", "link" : "sbt\/protocol\/Serialization$.html#deserializeEvent(bytes:Seq[Byte]):Either[String,Any]", "kind" : "def"}, {"label" : "deserializeCommand", "tail" : "(bytes: Seq[Byte]): Either[String, CommandMessage]", "member" : "sbt.protocol.Serialization.deserializeCommand", "link" : "sbt\/protocol\/Serialization$.html#deserializeCommand(bytes:Seq[Byte]):Either[String,sbt.protocol.CommandMessage]", "kind" : "def"}, {"label" : "serializeEventMessage", "tail" : "(event: EventMessage): Array[Byte]", "member" : "sbt.protocol.Serialization.serializeEventMessage", "link" : "sbt\/protocol\/Serialization$.html#serializeEventMessage(event:sbt.protocol.EventMessage):Array[Byte]", "kind" : "def"}, {"label" : "serializeCommand", "tail" : "(command: CommandMessage): Array[Byte]", "member" : "sbt.protocol.Serialization.serializeCommand", "link" : "sbt\/protocol\/Serialization$.html#serializeCommand(command:sbt.protocol.CommandMessage):Array[Byte]", "kind" : "def"}, {"label" : "serializeEvent", "tail" : "(event: A)(arg0: JsonFormat[A]): Array[Byte]", "member" : "sbt.protocol.Serialization.serializeEvent", "link" : "sbt\/protocol\/Serialization$.html#serializeEvent[A](event:A)(implicitevidence$1:sjsonnew.JsonFormat[A]):Array[Byte]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/Serialization$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/Serialization$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/Serialization$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/Serialization$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/Serialization$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/Serialization$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/Serialization$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/Serialization$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/Serialization$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/Serialization$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/Serialization$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/Serialization$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/Serialization$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/Serialization$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/Serialization$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/Serialization$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/Serialization$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/Serialization$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/Serialization$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.protocol.SettingQuery", "shortDescription" : "", "object" : "sbt\/protocol\/SettingQuery$.html", "members_class" : [{"label" : "withSetting", "tail" : "(setting: String): SettingQuery", "member" : "sbt.protocol.SettingQuery.withSetting", "link" : "sbt\/protocol\/SettingQuery.html#withSetting(setting:String):sbt.protocol.SettingQuery", "kind" : "def"}, {"label" : "copy", "tail" : "(setting: String): SettingQuery", "member" : "sbt.protocol.SettingQuery.copy", "link" : "sbt\/protocol\/SettingQuery.html#copy(setting:String):sbt.protocol.SettingQuery", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.SettingQuery.toString", "link" : "sbt\/protocol\/SettingQuery.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.SettingQuery.hashCode", "link" : "sbt\/protocol\/SettingQuery.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.SettingQuery.equals", "link" : "sbt\/protocol\/SettingQuery.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "setting", "tail" : ": String", "member" : "sbt.protocol.SettingQuery.setting", "link" : "sbt\/protocol\/SettingQuery.html#setting:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/SettingQuery.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/SettingQuery.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/SettingQuery.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/SettingQuery.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/SettingQuery.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/SettingQuery.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/SettingQuery.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQuery.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQuery.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQuery.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/SettingQuery.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/SettingQuery.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/SettingQuery.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/SettingQuery.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/SettingQuery.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/SettingQuery.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(setting: String): SettingQuery", "member" : "sbt.protocol.SettingQuery.apply", "link" : "sbt\/protocol\/SettingQuery$.html#apply(setting:String):sbt.protocol.SettingQuery", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/SettingQuery$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/SettingQuery$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/SettingQuery$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/SettingQuery$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/SettingQuery$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/SettingQuery$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/SettingQuery$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQuery$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQuery$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQuery$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/SettingQuery$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/SettingQuery$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/SettingQuery$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/SettingQuery$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/SettingQuery$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/SettingQuery$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/SettingQuery$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/SettingQuery$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/SettingQuery$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/SettingQuery.html", "kind" : "class"}, {"name" : "sbt.protocol.SettingQueryFailure", "shortDescription" : "", "object" : "sbt\/protocol\/SettingQueryFailure$.html", "members_class" : [{"label" : "withMessage", "tail" : "(message: String): SettingQueryFailure", "member" : "sbt.protocol.SettingQueryFailure.withMessage", "link" : "sbt\/protocol\/SettingQueryFailure.html#withMessage(message:String):sbt.protocol.SettingQueryFailure", "kind" : "def"}, {"label" : "copy", "tail" : "(message: String): SettingQueryFailure", "member" : "sbt.protocol.SettingQueryFailure.copy", "link" : "sbt\/protocol\/SettingQueryFailure.html#copy(message:String):sbt.protocol.SettingQueryFailure", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.SettingQueryFailure.toString", "link" : "sbt\/protocol\/SettingQueryFailure.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.SettingQueryFailure.hashCode", "link" : "sbt\/protocol\/SettingQueryFailure.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.SettingQueryFailure.equals", "link" : "sbt\/protocol\/SettingQueryFailure.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "message", "tail" : ": String", "member" : "sbt.protocol.SettingQueryFailure.message", "link" : "sbt\/protocol\/SettingQueryFailure.html#message:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/SettingQueryFailure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/SettingQueryFailure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/SettingQueryFailure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/SettingQueryFailure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/SettingQueryFailure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/SettingQueryFailure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/SettingQueryFailure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQueryFailure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQueryFailure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQueryFailure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/SettingQueryFailure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/SettingQueryFailure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/SettingQueryFailure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/SettingQueryFailure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/SettingQueryFailure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/SettingQueryFailure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(message: String): SettingQueryFailure", "member" : "sbt.protocol.SettingQueryFailure.apply", "link" : "sbt\/protocol\/SettingQueryFailure$.html#apply(message:String):sbt.protocol.SettingQueryFailure", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/SettingQueryFailure$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/SettingQueryFailure$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/SettingQueryFailure$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/SettingQueryFailure$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/SettingQueryFailure$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/SettingQueryFailure$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/SettingQueryFailure$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQueryFailure$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQueryFailure$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQueryFailure$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/SettingQueryFailure$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/SettingQueryFailure$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/SettingQueryFailure$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/SettingQueryFailure$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/SettingQueryFailure$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/SettingQueryFailure$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/SettingQueryFailure$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/SettingQueryFailure$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/SettingQueryFailure$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/SettingQueryFailure.html", "kind" : "class"}, {"name" : "sbt.protocol.SettingQueryResponse", "shortDescription" : "", "object" : "sbt\/protocol\/SettingQueryResponse$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.SettingQueryResponse.toString", "link" : "sbt\/protocol\/SettingQueryResponse.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.SettingQueryResponse.hashCode", "link" : "sbt\/protocol\/SettingQueryResponse.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.SettingQueryResponse.equals", "link" : "sbt\/protocol\/SettingQueryResponse.html#equals(o:Any):Boolean", "kind" : "def"}, {"member" : "sbt.protocol.SettingQueryResponse#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/SettingQueryResponse.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/SettingQueryResponse.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/SettingQueryResponse.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/SettingQueryResponse.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/SettingQueryResponse.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/SettingQueryResponse.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/SettingQueryResponse.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQueryResponse.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQueryResponse.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQueryResponse.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/SettingQueryResponse.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/SettingQueryResponse.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/SettingQueryResponse.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/SettingQueryResponse.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/SettingQueryResponse.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/SettingQueryResponse.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/SettingQueryResponse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/SettingQueryResponse$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/SettingQueryResponse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/SettingQueryResponse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/SettingQueryResponse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/SettingQueryResponse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/SettingQueryResponse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQueryResponse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQueryResponse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQueryResponse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/SettingQueryResponse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/SettingQueryResponse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/SettingQueryResponse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/SettingQueryResponse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/SettingQueryResponse$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/SettingQueryResponse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/SettingQueryResponse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/SettingQueryResponse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/SettingQueryResponse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/SettingQueryResponse.html", "kind" : "class"}, {"name" : "sbt.protocol.SettingQuerySuccess", "shortDescription" : "", "object" : "sbt\/protocol\/SettingQuerySuccess$.html", "members_class" : [{"label" : "withContentType", "tail" : "(contentType: String): SettingQuerySuccess", "member" : "sbt.protocol.SettingQuerySuccess.withContentType", "link" : "sbt\/protocol\/SettingQuerySuccess.html#withContentType(contentType:String):sbt.protocol.SettingQuerySuccess", "kind" : "def"}, {"label" : "withValue", "tail" : "(value: JValue): SettingQuerySuccess", "member" : "sbt.protocol.SettingQuerySuccess.withValue", "link" : "sbt\/protocol\/SettingQuerySuccess.html#withValue(value:sjsonnew.shaded.scalajson.ast.unsafe.JValue):sbt.protocol.SettingQuerySuccess", "kind" : "def"}, {"label" : "copy", "tail" : "(value: JValue, contentType: String): SettingQuerySuccess", "member" : "sbt.protocol.SettingQuerySuccess.copy", "link" : "sbt\/protocol\/SettingQuerySuccess.html#copy(value:sjsonnew.shaded.scalajson.ast.unsafe.JValue,contentType:String):sbt.protocol.SettingQuerySuccess", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.SettingQuerySuccess.toString", "link" : "sbt\/protocol\/SettingQuerySuccess.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.SettingQuerySuccess.hashCode", "link" : "sbt\/protocol\/SettingQuerySuccess.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.SettingQuerySuccess.equals", "link" : "sbt\/protocol\/SettingQuerySuccess.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "contentType", "tail" : ": String", "member" : "sbt.protocol.SettingQuerySuccess.contentType", "link" : "sbt\/protocol\/SettingQuerySuccess.html#contentType:String", "kind" : "val"}, {"label" : "value", "tail" : ": JValue", "member" : "sbt.protocol.SettingQuerySuccess.value", "link" : "sbt\/protocol\/SettingQuerySuccess.html#value:sjsonnew.shaded.scalajson.ast.unsafe.JValue", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/SettingQuerySuccess.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/SettingQuerySuccess.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/SettingQuerySuccess.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/SettingQuerySuccess.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/SettingQuerySuccess.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/SettingQuerySuccess.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/SettingQuerySuccess.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQuerySuccess.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQuerySuccess.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQuerySuccess.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/SettingQuerySuccess.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/SettingQuerySuccess.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/SettingQuerySuccess.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/SettingQuerySuccess.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/SettingQuerySuccess.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/SettingQuerySuccess.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(value: JValue, contentType: String): SettingQuerySuccess", "member" : "sbt.protocol.SettingQuerySuccess.apply", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#apply(value:sjsonnew.shaded.scalajson.ast.unsafe.JValue,contentType:String):sbt.protocol.SettingQuerySuccess", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/SettingQuerySuccess$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/SettingQuerySuccess$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/SettingQuerySuccess.html", "kind" : "class"}], "sbt.internal.util.complete" : [{"name" : "sbt.internal.util.complete.Completion", "members_trait" : [{"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.internal.util.complete.Completion.equals", "link" : "sbt\/internal\/util\/complete\/Completion.html#equals(o:Any):Boolean", "kind" : "final def"}, {"label" : "hashCode", "tail" : ": Int", "member" : "sbt.internal.util.complete.Completion.hashCode", "link" : "sbt\/internal\/util\/complete\/Completion.html#hashCode:Int", "kind" : "final lazy val"}, {"label" : "x", "tail" : "(o: Completions): Completions", "member" : "sbt.internal.util.complete.Completion.x", "link" : "sbt\/internal\/util\/complete\/Completion.html#x(o:sbt.internal.util.complete.Completions):sbt.internal.util.complete.Completions", "kind" : "final def"}, {"label" : "++", "tail" : "(o: Completion): Completion", "member" : "sbt.internal.util.complete.Completion.++", "link" : "sbt\/internal\/util\/complete\/Completion.html#++(o:sbt.internal.util.complete.Completion):sbt.internal.util.complete.Completion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/Completion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/Completion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/Completion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/Completion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/Completion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/Completion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/Completion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Completion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Completion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Completion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/Completion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/Completion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/Completion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/Completion.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/Completion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/Completion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/Completion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.Completion.isEmpty", "link" : "sbt\/internal\/util\/complete\/Completion.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "display", "tail" : "(): String", "member" : "sbt.internal.util.complete.Completion.display", "link" : "sbt\/internal\/util\/complete\/Completion.html#display:String", "kind" : "abstract def"}, {"label" : "append", "tail" : "(): String", "member" : "sbt.internal.util.complete.Completion.append", "link" : "sbt\/internal\/util\/complete\/Completion.html#append:String", "kind" : "abstract def"}], "shortDescription" : "Represents a completion.", "object" : "sbt\/internal\/util\/complete\/Completion$.html", "members_object" : [{"label" : "suggestion", "tail" : "(value: ⇒ String): Completion", "member" : "sbt.internal.util.complete.Completion.suggestion", "link" : "sbt\/internal\/util\/complete\/Completion$.html#suggestion(value:=>String):sbt.internal.util.complete.Completion", "kind" : "def"}, {"label" : "tokenDisplay", "tail" : "(append: String, display: String): Completion", "member" : "sbt.internal.util.complete.Completion.tokenDisplay", "link" : "sbt\/internal\/util\/complete\/Completion$.html#tokenDisplay(append:String,display:String):sbt.internal.util.complete.Completion", "kind" : "def"}, {"label" : "token", "tail" : "(prepend: ⇒ String, append: ⇒ String): Completion", "member" : "sbt.internal.util.complete.Completion.token", "link" : "sbt\/internal\/util\/complete\/Completion$.html#token(prepend:=>String,append:=>String):sbt.internal.util.complete.Completion", "kind" : "def"}, {"label" : "displayOnly", "tail" : "(value: ⇒ String): Completion", "member" : "sbt.internal.util.complete.Completion.displayOnly", "link" : "sbt\/internal\/util\/complete\/Completion$.html#displayOnly(value:=>String):sbt.internal.util.complete.Completion", "kind" : "def"}, {"label" : "single", "tail" : "(c: Char): Completion", "member" : "sbt.internal.util.complete.Completion.single", "link" : "sbt\/internal\/util\/complete\/Completion$.html#single(c:Char):sbt.internal.util.complete.Completion", "kind" : "def"}, {"label" : "empty", "tail" : ": Completion", "member" : "sbt.internal.util.complete.Completion.empty", "link" : "sbt\/internal\/util\/complete\/Completion$.html#empty:sbt.internal.util.complete.Completion", "kind" : "val"}, {"label" : "hashCode", "tail" : "(a: Completion): Int", "member" : "sbt.internal.util.complete.Completion.hashCode", "link" : "sbt\/internal\/util\/complete\/Completion$.html#hashCode(a:sbt.internal.util.complete.Completion):Int", "kind" : "def"}, {"label" : "equal", "tail" : "(a: Completion, b: Completion): Boolean", "member" : "sbt.internal.util.complete.Completion.equal", "link" : "sbt\/internal\/util\/complete\/Completion$.html#equal(a:sbt.internal.util.complete.Completion,b:sbt.internal.util.complete.Completion):Boolean", "kind" : "def"}, {"label" : "evaluatesRight", "tail" : "(a: Completion): Boolean", "member" : "sbt.internal.util.complete.Completion.evaluatesRight", "link" : "sbt\/internal\/util\/complete\/Completion$.html#evaluatesRight(a:sbt.internal.util.complete.Completion):Boolean", "kind" : "def"}, {"label" : "concat", "tail" : "(a: Completion, b: Completion): Completion", "member" : "sbt.internal.util.complete.Completion.concat", "link" : "sbt\/internal\/util\/complete\/Completion$.html#concat(a:sbt.internal.util.complete.Completion,b:sbt.internal.util.complete.Completion):sbt.internal.util.complete.Completion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/Completion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/Completion$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/Completion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/Completion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/Completion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/Completion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/Completion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Completion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Completion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Completion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/Completion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/Completion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/Completion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/Completion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/Completion$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/Completion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/Completion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/Completion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/Completion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/complete\/Completion.html", "kind" : "trait"}, {"name" : "sbt.internal.util.complete.Completions", "members_trait" : [{"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.internal.util.complete.Completions.equals", "link" : "sbt\/internal\/util\/complete\/Completions.html#equals(o:Any):Boolean", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.internal.util.complete.Completions.hashCode", "link" : "sbt\/internal\/util\/complete\/Completions.html#hashCode():Int", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (Completion) ⇒ Completion): Completions", "member" : "sbt.internal.util.complete.Completions.map", "link" : "sbt\/internal\/util\/complete\/Completions.html#map(f:sbt.internal.util.complete.Completion=>sbt.internal.util.complete.Completion):sbt.internal.util.complete.Completions", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (Completion) ⇒ Completions): Completions", "member" : "sbt.internal.util.complete.Completions.flatMap", "link" : "sbt\/internal\/util\/complete\/Completions.html#flatMap(f:sbt.internal.util.complete.Completion=>sbt.internal.util.complete.Completions):sbt.internal.util.complete.Completions", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.internal.util.complete.Completions.toString", "link" : "sbt\/internal\/util\/complete\/Completions.html#toString():String", "kind" : "def"}, {"label" : "filterS", "tail" : "(f: (String) ⇒ Boolean): Completions", "member" : "sbt.internal.util.complete.Completions.filterS", "link" : "sbt\/internal\/util\/complete\/Completions.html#filterS(f:String=>Boolean):sbt.internal.util.complete.Completions", "kind" : "final def"}, {"label" : "filter", "tail" : "(f: (Completion) ⇒ Boolean): Completions", "member" : "sbt.internal.util.complete.Completions.filter", "link" : "sbt\/internal\/util\/complete\/Completions.html#filter(f:sbt.internal.util.complete.Completion=>Boolean):sbt.internal.util.complete.Completions", "kind" : "final def"}, {"label" : "+:", "tail" : "(o: Completion): Completions", "member" : "sbt.internal.util.complete.Completions.+:", "link" : "sbt\/internal\/util\/complete\/Completions.html#+:(o:sbt.internal.util.complete.Completion):sbt.internal.util.complete.Completions", "kind" : "final def"}, {"label" : "++", "tail" : "(o: Completions): Completions", "member" : "sbt.internal.util.complete.Completions.++", "link" : "sbt\/internal\/util\/complete\/Completions.html#++(o:sbt.internal.util.complete.Completions):sbt.internal.util.complete.Completions", "kind" : "final def"}, {"label" : "x", "tail" : "(o: Completions): Completions", "member" : "sbt.internal.util.complete.Completions.x", "link" : "sbt\/internal\/util\/complete\/Completions.html#x(o:sbt.internal.util.complete.Completions):sbt.internal.util.complete.Completions", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/Completions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/Completions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/Completions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/Completions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/Completions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/Completions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/Completions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Completions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Completions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Completions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/Completions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/Completions.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/Completions.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/Completions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/Completions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/Completions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "get", "tail" : "(): Set[Completion]", "member" : "sbt.internal.util.complete.Completions.get", "link" : "sbt\/internal\/util\/complete\/Completions.html#get:Set[sbt.internal.util.complete.Completion]", "kind" : "abstract def"}], "shortDescription" : "Represents a set of completions.", "object" : "sbt\/internal\/util\/complete\/Completions$.html", "members_object" : [{"label" : "single", "tail" : "(c: Completion): Completions", "member" : "sbt.internal.util.complete.Completions.single", "link" : "sbt\/internal\/util\/complete\/Completions$.html#single(c:sbt.internal.util.complete.Completion):sbt.internal.util.complete.Completions", "kind" : "def"}, {"label" : "empty", "tail" : ": Completions", "member" : "sbt.internal.util.complete.Completions.empty", "link" : "sbt\/internal\/util\/complete\/Completions$.html#empty:sbt.internal.util.complete.Completions", "kind" : "val"}, {"label" : "nil", "tail" : ": Completions", "member" : "sbt.internal.util.complete.Completions.nil", "link" : "sbt\/internal\/util\/complete\/Completions$.html#nil:sbt.internal.util.complete.Completions", "kind" : "val"}, {"label" : "strict", "tail" : "(cs: Set[Completion]): Completions", "member" : "sbt.internal.util.complete.Completions.strict", "link" : "sbt\/internal\/util\/complete\/Completions$.html#strict(cs:Set[sbt.internal.util.complete.Completion]):sbt.internal.util.complete.Completions", "kind" : "def"}, {"label" : "apply", "tail" : "(cs: ⇒ Set[Completion]): Completions", "member" : "sbt.internal.util.complete.Completions.apply", "link" : "sbt\/internal\/util\/complete\/Completions$.html#apply(cs:=>Set[sbt.internal.util.complete.Completion]):sbt.internal.util.complete.Completions", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/Completions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/Completions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/Completions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/Completions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/Completions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/Completions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/Completions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Completions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Completions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Completions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/Completions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/Completions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/Completions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/Completions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/Completions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/Completions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/Completions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/Completions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/Completions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/complete\/Completions.html", "kind" : "trait"}, {"name" : "sbt.internal.util.complete.DefaultParsers", "shortDescription" : "Provides common Parser implementations and helper methods.", "object" : "sbt\/internal\/util\/complete\/DefaultParsers$.html", "members_object" : [{"label" : "~", "tail" : "", "member" : "sbt.internal.util.complete.ParserMain.~", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#~", "kind" : "object"}, {"label" : "validID", "tail" : "(s: String): Boolean", "member" : "sbt.internal.util.complete.DefaultParsers.validID", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#validID(s:String):Boolean", "kind" : "def"}, {"label" : "matches", "tail" : "(p: Parser[_], s: String): Boolean", "member" : "sbt.internal.util.complete.DefaultParsers.matches", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#matches(p:sbt.internal.util.complete.Parser[_],s:String):Boolean", "kind" : "def"}, {"label" : "stringLiteral", "tail" : "(s: String, start: Int): Parser[String]", "member" : "sbt.internal.util.complete.ParserMain.stringLiteral", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#stringLiteral(s:String,start:Int):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "seq0", "tail" : "(p: Seq[Parser[T]], errors: ⇒ Seq[String]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.ParserMain.seq0", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#seq0[T](p:Seq[sbt.internal.util.complete.Parser[T]],errors:=>Seq[String]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "seq", "tail" : "(p: Seq[Parser[T]]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.ParserMain.seq", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#seq[T](p:Seq[sbt.internal.util.complete.Parser[T]]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(p: Seq[Parser[T]]): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.oneOf", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#oneOf[T](p:Seq[sbt.internal.util.complete.Parser[T]]):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: Parser[_], failMessage: String): Parser[Unit]", "member" : "sbt.internal.util.complete.ParserMain.not", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#not(p:sbt.internal.util.complete.Parser[_],failMessage:String):sbt.internal.util.complete.Parser[Unit]", "kind" : "def"}, {"label" : "homParser", "tail" : "(a: Parser[A], b: Parser[A]): Parser[A]", "member" : "sbt.internal.util.complete.ParserMain.homParser", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#homParser[A](a:sbt.internal.util.complete.Parser[A],b:sbt.internal.util.complete.Parser[A]):sbt.internal.util.complete.Parser[A]", "kind" : "def"}, {"label" : "token", "tail" : "(t: Parser[T], complete: TokenCompletions): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.token", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#token[T](t:sbt.internal.util.complete.Parser[T],complete:sbt.internal.util.complete.TokenCompletions):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "tokenDisplay", "tail" : "(t: Parser[T], display: String): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.tokenDisplay", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#tokenDisplay[T](t:sbt.internal.util.complete.Parser[T],display:String):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "token", "tail" : "(t: Parser[T], description: String): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.token", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#token[T](t:sbt.internal.util.complete.Parser[T],description:String):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "token", "tail" : "(t: Parser[T], hide: (Int) ⇒ Boolean): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.token", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#token[T](t:sbt.internal.util.complete.Parser[T],hide:Int=>Boolean):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "token", "tail" : "(t: Parser[T]): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.token", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#token[T](t:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "matched", "tail" : "(t: Parser[_], seen: Vector[Char], partial: Boolean): Parser[String]", "member" : "sbt.internal.util.complete.ParserMain.matched", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#matched(t:sbt.internal.util.complete.Parser[_],seen:Vector[Char],partial:Boolean):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "examples", "tail" : "(a: Parser[A], completions: ExampleSource, maxNumberOfExamples: Int, removeInvalidExamples: Boolean): Parser[A]", "member" : "sbt.internal.util.complete.ParserMain.examples", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#examples[A](a:sbt.internal.util.complete.Parser[A],completions:sbt.internal.util.complete.ExampleSource,maxNumberOfExamples:Int,removeInvalidExamples:Boolean):sbt.internal.util.complete.Parser[A]", "kind" : "def"}, {"label" : "examples", "tail" : "(a: Parser[A], completions: Set[String], check: Boolean): Parser[A]", "member" : "sbt.internal.util.complete.ParserMain.examples", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#examples[A](a:sbt.internal.util.complete.Parser[A],completions:Set[String],check:Boolean):sbt.internal.util.complete.Parser[A]", "kind" : "def"}, {"label" : "completions", "tail" : "(p: Parser[_], s: String, level: Int): Completions", "member" : "sbt.internal.util.complete.ParserMain.completions", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#completions(p:sbt.internal.util.complete.Parser[_],s:String,level:Int):sbt.internal.util.complete.Completions", "kind" : "def"}, {"label" : "derive1", "tail" : "(p: Parser[T], c: Char): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.derive1", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#derive1[T](p:sbt.internal.util.complete.Parser[T],c:Char):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(p: Parser[T])(s: String): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.apply", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#apply[T](p:sbt.internal.util.complete.Parser[T])(s:String):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "result", "tail" : "(p: Parser[T], s: String): Either[() ⇒ (Seq[String], Int), T]", "member" : "sbt.internal.util.complete.ParserMain.result", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#result[T](p:sbt.internal.util.complete.Parser[T],s:String):Either[()=>(Seq[String],Int),T]", "kind" : "def"}, {"label" : "sampleCompletions", "tail" : "(str: String, parser: Parser[_], level: Int): Unit", "member" : "sbt.internal.util.complete.ParserMain.sampleCompletions", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#sampleCompletions(str:String,parser:sbt.internal.util.complete.Parser[_],level:Int):Unit", "kind" : "def"}, {"label" : "sampleParse", "tail" : "(str: String, parser: Parser[_]): Unit", "member" : "sbt.internal.util.complete.ParserMain.sampleParse", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#sampleParse(str:String,parser:sbt.internal.util.complete.Parser[_]):Unit", "kind" : "def"}, {"label" : "sample", "tail" : "(str: String, parser: Parser[_], completions: Boolean): Unit", "member" : "sbt.internal.util.complete.ParserMain.sample", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#sample(str:String,parser:sbt.internal.util.complete.Parser[_],completions:Boolean):Unit", "kind" : "def"}, {"label" : "parse", "tail" : "(str: String, parser: Parser[T]): Either[String, T]", "member" : "sbt.internal.util.complete.ParserMain.parse", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#parse[T](str:String,parser:sbt.internal.util.complete.Parser[T]):Either[String,T]", "kind" : "def"}, {"label" : "literal", "tail" : "(s: String): Parser[String]", "member" : "sbt.internal.util.complete.ParserMain.literal", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#literal(s:String):sbt.internal.util.complete.Parser[String]", "kind" : "implicit def"}, {"label" : "literal", "tail" : "(ch: Char): Parser[Char]", "member" : "sbt.internal.util.complete.ParserMain.literal", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#literal(ch:Char):sbt.internal.util.complete.Parser[Char]", "kind" : "implicit def"}, {"label" : "charClass", "tail" : "(f: (Char) ⇒ Boolean, label: String): Parser[Char]", "member" : "sbt.internal.util.complete.ParserMain.charClass", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#charClass(f:Char=>Boolean,label:String):sbt.internal.util.complete.Parser[Char]", "kind" : "def"}, {"label" : "chars", "tail" : "(legal: String): Parser[Char]", "member" : "sbt.internal.util.complete.ParserMain.chars", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#chars(legal:String):sbt.internal.util.complete.Parser[Char]", "kind" : "def"}, {"label" : "range", "tail" : "(r: NumericRange[Char]): Parser[Char]", "member" : "sbt.internal.util.complete.ParserMain.range", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#range(r:scala.collection.immutable.NumericRange[Char]):sbt.internal.util.complete.Parser[Char]", "kind" : "implicit def"}, {"label" : "success", "tail" : "(value: T): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.success", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#success[T](value:T):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: ⇒ String, definitive: Boolean): Parser[Nothing]", "member" : "sbt.internal.util.complete.ParserMain.failure", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#failure(msg:=>String,definitive:Boolean):sbt.internal.util.complete.Parser[Nothing]", "kind" : "def"}, {"label" : "invalid", "tail" : "(msgs: ⇒ Seq[String], definitive: Boolean): Parser[Nothing]", "member" : "sbt.internal.util.complete.ParserMain.invalid", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#invalid(msgs:=>Seq[String],definitive:Boolean):sbt.internal.util.complete.Parser[Nothing]", "kind" : "def"}, {"label" : "literalRichStringParser", "tail" : "(s: String): RichParser[String]", "member" : "sbt.internal.util.complete.ParserMain.literalRichStringParser", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#literalRichStringParser(s:String):sbt.internal.util.complete.RichParser[String]", "kind" : "implicit def"}, {"label" : "literalRichCharParser", "tail" : "(c: Char): RichParser[Char]", "member" : "sbt.internal.util.complete.ParserMain.literalRichCharParser", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#literalRichCharParser(c:Char):sbt.internal.util.complete.RichParser[Char]", "kind" : "implicit def"}, {"label" : "richParser", "tail" : "(a: Parser[A]): RichParser[A]", "member" : "sbt.internal.util.complete.ParserMain.richParser", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#richParser[A](a:sbt.internal.util.complete.Parser[A]):sbt.internal.util.complete.RichParser[A]", "kind" : "implicit def"}, {"label" : "Uri", "tail" : "(ex: Set[URI]): Parser[URI]", "member" : "sbt.internal.util.complete.Parsers.Uri", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#Uri(ex:Set[java.net.URI]):sbt.internal.util.complete.Parser[java.net.URI]", "kind" : "def"}, {"label" : "basicUri", "tail" : ": Parser[URI]", "member" : "sbt.internal.util.complete.Parsers.basicUri", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#basicUri:sbt.internal.util.complete.Parser[java.net.URI]", "kind" : "lazy val"}, {"label" : "trimmed", "tail" : "(p: Parser[String]): Parser[String]", "member" : "sbt.internal.util.complete.Parsers.trimmed", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#trimmed(p:sbt.internal.util.complete.Parser[String]):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "repeatDep", "tail" : "(p: (Seq[A]) ⇒ Parser[A], sep: Parser[Any]): Parser[Seq[A]]", "member" : "sbt.internal.util.complete.Parsers.repeatDep", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#repeatDep[A](p:Seq[A]=>sbt.internal.util.complete.Parser[A],sep:sbt.internal.util.complete.Parser[Any]):sbt.internal.util.complete.Parser[Seq[A]]", "kind" : "def"}, {"label" : "flag", "tail" : "(p: Parser[T]): Parser[Boolean]", "member" : "sbt.internal.util.complete.Parsers.flag", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#flag[T](p:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[Boolean]", "kind" : "def"}, {"label" : "spaceDelimited", "tail" : "(display: String): Parser[Seq[String]]", "member" : "sbt.internal.util.complete.Parsers.spaceDelimited", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#spaceDelimited(display:String):sbt.internal.util.complete.Parser[Seq[String]]", "kind" : "def"}, {"label" : "mapOrFail", "tail" : "(p: Parser[S])(f: (S) ⇒ T): Parser[T]", "member" : "sbt.internal.util.complete.Parsers.mapOrFail", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#mapOrFail[S,T](p:sbt.internal.util.complete.Parser[S])(f:S=>T):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "some", "tail" : "(p: Parser[T]): Parser[Option[T]]", "member" : "sbt.internal.util.complete.Parsers.some", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#some[T](p:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[Option[T]]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(rep: Parser[T], sep: Parser[_]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.Parsers.rep1sep", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#rep1sep[T](rep:sbt.internal.util.complete.Parser[T],sep:sbt.internal.util.complete.Parser[_]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(rep: Parser[T], sep: Parser[_]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.Parsers.repsep", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#repsep[T](rep:sbt.internal.util.complete.Parser[T],sep:sbt.internal.util.complete.Parser[_]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "NotQuoted", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.NotQuoted", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#NotQuoted:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "UnicodeEscape", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.UnicodeEscape", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#UnicodeEscape:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "EscapeSequence", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.EscapeSequence", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#EscapeSequence:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "StringEscapable", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.StringEscapable", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#StringEscapable:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "StringVerbatim", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.StringVerbatim", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#StringVerbatim:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "StringBasic", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.StringBasic", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#StringBasic:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "Bool", "tail" : ": Parser[Boolean]", "member" : "sbt.internal.util.complete.Parsers.Bool", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#Bool:sbt.internal.util.complete.Parser[Boolean]", "kind" : "lazy val"}, {"label" : "NatBasic", "tail" : ": Parser[Int]", "member" : "sbt.internal.util.complete.Parsers.NatBasic", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#NatBasic:sbt.internal.util.complete.Parser[Int]", "kind" : "lazy val"}, {"label" : "IntBasic", "tail" : ": Parser[Int]", "member" : "sbt.internal.util.complete.Parsers.IntBasic", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#IntBasic:sbt.internal.util.complete.Parser[Int]", "kind" : "lazy val"}, {"label" : "Port", "tail" : ": Parser[Int]", "member" : "sbt.internal.util.complete.Parsers.Port", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#Port:sbt.internal.util.complete.Parser[Int]", "kind" : "lazy val"}, {"label" : "fileParser", "tail" : "(base: File): Parser[File]", "member" : "sbt.internal.util.complete.Parsers.fileParser", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#fileParser(base:java.io.File):sbt.internal.util.complete.Parser[java.io.File]", "kind" : "def"}, {"label" : "alphanum", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.alphanum", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#alphanum(c:Char):Boolean", "kind" : "def"}, {"label" : "URIChar", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.URIChar", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#URIChar:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "NotDQuoteBackslashClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.NotDQuoteBackslashClass", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#NotDQuoteBackslashClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "NotDQuoteSpaceClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.NotDQuoteSpaceClass", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#NotDQuoteSpaceClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "DQuoteClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.DQuoteClass", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#DQuoteClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "BackslashChar", "tail" : ": Char", "member" : "sbt.internal.util.complete.Parsers.BackslashChar", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#BackslashChar:Char", "kind" : "lazy val"}, {"label" : "DQuoteChar", "tail" : ": Char", "member" : "sbt.internal.util.complete.Parsers.DQuoteChar", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#DQuoteChar:Char", "kind" : "lazy val"}, {"label" : "VerbatimDQuotes", "tail" : ": String", "member" : "sbt.internal.util.complete.Parsers.VerbatimDQuotes", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#VerbatimDQuotes:String", "kind" : "lazy val"}, {"label" : "URIClass", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.URIClass", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#URIClass:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "OptSpace", "tail" : ": Parser[Seq[Char]]", "member" : "sbt.internal.util.complete.Parsers.OptSpace", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#OptSpace:sbt.internal.util.complete.Parser[Seq[Char]]", "kind" : "lazy val"}, {"label" : "Space", "tail" : ": Parser[Seq[Char]]", "member" : "sbt.internal.util.complete.Parsers.Space", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#Space:sbt.internal.util.complete.Parser[Seq[Char]]", "kind" : "lazy val"}, {"label" : "OptNotSpace", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.OptNotSpace", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#OptNotSpace:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "NotSpace", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.NotSpace", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#NotSpace:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "SpaceClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.SpaceClass", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#SpaceClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "NotSpaceClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.NotSpaceClass", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#NotSpaceClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "isDelimiter", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.isDelimiter", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#isDelimiter(c:Char):Boolean", "kind" : "def"}, {"label" : "isScalaIDChar", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.isScalaIDChar", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#isScalaIDChar(c:Char):Boolean", "kind" : "def"}, {"label" : "isIDChar", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.isIDChar", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#isIDChar(c:Char):Boolean", "kind" : "def"}, {"label" : "isOpType", "tail" : "(cat: Int): Boolean", "member" : "sbt.internal.util.complete.Parsers.isOpType", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#isOpType(cat:Int):Boolean", "kind" : "def"}, {"label" : "isOpChar", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.isOpChar", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#isOpChar(c:Char):Boolean", "kind" : "def"}, {"label" : "opOrIDSpaced", "tail" : "(s: String): Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.opOrIDSpaced", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#opOrIDSpaced(s:String):sbt.internal.util.complete.Parser[Char]", "kind" : "def"}, {"label" : "identifier", "tail" : "(start: Parser[Char], rep: Parser[Char]): Parser[String]", "member" : "sbt.internal.util.complete.Parsers.identifier", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#identifier(start:sbt.internal.util.complete.Parser[Char],rep:sbt.internal.util.complete.Parser[Char]):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "ScalaID", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.ScalaID", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#ScalaID:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "ScalaIDChar", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.ScalaIDChar", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#ScalaIDChar:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "OpOrID", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.OpOrID", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#OpOrID:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "Op", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.Op", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#Op:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "OpChar", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.OpChar", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#OpChar:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "ID", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.ID", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#ID:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "IDChar", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.IDChar", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#IDChar:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "IDStart", "tail" : "(): Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.IDStart", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#IDStart:sbt.internal.util.complete.Parser[Char]", "kind" : "def"}, {"label" : "Letter", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.Letter", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#Letter:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "HexDigit", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.HexDigit", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#HexDigit:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "HexDigitSet", "tail" : ": Set[Char]", "member" : "sbt.internal.util.complete.Parsers.HexDigitSet", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#HexDigitSet:scala.collection.immutable.Set[Char]", "kind" : "lazy val"}, {"label" : "Digit", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.Digit", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#Digit:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "DigitSet", "tail" : ": Set[String]", "member" : "sbt.internal.util.complete.Parsers.DigitSet", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#DigitSet:scala.collection.immutable.Set[String]", "kind" : "lazy val"}, {"label" : "any", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.any", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#any:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "EOF", "tail" : ": Parser[Unit]", "member" : "sbt.internal.util.complete.Parsers.EOF", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#EOF:sbt.internal.util.complete.Parser[Unit]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/DefaultParsers$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.complete.DisplayOnly", "shortDescription" : "", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.internal.util.complete.DisplayOnly.toString", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#toString():String", "kind" : "def"}, {"label" : "append", "tail" : "(): String", "member" : "sbt.internal.util.complete.DisplayOnly.append", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#append:String", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.DisplayOnly.isEmpty", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#isEmpty:Boolean", "kind" : "def"}, {"member" : "sbt.internal.util.complete.DisplayOnly#<init>", "error" : "unsupported entity"}, {"label" : "display", "tail" : ": String", "member" : "sbt.internal.util.complete.DisplayOnly.display", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#display:String", "kind" : "val"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.internal.util.complete.Completion.equals", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#equals(o:Any):Boolean", "kind" : "final def"}, {"label" : "hashCode", "tail" : ": Int", "member" : "sbt.internal.util.complete.Completion.hashCode", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#hashCode:Int", "kind" : "final lazy val"}, {"label" : "x", "tail" : "(o: Completions): Completions", "member" : "sbt.internal.util.complete.Completion.x", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#x(o:sbt.internal.util.complete.Completions):sbt.internal.util.complete.Completions", "kind" : "final def"}, {"label" : "++", "tail" : "(o: Completion): Completion", "member" : "sbt.internal.util.complete.Completion.++", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#++(o:sbt.internal.util.complete.Completion):sbt.internal.util.complete.Completion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/DisplayOnly.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/util\/complete\/DisplayOnly.html", "kind" : "class"}, {"name" : "sbt.internal.util.complete.EditDistance", "shortDescription" : "", "object" : "sbt\/internal\/util\/complete\/EditDistance$.html", "members_object" : [{"label" : "levenshtein", "tail" : "(s: String, t: String, insertCost: Int, deleteCost: Int, subCost: Int, transposeCost: Int, matchCost: Int, caseCost: Int, transpositions: Boolean): Int", "member" : "sbt.internal.util.complete.EditDistance.levenshtein", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#levenshtein(s:String,t:String,insertCost:Int,deleteCost:Int,subCost:Int,transposeCost:Int,matchCost:Int,caseCost:Int,transpositions:Boolean):Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/EditDistance$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.complete.ExampleSource", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withAddedPrefix", "tail" : "(addedPrefix: String): ExampleSource", "member" : "sbt.internal.util.complete.ExampleSource.withAddedPrefix", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#withAddedPrefix(addedPrefix:String):sbt.internal.util.complete.ExampleSource", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(): Iterable[String]", "member" : "sbt.internal.util.complete.ExampleSource.apply", "link" : "sbt\/internal\/util\/complete\/ExampleSource.html#apply():Iterable[String]", "kind" : "abstract def"}], "shortDescription" : "These sources of examples are used in parsers for user input completion.", "trait" : "sbt\/internal\/util\/complete\/ExampleSource.html", "kind" : "trait"}, {"name" : "sbt.internal.util.complete.FileExamples", "shortDescription" : "Provides path completion examples based on files in the base directory.", "members_class" : [{"label" : "files", "tail" : "(directory: File): Stream[String]", "member" : "sbt.internal.util.complete.FileExamples.files", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#files(directory:java.io.File):Stream[String]", "kind" : "def"}, {"label" : "withAddedPrefix", "tail" : "(addedPrefix: String): FileExamples", "member" : "sbt.internal.util.complete.FileExamples.withAddedPrefix", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#withAddedPrefix(addedPrefix:String):sbt.internal.util.complete.FileExamples", "kind" : "def"}, {"label" : "apply", "tail" : "(): Stream[String]", "member" : "sbt.internal.util.complete.FileExamples.apply", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#apply():Stream[String]", "kind" : "def"}, {"member" : "sbt.internal.util.complete.FileExamples#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/FileExamples.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/FileExamples.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/util\/complete\/FileExamples.html", "kind" : "class"}, {"name" : "sbt.internal.util.complete.Finite", "shortDescription" : "Represents a finite upper bound.", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.internal.util.complete.Finite.toString", "link" : "sbt\/internal\/util\/complete\/Finite.html#toString():String", "kind" : "def"}, {"label" : "isInfinite", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.Finite.isInfinite", "link" : "sbt\/internal\/util\/complete\/Finite.html#isInfinite:Boolean", "kind" : "def"}, {"label" : "decrement", "tail" : "(): Finite", "member" : "sbt.internal.util.complete.Finite.decrement", "link" : "sbt\/internal\/util\/complete\/Finite.html#decrement:sbt.internal.util.complete.Finite", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.Finite.isZero", "link" : "sbt\/internal\/util\/complete\/Finite.html#isZero:Boolean", "kind" : "def"}, {"label" : "isOne", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.Finite.isOne", "link" : "sbt\/internal\/util\/complete\/Finite.html#isOne:Boolean", "kind" : "def"}, {"label" : ">=", "tail" : "(min: Int): Boolean", "member" : "sbt.internal.util.complete.Finite.>=", "link" : "sbt\/internal\/util\/complete\/Finite.html#>=(min:Int):Boolean", "kind" : "def"}, {"member" : "sbt.internal.util.complete.Finite#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Int", "member" : "sbt.internal.util.complete.Finite.value", "link" : "sbt\/internal\/util\/complete\/Finite.html#value:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/Finite.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/Finite.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/Finite.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/Finite.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/Finite.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/Finite.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/Finite.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Finite.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Finite.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Finite.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/Finite.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/Finite.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/Finite.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/Finite.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/Finite.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/Finite.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/util\/complete\/Finite.html", "kind" : "case class"}, {"name" : "sbt.internal.util.complete.FixedSetExamples", "shortDescription" : "A convenience example source that wraps any collection of strings into a source of examples.", "members_case class" : [{"label" : "apply", "tail" : "(): Iterable[String]", "member" : "sbt.internal.util.complete.FixedSetExamples.apply", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#apply():Iterable[String]", "kind" : "def"}, {"label" : "withAddedPrefix", "tail" : "(addedPrefix: String): ExampleSource", "member" : "sbt.internal.util.complete.FixedSetExamples.withAddedPrefix", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#withAddedPrefix(addedPrefix:String):sbt.internal.util.complete.ExampleSource", "kind" : "def"}, {"member" : "sbt.internal.util.complete.FixedSetExamples#<init>", "error" : "unsupported entity"}, {"label" : "examples", "tail" : ": Iterable[String]", "member" : "sbt.internal.util.complete.FixedSetExamples.examples", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#examples:Iterable[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/FixedSetExamples.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/util\/complete\/FixedSetExamples.html", "kind" : "case class"}, {"name" : "sbt.internal.util.complete.History", "shortDescription" : "", "object" : "sbt\/internal\/util\/complete\/History$.html", "members_class" : [{"label" : "list", "tail" : "(historySize: Int, show: Int): Seq[String]", "member" : "sbt.internal.util.complete.History.list", "link" : "sbt\/internal\/util\/complete\/History.html#list(historySize:Int,show:Int):Seq[String]", "kind" : "def"}, {"label" : "!?", "tail" : "(s: String): Option[String]", "member" : "sbt.internal.util.complete.History.!?", "link" : "sbt\/internal\/util\/complete\/History.html#!?(s:String):Option[String]", "kind" : "def"}, {"label" : "!-", "tail" : "(n: Int): Option[String]", "member" : "sbt.internal.util.complete.History.!-", "link" : "sbt\/internal\/util\/complete\/History.html#!-(n:Int):Option[String]", "kind" : "def"}, {"label" : "!", "tail" : "(s: String): Option[String]", "member" : "sbt.internal.util.complete.History.!", "link" : "sbt\/internal\/util\/complete\/History.html#!(s:String):Option[String]", "kind" : "def"}, {"label" : "!", "tail" : "(i: Int): Option[String]", "member" : "sbt.internal.util.complete.History.!", "link" : "sbt\/internal\/util\/complete\/History.html#!(i:Int):Option[String]", "kind" : "def"}, {"label" : "apply", "tail" : "(i: Int): Option[String]", "member" : "sbt.internal.util.complete.History.apply", "link" : "sbt\/internal\/util\/complete\/History.html#apply(i:Int):Option[String]", "kind" : "def"}, {"label" : "!!", "tail" : "(): Option[String]", "member" : "sbt.internal.util.complete.History.!!", "link" : "sbt\/internal\/util\/complete\/History.html#!!:Option[String]", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "sbt.internal.util.complete.History.size", "link" : "sbt\/internal\/util\/complete\/History.html#size:Int", "kind" : "def"}, {"label" : "all", "tail" : "(): Seq[String]", "member" : "sbt.internal.util.complete.History.all", "link" : "sbt\/internal\/util\/complete\/History.html#all:Seq[String]", "kind" : "def"}, {"label" : "path", "tail" : ": Option[File]", "member" : "sbt.internal.util.complete.History.path", "link" : "sbt\/internal\/util\/complete\/History.html#path:Option[java.io.File]", "kind" : "val"}, {"label" : "lines", "tail" : ": IndexedSeq[String]", "member" : "sbt.internal.util.complete.History.lines", "link" : "sbt\/internal\/util\/complete\/History.html#lines:IndexedSeq[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/History.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/History.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/History.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/History.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/History.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/History.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/History.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/History.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/History.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/History.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/History.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/History.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/History.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/History.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/History.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/History.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/History.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/History.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/History.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "number", "tail" : "(s: String): Option[Int]", "member" : "sbt.internal.util.complete.History.number", "link" : "sbt\/internal\/util\/complete\/History$.html#number(s:String):Option[Int]", "kind" : "def"}, {"label" : "apply", "tail" : "(lines: Seq[String], path: Option[File], error: (String) ⇒ Unit): History", "member" : "sbt.internal.util.complete.History.apply", "link" : "sbt\/internal\/util\/complete\/History$.html#apply(lines:Seq[String],path:Option[java.io.File],error:String=>Unit):sbt.internal.util.complete.History", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/History$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/History$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/History$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/History$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/History$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/History$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/History$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/History$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/History$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/History$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/History$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/History$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/History$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/History$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/History$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/History$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/History$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/History$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/History$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/util\/complete\/History.html", "kind" : "class"}, {"name" : "sbt.internal.util.complete.HistoryCommands", "shortDescription" : "", "object" : "sbt\/internal\/util\/complete\/HistoryCommands$.html", "members_object" : [{"label" : "actionParser", "tail" : ": Parser[(History) ⇒ Option[List[String]]]", "member" : "sbt.internal.util.complete.HistoryCommands.actionParser", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#actionParser:sbt.internal.util.complete.Parser[sbt.internal.util.complete.History=>Option[List[String]]]", "kind" : "val"}, {"label" : "execute", "tail" : "(f: (History) ⇒ Option[String]): (History) ⇒ Option[List[String]]", "member" : "sbt.internal.util.complete.HistoryCommands.execute", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#execute(f:sbt.internal.util.complete.History=>Option[String]):sbt.internal.util.complete.History=>Option[List[String]]", "kind" : "def"}, {"label" : "help", "tail" : ": Parser[(History) ⇒ Some[Nil.type]]", "member" : "sbt.internal.util.complete.HistoryCommands.help", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#help:sbt.internal.util.complete.Parser[sbt.internal.util.complete.History=>Some[scala.collection.immutable.Nil.type]]", "kind" : "lazy val"}, {"label" : "execInt", "tail" : ": Parser[(History) ⇒ Option[List[String]]]", "member" : "sbt.internal.util.complete.HistoryCommands.execInt", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#execInt:sbt.internal.util.complete.Parser[sbt.internal.util.complete.History=>Option[List[String]]]", "kind" : "lazy val"}, {"label" : "execStr", "tail" : ": Parser[(History) ⇒ Option[List[String]]]", "member" : "sbt.internal.util.complete.HistoryCommands.execStr", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#execStr:sbt.internal.util.complete.Parser[sbt.internal.util.complete.History=>Option[List[String]]]", "kind" : "lazy val"}, {"label" : "list", "tail" : ": Parser[(History) ⇒ Some[Nil.type]]", "member" : "sbt.internal.util.complete.HistoryCommands.list", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#list:sbt.internal.util.complete.Parser[sbt.internal.util.complete.History=>Some[scala.collection.immutable.Nil.type]]", "kind" : "lazy val"}, {"label" : "last", "tail" : ": Parser[(History) ⇒ Option[List[String]]]", "member" : "sbt.internal.util.complete.HistoryCommands.last", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#last:sbt.internal.util.complete.Parser[sbt.internal.util.complete.History=>Option[List[String]]]", "kind" : "lazy val"}, {"label" : "num", "tail" : ": Parser[Int]", "member" : "sbt.internal.util.complete.HistoryCommands.num", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#num:sbt.internal.util.complete.Parser[Int]", "kind" : "lazy val"}, {"label" : "MaxLines", "tail" : ": Int", "member" : "sbt.internal.util.complete.HistoryCommands.MaxLines", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#MaxLines:Int", "kind" : "val"}, {"label" : "printHistory", "tail" : "(history: History, historySize: Int, show: Int): Unit", "member" : "sbt.internal.util.complete.HistoryCommands.printHistory", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#printHistory(history:sbt.internal.util.complete.History,historySize:Int,show:Int):Unit", "kind" : "def"}, {"label" : "printHelp", "tail" : "(): Unit", "member" : "sbt.internal.util.complete.HistoryCommands.printHelp", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#printHelp():Unit", "kind" : "def"}, {"label" : "helpString", "tail" : "(): String", "member" : "sbt.internal.util.complete.HistoryCommands.helpString", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#helpString:String", "kind" : "def"}, {"label" : "descriptions", "tail" : "(): Seq[(String, String)]", "member" : "sbt.internal.util.complete.HistoryCommands.descriptions", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#descriptions:Seq[(String,String)]", "kind" : "def"}, {"label" : "plainCommands", "tail" : "(): Seq[String]", "member" : "sbt.internal.util.complete.HistoryCommands.plainCommands", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#plainCommands:Seq[String]", "kind" : "def"}, {"label" : "Nth", "tail" : "(): String", "member" : "sbt.internal.util.complete.HistoryCommands.Nth", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#Nth:String", "kind" : "def"}, {"label" : "Previous", "tail" : "(): String", "member" : "sbt.internal.util.complete.HistoryCommands.Previous", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#Previous:String", "kind" : "def"}, {"label" : "StartsWithString", "tail" : "(): String", "member" : "sbt.internal.util.complete.HistoryCommands.StartsWithString", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#StartsWithString:String", "kind" : "def"}, {"label" : "ContainsString", "tail" : "(): String", "member" : "sbt.internal.util.complete.HistoryCommands.ContainsString", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#ContainsString:String", "kind" : "def"}, {"label" : "ListN", "tail" : "(): String", "member" : "sbt.internal.util.complete.HistoryCommands.ListN", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#ListN:String", "kind" : "def"}, {"label" : "ListFull", "tail" : "(): String", "member" : "sbt.internal.util.complete.HistoryCommands.ListFull", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#ListFull:String", "kind" : "def"}, {"label" : "LastFull", "tail" : "(): String", "member" : "sbt.internal.util.complete.HistoryCommands.LastFull", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#LastFull:String", "kind" : "def"}, {"label" : "ContainsFull", "tail" : "(): String", "member" : "sbt.internal.util.complete.HistoryCommands.ContainsFull", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#ContainsFull:String", "kind" : "def"}, {"label" : "ListCommands", "tail" : ": String", "member" : "sbt.internal.util.complete.HistoryCommands.ListCommands", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#ListCommands:String", "kind" : "val"}, {"label" : "Last", "tail" : ": String", "member" : "sbt.internal.util.complete.HistoryCommands.Last", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#Last:String", "kind" : "val"}, {"label" : "Contains", "tail" : ": String", "member" : "sbt.internal.util.complete.HistoryCommands.Contains", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#Contains:String", "kind" : "val"}, {"label" : "Start", "tail" : ": String", "member" : "sbt.internal.util.complete.HistoryCommands.Start", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#Start:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/HistoryCommands$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.complete.Infinite", "shortDescription" : "Represents unbounded.", "object" : "sbt\/internal\/util\/complete\/Infinite$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.internal.util.complete.Infinite.toString", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#toString():String", "kind" : "def"}, {"label" : "isInfinite", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.Infinite.isInfinite", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#isInfinite:Boolean", "kind" : "def"}, {"label" : "decrement", "tail" : "(): Infinite.type", "member" : "sbt.internal.util.complete.Infinite.decrement", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#decrement:sbt.internal.util.complete.Infinite.type", "kind" : "def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.Infinite.isZero", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#isZero:Boolean", "kind" : "def"}, {"label" : "isOne", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.Infinite.isOne", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#isOne:Boolean", "kind" : "def"}, {"label" : ">=", "tail" : "(min: Int): Boolean", "member" : "sbt.internal.util.complete.Infinite.>=", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#>=(min:Int):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/Infinite$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/Infinite$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.complete.JLineCompletion", "shortDescription" : "", "object" : "sbt\/internal\/util\/complete\/JLineCompletion$.html", "members_object" : [{"label" : "commonPrefix", "tail" : "(a: String, b: String): String", "member" : "sbt.internal.util.complete.JLineCompletion.commonPrefix", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#commonPrefix(a:String,b:String):String", "kind" : "def"}, {"label" : "commonPrefix", "tail" : "(s: Seq[String]): String", "member" : "sbt.internal.util.complete.JLineCompletion.commonPrefix", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#commonPrefix(s:Seq[String]):String", "kind" : "def"}, {"label" : "confirm", "tail" : "(prompt: String, trueC: Char, falseC: Char, reader: ConsoleReader): Boolean", "member" : "sbt.internal.util.complete.JLineCompletion.confirm", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#confirm(prompt:String,trueC:Char,falseC:Char,reader:jline.console.ConsoleReader):Boolean", "kind" : "def"}, {"label" : "shouldPrint", "tail" : "(cs: Seq[String], reader: ConsoleReader): Boolean", "member" : "sbt.internal.util.complete.JLineCompletion.shouldPrint", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#shouldPrint(cs:Seq[String],reader:jline.console.ConsoleReader):Boolean", "kind" : "def"}, {"label" : "hasNewline", "tail" : "(s: String): Boolean", "member" : "sbt.internal.util.complete.JLineCompletion.hasNewline", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#hasNewline(s:String):Boolean", "kind" : "def"}, {"label" : "printLinesAndColumns", "tail" : "(cs: Seq[String], reader: ConsoleReader): Unit", "member" : "sbt.internal.util.complete.JLineCompletion.printLinesAndColumns", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#printLinesAndColumns(cs:Seq[String],reader:jline.console.ConsoleReader):Unit", "kind" : "def"}, {"label" : "printCompletions", "tail" : "(cs: Seq[String], reader: ConsoleReader): Unit", "member" : "sbt.internal.util.complete.JLineCompletion.printCompletions", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#printCompletions(cs:Seq[String],reader:jline.console.ConsoleReader):Unit", "kind" : "def"}, {"label" : "showCompletions", "tail" : "(display: Seq[String], reader: ConsoleReader): Unit", "member" : "sbt.internal.util.complete.JLineCompletion.showCompletions", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#showCompletions(display:Seq[String],reader:jline.console.ConsoleReader):Unit", "kind" : "def"}, {"label" : "appendCompletion", "tail" : "(common: String, reader: ConsoleReader): Unit", "member" : "sbt.internal.util.complete.JLineCompletion.appendCompletion", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#appendCompletion(common:String,reader:jline.console.ConsoleReader):Unit", "kind" : "def"}, {"label" : "complete", "tail" : "(beforeCursor: String, completions: (String) ⇒ (Seq[String], Seq[String]), reader: ConsoleReader): Boolean", "member" : "sbt.internal.util.complete.JLineCompletion.complete", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#complete(beforeCursor:String,completions:String=>(Seq[String],Seq[String]),reader:jline.console.ConsoleReader):Boolean", "kind" : "def"}, {"label" : "beforeCursor", "tail" : "(reader: ConsoleReader): String", "member" : "sbt.internal.util.complete.JLineCompletion.beforeCursor", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#beforeCursor(reader:jline.console.ConsoleReader):String", "kind" : "def"}, {"label" : "bufferSnapshot", "tail" : "(reader: ConsoleReader): (String, Int)", "member" : "sbt.internal.util.complete.JLineCompletion.bufferSnapshot", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#bufferSnapshot(reader:jline.console.ConsoleReader):(String,Int)", "kind" : "def"}, {"label" : "customCompletor", "tail" : "(f: (String, Int) ⇒ (Seq[String], Seq[String])): (ConsoleReader, Int) ⇒ Boolean", "member" : "sbt.internal.util.complete.JLineCompletion.customCompletor", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#customCompletor(f:(String,Int)=>(Seq[String],Seq[String])):(jline.console.ConsoleReader,Int)=>Boolean", "kind" : "def"}, {"label" : "appendNonEmpty", "tail" : "(set: Set[String], add: String): Set[String]", "member" : "sbt.internal.util.complete.JLineCompletion.appendNonEmpty", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#appendNonEmpty(set:Set[String],add:String):Set[String]", "kind" : "def"}, {"label" : "convertCompletions", "tail" : "(cs: Set[Completion]): (Seq[String], Seq[String])", "member" : "sbt.internal.util.complete.JLineCompletion.convertCompletions", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#convertCompletions(cs:Set[sbt.internal.util.complete.Completion]):(Seq[String],Seq[String])", "kind" : "def"}, {"label" : "convertCompletions", "tail" : "(c: Completions): (Seq[String], Seq[String])", "member" : "sbt.internal.util.complete.JLineCompletion.convertCompletions", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#convertCompletions(c:sbt.internal.util.complete.Completions):(Seq[String],Seq[String])", "kind" : "def"}, {"label" : "parserAsCompletor", "tail" : "(p: Parser[_]): (String, Int) ⇒ (Seq[String], Seq[String])", "member" : "sbt.internal.util.complete.JLineCompletion.parserAsCompletor", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#parserAsCompletor(p:sbt.internal.util.complete.Parser[_]):(String,Int)=>(Seq[String],Seq[String])", "kind" : "def"}, {"label" : "installCustomCompletor", "tail" : "(complete: (ConsoleReader, Int) ⇒ Boolean, reader: ConsoleReader): Unit", "member" : "sbt.internal.util.complete.JLineCompletion.installCustomCompletor", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#installCustomCompletor(complete:(jline.console.ConsoleReader,Int)=>Boolean,reader:jline.console.ConsoleReader):Unit", "kind" : "def"}, {"label" : "installCustomCompletor", "tail" : "(reader: ConsoleReader)(complete: (String, Int) ⇒ (Seq[String], Seq[String])): Unit", "member" : "sbt.internal.util.complete.JLineCompletion.installCustomCompletor", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#installCustomCompletor(reader:jline.console.ConsoleReader)(complete:(String,Int)=>(Seq[String],Seq[String])):Unit", "kind" : "def"}, {"label" : "installCustomCompletor", "tail" : "(reader: ConsoleReader, parser: Parser[_]): Unit", "member" : "sbt.internal.util.complete.JLineCompletion.installCustomCompletor", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#installCustomCompletor(reader:jline.console.ConsoleReader,parser:sbt.internal.util.complete.Parser[_]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/JLineCompletion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.complete.Parser", "members_trait" : [{"label" : "isTokenStart", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.Parser.isTokenStart", "link" : "sbt\/internal\/util\/complete\/Parser.html#isTokenStart:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/Parser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/Parser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/Parser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/Parser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/Parser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/Parser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/Parser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Parser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Parser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Parser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/Parser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/Parser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/Parser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/Parser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/Parser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/Parser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/Parser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/Parser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/Parser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "valid", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.Parser.valid", "link" : "sbt\/internal\/util\/complete\/Parser.html#valid:Boolean", "kind" : "abstract def"}, {"label" : "ifValid", "tail" : "(p: ⇒ Parser[S]): Parser[S]", "member" : "sbt.internal.util.complete.Parser.ifValid", "link" : "sbt\/internal\/util\/complete\/Parser.html#ifValid[S](p:=>sbt.internal.util.complete.Parser[S]):sbt.internal.util.complete.Parser[S]", "kind" : "abstract def"}, {"label" : "failure", "tail" : "(): Option[Failure]", "member" : "sbt.internal.util.complete.Parser.failure", "link" : "sbt\/internal\/util\/complete\/Parser.html#failure:Option[sbt.internal.util.complete.Parser.Failure]", "kind" : "abstract def"}, {"label" : "completions", "tail" : "(level: Int): Completions", "member" : "sbt.internal.util.complete.Parser.completions", "link" : "sbt\/internal\/util\/complete\/Parser.html#completions(level:Int):sbt.internal.util.complete.Completions", "kind" : "abstract def"}, {"label" : "result", "tail" : "(): Option[T]", "member" : "sbt.internal.util.complete.Parser.result", "link" : "sbt\/internal\/util\/complete\/Parser.html#result:Option[T]", "kind" : "abstract def"}, {"label" : "resultEmpty", "tail" : "(): Parser.Result[T]", "member" : "sbt.internal.util.complete.Parser.resultEmpty", "link" : "sbt\/internal\/util\/complete\/Parser.html#resultEmpty:sbt.internal.util.complete.Parser.Result[T]", "kind" : "abstract def"}, {"label" : "derive", "tail" : "(i: Char): Parser[T]", "member" : "sbt.internal.util.complete.Parser.derive", "link" : "sbt\/internal\/util\/complete\/Parser.html#derive(i:Char):sbt.internal.util.complete.Parser[T]", "kind" : "abstract def"}], "shortDescription" : "A String parser that provides semi-automatic tab completion.", "object" : "sbt\/internal\/util\/complete\/Parser$.html", "members_object" : [{"label" : "~", "tail" : "", "member" : "sbt.internal.util.complete.ParserMain.~", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#~", "kind" : "object"}, {"label" : "and", "tail" : "(a: Parser[T], b: Parser[_]): Parser[T]", "member" : "sbt.internal.util.complete.Parser.and", "link" : "sbt\/internal\/util\/complete\/Parser$.html#and[T](a:sbt.internal.util.complete.Parser[T],b:sbt.internal.util.complete.Parser[_]):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "repeat", "tail" : "(p: Parser[T], min: Int, max: UpperBound): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.Parser.repeat", "link" : "sbt\/internal\/util\/complete\/Parser$.html#repeat[T](p:sbt.internal.util.complete.Parser[T],min:Int,max:sbt.internal.util.complete.UpperBound):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "oneOrMore", "tail" : "(p: Parser[T]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.Parser.oneOrMore", "link" : "sbt\/internal\/util\/complete\/Parser$.html#oneOrMore[T](p:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "zeroOrMore", "tail" : "(p: Parser[T]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.Parser.zeroOrMore", "link" : "sbt\/internal\/util\/complete\/Parser$.html#zeroOrMore[T](p:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "trapAndFail", "tail" : "(delegate: Parser[T]): Parser[T]", "member" : "sbt.internal.util.complete.Parser.trapAndFail", "link" : "sbt\/internal\/util\/complete\/Parser$.html#trapAndFail[T](delegate:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "onFailure", "tail" : "(delegate: Parser[T], msg: String): Parser[T]", "member" : "sbt.internal.util.complete.Parser.onFailure", "link" : "sbt\/internal\/util\/complete\/Parser$.html#onFailure[T](delegate:sbt.internal.util.complete.Parser[T],msg:String):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "opt", "tail" : "(a: Parser[T]): Parser[Option[T]]", "member" : "sbt.internal.util.complete.Parser.opt", "link" : "sbt\/internal\/util\/complete\/Parser$.html#opt[T](a:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[Option[T]]", "kind" : "def"}, {"label" : "choiceParser", "tail" : "(a: Parser[A], b: Parser[B]): Parser[Either[A, B]]", "member" : "sbt.internal.util.complete.Parser.choiceParser", "link" : "sbt\/internal\/util\/complete\/Parser$.html#choiceParser[A,B](a:sbt.internal.util.complete.Parser[A],b:sbt.internal.util.complete.Parser[B]):sbt.internal.util.complete.Parser[Either[A,B]]", "kind" : "def"}, {"label" : "seqParser", "tail" : "(a: Parser[A], b: Parser[B]): Parser[(A, B)]", "member" : "sbt.internal.util.complete.Parser.seqParser", "link" : "sbt\/internal\/util\/complete\/Parser$.html#seqParser[A,B](a:sbt.internal.util.complete.Parser[A],b:sbt.internal.util.complete.Parser[B]):sbt.internal.util.complete.Parser[(A,B)]", "kind" : "def"}, {"label" : "filterParser", "tail" : "(a: Parser[T], f: (T) ⇒ Boolean, seen: String, msg: (String) ⇒ String): Parser[T]", "member" : "sbt.internal.util.complete.Parser.filterParser", "link" : "sbt\/internal\/util\/complete\/Parser$.html#filterParser[T](a:sbt.internal.util.complete.Parser[T],f:T=>Boolean,seen:String,msg:String=>String):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "bindParser", "tail" : "(a: Parser[A], f: (A) ⇒ Parser[B]): Parser[B]", "member" : "sbt.internal.util.complete.Parser.bindParser", "link" : "sbt\/internal\/util\/complete\/Parser$.html#bindParser[A,B](a:sbt.internal.util.complete.Parser[A],f:A=>sbt.internal.util.complete.Parser[B]):sbt.internal.util.complete.Parser[B]", "kind" : "def"}, {"label" : "mapParser", "tail" : "(a: Parser[A], f: (A) ⇒ B): Parser[B]", "member" : "sbt.internal.util.complete.Parser.mapParser", "link" : "sbt\/internal\/util\/complete\/Parser$.html#mapParser[A,B](a:sbt.internal.util.complete.Parser[A],f:A=>B):sbt.internal.util.complete.Parser[B]", "kind" : "def"}, {"label" : "tuple", "tail" : "(a: Option[A], b: Option[B]): Option[(A, B)]", "member" : "sbt.internal.util.complete.Parser.tuple", "link" : "sbt\/internal\/util\/complete\/Parser$.html#tuple[A,B](a:Option[A],b:Option[B]):Option[(A,B)]", "kind" : "def"}, {"label" : "mkFailure", "tail" : "(error: ⇒ String, definitive: Boolean): Failure", "member" : "sbt.internal.util.complete.Parser.mkFailure", "link" : "sbt\/internal\/util\/complete\/Parser$.html#mkFailure(error:=>String,definitive:Boolean):sbt.internal.util.complete.Parser.Failure", "kind" : "def"}, {"label" : "mkFailures", "tail" : "(errors: ⇒ Seq[String], definitive: Boolean): Failure", "member" : "sbt.internal.util.complete.Parser.mkFailures", "link" : "sbt\/internal\/util\/complete\/Parser$.html#mkFailures(errors:=>Seq[String],definitive:Boolean):sbt.internal.util.complete.Parser.Failure", "kind" : "def"}, {"label" : "Failure", "tail" : "", "member" : "sbt.internal.util.complete.Parser.Failure", "link" : "sbt\/internal\/util\/complete\/Parser$.html#FailureextendsParser.Result[Nothing]", "kind" : "final class"}, {"label" : "Value", "tail" : "", "member" : "sbt.internal.util.complete.Parser.Value", "link" : "sbt\/internal\/util\/complete\/Parser$.html#Value[+T]extendsParser.Result[T]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Result", "tail" : "", "member" : "sbt.internal.util.complete.Parser.Result", "link" : "sbt\/internal\/util\/complete\/Parser$.html#Result[+T]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "stringLiteral", "tail" : "(s: String, start: Int): Parser[String]", "member" : "sbt.internal.util.complete.ParserMain.stringLiteral", "link" : "sbt\/internal\/util\/complete\/Parser$.html#stringLiteral(s:String,start:Int):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "seq0", "tail" : "(p: Seq[Parser[T]], errors: ⇒ Seq[String]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.ParserMain.seq0", "link" : "sbt\/internal\/util\/complete\/Parser$.html#seq0[T](p:Seq[sbt.internal.util.complete.Parser[T]],errors:=>Seq[String]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "seq", "tail" : "(p: Seq[Parser[T]]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.ParserMain.seq", "link" : "sbt\/internal\/util\/complete\/Parser$.html#seq[T](p:Seq[sbt.internal.util.complete.Parser[T]]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(p: Seq[Parser[T]]): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.oneOf", "link" : "sbt\/internal\/util\/complete\/Parser$.html#oneOf[T](p:Seq[sbt.internal.util.complete.Parser[T]]):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: Parser[_], failMessage: String): Parser[Unit]", "member" : "sbt.internal.util.complete.ParserMain.not", "link" : "sbt\/internal\/util\/complete\/Parser$.html#not(p:sbt.internal.util.complete.Parser[_],failMessage:String):sbt.internal.util.complete.Parser[Unit]", "kind" : "def"}, {"label" : "homParser", "tail" : "(a: Parser[A], b: Parser[A]): Parser[A]", "member" : "sbt.internal.util.complete.ParserMain.homParser", "link" : "sbt\/internal\/util\/complete\/Parser$.html#homParser[A](a:sbt.internal.util.complete.Parser[A],b:sbt.internal.util.complete.Parser[A]):sbt.internal.util.complete.Parser[A]", "kind" : "def"}, {"label" : "token", "tail" : "(t: Parser[T], complete: TokenCompletions): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.token", "link" : "sbt\/internal\/util\/complete\/Parser$.html#token[T](t:sbt.internal.util.complete.Parser[T],complete:sbt.internal.util.complete.TokenCompletions):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "tokenDisplay", "tail" : "(t: Parser[T], display: String): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.tokenDisplay", "link" : "sbt\/internal\/util\/complete\/Parser$.html#tokenDisplay[T](t:sbt.internal.util.complete.Parser[T],display:String):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "token", "tail" : "(t: Parser[T], description: String): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.token", "link" : "sbt\/internal\/util\/complete\/Parser$.html#token[T](t:sbt.internal.util.complete.Parser[T],description:String):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "token", "tail" : "(t: Parser[T], hide: (Int) ⇒ Boolean): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.token", "link" : "sbt\/internal\/util\/complete\/Parser$.html#token[T](t:sbt.internal.util.complete.Parser[T],hide:Int=>Boolean):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "token", "tail" : "(t: Parser[T]): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.token", "link" : "sbt\/internal\/util\/complete\/Parser$.html#token[T](t:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "matched", "tail" : "(t: Parser[_], seen: Vector[Char], partial: Boolean): Parser[String]", "member" : "sbt.internal.util.complete.ParserMain.matched", "link" : "sbt\/internal\/util\/complete\/Parser$.html#matched(t:sbt.internal.util.complete.Parser[_],seen:Vector[Char],partial:Boolean):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "examples", "tail" : "(a: Parser[A], completions: ExampleSource, maxNumberOfExamples: Int, removeInvalidExamples: Boolean): Parser[A]", "member" : "sbt.internal.util.complete.ParserMain.examples", "link" : "sbt\/internal\/util\/complete\/Parser$.html#examples[A](a:sbt.internal.util.complete.Parser[A],completions:sbt.internal.util.complete.ExampleSource,maxNumberOfExamples:Int,removeInvalidExamples:Boolean):sbt.internal.util.complete.Parser[A]", "kind" : "def"}, {"label" : "examples", "tail" : "(a: Parser[A], completions: Set[String], check: Boolean): Parser[A]", "member" : "sbt.internal.util.complete.ParserMain.examples", "link" : "sbt\/internal\/util\/complete\/Parser$.html#examples[A](a:sbt.internal.util.complete.Parser[A],completions:Set[String],check:Boolean):sbt.internal.util.complete.Parser[A]", "kind" : "def"}, {"label" : "completions", "tail" : "(p: Parser[_], s: String, level: Int): Completions", "member" : "sbt.internal.util.complete.ParserMain.completions", "link" : "sbt\/internal\/util\/complete\/Parser$.html#completions(p:sbt.internal.util.complete.Parser[_],s:String,level:Int):sbt.internal.util.complete.Completions", "kind" : "def"}, {"label" : "derive1", "tail" : "(p: Parser[T], c: Char): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.derive1", "link" : "sbt\/internal\/util\/complete\/Parser$.html#derive1[T](p:sbt.internal.util.complete.Parser[T],c:Char):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(p: Parser[T])(s: String): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.apply", "link" : "sbt\/internal\/util\/complete\/Parser$.html#apply[T](p:sbt.internal.util.complete.Parser[T])(s:String):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "result", "tail" : "(p: Parser[T], s: String): Either[() ⇒ (Seq[String], Int), T]", "member" : "sbt.internal.util.complete.ParserMain.result", "link" : "sbt\/internal\/util\/complete\/Parser$.html#result[T](p:sbt.internal.util.complete.Parser[T],s:String):Either[()=>(Seq[String],Int),T]", "kind" : "def"}, {"label" : "sampleCompletions", "tail" : "(str: String, parser: Parser[_], level: Int): Unit", "member" : "sbt.internal.util.complete.ParserMain.sampleCompletions", "link" : "sbt\/internal\/util\/complete\/Parser$.html#sampleCompletions(str:String,parser:sbt.internal.util.complete.Parser[_],level:Int):Unit", "kind" : "def"}, {"label" : "sampleParse", "tail" : "(str: String, parser: Parser[_]): Unit", "member" : "sbt.internal.util.complete.ParserMain.sampleParse", "link" : "sbt\/internal\/util\/complete\/Parser$.html#sampleParse(str:String,parser:sbt.internal.util.complete.Parser[_]):Unit", "kind" : "def"}, {"label" : "sample", "tail" : "(str: String, parser: Parser[_], completions: Boolean): Unit", "member" : "sbt.internal.util.complete.ParserMain.sample", "link" : "sbt\/internal\/util\/complete\/Parser$.html#sample(str:String,parser:sbt.internal.util.complete.Parser[_],completions:Boolean):Unit", "kind" : "def"}, {"label" : "parse", "tail" : "(str: String, parser: Parser[T]): Either[String, T]", "member" : "sbt.internal.util.complete.ParserMain.parse", "link" : "sbt\/internal\/util\/complete\/Parser$.html#parse[T](str:String,parser:sbt.internal.util.complete.Parser[T]):Either[String,T]", "kind" : "def"}, {"label" : "literal", "tail" : "(s: String): Parser[String]", "member" : "sbt.internal.util.complete.ParserMain.literal", "link" : "sbt\/internal\/util\/complete\/Parser$.html#literal(s:String):sbt.internal.util.complete.Parser[String]", "kind" : "implicit def"}, {"label" : "literal", "tail" : "(ch: Char): Parser[Char]", "member" : "sbt.internal.util.complete.ParserMain.literal", "link" : "sbt\/internal\/util\/complete\/Parser$.html#literal(ch:Char):sbt.internal.util.complete.Parser[Char]", "kind" : "implicit def"}, {"label" : "charClass", "tail" : "(f: (Char) ⇒ Boolean, label: String): Parser[Char]", "member" : "sbt.internal.util.complete.ParserMain.charClass", "link" : "sbt\/internal\/util\/complete\/Parser$.html#charClass(f:Char=>Boolean,label:String):sbt.internal.util.complete.Parser[Char]", "kind" : "def"}, {"label" : "chars", "tail" : "(legal: String): Parser[Char]", "member" : "sbt.internal.util.complete.ParserMain.chars", "link" : "sbt\/internal\/util\/complete\/Parser$.html#chars(legal:String):sbt.internal.util.complete.Parser[Char]", "kind" : "def"}, {"label" : "range", "tail" : "(r: NumericRange[Char]): Parser[Char]", "member" : "sbt.internal.util.complete.ParserMain.range", "link" : "sbt\/internal\/util\/complete\/Parser$.html#range(r:scala.collection.immutable.NumericRange[Char]):sbt.internal.util.complete.Parser[Char]", "kind" : "implicit def"}, {"label" : "success", "tail" : "(value: T): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.success", "link" : "sbt\/internal\/util\/complete\/Parser$.html#success[T](value:T):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: ⇒ String, definitive: Boolean): Parser[Nothing]", "member" : "sbt.internal.util.complete.ParserMain.failure", "link" : "sbt\/internal\/util\/complete\/Parser$.html#failure(msg:=>String,definitive:Boolean):sbt.internal.util.complete.Parser[Nothing]", "kind" : "def"}, {"label" : "invalid", "tail" : "(msgs: ⇒ Seq[String], definitive: Boolean): Parser[Nothing]", "member" : "sbt.internal.util.complete.ParserMain.invalid", "link" : "sbt\/internal\/util\/complete\/Parser$.html#invalid(msgs:=>Seq[String],definitive:Boolean):sbt.internal.util.complete.Parser[Nothing]", "kind" : "def"}, {"label" : "literalRichStringParser", "tail" : "(s: String): RichParser[String]", "member" : "sbt.internal.util.complete.ParserMain.literalRichStringParser", "link" : "sbt\/internal\/util\/complete\/Parser$.html#literalRichStringParser(s:String):sbt.internal.util.complete.RichParser[String]", "kind" : "implicit def"}, {"label" : "literalRichCharParser", "tail" : "(c: Char): RichParser[Char]", "member" : "sbt.internal.util.complete.ParserMain.literalRichCharParser", "link" : "sbt\/internal\/util\/complete\/Parser$.html#literalRichCharParser(c:Char):sbt.internal.util.complete.RichParser[Char]", "kind" : "implicit def"}, {"label" : "richParser", "tail" : "(a: Parser[A]): RichParser[A]", "member" : "sbt.internal.util.complete.ParserMain.richParser", "link" : "sbt\/internal\/util\/complete\/Parser$.html#richParser[A](a:sbt.internal.util.complete.Parser[A]):sbt.internal.util.complete.RichParser[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/Parser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/Parser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/Parser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/Parser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/Parser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/Parser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/Parser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Parser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Parser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Parser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/Parser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/Parser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/Parser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/Parser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/Parser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/Parser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/Parser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/Parser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/Parser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/complete\/Parser.html", "kind" : "trait"}, {"name" : "sbt.internal.util.complete.ParserMain", "members_trait" : [{"label" : "stringLiteral", "tail" : "(s: String, start: Int): Parser[String]", "member" : "sbt.internal.util.complete.ParserMain.stringLiteral", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#stringLiteral(s:String,start:Int):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "seq0", "tail" : "(p: Seq[Parser[T]], errors: ⇒ Seq[String]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.ParserMain.seq0", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#seq0[T](p:Seq[sbt.internal.util.complete.Parser[T]],errors:=>Seq[String]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "seq", "tail" : "(p: Seq[Parser[T]]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.ParserMain.seq", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#seq[T](p:Seq[sbt.internal.util.complete.Parser[T]]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(p: Seq[Parser[T]]): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.oneOf", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#oneOf[T](p:Seq[sbt.internal.util.complete.Parser[T]]):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: Parser[_], failMessage: String): Parser[Unit]", "member" : "sbt.internal.util.complete.ParserMain.not", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#not(p:sbt.internal.util.complete.Parser[_],failMessage:String):sbt.internal.util.complete.Parser[Unit]", "kind" : "def"}, {"label" : "homParser", "tail" : "(a: Parser[A], b: Parser[A]): Parser[A]", "member" : "sbt.internal.util.complete.ParserMain.homParser", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#homParser[A](a:sbt.internal.util.complete.Parser[A],b:sbt.internal.util.complete.Parser[A]):sbt.internal.util.complete.Parser[A]", "kind" : "def"}, {"label" : "token", "tail" : "(t: Parser[T], complete: TokenCompletions): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.token", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#token[T](t:sbt.internal.util.complete.Parser[T],complete:sbt.internal.util.complete.TokenCompletions):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "tokenDisplay", "tail" : "(t: Parser[T], display: String): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.tokenDisplay", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#tokenDisplay[T](t:sbt.internal.util.complete.Parser[T],display:String):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "token", "tail" : "(t: Parser[T], description: String): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.token", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#token[T](t:sbt.internal.util.complete.Parser[T],description:String):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "token", "tail" : "(t: Parser[T], hide: (Int) ⇒ Boolean): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.token", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#token[T](t:sbt.internal.util.complete.Parser[T],hide:Int=>Boolean):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "token", "tail" : "(t: Parser[T]): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.token", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#token[T](t:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "matched", "tail" : "(t: Parser[_], seen: Vector[Char], partial: Boolean): Parser[String]", "member" : "sbt.internal.util.complete.ParserMain.matched", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#matched(t:sbt.internal.util.complete.Parser[_],seen:Vector[Char],partial:Boolean):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "examples", "tail" : "(a: Parser[A], completions: ExampleSource, maxNumberOfExamples: Int, removeInvalidExamples: Boolean): Parser[A]", "member" : "sbt.internal.util.complete.ParserMain.examples", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#examples[A](a:sbt.internal.util.complete.Parser[A],completions:sbt.internal.util.complete.ExampleSource,maxNumberOfExamples:Int,removeInvalidExamples:Boolean):sbt.internal.util.complete.Parser[A]", "kind" : "def"}, {"label" : "examples", "tail" : "(a: Parser[A], completions: Set[String], check: Boolean): Parser[A]", "member" : "sbt.internal.util.complete.ParserMain.examples", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#examples[A](a:sbt.internal.util.complete.Parser[A],completions:Set[String],check:Boolean):sbt.internal.util.complete.Parser[A]", "kind" : "def"}, {"label" : "completions", "tail" : "(p: Parser[_], s: String, level: Int): Completions", "member" : "sbt.internal.util.complete.ParserMain.completions", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#completions(p:sbt.internal.util.complete.Parser[_],s:String,level:Int):sbt.internal.util.complete.Completions", "kind" : "def"}, {"label" : "derive1", "tail" : "(p: Parser[T], c: Char): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.derive1", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#derive1[T](p:sbt.internal.util.complete.Parser[T],c:Char):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(p: Parser[T])(s: String): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.apply", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#apply[T](p:sbt.internal.util.complete.Parser[T])(s:String):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "result", "tail" : "(p: Parser[T], s: String): Either[() ⇒ (Seq[String], Int), T]", "member" : "sbt.internal.util.complete.ParserMain.result", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#result[T](p:sbt.internal.util.complete.Parser[T],s:String):Either[()=>(Seq[String],Int),T]", "kind" : "def"}, {"label" : "sampleCompletions", "tail" : "(str: String, parser: Parser[_], level: Int): Unit", "member" : "sbt.internal.util.complete.ParserMain.sampleCompletions", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#sampleCompletions(str:String,parser:sbt.internal.util.complete.Parser[_],level:Int):Unit", "kind" : "def"}, {"label" : "sampleParse", "tail" : "(str: String, parser: Parser[_]): Unit", "member" : "sbt.internal.util.complete.ParserMain.sampleParse", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#sampleParse(str:String,parser:sbt.internal.util.complete.Parser[_]):Unit", "kind" : "def"}, {"label" : "sample", "tail" : "(str: String, parser: Parser[_], completions: Boolean): Unit", "member" : "sbt.internal.util.complete.ParserMain.sample", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#sample(str:String,parser:sbt.internal.util.complete.Parser[_],completions:Boolean):Unit", "kind" : "def"}, {"label" : "parse", "tail" : "(str: String, parser: Parser[T]): Either[String, T]", "member" : "sbt.internal.util.complete.ParserMain.parse", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#parse[T](str:String,parser:sbt.internal.util.complete.Parser[T]):Either[String,T]", "kind" : "def"}, {"label" : "~", "tail" : "", "member" : "sbt.internal.util.complete.ParserMain.~", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#~", "kind" : "object"}, {"label" : "literal", "tail" : "(s: String): Parser[String]", "member" : "sbt.internal.util.complete.ParserMain.literal", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#literal(s:String):sbt.internal.util.complete.Parser[String]", "kind" : "implicit def"}, {"label" : "literal", "tail" : "(ch: Char): Parser[Char]", "member" : "sbt.internal.util.complete.ParserMain.literal", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#literal(ch:Char):sbt.internal.util.complete.Parser[Char]", "kind" : "implicit def"}, {"label" : "charClass", "tail" : "(f: (Char) ⇒ Boolean, label: String): Parser[Char]", "member" : "sbt.internal.util.complete.ParserMain.charClass", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#charClass(f:Char=>Boolean,label:String):sbt.internal.util.complete.Parser[Char]", "kind" : "def"}, {"label" : "chars", "tail" : "(legal: String): Parser[Char]", "member" : "sbt.internal.util.complete.ParserMain.chars", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#chars(legal:String):sbt.internal.util.complete.Parser[Char]", "kind" : "def"}, {"label" : "range", "tail" : "(r: NumericRange[Char]): Parser[Char]", "member" : "sbt.internal.util.complete.ParserMain.range", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#range(r:scala.collection.immutable.NumericRange[Char]):sbt.internal.util.complete.Parser[Char]", "kind" : "implicit def"}, {"label" : "success", "tail" : "(value: T): Parser[T]", "member" : "sbt.internal.util.complete.ParserMain.success", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#success[T](value:T):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: ⇒ String, definitive: Boolean): Parser[Nothing]", "member" : "sbt.internal.util.complete.ParserMain.failure", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#failure(msg:=>String,definitive:Boolean):sbt.internal.util.complete.Parser[Nothing]", "kind" : "def"}, {"label" : "invalid", "tail" : "(msgs: ⇒ Seq[String], definitive: Boolean): Parser[Nothing]", "member" : "sbt.internal.util.complete.ParserMain.invalid", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#invalid(msgs:=>Seq[String],definitive:Boolean):sbt.internal.util.complete.Parser[Nothing]", "kind" : "def"}, {"label" : "literalRichStringParser", "tail" : "(s: String): RichParser[String]", "member" : "sbt.internal.util.complete.ParserMain.literalRichStringParser", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#literalRichStringParser(s:String):sbt.internal.util.complete.RichParser[String]", "kind" : "implicit def"}, {"label" : "literalRichCharParser", "tail" : "(c: Char): RichParser[Char]", "member" : "sbt.internal.util.complete.ParserMain.literalRichCharParser", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#literalRichCharParser(c:Char):sbt.internal.util.complete.RichParser[Char]", "kind" : "implicit def"}, {"label" : "richParser", "tail" : "(a: Parser[A]): RichParser[A]", "member" : "sbt.internal.util.complete.ParserMain.richParser", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#richParser[A](a:sbt.internal.util.complete.Parser[A]):sbt.internal.util.complete.RichParser[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/ParserMain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/ParserMain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/internal\/util\/complete\/ParserMain.html", "kind" : "trait"}, {"name" : "sbt.internal.util.complete.Parsers", "members_trait" : [{"label" : "Uri", "tail" : "(ex: Set[URI]): Parser[URI]", "member" : "sbt.internal.util.complete.Parsers.Uri", "link" : "sbt\/internal\/util\/complete\/Parsers.html#Uri(ex:Set[java.net.URI]):sbt.internal.util.complete.Parser[java.net.URI]", "kind" : "def"}, {"label" : "basicUri", "tail" : ": Parser[URI]", "member" : "sbt.internal.util.complete.Parsers.basicUri", "link" : "sbt\/internal\/util\/complete\/Parsers.html#basicUri:sbt.internal.util.complete.Parser[java.net.URI]", "kind" : "lazy val"}, {"label" : "trimmed", "tail" : "(p: Parser[String]): Parser[String]", "member" : "sbt.internal.util.complete.Parsers.trimmed", "link" : "sbt\/internal\/util\/complete\/Parsers.html#trimmed(p:sbt.internal.util.complete.Parser[String]):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "repeatDep", "tail" : "(p: (Seq[A]) ⇒ Parser[A], sep: Parser[Any]): Parser[Seq[A]]", "member" : "sbt.internal.util.complete.Parsers.repeatDep", "link" : "sbt\/internal\/util\/complete\/Parsers.html#repeatDep[A](p:Seq[A]=>sbt.internal.util.complete.Parser[A],sep:sbt.internal.util.complete.Parser[Any]):sbt.internal.util.complete.Parser[Seq[A]]", "kind" : "def"}, {"label" : "flag", "tail" : "(p: Parser[T]): Parser[Boolean]", "member" : "sbt.internal.util.complete.Parsers.flag", "link" : "sbt\/internal\/util\/complete\/Parsers.html#flag[T](p:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[Boolean]", "kind" : "def"}, {"label" : "spaceDelimited", "tail" : "(display: String): Parser[Seq[String]]", "member" : "sbt.internal.util.complete.Parsers.spaceDelimited", "link" : "sbt\/internal\/util\/complete\/Parsers.html#spaceDelimited(display:String):sbt.internal.util.complete.Parser[Seq[String]]", "kind" : "def"}, {"label" : "mapOrFail", "tail" : "(p: Parser[S])(f: (S) ⇒ T): Parser[T]", "member" : "sbt.internal.util.complete.Parsers.mapOrFail", "link" : "sbt\/internal\/util\/complete\/Parsers.html#mapOrFail[S,T](p:sbt.internal.util.complete.Parser[S])(f:S=>T):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "some", "tail" : "(p: Parser[T]): Parser[Option[T]]", "member" : "sbt.internal.util.complete.Parsers.some", "link" : "sbt\/internal\/util\/complete\/Parsers.html#some[T](p:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[Option[T]]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(rep: Parser[T], sep: Parser[_]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.Parsers.rep1sep", "link" : "sbt\/internal\/util\/complete\/Parsers.html#rep1sep[T](rep:sbt.internal.util.complete.Parser[T],sep:sbt.internal.util.complete.Parser[_]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(rep: Parser[T], sep: Parser[_]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.Parsers.repsep", "link" : "sbt\/internal\/util\/complete\/Parsers.html#repsep[T](rep:sbt.internal.util.complete.Parser[T],sep:sbt.internal.util.complete.Parser[_]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "NotQuoted", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.NotQuoted", "link" : "sbt\/internal\/util\/complete\/Parsers.html#NotQuoted:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "UnicodeEscape", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.UnicodeEscape", "link" : "sbt\/internal\/util\/complete\/Parsers.html#UnicodeEscape:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "EscapeSequence", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.EscapeSequence", "link" : "sbt\/internal\/util\/complete\/Parsers.html#EscapeSequence:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "StringEscapable", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.StringEscapable", "link" : "sbt\/internal\/util\/complete\/Parsers.html#StringEscapable:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "StringVerbatim", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.StringVerbatim", "link" : "sbt\/internal\/util\/complete\/Parsers.html#StringVerbatim:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "StringBasic", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.StringBasic", "link" : "sbt\/internal\/util\/complete\/Parsers.html#StringBasic:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "Bool", "tail" : ": Parser[Boolean]", "member" : "sbt.internal.util.complete.Parsers.Bool", "link" : "sbt\/internal\/util\/complete\/Parsers.html#Bool:sbt.internal.util.complete.Parser[Boolean]", "kind" : "lazy val"}, {"label" : "NatBasic", "tail" : ": Parser[Int]", "member" : "sbt.internal.util.complete.Parsers.NatBasic", "link" : "sbt\/internal\/util\/complete\/Parsers.html#NatBasic:sbt.internal.util.complete.Parser[Int]", "kind" : "lazy val"}, {"label" : "IntBasic", "tail" : ": Parser[Int]", "member" : "sbt.internal.util.complete.Parsers.IntBasic", "link" : "sbt\/internal\/util\/complete\/Parsers.html#IntBasic:sbt.internal.util.complete.Parser[Int]", "kind" : "lazy val"}, {"label" : "Port", "tail" : ": Parser[Int]", "member" : "sbt.internal.util.complete.Parsers.Port", "link" : "sbt\/internal\/util\/complete\/Parsers.html#Port:sbt.internal.util.complete.Parser[Int]", "kind" : "lazy val"}, {"label" : "fileParser", "tail" : "(base: File): Parser[File]", "member" : "sbt.internal.util.complete.Parsers.fileParser", "link" : "sbt\/internal\/util\/complete\/Parsers.html#fileParser(base:java.io.File):sbt.internal.util.complete.Parser[java.io.File]", "kind" : "def"}, {"label" : "alphanum", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.alphanum", "link" : "sbt\/internal\/util\/complete\/Parsers.html#alphanum(c:Char):Boolean", "kind" : "def"}, {"label" : "URIChar", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.URIChar", "link" : "sbt\/internal\/util\/complete\/Parsers.html#URIChar:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "NotDQuoteBackslashClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.NotDQuoteBackslashClass", "link" : "sbt\/internal\/util\/complete\/Parsers.html#NotDQuoteBackslashClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "NotDQuoteSpaceClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.NotDQuoteSpaceClass", "link" : "sbt\/internal\/util\/complete\/Parsers.html#NotDQuoteSpaceClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "DQuoteClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.DQuoteClass", "link" : "sbt\/internal\/util\/complete\/Parsers.html#DQuoteClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "BackslashChar", "tail" : ": Char", "member" : "sbt.internal.util.complete.Parsers.BackslashChar", "link" : "sbt\/internal\/util\/complete\/Parsers.html#BackslashChar:Char", "kind" : "lazy val"}, {"label" : "DQuoteChar", "tail" : ": Char", "member" : "sbt.internal.util.complete.Parsers.DQuoteChar", "link" : "sbt\/internal\/util\/complete\/Parsers.html#DQuoteChar:Char", "kind" : "lazy val"}, {"label" : "VerbatimDQuotes", "tail" : ": String", "member" : "sbt.internal.util.complete.Parsers.VerbatimDQuotes", "link" : "sbt\/internal\/util\/complete\/Parsers.html#VerbatimDQuotes:String", "kind" : "lazy val"}, {"label" : "URIClass", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.URIClass", "link" : "sbt\/internal\/util\/complete\/Parsers.html#URIClass:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "OptSpace", "tail" : ": Parser[Seq[Char]]", "member" : "sbt.internal.util.complete.Parsers.OptSpace", "link" : "sbt\/internal\/util\/complete\/Parsers.html#OptSpace:sbt.internal.util.complete.Parser[Seq[Char]]", "kind" : "lazy val"}, {"label" : "Space", "tail" : ": Parser[Seq[Char]]", "member" : "sbt.internal.util.complete.Parsers.Space", "link" : "sbt\/internal\/util\/complete\/Parsers.html#Space:sbt.internal.util.complete.Parser[Seq[Char]]", "kind" : "lazy val"}, {"label" : "OptNotSpace", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.OptNotSpace", "link" : "sbt\/internal\/util\/complete\/Parsers.html#OptNotSpace:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "NotSpace", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.NotSpace", "link" : "sbt\/internal\/util\/complete\/Parsers.html#NotSpace:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "SpaceClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.SpaceClass", "link" : "sbt\/internal\/util\/complete\/Parsers.html#SpaceClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "NotSpaceClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.NotSpaceClass", "link" : "sbt\/internal\/util\/complete\/Parsers.html#NotSpaceClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "isDelimiter", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.isDelimiter", "link" : "sbt\/internal\/util\/complete\/Parsers.html#isDelimiter(c:Char):Boolean", "kind" : "def"}, {"label" : "isScalaIDChar", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.isScalaIDChar", "link" : "sbt\/internal\/util\/complete\/Parsers.html#isScalaIDChar(c:Char):Boolean", "kind" : "def"}, {"label" : "isIDChar", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.isIDChar", "link" : "sbt\/internal\/util\/complete\/Parsers.html#isIDChar(c:Char):Boolean", "kind" : "def"}, {"label" : "isOpType", "tail" : "(cat: Int): Boolean", "member" : "sbt.internal.util.complete.Parsers.isOpType", "link" : "sbt\/internal\/util\/complete\/Parsers.html#isOpType(cat:Int):Boolean", "kind" : "def"}, {"label" : "isOpChar", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.isOpChar", "link" : "sbt\/internal\/util\/complete\/Parsers.html#isOpChar(c:Char):Boolean", "kind" : "def"}, {"label" : "opOrIDSpaced", "tail" : "(s: String): Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.opOrIDSpaced", "link" : "sbt\/internal\/util\/complete\/Parsers.html#opOrIDSpaced(s:String):sbt.internal.util.complete.Parser[Char]", "kind" : "def"}, {"label" : "identifier", "tail" : "(start: Parser[Char], rep: Parser[Char]): Parser[String]", "member" : "sbt.internal.util.complete.Parsers.identifier", "link" : "sbt\/internal\/util\/complete\/Parsers.html#identifier(start:sbt.internal.util.complete.Parser[Char],rep:sbt.internal.util.complete.Parser[Char]):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "ScalaID", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.ScalaID", "link" : "sbt\/internal\/util\/complete\/Parsers.html#ScalaID:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "ScalaIDChar", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.ScalaIDChar", "link" : "sbt\/internal\/util\/complete\/Parsers.html#ScalaIDChar:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "OpOrID", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.OpOrID", "link" : "sbt\/internal\/util\/complete\/Parsers.html#OpOrID:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "Op", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.Op", "link" : "sbt\/internal\/util\/complete\/Parsers.html#Op:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "OpChar", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.OpChar", "link" : "sbt\/internal\/util\/complete\/Parsers.html#OpChar:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "ID", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.ID", "link" : "sbt\/internal\/util\/complete\/Parsers.html#ID:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "IDChar", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.IDChar", "link" : "sbt\/internal\/util\/complete\/Parsers.html#IDChar:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "IDStart", "tail" : "(): Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.IDStart", "link" : "sbt\/internal\/util\/complete\/Parsers.html#IDStart:sbt.internal.util.complete.Parser[Char]", "kind" : "def"}, {"label" : "Letter", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.Letter", "link" : "sbt\/internal\/util\/complete\/Parsers.html#Letter:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "HexDigit", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.HexDigit", "link" : "sbt\/internal\/util\/complete\/Parsers.html#HexDigit:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "HexDigitSet", "tail" : ": Set[Char]", "member" : "sbt.internal.util.complete.Parsers.HexDigitSet", "link" : "sbt\/internal\/util\/complete\/Parsers.html#HexDigitSet:scala.collection.immutable.Set[Char]", "kind" : "lazy val"}, {"label" : "Digit", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.Digit", "link" : "sbt\/internal\/util\/complete\/Parsers.html#Digit:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "DigitSet", "tail" : ": Set[String]", "member" : "sbt.internal.util.complete.Parsers.DigitSet", "link" : "sbt\/internal\/util\/complete\/Parsers.html#DigitSet:scala.collection.immutable.Set[String]", "kind" : "lazy val"}, {"label" : "any", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.any", "link" : "sbt\/internal\/util\/complete\/Parsers.html#any:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "EOF", "tail" : ": Parser[Unit]", "member" : "sbt.internal.util.complete.Parsers.EOF", "link" : "sbt\/internal\/util\/complete\/Parsers.html#EOF:sbt.internal.util.complete.Parser[Unit]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/Parsers.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/Parsers.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/Parsers.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/Parsers.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/Parsers.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/Parsers.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/Parsers.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Parsers.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Parsers.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Parsers.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/Parsers.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/Parsers.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/Parsers.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/Parsers.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/Parsers.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/Parsers.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/Parsers.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/Parsers.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/Parsers.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides standard implementations of commonly useful Parsers.", "object" : "sbt\/internal\/util\/complete\/Parsers$.html", "members_object" : [{"label" : "Uri", "tail" : "(ex: Set[URI]): Parser[URI]", "member" : "sbt.internal.util.complete.Parsers.Uri", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#Uri(ex:Set[java.net.URI]):sbt.internal.util.complete.Parser[java.net.URI]", "kind" : "def"}, {"label" : "basicUri", "tail" : ": Parser[URI]", "member" : "sbt.internal.util.complete.Parsers.basicUri", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#basicUri:sbt.internal.util.complete.Parser[java.net.URI]", "kind" : "lazy val"}, {"label" : "trimmed", "tail" : "(p: Parser[String]): Parser[String]", "member" : "sbt.internal.util.complete.Parsers.trimmed", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#trimmed(p:sbt.internal.util.complete.Parser[String]):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "repeatDep", "tail" : "(p: (Seq[A]) ⇒ Parser[A], sep: Parser[Any]): Parser[Seq[A]]", "member" : "sbt.internal.util.complete.Parsers.repeatDep", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#repeatDep[A](p:Seq[A]=>sbt.internal.util.complete.Parser[A],sep:sbt.internal.util.complete.Parser[Any]):sbt.internal.util.complete.Parser[Seq[A]]", "kind" : "def"}, {"label" : "flag", "tail" : "(p: Parser[T]): Parser[Boolean]", "member" : "sbt.internal.util.complete.Parsers.flag", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#flag[T](p:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[Boolean]", "kind" : "def"}, {"label" : "spaceDelimited", "tail" : "(display: String): Parser[Seq[String]]", "member" : "sbt.internal.util.complete.Parsers.spaceDelimited", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#spaceDelimited(display:String):sbt.internal.util.complete.Parser[Seq[String]]", "kind" : "def"}, {"label" : "mapOrFail", "tail" : "(p: Parser[S])(f: (S) ⇒ T): Parser[T]", "member" : "sbt.internal.util.complete.Parsers.mapOrFail", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#mapOrFail[S,T](p:sbt.internal.util.complete.Parser[S])(f:S=>T):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "some", "tail" : "(p: Parser[T]): Parser[Option[T]]", "member" : "sbt.internal.util.complete.Parsers.some", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#some[T](p:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[Option[T]]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(rep: Parser[T], sep: Parser[_]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.Parsers.rep1sep", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#rep1sep[T](rep:sbt.internal.util.complete.Parser[T],sep:sbt.internal.util.complete.Parser[_]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(rep: Parser[T], sep: Parser[_]): Parser[Seq[T]]", "member" : "sbt.internal.util.complete.Parsers.repsep", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#repsep[T](rep:sbt.internal.util.complete.Parser[T],sep:sbt.internal.util.complete.Parser[_]):sbt.internal.util.complete.Parser[Seq[T]]", "kind" : "def"}, {"label" : "NotQuoted", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.NotQuoted", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#NotQuoted:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "UnicodeEscape", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.UnicodeEscape", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#UnicodeEscape:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "EscapeSequence", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.EscapeSequence", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#EscapeSequence:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "StringEscapable", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.StringEscapable", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#StringEscapable:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "StringVerbatim", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.StringVerbatim", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#StringVerbatim:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "StringBasic", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.StringBasic", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#StringBasic:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "Bool", "tail" : ": Parser[Boolean]", "member" : "sbt.internal.util.complete.Parsers.Bool", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#Bool:sbt.internal.util.complete.Parser[Boolean]", "kind" : "lazy val"}, {"label" : "NatBasic", "tail" : ": Parser[Int]", "member" : "sbt.internal.util.complete.Parsers.NatBasic", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#NatBasic:sbt.internal.util.complete.Parser[Int]", "kind" : "lazy val"}, {"label" : "IntBasic", "tail" : ": Parser[Int]", "member" : "sbt.internal.util.complete.Parsers.IntBasic", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#IntBasic:sbt.internal.util.complete.Parser[Int]", "kind" : "lazy val"}, {"label" : "Port", "tail" : ": Parser[Int]", "member" : "sbt.internal.util.complete.Parsers.Port", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#Port:sbt.internal.util.complete.Parser[Int]", "kind" : "lazy val"}, {"label" : "fileParser", "tail" : "(base: File): Parser[File]", "member" : "sbt.internal.util.complete.Parsers.fileParser", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#fileParser(base:java.io.File):sbt.internal.util.complete.Parser[java.io.File]", "kind" : "def"}, {"label" : "alphanum", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.alphanum", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#alphanum(c:Char):Boolean", "kind" : "def"}, {"label" : "URIChar", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.URIChar", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#URIChar:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "NotDQuoteBackslashClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.NotDQuoteBackslashClass", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#NotDQuoteBackslashClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "NotDQuoteSpaceClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.NotDQuoteSpaceClass", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#NotDQuoteSpaceClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "DQuoteClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.DQuoteClass", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#DQuoteClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "BackslashChar", "tail" : ": Char", "member" : "sbt.internal.util.complete.Parsers.BackslashChar", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#BackslashChar:Char", "kind" : "lazy val"}, {"label" : "DQuoteChar", "tail" : ": Char", "member" : "sbt.internal.util.complete.Parsers.DQuoteChar", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#DQuoteChar:Char", "kind" : "lazy val"}, {"label" : "VerbatimDQuotes", "tail" : ": String", "member" : "sbt.internal.util.complete.Parsers.VerbatimDQuotes", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#VerbatimDQuotes:String", "kind" : "lazy val"}, {"label" : "URIClass", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.URIClass", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#URIClass:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "OptSpace", "tail" : ": Parser[Seq[Char]]", "member" : "sbt.internal.util.complete.Parsers.OptSpace", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#OptSpace:sbt.internal.util.complete.Parser[Seq[Char]]", "kind" : "lazy val"}, {"label" : "Space", "tail" : ": Parser[Seq[Char]]", "member" : "sbt.internal.util.complete.Parsers.Space", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#Space:sbt.internal.util.complete.Parser[Seq[Char]]", "kind" : "lazy val"}, {"label" : "OptNotSpace", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.OptNotSpace", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#OptNotSpace:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "NotSpace", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.NotSpace", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#NotSpace:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "SpaceClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.SpaceClass", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#SpaceClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "NotSpaceClass", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.NotSpaceClass", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#NotSpaceClass:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "isDelimiter", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.isDelimiter", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#isDelimiter(c:Char):Boolean", "kind" : "def"}, {"label" : "isScalaIDChar", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.isScalaIDChar", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#isScalaIDChar(c:Char):Boolean", "kind" : "def"}, {"label" : "isIDChar", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.isIDChar", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#isIDChar(c:Char):Boolean", "kind" : "def"}, {"label" : "isOpType", "tail" : "(cat: Int): Boolean", "member" : "sbt.internal.util.complete.Parsers.isOpType", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#isOpType(cat:Int):Boolean", "kind" : "def"}, {"label" : "isOpChar", "tail" : "(c: Char): Boolean", "member" : "sbt.internal.util.complete.Parsers.isOpChar", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#isOpChar(c:Char):Boolean", "kind" : "def"}, {"label" : "opOrIDSpaced", "tail" : "(s: String): Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.opOrIDSpaced", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#opOrIDSpaced(s:String):sbt.internal.util.complete.Parser[Char]", "kind" : "def"}, {"label" : "identifier", "tail" : "(start: Parser[Char], rep: Parser[Char]): Parser[String]", "member" : "sbt.internal.util.complete.Parsers.identifier", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#identifier(start:sbt.internal.util.complete.Parser[Char],rep:sbt.internal.util.complete.Parser[Char]):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "ScalaID", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.ScalaID", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#ScalaID:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "ScalaIDChar", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.ScalaIDChar", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#ScalaIDChar:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "OpOrID", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.OpOrID", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#OpOrID:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "Op", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.Op", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#Op:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "OpChar", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.OpChar", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#OpChar:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "ID", "tail" : ": Parser[String]", "member" : "sbt.internal.util.complete.Parsers.ID", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#ID:sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "IDChar", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.IDChar", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#IDChar:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "IDStart", "tail" : "(): Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.IDStart", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#IDStart:sbt.internal.util.complete.Parser[Char]", "kind" : "def"}, {"label" : "Letter", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.Letter", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#Letter:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "HexDigit", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.HexDigit", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#HexDigit:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "HexDigitSet", "tail" : ": Set[Char]", "member" : "sbt.internal.util.complete.Parsers.HexDigitSet", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#HexDigitSet:scala.collection.immutable.Set[Char]", "kind" : "lazy val"}, {"label" : "Digit", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.Digit", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#Digit:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "DigitSet", "tail" : ": Set[String]", "member" : "sbt.internal.util.complete.Parsers.DigitSet", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#DigitSet:scala.collection.immutable.Set[String]", "kind" : "lazy val"}, {"label" : "any", "tail" : ": Parser[Char]", "member" : "sbt.internal.util.complete.Parsers.any", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#any:sbt.internal.util.complete.Parser[Char]", "kind" : "lazy val"}, {"label" : "EOF", "tail" : ": Parser[Unit]", "member" : "sbt.internal.util.complete.Parsers.EOF", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#EOF:sbt.internal.util.complete.Parser[Unit]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/Parsers$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/Parsers$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/complete\/Parsers.html", "kind" : "trait"}, {"name" : "sbt.internal.util.complete.ProcessError", "shortDescription" : "", "object" : "sbt\/internal\/util\/complete\/ProcessError$.html", "members_object" : [{"label" : "pointerSpace", "tail" : "(s: String, i: Int): String", "member" : "sbt.internal.util.complete.ProcessError.pointerSpace", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#pointerSpace(s:String,i:Int):String", "kind" : "def"}, {"label" : "takeRightWhile", "tail" : "(s: String)(pred: (Char) ⇒ Boolean): String", "member" : "sbt.internal.util.complete.ProcessError.takeRightWhile", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#takeRightWhile(s:String)(pred:Char=>Boolean):String", "kind" : "def"}, {"label" : "extractLine", "tail" : "(s: String, i: Int): (String, Int)", "member" : "sbt.internal.util.complete.ProcessError.extractLine", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#extractLine(s:String,i:Int):(String,Int)", "kind" : "def"}, {"label" : "apply", "tail" : "(command: String, msgs: Seq[String], index: Int): String", "member" : "sbt.internal.util.complete.ProcessError.apply", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#apply(command:String,msgs:Seq[String],index:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/ProcessError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.complete.RichParser", "members_trait" : [{"label" : "examples", "tail" : "(exampleSource: ExampleSource): Parser[A]", "member" : "sbt.internal.util.complete.RichParser.examples", "link" : "sbt\/internal\/util\/complete\/RichParser.html#examples(exampleSource:sbt.internal.util.complete.ExampleSource):sbt.internal.util.complete.Parser[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/RichParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/RichParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/RichParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/RichParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/RichParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/RichParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/RichParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/RichParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/RichParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/RichParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/RichParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/RichParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/RichParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/RichParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/RichParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/RichParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/RichParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/RichParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/RichParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Parser[B]): Parser[B]", "member" : "sbt.internal.util.complete.RichParser.flatMap", "link" : "sbt\/internal\/util\/complete\/RichParser.html#flatMap[B](f:A=>sbt.internal.util.complete.Parser[B]):sbt.internal.util.complete.Parser[B]", "kind" : "abstract def"}, {"label" : "filter", "tail" : "(f: (A) ⇒ Boolean, msg: (String) ⇒ String): Parser[A]", "member" : "sbt.internal.util.complete.RichParser.filter", "link" : "sbt\/internal\/util\/complete\/RichParser.html#filter(f:A=>Boolean,msg:String=>String):sbt.internal.util.complete.Parser[A]", "kind" : "abstract def"}, {"label" : "string", "tail" : "(ev: <:<[A, Seq[Char]]): Parser[String]", "member" : "sbt.internal.util.complete.RichParser.string", "link" : "sbt\/internal\/util\/complete\/RichParser.html#string(implicitev:A<:<Seq[Char]):sbt.internal.util.complete.Parser[String]", "kind" : "abstract def"}, {"label" : "examples", "tail" : "(exampleSource: ExampleSource, maxNumberOfExamples: Int, removeInvalidExamples: Boolean): Parser[A]", "member" : "sbt.internal.util.complete.RichParser.examples", "link" : "sbt\/internal\/util\/complete\/RichParser.html#examples(exampleSource:sbt.internal.util.complete.ExampleSource,maxNumberOfExamples:Int,removeInvalidExamples:Boolean):sbt.internal.util.complete.Parser[A]", "kind" : "abstract def"}, {"label" : "examples", "tail" : "(s: Set[String], check: Boolean): Parser[A]", "member" : "sbt.internal.util.complete.RichParser.examples", "link" : "sbt\/internal\/util\/complete\/RichParser.html#examples(s:Set[String],check:Boolean):sbt.internal.util.complete.Parser[A]", "kind" : "abstract def"}, {"label" : "examples", "tail" : "(s: String*): Parser[A]", "member" : "sbt.internal.util.complete.RichParser.examples", "link" : "sbt\/internal\/util\/complete\/RichParser.html#examples(s:String*):sbt.internal.util.complete.Parser[A]", "kind" : "abstract def"}, {"label" : "&", "tail" : "(o: Parser[_]): Parser[A]", "member" : "sbt.internal.util.complete.RichParser.&", "link" : "sbt\/internal\/util\/complete\/RichParser.html#&(o:sbt.internal.util.complete.Parser[_]):sbt.internal.util.complete.Parser[A]", "kind" : "abstract def"}, {"label" : "failOnException", "tail" : "(): Parser[A]", "member" : "sbt.internal.util.complete.RichParser.failOnException", "link" : "sbt\/internal\/util\/complete\/RichParser.html#failOnException:sbt.internal.util.complete.Parser[A]", "kind" : "abstract def"}, {"label" : "!!!", "tail" : "(msg: String): Parser[A]", "member" : "sbt.internal.util.complete.RichParser.!!!", "link" : "sbt\/internal\/util\/complete\/RichParser.html#!!!(msg:String):sbt.internal.util.complete.Parser[A]", "kind" : "abstract def"}, {"label" : "~>", "tail" : "(b: Parser[B]): Parser[B]", "member" : "sbt.internal.util.complete.RichParser.~>", "link" : "sbt\/internal\/util\/complete\/RichParser.html#~>[B](b:sbt.internal.util.complete.Parser[B]):sbt.internal.util.complete.Parser[B]", "kind" : "abstract def"}, {"label" : "<~", "tail" : "(b: Parser[B]): Parser[A]", "member" : "sbt.internal.util.complete.RichParser.<~", "link" : "sbt\/internal\/util\/complete\/RichParser.html#<~[B](b:sbt.internal.util.complete.Parser[B]):sbt.internal.util.complete.Parser[A]", "kind" : "abstract def"}, {"label" : "??", "tail" : "(alt: B): Parser[B]", "member" : "sbt.internal.util.complete.RichParser.??", "link" : "sbt\/internal\/util\/complete\/RichParser.html#??[B>:A](alt:B):sbt.internal.util.complete.Parser[B]", "kind" : "abstract def"}, {"label" : "^^^", "tail" : "(value: B): Parser[B]", "member" : "sbt.internal.util.complete.RichParser.^^^", "link" : "sbt\/internal\/util\/complete\/RichParser.html#^^^[B](value:B):sbt.internal.util.complete.Parser[B]", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): Parser[A]", "member" : "sbt.internal.util.complete.RichParser.id", "link" : "sbt\/internal\/util\/complete\/RichParser.html#id:sbt.internal.util.complete.Parser[A]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Parser[B]", "member" : "sbt.internal.util.complete.RichParser.map", "link" : "sbt\/internal\/util\/complete\/RichParser.html#map[B](f:A=>B):sbt.internal.util.complete.Parser[B]", "kind" : "abstract def"}, {"label" : "||", "tail" : "(b: Parser[B]): Parser[Either[A, B]]", "member" : "sbt.internal.util.complete.RichParser.||", "link" : "sbt\/internal\/util\/complete\/RichParser.html#||[B](b:sbt.internal.util.complete.Parser[B]):sbt.internal.util.complete.Parser[Either[A,B]]", "kind" : "abstract def"}, {"label" : "|", "tail" : "(b: Parser[B]): Parser[B]", "member" : "sbt.internal.util.complete.RichParser.|", "link" : "sbt\/internal\/util\/complete\/RichParser.html#|[B>:A](b:sbt.internal.util.complete.Parser[B]):sbt.internal.util.complete.Parser[B]", "kind" : "abstract def"}, {"label" : "?", "tail" : "(): Parser[Option[A]]", "member" : "sbt.internal.util.complete.RichParser.?", "link" : "sbt\/internal\/util\/complete\/RichParser.html#?:sbt.internal.util.complete.Parser[Option[A]]", "kind" : "abstract def"}, {"label" : "*", "tail" : "(): Parser[Seq[A]]", "member" : "sbt.internal.util.complete.RichParser.*", "link" : "sbt\/internal\/util\/complete\/RichParser.html#*:sbt.internal.util.complete.Parser[Seq[A]]", "kind" : "abstract def"}, {"label" : "+", "tail" : "(): Parser[Seq[A]]", "member" : "sbt.internal.util.complete.RichParser.+", "link" : "sbt\/internal\/util\/complete\/RichParser.html#+:sbt.internal.util.complete.Parser[Seq[A]]", "kind" : "abstract def"}, {"label" : "~", "tail" : "(next: Parser[B]): Parser[(A, B)]", "member" : "sbt.internal.util.complete.RichParser.~", "link" : "sbt\/internal\/util\/complete\/RichParser.html#~[B](next:sbt.internal.util.complete.Parser[B]):sbt.internal.util.complete.Parser[(A,B)]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/internal\/util\/complete\/RichParser.html", "kind" : "trait"}, {"name" : "sbt.internal.util.complete.Suggestion", "shortDescription" : "", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.internal.util.complete.Suggestion.toString", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#toString():String", "kind" : "def"}, {"label" : "display", "tail" : "(): String", "member" : "sbt.internal.util.complete.Suggestion.display", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#display:String", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.Suggestion.isEmpty", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#isEmpty:Boolean", "kind" : "def"}, {"member" : "sbt.internal.util.complete.Suggestion#<init>", "error" : "unsupported entity"}, {"label" : "append", "tail" : ": String", "member" : "sbt.internal.util.complete.Suggestion.append", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#append:String", "kind" : "val"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.internal.util.complete.Completion.equals", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#equals(o:Any):Boolean", "kind" : "final def"}, {"label" : "hashCode", "tail" : ": Int", "member" : "sbt.internal.util.complete.Completion.hashCode", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#hashCode:Int", "kind" : "final lazy val"}, {"label" : "x", "tail" : "(o: Completions): Completions", "member" : "sbt.internal.util.complete.Completion.x", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#x(o:sbt.internal.util.complete.Completions):sbt.internal.util.complete.Completions", "kind" : "final def"}, {"label" : "++", "tail" : "(o: Completion): Completion", "member" : "sbt.internal.util.complete.Completion.++", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#++(o:sbt.internal.util.complete.Completion):sbt.internal.util.complete.Completion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/Suggestion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/Suggestion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/util\/complete\/Suggestion.html", "kind" : "class"}, {"name" : "sbt.internal.util.complete.Token", "shortDescription" : "", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.internal.util.complete.Token.toString", "link" : "sbt\/internal\/util\/complete\/Token.html#toString():String", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.Token.isEmpty", "link" : "sbt\/internal\/util\/complete\/Token.html#isEmpty:Boolean", "kind" : "def"}, {"member" : "sbt.internal.util.complete.Token#<init>", "error" : "unsupported entity"}, {"label" : "append", "tail" : ": String", "member" : "sbt.internal.util.complete.Token.append", "link" : "sbt\/internal\/util\/complete\/Token.html#append:String", "kind" : "val"}, {"label" : "display", "tail" : ": String", "member" : "sbt.internal.util.complete.Token.display", "link" : "sbt\/internal\/util\/complete\/Token.html#display:String", "kind" : "val"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.internal.util.complete.Completion.equals", "link" : "sbt\/internal\/util\/complete\/Token.html#equals(o:Any):Boolean", "kind" : "final def"}, {"label" : "hashCode", "tail" : ": Int", "member" : "sbt.internal.util.complete.Completion.hashCode", "link" : "sbt\/internal\/util\/complete\/Token.html#hashCode:Int", "kind" : "final lazy val"}, {"label" : "x", "tail" : "(o: Completions): Completions", "member" : "sbt.internal.util.complete.Completion.x", "link" : "sbt\/internal\/util\/complete\/Token.html#x(o:sbt.internal.util.complete.Completions):sbt.internal.util.complete.Completions", "kind" : "final def"}, {"label" : "++", "tail" : "(o: Completion): Completion", "member" : "sbt.internal.util.complete.Completion.++", "link" : "sbt\/internal\/util\/complete\/Token.html#++(o:sbt.internal.util.complete.Completion):sbt.internal.util.complete.Completion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/Token.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/Token.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/Token.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/Token.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/Token.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/Token.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/Token.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Token.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Token.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/Token.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/Token.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/Token.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/Token.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/Token.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/Token.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/Token.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/util\/complete\/Token.html", "kind" : "class"}, {"name" : "sbt.internal.util.complete.TokenCompletions", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "hideWhen", "tail" : "(f: (Int) ⇒ Boolean): TokenCompletions", "member" : "sbt.internal.util.complete.TokenCompletions.hideWhen", "link" : "sbt\/internal\/util\/complete\/TokenCompletions.html#hideWhen(f:Int=>Boolean):sbt.internal.util.complete.TokenCompletions", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/internal\/util\/complete\/TokenCompletions$.html", "members_object" : [{"label" : "mapDelegateCompletions", "tail" : "(f: (String, Int, Completion) ⇒ Completion): TokenCompletions", "member" : "sbt.internal.util.complete.TokenCompletions.mapDelegateCompletions", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#mapDelegateCompletions(f:(String,Int,sbt.internal.util.complete.Completion)=>sbt.internal.util.complete.Completion):sbt.internal.util.complete.TokenCompletions", "kind" : "def"}, {"label" : "fixed", "tail" : "(f: (String, Int) ⇒ Completions): TokenCompletions", "member" : "sbt.internal.util.complete.TokenCompletions.fixed", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#fixed(f:(String,Int)=>sbt.internal.util.complete.Completions):sbt.internal.util.complete.TokenCompletions", "kind" : "def"}, {"label" : "overrideDisplay", "tail" : "(msg: String): TokenCompletions", "member" : "sbt.internal.util.complete.TokenCompletions.overrideDisplay", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#overrideDisplay(msg:String):sbt.internal.util.complete.TokenCompletions", "kind" : "def"}, {"label" : "displayOnly", "tail" : "(msg: String): TokenCompletions", "member" : "sbt.internal.util.complete.TokenCompletions.displayOnly", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#displayOnly(msg:String):sbt.internal.util.complete.TokenCompletions", "kind" : "def"}, {"label" : "default", "tail" : ": TokenCompletions", "member" : "sbt.internal.util.complete.TokenCompletions.default", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#default:sbt.internal.util.complete.TokenCompletions", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/TokenCompletions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/complete\/TokenCompletions.html", "kind" : "trait"}, {"name" : "sbt.internal.util.complete.UpperBound", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/UpperBound.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isInfinite", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.UpperBound.isInfinite", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#isInfinite:Boolean", "kind" : "abstract def"}, {"label" : "decrement", "tail" : "(): UpperBound", "member" : "sbt.internal.util.complete.UpperBound.decrement", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#decrement:sbt.internal.util.complete.UpperBound", "kind" : "abstract def"}, {"label" : "isZero", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.UpperBound.isZero", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#isZero:Boolean", "kind" : "abstract def"}, {"label" : "isOne", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.UpperBound.isOne", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#isOne:Boolean", "kind" : "abstract def"}, {"label" : ">=", "tail" : "(min: Int): Boolean", "member" : "sbt.internal.util.complete.UpperBound.>=", "link" : "sbt\/internal\/util\/complete\/UpperBound.html#>=(min:Int):Boolean", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/internal\/util\/complete\/UpperBound$.html", "members_object" : [{"label" : "intToFinite", "tail" : "(i: Int): Finite", "member" : "sbt.internal.util.complete.UpperBound.intToFinite", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#intToFinite(i:Int):sbt.internal.util.complete.Finite", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/UpperBound$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/complete\/UpperBound.html", "kind" : "trait"}, {"name" : "sbt.internal.util.complete.ValidParser", "members_trait" : [{"label" : "ifValid", "tail" : "(p: ⇒ Parser[S]): Parser[S]", "member" : "sbt.internal.util.complete.ValidParser.ifValid", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#ifValid[S](p:=>sbt.internal.util.complete.Parser[S]):sbt.internal.util.complete.Parser[S]", "kind" : "final def"}, {"label" : "failure", "tail" : "(): None.type", "member" : "sbt.internal.util.complete.ValidParser.failure", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#failure:None.type", "kind" : "final def"}, {"label" : "valid", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.ValidParser.valid", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#valid:Boolean", "kind" : "final def"}, {"label" : "isTokenStart", "tail" : "(): Boolean", "member" : "sbt.internal.util.complete.Parser.isTokenStart", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#isTokenStart:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/complete\/ValidParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "completions", "tail" : "(level: Int): Completions", "member" : "sbt.internal.util.complete.Parser.completions", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#completions(level:Int):sbt.internal.util.complete.Completions", "kind" : "abstract def"}, {"label" : "result", "tail" : "(): Option[T]", "member" : "sbt.internal.util.complete.Parser.result", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#result:Option[T]", "kind" : "abstract def"}, {"label" : "resultEmpty", "tail" : "(): Parser.Result[T]", "member" : "sbt.internal.util.complete.Parser.resultEmpty", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#resultEmpty:sbt.internal.util.complete.Parser.Result[T]", "kind" : "abstract def"}, {"label" : "derive", "tail" : "(i: Char): Parser[T]", "member" : "sbt.internal.util.complete.Parser.derive", "link" : "sbt\/internal\/util\/complete\/ValidParser.html#derive(i:Char):sbt.internal.util.complete.Parser[T]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/internal\/util\/complete\/ValidParser.html", "kind" : "trait"}], "sbt.internal.util" : [{"name" : "sbt.internal.util.AbstractRMap", "shortDescription" : "", "members_class" : [{"label" : "TPair", "tail" : "", "member" : "sbt.internal.util.RMap.TPair", "link" : "sbt\/internal\/util\/RMap.html#TPair[T]extendsProductwithSerializable", "kind" : "sealed case class"}, {"label" : "contains", "tail" : "(k: K[T]): Boolean", "member" : "sbt.internal.util.AbstractRMap.contains", "link" : "sbt\/internal\/util\/AbstractRMap.html#contains[T](k:K[T]):Boolean", "kind" : "def"}, {"label" : "apply", "tail" : "(k: K[T]): V[T]", "member" : "sbt.internal.util.AbstractRMap.apply", "link" : "sbt\/internal\/util\/AbstractRMap.html#apply[T](k:K[T]):V[T]", "kind" : "def"}, {"member" : "sbt.internal.util.AbstractRMap#<init>", "error" : "unsupported entity"}, {"label" : "toTypedSeq", "tail" : "(): Seq[TPair[_]]", "member" : "sbt.internal.util.RMap.toTypedSeq", "link" : "sbt\/internal\/util\/AbstractRMap.html#toTypedSeq:Seq[RMap.this.TPair[_]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/AbstractRMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/AbstractRMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/AbstractRMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/AbstractRMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/AbstractRMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/AbstractRMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/AbstractRMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AbstractRMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AbstractRMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AbstractRMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/AbstractRMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/AbstractRMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/AbstractRMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/AbstractRMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/AbstractRMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/AbstractRMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/AbstractRMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/AbstractRMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/AbstractRMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "sbt.internal.util.RMap.isEmpty", "link" : "sbt\/internal\/util\/AbstractRMap.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "values", "tail" : "(): Iterable[V[_]]", "member" : "sbt.internal.util.RMap.values", "link" : "sbt\/internal\/util\/AbstractRMap.html#values:Iterable[V[_]]", "kind" : "abstract def"}, {"label" : "keys", "tail" : "(): Iterable[K[_]]", "member" : "sbt.internal.util.RMap.keys", "link" : "sbt\/internal\/util\/AbstractRMap.html#keys:Iterable[K[_]]", "kind" : "abstract def"}, {"label" : "toSeq", "tail" : "(): Seq[(K[_], V[_])]", "member" : "sbt.internal.util.RMap.toSeq", "link" : "sbt\/internal\/util\/AbstractRMap.html#toSeq:Seq[(K[_],V[_])]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(k: K[T]): Option[V[T]]", "member" : "sbt.internal.util.RMap.get", "link" : "sbt\/internal\/util\/AbstractRMap.html#get[T](k:K[T]):Option[V[T]]", "kind" : "abstract def"}], "class" : "sbt\/internal\/util\/AbstractRMap.html", "kind" : "class"}, {"name" : "sbt.internal.util.AList", "members_trait" : [{"label" : "apply", "tail" : "(value: K[M], f: (K[Types.Id]) ⇒ C)(a: Applicative[M]): M[C]", "member" : "sbt.internal.util.AList.apply", "link" : "sbt\/internal\/util\/AList.html#apply[M[_],C](value:K[M],f:K[sbt.internal.util.Types.Id]=>C)(implicita:sbt.internal.util.Classes.Applicative[M]):M[C]", "kind" : "def"}, {"label" : "toList", "tail" : "(value: K[M]): List[M[_]]", "member" : "sbt.internal.util.AList.toList", "link" : "sbt\/internal\/util\/AList.html#toList[M[_]](value:K[M]):List[M[_]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/AList.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/AList.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/AList.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/AList.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/AList.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/AList.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/AList.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AList.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AList.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AList.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/AList.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/AList.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/AList.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/AList.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/AList.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/AList.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/AList.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/AList.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/AList.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "foldr", "tail" : "(value: K[M], f: (M[_], A) ⇒ A, init: A): A", "member" : "sbt.internal.util.AList.foldr", "link" : "sbt\/internal\/util\/AList.html#foldr[M[_],A](value:K[M],f:(M[_],A)=>A,init:A):A", "kind" : "abstract def"}, {"label" : "traverse", "tail" : "(value: K[M], f: ~>[M, [T]N[P[T]]])(np: Applicative[N]): N[K[P]]", "member" : "sbt.internal.util.AList.traverse", "link" : "sbt\/internal\/util\/AList.html#traverse[M[_],N[_],P[_]](value:K[M],f:M~>[T]N[P[T]])(implicitnp:sbt.internal.util.Classes.Applicative[N]):N[K[P]]", "kind" : "abstract def"}, {"label" : "transform", "tail" : "(value: K[M], f: ~>[M, N]): K[N]", "member" : "sbt.internal.util.AList.transform", "link" : "sbt\/internal\/util\/AList.html#transform[M[_],N[_]](value:K[M],f:M~>N):K[N]", "kind" : "abstract def"}], "shortDescription" : "An abstraction over a higher-order type constructor K[x[y]] with the purpose of abstractingover heterogeneous sequences like KList and TupleN with elements with a common typeconstructor as well as homogeneous sequences Seq[M[T]].", "object" : "sbt\/internal\/util\/AList$.html", "members_object" : [{"label" : "tuple11", "tail" : "(): T11List[A, B, C, D, E, F, G, H, I, J, K]", "member" : "sbt.internal.util.AList.tuple11", "link" : "sbt\/internal\/util\/AList$.html#tuple11[A,B,C,D,E,F,G,H,I,J,K]:sbt.internal.util.AList.T11List[A,B,C,D,E,F,G,H,I,J,K]", "kind" : "def"}, {"label" : "T11List", "tail" : "", "member" : "sbt.internal.util.AList.T11List", "link" : "sbt\/internal\/util\/AList$.html#T11List[A,B,C,D,E,F,G,H,I,J,K]=sbt.internal.util.AList[[L[x]](L[A],L[B],L[C],L[D],L[E],L[F],L[G],L[H],L[I],L[J],L[K])]", "kind" : "type"}, {"label" : "T11K", "tail" : "", "member" : "sbt.internal.util.AList.T11K", "link" : "sbt\/internal\/util\/AList$.html#T11K[A,B,C,D,E,F,G,H,I,J,K]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "tuple10", "tail" : "(): T10List[A, B, C, D, E, F, G, H, I, J]", "member" : "sbt.internal.util.AList.tuple10", "link" : "sbt\/internal\/util\/AList$.html#tuple10[A,B,C,D,E,F,G,H,I,J]:sbt.internal.util.AList.T10List[A,B,C,D,E,F,G,H,I,J]", "kind" : "def"}, {"label" : "T10List", "tail" : "", "member" : "sbt.internal.util.AList.T10List", "link" : "sbt\/internal\/util\/AList$.html#T10List[A,B,C,D,E,F,G,H,I,J]=sbt.internal.util.AList[[L[x]](L[A],L[B],L[C],L[D],L[E],L[F],L[G],L[H],L[I],L[J])]", "kind" : "type"}, {"label" : "T10K", "tail" : "", "member" : "sbt.internal.util.AList.T10K", "link" : "sbt\/internal\/util\/AList$.html#T10K[A,B,C,D,E,F,G,H,I,J]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "tuple9", "tail" : "(): T9List[A, B, C, D, E, F, G, H, I]", "member" : "sbt.internal.util.AList.tuple9", "link" : "sbt\/internal\/util\/AList$.html#tuple9[A,B,C,D,E,F,G,H,I]:sbt.internal.util.AList.T9List[A,B,C,D,E,F,G,H,I]", "kind" : "def"}, {"label" : "T9List", "tail" : "", "member" : "sbt.internal.util.AList.T9List", "link" : "sbt\/internal\/util\/AList$.html#T9List[A,B,C,D,E,F,G,H,I]=sbt.internal.util.AList[[L[x]](L[A],L[B],L[C],L[D],L[E],L[F],L[G],L[H],L[I])]", "kind" : "type"}, {"label" : "T9K", "tail" : "", "member" : "sbt.internal.util.AList.T9K", "link" : "sbt\/internal\/util\/AList$.html#T9K[A,B,C,D,E,F,G,H,I]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "tuple8", "tail" : "(): T8List[A, B, C, D, E, F, G, H]", "member" : "sbt.internal.util.AList.tuple8", "link" : "sbt\/internal\/util\/AList$.html#tuple8[A,B,C,D,E,F,G,H]:sbt.internal.util.AList.T8List[A,B,C,D,E,F,G,H]", "kind" : "def"}, {"label" : "T8List", "tail" : "", "member" : "sbt.internal.util.AList.T8List", "link" : "sbt\/internal\/util\/AList$.html#T8List[A,B,C,D,E,F,G,H]=sbt.internal.util.AList[[L[x]](L[A],L[B],L[C],L[D],L[E],L[F],L[G],L[H])]", "kind" : "type"}, {"label" : "T8K", "tail" : "", "member" : "sbt.internal.util.AList.T8K", "link" : "sbt\/internal\/util\/AList$.html#T8K[A,B,C,D,E,F,G,H]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "tuple7", "tail" : "(): T7List[A, B, C, D, E, F, G]", "member" : "sbt.internal.util.AList.tuple7", "link" : "sbt\/internal\/util\/AList$.html#tuple7[A,B,C,D,E,F,G]:sbt.internal.util.AList.T7List[A,B,C,D,E,F,G]", "kind" : "def"}, {"label" : "T7List", "tail" : "", "member" : "sbt.internal.util.AList.T7List", "link" : "sbt\/internal\/util\/AList$.html#T7List[A,B,C,D,E,F,G]=sbt.internal.util.AList[[L[x]](L[A],L[B],L[C],L[D],L[E],L[F],L[G])]", "kind" : "type"}, {"label" : "T7K", "tail" : "", "member" : "sbt.internal.util.AList.T7K", "link" : "sbt\/internal\/util\/AList$.html#T7K[A,B,C,D,E,F,G]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "tuple6", "tail" : "(): T6List[A, B, C, D, E, F]", "member" : "sbt.internal.util.AList.tuple6", "link" : "sbt\/internal\/util\/AList$.html#tuple6[A,B,C,D,E,F]:sbt.internal.util.AList.T6List[A,B,C,D,E,F]", "kind" : "def"}, {"label" : "T6List", "tail" : "", "member" : "sbt.internal.util.AList.T6List", "link" : "sbt\/internal\/util\/AList$.html#T6List[A,B,C,D,E,F]=sbt.internal.util.AList[[L[x]](L[A],L[B],L[C],L[D],L[E],L[F])]", "kind" : "type"}, {"label" : "T6K", "tail" : "", "member" : "sbt.internal.util.AList.T6K", "link" : "sbt\/internal\/util\/AList$.html#T6K[A,B,C,D,E,F]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "tuple5", "tail" : "(): T5List[A, B, C, D, E]", "member" : "sbt.internal.util.AList.tuple5", "link" : "sbt\/internal\/util\/AList$.html#tuple5[A,B,C,D,E]:sbt.internal.util.AList.T5List[A,B,C,D,E]", "kind" : "def"}, {"label" : "T5List", "tail" : "", "member" : "sbt.internal.util.AList.T5List", "link" : "sbt\/internal\/util\/AList$.html#T5List[A,B,C,D,E]=sbt.internal.util.AList[[L[x]](L[A],L[B],L[C],L[D],L[E])]", "kind" : "type"}, {"label" : "T5K", "tail" : "", "member" : "sbt.internal.util.AList.T5K", "link" : "sbt\/internal\/util\/AList$.html#T5K[A,B,C,D,E]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "tuple4", "tail" : "(): T4List[A, B, C, D]", "member" : "sbt.internal.util.AList.tuple4", "link" : "sbt\/internal\/util\/AList$.html#tuple4[A,B,C,D]:sbt.internal.util.AList.T4List[A,B,C,D]", "kind" : "def"}, {"label" : "T4List", "tail" : "", "member" : "sbt.internal.util.AList.T4List", "link" : "sbt\/internal\/util\/AList$.html#T4List[A,B,C,D]=sbt.internal.util.AList[[L[x]](L[A],L[B],L[C],L[D])]", "kind" : "type"}, {"label" : "T4K", "tail" : "", "member" : "sbt.internal.util.AList.T4K", "link" : "sbt\/internal\/util\/AList$.html#T4K[A,B,C,D]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "tuple3", "tail" : "(): T3List[A, B, C]", "member" : "sbt.internal.util.AList.tuple3", "link" : "sbt\/internal\/util\/AList$.html#tuple3[A,B,C]:sbt.internal.util.AList.T3List[A,B,C]", "kind" : "def"}, {"label" : "T3List", "tail" : "", "member" : "sbt.internal.util.AList.T3List", "link" : "sbt\/internal\/util\/AList$.html#T3List[A,B,C]=sbt.internal.util.AList[[L[x]](L[A],L[B],L[C])]", "kind" : "type"}, {"label" : "T3K", "tail" : "", "member" : "sbt.internal.util.AList.T3K", "link" : "sbt\/internal\/util\/AList$.html#T3K[A,B,C]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "tuple2", "tail" : "(): T2List[A, B]", "member" : "sbt.internal.util.AList.tuple2", "link" : "sbt\/internal\/util\/AList$.html#tuple2[A,B]:sbt.internal.util.AList.T2List[A,B]", "kind" : "def"}, {"label" : "T2List", "tail" : "", "member" : "sbt.internal.util.AList.T2List", "link" : "sbt\/internal\/util\/AList$.html#T2List[A,B]=sbt.internal.util.AList[[L[x]](L[A],L[B])]", "kind" : "type"}, {"label" : "T2K", "tail" : "", "member" : "sbt.internal.util.AList.T2K", "link" : "sbt\/internal\/util\/AList$.html#T2K[A,B]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "asplit", "tail" : "(base: AList[K]): ASplit[K, B]", "member" : "sbt.internal.util.AList.asplit", "link" : "sbt\/internal\/util\/AList$.html#asplit[K[L[x]],B[x]](base:sbt.internal.util.AList[K]):sbt.internal.util.AList.ASplit[K,B]", "kind" : "def"}, {"label" : "ASplit", "tail" : "", "member" : "sbt.internal.util.AList.ASplit", "link" : "sbt\/internal\/util\/AList$.html#ASplit[K[L[x]],B[x]]=sbt.internal.util.AList[[L[x]]K[[T]L[B[T]]]]", "kind" : "type"}, {"label" : "single", "tail" : "(): Single[A]", "member" : "sbt.internal.util.AList.single", "link" : "sbt\/internal\/util\/AList$.html#single[A]:sbt.internal.util.AList.Single[A]", "kind" : "def"}, {"label" : "Single", "tail" : "", "member" : "sbt.internal.util.AList.Single", "link" : "sbt\/internal\/util\/AList$.html#Single[A]=sbt.internal.util.AList[[L[x]]L[A]]", "kind" : "type"}, {"label" : "klist", "tail" : "(): AList[KL]", "member" : "sbt.internal.util.AList.klist", "link" : "sbt\/internal\/util\/AList$.html#klist[KL[M[_]]<:sbt.internal.util.KList[M]{typeTransform[N[_]]=KL[N]}]:sbt.internal.util.AList[KL]", "kind" : "def"}, {"label" : "seq", "tail" : "(): SeqList[T]", "member" : "sbt.internal.util.AList.seq", "link" : "sbt\/internal\/util\/AList$.html#seq[T]:sbt.internal.util.AList.SeqList[T]", "kind" : "def"}, {"label" : "SeqList", "tail" : "", "member" : "sbt.internal.util.AList.SeqList", "link" : "sbt\/internal\/util\/AList$.html#SeqList[T]=sbt.internal.util.AList[[L[x]]List[L[T]]]", "kind" : "type"}, {"label" : "empty", "tail" : ": Empty", "member" : "sbt.internal.util.AList.empty", "link" : "sbt\/internal\/util\/AList$.html#empty:sbt.internal.util.AList.Empty", "kind" : "val"}, {"label" : "Empty", "tail" : "", "member" : "sbt.internal.util.AList.Empty", "link" : "sbt\/internal\/util\/AList$.html#Empty=sbt.internal.util.AList[[L[x]]Unit]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/AList$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/AList$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/AList$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/AList$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/AList$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/AList$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/AList$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AList$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AList$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AList$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/AList$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/AList$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/AList$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/AList$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/AList$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/AList$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/AList$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/AList$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/AList$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/AList.html", "kind" : "trait"}, {"name" : "sbt.internal.util.Attributed", "shortDescription" : "Associates a metadata map with data.", "object" : "sbt\/internal\/util\/Attributed$.html", "members_object" : [{"label" : "blank", "tail" : "(data: T): Attributed[T]", "member" : "sbt.internal.util.Attributed.blank", "link" : "sbt\/internal\/util\/Attributed$.html#blank[T](data:T):sbt.internal.util.Attributed[T]", "kind" : "def"}, {"label" : "blankSeq", "tail" : "(in: Seq[T]): Seq[Attributed[T]]", "member" : "sbt.internal.util.Attributed.blankSeq", "link" : "sbt\/internal\/util\/Attributed$.html#blankSeq[T](in:Seq[T]):Seq[sbt.internal.util.Attributed[T]]", "kind" : "def"}, {"label" : "data", "tail" : "(in: Seq[Attributed[T]]): Seq[T]", "member" : "sbt.internal.util.Attributed.data", "link" : "sbt\/internal\/util\/Attributed$.html#data[T](in:Seq[sbt.internal.util.Attributed[T]]):Seq[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Attributed$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Attributed$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Attributed$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Attributed$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Attributed$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Attributed$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Attributed$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Attributed$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Attributed$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Attributed$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Attributed$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Attributed$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/Attributed$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Attributed$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/Attributed$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/Attributed$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Attributed$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Attributed$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Attributed$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "map", "tail" : "(f: (D) ⇒ T): Attributed[T]", "member" : "sbt.internal.util.Attributed.map", "link" : "sbt\/internal\/util\/Attributed.html#map[T](f:D=>T):sbt.internal.util.Attributed[T]", "kind" : "def"}, {"label" : "put", "tail" : "(key: AttributeKey[T], value: T): Attributed[D]", "member" : "sbt.internal.util.Attributed.put", "link" : "sbt\/internal\/util\/Attributed.html#put[T](key:sbt.internal.util.AttributeKey[T],value:T):sbt.internal.util.Attributed[D]", "kind" : "def"}, {"label" : "get", "tail" : "(key: AttributeKey[T]): Option[T]", "member" : "sbt.internal.util.Attributed.get", "link" : "sbt\/internal\/util\/Attributed.html#get[T](key:sbt.internal.util.AttributeKey[T]):Option[T]", "kind" : "def"}, {"member" : "sbt.internal.util.Attributed#<init>", "error" : "unsupported entity"}, {"label" : "metadata", "tail" : ": AttributeMap", "member" : "sbt.internal.util.Attributed.metadata", "link" : "sbt\/internal\/util\/Attributed.html#metadata:sbt.internal.util.AttributeMap", "kind" : "val"}, {"label" : "data", "tail" : ": D", "member" : "sbt.internal.util.Attributed.data", "link" : "sbt\/internal\/util\/Attributed.html#data:D", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Attributed.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Attributed.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Attributed.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Attributed.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Attributed.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Attributed.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Attributed.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Attributed.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Attributed.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Attributed.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Attributed.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Attributed.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Attributed.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Attributed.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Attributed.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Attributed.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/util\/Attributed.html", "kind" : "case class"}, {"name" : "sbt.internal.util.AttributeEntry", "shortDescription" : "A map entry where key is constrained to only be associated with a fixed value of type T.", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.internal.util.AttributeEntry.toString", "link" : "sbt\/internal\/util\/AttributeEntry.html#toString():String", "kind" : "def"}, {"member" : "sbt.internal.util.AttributeEntry#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": T", "member" : "sbt.internal.util.AttributeEntry.value", "link" : "sbt\/internal\/util\/AttributeEntry.html#value:T", "kind" : "val"}, {"label" : "key", "tail" : ": AttributeKey[T]", "member" : "sbt.internal.util.AttributeEntry.key", "link" : "sbt\/internal\/util\/AttributeEntry.html#key:sbt.internal.util.AttributeKey[T]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/AttributeEntry.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/AttributeEntry.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/AttributeEntry.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/AttributeEntry.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/AttributeEntry.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/AttributeEntry.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/AttributeEntry.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeEntry.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeEntry.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeEntry.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/AttributeEntry.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/AttributeEntry.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/AttributeEntry.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/AttributeEntry.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/AttributeEntry.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/AttributeEntry.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/util\/AttributeEntry.html", "kind" : "case class"}, {"name" : "sbt.internal.util.AttributeKey", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/AttributeKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/AttributeKey.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/AttributeKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/AttributeKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/AttributeKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/AttributeKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/AttributeKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeKey.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/AttributeKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/AttributeKey.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/AttributeKey.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/AttributeKey.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/AttributeKey.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/AttributeKey.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/AttributeKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/AttributeKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/AttributeKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "optJsonWriter", "tail" : "(): OptJsonWriter[T]", "member" : "sbt.internal.util.AttributeKey.optJsonWriter", "link" : "sbt\/internal\/util\/AttributeKey.html#optJsonWriter:sbt.util.OptJsonWriter[T]", "kind" : "abstract def"}, {"label" : "rank", "tail" : "(): Int", "member" : "sbt.internal.util.AttributeKey.rank", "link" : "sbt\/internal\/util\/AttributeKey.html#rank:Int", "kind" : "abstract def"}, {"label" : "isLocal", "tail" : "(): Boolean", "member" : "sbt.internal.util.AttributeKey.isLocal", "link" : "sbt\/internal\/util\/AttributeKey.html#isLocal:Boolean", "kind" : "abstract def"}, {"label" : "extend", "tail" : "(): Seq[AttributeKey[_]]", "member" : "sbt.internal.util.AttributeKey.extend", "link" : "sbt\/internal\/util\/AttributeKey.html#extend:Seq[sbt.internal.util.AttributeKey[_]]", "kind" : "abstract def"}, {"label" : "description", "tail" : "(): Option[String]", "member" : "sbt.internal.util.AttributeKey.description", "link" : "sbt\/internal\/util\/AttributeKey.html#description:Option[String]", "kind" : "abstract def"}, {"label" : "label", "tail" : "(): String", "member" : "sbt.internal.util.AttributeKey.label", "link" : "sbt\/internal\/util\/AttributeKey.html#label:String", "kind" : "abstract def"}, {"label" : "manifest", "tail" : "(): Manifest[T]", "member" : "sbt.internal.util.AttributeKey.manifest", "link" : "sbt\/internal\/util\/AttributeKey.html#manifest:scala.reflect.Manifest[T]", "kind" : "abstract def"}], "shortDescription" : "A key in an AttributeMap that constrains its associated value to be of type T.", "object" : "sbt\/internal\/util\/AttributeKey$.html", "members_object" : [{"label" : "apply", "tail" : "(name: String, description: String, extend: Seq[AttributeKey[_]], rank: Int)(arg0: Manifest[T], arg1: OptJsonWriter[T]): AttributeKey[T]", "member" : "sbt.internal.util.AttributeKey.apply", "link" : "sbt\/internal\/util\/AttributeKey$.html#apply[T](name:String,description:String,extend:Seq[sbt.internal.util.AttributeKey[_]],rank:Int)(implicitevidence$11:scala.reflect.Manifest[T],implicitevidence$12:sbt.util.OptJsonWriter[T]):sbt.internal.util.AttributeKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String, description: String, extend: Seq[AttributeKey[_]])(arg0: Manifest[T], arg1: OptJsonWriter[T]): AttributeKey[T]", "member" : "sbt.internal.util.AttributeKey.apply", "link" : "sbt\/internal\/util\/AttributeKey$.html#apply[T](name:String,description:String,extend:Seq[sbt.internal.util.AttributeKey[_]])(implicitevidence$9:scala.reflect.Manifest[T],implicitevidence$10:sbt.util.OptJsonWriter[T]):sbt.internal.util.AttributeKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String, description: String, rank: Int)(arg0: Manifest[T], arg1: OptJsonWriter[T]): AttributeKey[T]", "member" : "sbt.internal.util.AttributeKey.apply", "link" : "sbt\/internal\/util\/AttributeKey$.html#apply[T](name:String,description:String,rank:Int)(implicitevidence$7:scala.reflect.Manifest[T],implicitevidence$8:sbt.util.OptJsonWriter[T]):sbt.internal.util.AttributeKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String, description: String)(arg0: Manifest[T], arg1: OptJsonWriter[T]): AttributeKey[T]", "member" : "sbt.internal.util.AttributeKey.apply", "link" : "sbt\/internal\/util\/AttributeKey$.html#apply[T](name:String,description:String)(implicitevidence$5:scala.reflect.Manifest[T],implicitevidence$6:sbt.util.OptJsonWriter[T]):sbt.internal.util.AttributeKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String, rank: Int)(arg0: Manifest[T], arg1: OptJsonWriter[T]): AttributeKey[T]", "member" : "sbt.internal.util.AttributeKey.apply", "link" : "sbt\/internal\/util\/AttributeKey$.html#apply[T](name:String,rank:Int)(implicitevidence$3:scala.reflect.Manifest[T],implicitevidence$4:sbt.util.OptJsonWriter[T]):sbt.internal.util.AttributeKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String)(arg0: Manifest[T], arg1: OptJsonWriter[T]): AttributeKey[T]", "member" : "sbt.internal.util.AttributeKey.apply", "link" : "sbt\/internal\/util\/AttributeKey$.html#apply[T](name:String)(implicitevidence$1:scala.reflect.Manifest[T],implicitevidence$2:sbt.util.OptJsonWriter[T]):sbt.internal.util.AttributeKey[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/AttributeKey$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/AttributeKey$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/AttributeKey$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/AttributeKey$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/AttributeKey$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/AttributeKey$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/AttributeKey$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeKey$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeKey$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeKey$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/AttributeKey$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/AttributeKey$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/AttributeKey$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/AttributeKey$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/AttributeKey$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/AttributeKey$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/AttributeKey$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/AttributeKey$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/AttributeKey$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/AttributeKey.html", "kind" : "trait"}, {"name" : "sbt.internal.util.AttributeMap", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/AttributeMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/AttributeMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/AttributeMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/AttributeMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/AttributeMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/AttributeMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/AttributeMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/AttributeMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/AttributeMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/AttributeMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/AttributeMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/AttributeMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/AttributeMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/AttributeMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/AttributeMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/AttributeMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "sbt.internal.util.AttributeMap.isEmpty", "link" : "sbt\/internal\/util\/AttributeMap.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "entries", "tail" : "(): Iterable[AttributeEntry[_]]", "member" : "sbt.internal.util.AttributeMap.entries", "link" : "sbt\/internal\/util\/AttributeMap.html#entries:Iterable[sbt.internal.util.AttributeEntry[_]]", "kind" : "abstract def"}, {"label" : "++", "tail" : "(o: AttributeMap): AttributeMap", "member" : "sbt.internal.util.AttributeMap.++", "link" : "sbt\/internal\/util\/AttributeMap.html#++(o:sbt.internal.util.AttributeMap):sbt.internal.util.AttributeMap", "kind" : "abstract def"}, {"label" : "++", "tail" : "(o: Iterable[AttributeEntry[_]]): AttributeMap", "member" : "sbt.internal.util.AttributeMap.++", "link" : "sbt\/internal\/util\/AttributeMap.html#++(o:Iterable[sbt.internal.util.AttributeEntry[_]]):sbt.internal.util.AttributeMap", "kind" : "abstract def"}, {"label" : "keys", "tail" : "(): Iterable[AttributeKey[_]]", "member" : "sbt.internal.util.AttributeMap.keys", "link" : "sbt\/internal\/util\/AttributeMap.html#keys:Iterable[sbt.internal.util.AttributeKey[_]]", "kind" : "abstract def"}, {"label" : "put", "tail" : "(k: AttributeKey[T], value: T): AttributeMap", "member" : "sbt.internal.util.AttributeMap.put", "link" : "sbt\/internal\/util\/AttributeMap.html#put[T](k:sbt.internal.util.AttributeKey[T],value:T):sbt.internal.util.AttributeMap", "kind" : "abstract def"}, {"label" : "contains", "tail" : "(k: AttributeKey[T]): Boolean", "member" : "sbt.internal.util.AttributeMap.contains", "link" : "sbt\/internal\/util\/AttributeMap.html#contains[T](k:sbt.internal.util.AttributeKey[T]):Boolean", "kind" : "abstract def"}, {"label" : "remove", "tail" : "(k: AttributeKey[T]): AttributeMap", "member" : "sbt.internal.util.AttributeMap.remove", "link" : "sbt\/internal\/util\/AttributeMap.html#remove[T](k:sbt.internal.util.AttributeKey[T]):sbt.internal.util.AttributeMap", "kind" : "abstract def"}, {"label" : "get", "tail" : "(k: AttributeKey[T]): Option[T]", "member" : "sbt.internal.util.AttributeMap.get", "link" : "sbt\/internal\/util\/AttributeMap.html#get[T](k:sbt.internal.util.AttributeKey[T]):Option[T]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(k: AttributeKey[T]): T", "member" : "sbt.internal.util.AttributeMap.apply", "link" : "sbt\/internal\/util\/AttributeMap.html#apply[T](k:sbt.internal.util.AttributeKey[T]):T", "kind" : "abstract def"}], "shortDescription" : "An immutable map where a key is the tuple (String,T) for a fixed type T and can only be associated with values of type T.", "object" : "sbt\/internal\/util\/AttributeMap$.html", "members_object" : [{"label" : "toNatTrans", "tail" : "(map: AttributeMap): ~>[AttributeKey, Types.Id]", "member" : "sbt.internal.util.AttributeMap.toNatTrans", "link" : "sbt\/internal\/util\/AttributeMap$.html#toNatTrans(map:sbt.internal.util.AttributeMap):sbt.internal.util.AttributeKey~>sbt.internal.util.Types.Id", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(entries: AttributeEntry[_]*): AttributeMap", "member" : "sbt.internal.util.AttributeMap.apply", "link" : "sbt\/internal\/util\/AttributeMap$.html#apply(entries:sbt.internal.util.AttributeEntry[_]*):sbt.internal.util.AttributeMap", "kind" : "def"}, {"label" : "apply", "tail" : "(entries: Iterable[AttributeEntry[_]]): AttributeMap", "member" : "sbt.internal.util.AttributeMap.apply", "link" : "sbt\/internal\/util\/AttributeMap$.html#apply(entries:Iterable[sbt.internal.util.AttributeEntry[_]]):sbt.internal.util.AttributeMap", "kind" : "def"}, {"label" : "empty", "tail" : ": AttributeMap", "member" : "sbt.internal.util.AttributeMap.empty", "link" : "sbt\/internal\/util\/AttributeMap$.html#empty:sbt.internal.util.AttributeMap", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/AttributeMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/AttributeMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/AttributeMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/AttributeMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/AttributeMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/AttributeMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/AttributeMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/AttributeMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/AttributeMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/AttributeMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/AttributeMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/AttributeMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/AttributeMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/AttributeMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/AttributeMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/AttributeMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/AttributeMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/AttributeMap.html", "kind" : "trait"}, {"name" : "sbt.internal.util.Classes", "shortDescription" : "", "object" : "sbt\/internal\/util\/Classes$.html", "members_object" : [{"label" : "listMonad", "tail" : ": Monad[List]", "member" : "sbt.internal.util.Classes.listMonad", "link" : "sbt\/internal\/util\/Classes$.html#listMonad:sbt.internal.util.Classes.Monad[List]", "kind" : "implicit val"}, {"label" : "optionMonad", "tail" : ": Monad[Option]", "member" : "sbt.internal.util.Classes.optionMonad", "link" : "sbt\/internal\/util\/Classes$.html#optionMonad:sbt.internal.util.Classes.Monad[Option]", "kind" : "implicit val"}, {"label" : "Monad", "tail" : "", "member" : "sbt.internal.util.Classes.Monad", "link" : "sbt\/internal\/util\/Classes$.html#Monad[M[_]]extendsClasses.Applicative[M]", "kind" : "trait"}, {"label" : "Applicative", "tail" : "", "member" : "sbt.internal.util.Classes.Applicative", "link" : "sbt\/internal\/util\/Classes$.html#Applicative[M[_]]extendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Classes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Classes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Classes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Classes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Classes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Classes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Classes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Classes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Classes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Classes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Classes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Classes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/Classes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Classes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/Classes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/Classes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Classes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Classes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Classes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.Dag", "members_trait" : [{"label" : "topologicalSort", "tail" : "(): List[Node]", "member" : "sbt.internal.util.Dag.topologicalSort", "link" : "sbt\/internal\/util\/Dag.html#topologicalSort:List[Node]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Dag.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Dag.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Dag.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Dag.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Dag.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Dag.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Dag.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Dag.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Dag.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Dag.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Dag.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Dag.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/Dag.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Dag.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/Dag.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/Dag.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Dag.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Dag.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Dag.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): Iterable[Node]", "member" : "sbt.internal.util.Dag.dependencies", "link" : "sbt\/internal\/util\/Dag.html#dependencies:Iterable[Node]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/internal\/util\/Dag$.html", "members_object" : [{"label" : "Cyclic", "tail" : "", "member" : "sbt.internal.util.Dag.Cyclic", "link" : "sbt\/internal\/util\/Dag$.html#CyclicextendsException", "kind" : "final class"}, {"label" : "topologicalSortUnchecked", "tail" : "(nodes: Iterable[T])(dependencies: (T) ⇒ Iterable[T]): List[T]", "member" : "sbt.internal.util.Dag.topologicalSortUnchecked", "link" : "sbt\/internal\/util\/Dag$.html#topologicalSortUnchecked[T](nodes:Iterable[T])(dependencies:T=>Iterable[T]):List[T]", "kind" : "def"}, {"label" : "topologicalSortUnchecked", "tail" : "(node: T)(dependencies: (T) ⇒ Iterable[T]): List[T]", "member" : "sbt.internal.util.Dag.topologicalSortUnchecked", "link" : "sbt\/internal\/util\/Dag$.html#topologicalSortUnchecked[T](node:T)(dependencies:T=>Iterable[T]):List[T]", "kind" : "def"}, {"label" : "topologicalSort", "tail" : "(nodes: Iterable[T])(dependencies: (T) ⇒ Iterable[T]): List[T]", "member" : "sbt.internal.util.Dag.topologicalSort", "link" : "sbt\/internal\/util\/Dag$.html#topologicalSort[T](nodes:Iterable[T])(dependencies:T=>Iterable[T]):List[T]", "kind" : "def"}, {"label" : "topologicalSort", "tail" : "(root: T)(dependencies: (T) ⇒ Iterable[T]): List[T]", "member" : "sbt.internal.util.Dag.topologicalSort", "link" : "sbt\/internal\/util\/Dag$.html#topologicalSort[T](root:T)(dependencies:T=>Iterable[T]):List[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Dag$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Dag$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Dag$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Dag$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Dag$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Dag$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Dag$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Dag$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Dag$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Dag$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Dag$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Dag$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/Dag$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Dag$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/Dag$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/Dag$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Dag$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Dag$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Dag$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/Dag.html", "kind" : "trait"}, {"name" : "sbt.internal.util.DelegatingPMap", "shortDescription" : "Only suitable for K that is invariant in its type parameter.", "members_class" : [{"label" : "TPair", "tail" : "", "member" : "sbt.internal.util.RMap.TPair", "link" : "sbt\/internal\/util\/RMap.html#TPair[T]extendsProductwithSerializable", "kind" : "sealed case class"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.internal.util.DelegatingPMap.toString", "link" : "sbt\/internal\/util\/DelegatingPMap.html#toString():String", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "sbt.internal.util.DelegatingPMap.isEmpty", "link" : "sbt\/internal\/util\/DelegatingPMap.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "values", "tail" : "(): Iterable[V[_]]", "member" : "sbt.internal.util.DelegatingPMap.values", "link" : "sbt\/internal\/util\/DelegatingPMap.html#values:Iterable[V[_]]", "kind" : "def"}, {"label" : "keys", "tail" : "(): Iterable[K[_]]", "member" : "sbt.internal.util.DelegatingPMap.keys", "link" : "sbt\/internal\/util\/DelegatingPMap.html#keys:Iterable[K[_]]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[(K[_], V[_])]", "member" : "sbt.internal.util.DelegatingPMap.toSeq", "link" : "sbt\/internal\/util\/DelegatingPMap.html#toSeq:Seq[(K[_],V[_])]", "kind" : "def"}, {"label" : "mapValue", "tail" : "(k: K[T], init: V[T], f: (V[T]) ⇒ V[T]): V[T]", "member" : "sbt.internal.util.DelegatingPMap.mapValue", "link" : "sbt\/internal\/util\/DelegatingPMap.html#mapValue[T](k:K[T],init:V[T],f:V[T]=>V[T]):V[T]", "kind" : "def"}, {"label" : "getOrUpdate", "tail" : "(k: K[T], make: ⇒ V[T]): V[T]", "member" : "sbt.internal.util.DelegatingPMap.getOrUpdate", "link" : "sbt\/internal\/util\/DelegatingPMap.html#getOrUpdate[T](k:K[T],make:=>V[T]):V[T]", "kind" : "def"}, {"label" : "remove", "tail" : "(k: K[T]): Option[V[T]]", "member" : "sbt.internal.util.DelegatingPMap.remove", "link" : "sbt\/internal\/util\/DelegatingPMap.html#remove[T](k:K[T]):Option[V[T]]", "kind" : "def"}, {"label" : "update", "tail" : "(k: K[T], v: V[T]): Unit", "member" : "sbt.internal.util.DelegatingPMap.update", "link" : "sbt\/internal\/util\/DelegatingPMap.html#update[T](k:K[T],v:V[T]):Unit", "kind" : "def"}, {"label" : "get", "tail" : "(k: K[T]): Option[V[T]]", "member" : "sbt.internal.util.DelegatingPMap.get", "link" : "sbt\/internal\/util\/DelegatingPMap.html#get[T](k:K[T]):Option[V[T]]", "kind" : "def"}, {"member" : "sbt.internal.util.DelegatingPMap#<init>", "error" : "unsupported entity"}, {"label" : "fn", "tail" : "(): (K[T]) ⇒ V[T]", "member" : "sbt.internal.util.~>.fn", "link" : "sbt\/internal\/util\/DelegatingPMap.html#fn[T]:A[T]=>B[T]", "kind" : "final def"}, {"label" : "∙", "tail" : "(g: (C) ⇒ D)(ev: <:<[D, K[D]]): (C) ⇒ V[D]", "member" : "sbt.internal.util.~>.∙", "link" : "sbt\/internal\/util\/DelegatingPMap.html#∙[C,D](g:C=>D)(implicitev:D<:<A[D]):C=>B[D]", "kind" : "final def"}, {"label" : "∙", "tail" : "(g: ~>[C, K]): ~>[C, V]", "member" : "sbt.internal.util.~>.∙", "link" : "sbt\/internal\/util\/DelegatingPMap.html#∙[C[_]](g:C~>A):C~>B", "kind" : "final def"}, {"label" : "contains", "tail" : "(k: K[T]): Boolean", "member" : "sbt.internal.util.AbstractRMap.contains", "link" : "sbt\/internal\/util\/DelegatingPMap.html#contains[T](k:K[T]):Boolean", "kind" : "def"}, {"label" : "apply", "tail" : "(k: K[T]): V[T]", "member" : "sbt.internal.util.AbstractRMap.apply", "link" : "sbt\/internal\/util\/DelegatingPMap.html#apply[T](k:K[T]):V[T]", "kind" : "def"}, {"label" : "toTypedSeq", "tail" : "(): Seq[TPair[_]]", "member" : "sbt.internal.util.RMap.toTypedSeq", "link" : "sbt\/internal\/util\/DelegatingPMap.html#toTypedSeq:Seq[RMap.this.TPair[_]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/DelegatingPMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/DelegatingPMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/DelegatingPMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/DelegatingPMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/DelegatingPMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/DelegatingPMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/DelegatingPMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/DelegatingPMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/DelegatingPMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/DelegatingPMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/DelegatingPMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/DelegatingPMap.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/DelegatingPMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/DelegatingPMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/DelegatingPMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/DelegatingPMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/DelegatingPMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/DelegatingPMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/util\/DelegatingPMap.html", "kind" : "class"}, {"name" : "sbt.internal.util.EvaluateSettings", "shortDescription" : "", "members_class" : [{"label" : "run", "tail" : "(delegates: (Scope) ⇒ Seq[Scope]): Settings[Scope]", "member" : "sbt.internal.util.EvaluateSettings.run", "link" : "sbt\/internal\/util\/EvaluateSettings.html#run(implicitdelegates:Scope=>Seq[Scope]):sbt.internal.util.Settings[Scope]", "kind" : "def"}, {"member" : "sbt.internal.util.EvaluateSettings#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/EvaluateSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/EvaluateSettings.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/EvaluateSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/EvaluateSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/EvaluateSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/EvaluateSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/EvaluateSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/EvaluateSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/EvaluateSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/EvaluateSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/EvaluateSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/EvaluateSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/EvaluateSettings.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/EvaluateSettings.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/EvaluateSettings.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/EvaluateSettings.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/EvaluateSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/EvaluateSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/EvaluateSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compiledSettings", "tail" : "(): Seq[Compiled[_]]", "member" : "sbt.internal.util.EvaluateSettings.compiledSettings", "link" : "sbt\/internal\/util\/EvaluateSettings.html#compiledSettings:Seq[EvaluateSettings.this.init.Compiled[_]]", "kind" : "abstract def"}, {"label" : "executor", "tail" : "(): Executor", "member" : "sbt.internal.util.EvaluateSettings.executor", "link" : "sbt\/internal\/util\/EvaluateSettings.html#executor:java.util.concurrent.Executor", "kind" : "abstract def"}, {"label" : "init", "tail" : ": Init[Scope]", "member" : "sbt.internal.util.EvaluateSettings.init", "link" : "sbt\/internal\/util\/EvaluateSettings.html#init:sbt.internal.util.Init[Scope]", "kind" : "abstract val"}], "class" : "sbt\/internal\/util\/EvaluateSettings.html", "kind" : "class"}, {"name" : "sbt.internal.util.EvaluationState", "shortDescription" : "", "object" : "sbt\/internal\/util\/EvaluationState$.html", "members_object" : [{"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "sbt\/internal\/util\/EvaluationState$.html#ValueSet", "kind" : "object"}, {"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "sbt\/internal\/util\/EvaluationState$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "sbt\/internal\/util\/EvaluationState$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "sbt\/internal\/util\/EvaluationState$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "Evaluated", "tail" : ": Value", "member" : "sbt.internal.util.EvaluationState.Evaluated", "link" : "sbt\/internal\/util\/EvaluationState$.html#Evaluated:sbt.internal.util.EvaluationState.Value", "kind" : "val"}, {"label" : "Calling", "tail" : ": Value", "member" : "sbt.internal.util.EvaluationState.Calling", "link" : "sbt\/internal\/util\/EvaluationState$.html#Calling:sbt.internal.util.EvaluationState.Value", "kind" : "val"}, {"label" : "Ready", "tail" : ": Value", "member" : "sbt.internal.util.EvaluationState.Ready", "link" : "sbt\/internal\/util\/EvaluationState$.html#Ready:sbt.internal.util.EvaluationState.Value", "kind" : "val"}, {"label" : "Blocked", "tail" : ": Value", "member" : "sbt.internal.util.EvaluationState.Blocked", "link" : "sbt\/internal\/util\/EvaluationState$.html#Blocked:sbt.internal.util.EvaluationState.Value", "kind" : "val"}, {"label" : "New", "tail" : ": Value", "member" : "sbt.internal.util.EvaluationState.New", "link" : "sbt\/internal\/util\/EvaluationState$.html#New:sbt.internal.util.EvaluationState.Value", "kind" : "val"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "sbt\/internal\/util\/EvaluationState$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "sbt\/internal\/util\/EvaluationState$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "sbt\/internal\/util\/EvaluationState$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "sbt\/internal\/util\/EvaluationState$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "sbt\/internal\/util\/EvaluationState$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "sbt\/internal\/util\/EvaluationState$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "sbt\/internal\/util\/EvaluationState$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "sbt\/internal\/util\/EvaluationState$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "sbt\/internal\/util\/EvaluationState$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "sbt\/internal\/util\/EvaluationState$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "sbt\/internal\/util\/EvaluationState$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "sbt\/internal\/util\/EvaluationState$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/EvaluationState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/EvaluationState$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/EvaluationState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/EvaluationState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/EvaluationState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/EvaluationState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/EvaluationState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/EvaluationState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/EvaluationState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/EvaluationState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/EvaluationState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/EvaluationState$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/EvaluationState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/EvaluationState$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/EvaluationState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/EvaluationState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/EvaluationState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/EvaluationState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.Fn1", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Fn1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Fn1.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Fn1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Fn1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Fn1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Fn1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Fn1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Fn1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Fn1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Fn1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Fn1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Fn1.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/Fn1.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Fn1.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/Fn1.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/Fn1.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Fn1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Fn1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Fn1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "∙", "tail" : "(g: (C) ⇒ A): (C) ⇒ B", "member" : "sbt.internal.util.Fn1.∙", "link" : "sbt\/internal\/util\/Fn1.html#∙[C](g:C=>A):C=>B", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/internal\/util\/Fn1.html", "kind" : "trait"}, {"name" : "sbt.internal.util.FullReader", "shortDescription" : "", "members_class" : [{"label" : "reader", "tail" : ": ConsoleReader", "member" : "sbt.internal.util.FullReader.reader", "link" : "sbt\/internal\/util\/FullReader.html#reader:jline.console.ConsoleReader", "kind" : "val"}, {"member" : "sbt.internal.util.FullReader#<init>", "error" : "unsupported entity"}, {"label" : "injectThreadSleep", "tail" : ": Boolean", "member" : "sbt.internal.util.FullReader.injectThreadSleep", "link" : "sbt\/internal\/util\/FullReader.html#injectThreadSleep:Boolean", "kind" : "val"}, {"label" : "handleCONT", "tail" : ": Boolean", "member" : "sbt.internal.util.FullReader.handleCONT", "link" : "sbt\/internal\/util\/FullReader.html#handleCONT:Boolean", "kind" : "val"}, {"label" : "readLine", "tail" : "(prompt: String, mask: Option[Char]): Option[String]", "member" : "sbt.internal.util.JLine.readLine", "link" : "sbt\/internal\/util\/FullReader.html#readLine(prompt:String,mask:Option[Char]):Option[String]", "kind" : "def"}, {"label" : "in", "tail" : ": InputStream", "member" : "sbt.internal.util.JLine.in", "link" : "sbt\/internal\/util\/FullReader.html#in:java.io.InputStream", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/FullReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/FullReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/FullReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/FullReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/FullReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/FullReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/FullReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/FullReader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/FullReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/FullReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/FullReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/FullReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/FullReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/FullReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/FullReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/FullReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/FullReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/FullReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/FullReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/util\/FullReader.html", "kind" : "class"}, {"name" : "sbt.internal.util.HCons", "shortDescription" : "", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.internal.util.HCons.toString", "link" : "sbt\/internal\/util\/HCons.html#toString():String", "kind" : "def"}, {"label" : ":+:", "tail" : "(g: G): Types.:+:[G, Types.:+:[H, T]]", "member" : "sbt.internal.util.HCons.:+:", "link" : "sbt\/internal\/util\/HCons.html#:+:[G](g:G):G:+:(H:+:T)", "kind" : "def"}, {"label" : "Wrap", "tail" : "", "member" : "sbt.internal.util.HCons.Wrap", "link" : "sbt\/internal\/util\/HCons.html#Wrap[M[_]]=M[H]:+:T#Wrap[M]", "kind" : "type"}, {"member" : "sbt.internal.util.HCons#<init>", "error" : "unsupported entity"}, {"label" : "tail", "tail" : ": T", "member" : "sbt.internal.util.HCons.tail", "link" : "sbt\/internal\/util\/HCons.html#tail:T", "kind" : "val"}, {"label" : "head", "tail" : ": H", "member" : "sbt.internal.util.HCons.head", "link" : "sbt\/internal\/util\/HCons.html#head:H", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/HCons.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/HCons.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/HCons.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/HCons.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/HCons.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/HCons.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/HCons.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HCons.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HCons.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HCons.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/HCons.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/HCons.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/HCons.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/HCons.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/HCons.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/HCons.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/util\/HCons.html", "kind" : "case class"}, {"name" : "sbt.internal.util.HList", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/HList.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/HList.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/HList.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/HList.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/HList.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/HList.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/HList.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HList.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HList.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HList.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/HList.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/HList.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/HList.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/HList.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/HList.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/HList.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/HList.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/HList.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/HList.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "sbt.internal.util.HList.Wrap", "error" : "unsupported entity"}], "shortDescription" : "A minimal heterogeneous list type.", "object" : "sbt\/internal\/util\/HList$.html", "members_object" : [{"label" : "fromList", "tail" : "(list: Traversable[A]): HList", "member" : "sbt.internal.util.HList.fromList", "link" : "sbt\/internal\/util\/HList$.html#fromList[A](list:Traversable[A]):sbt.internal.util.HList", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/HList$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/HList$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/HList$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/HList$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/HList$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/HList$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/HList$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HList$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HList$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HList$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/HList$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/HList$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/HList$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/HList$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/HList$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/HList$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/HList$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/HList$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/HList$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/HList.html", "kind" : "trait"}, {"name" : "sbt.internal.util.HListFormats", "members_trait" : [{"label" : "hnilHListJF", "tail" : "(hnil: A): HListJF[A]", "member" : "sbt.internal.util.HListFormats.hnilHListJF", "link" : "sbt\/internal\/util\/HListFormats.html#hnilHListJF[A<:sbt.internal.util.HNil](hnil:A):HListFormats.this.HListJF[A]", "kind" : "implicit def"}, {"label" : "lnilHListJF2", "tail" : ": HListJF[HNil.type]", "member" : "sbt.internal.util.HListFormats.lnilHListJF2", "link" : "sbt\/internal\/util\/HListFormats.html#lnilHListJF2:HListFormats.this.HListJF[sbt.internal.util.HNil.type]", "kind" : "implicit val"}, {"label" : "lnilHListJF1", "tail" : ": HListJF[HNil]", "member" : "sbt.internal.util.HListFormats.lnilHListJF1", "link" : "sbt\/internal\/util\/HListFormats.html#lnilHListJF1:HListFormats.this.HListJF[sbt.internal.util.HNil]", "kind" : "implicit val"}, {"label" : "hconsHListJF", "tail" : "(hf: JsonFormat[H], tf: HListJF[T]): HListJF[Types.:+:[H, T]]", "member" : "sbt.internal.util.HListFormats.hconsHListJF", "link" : "sbt\/internal\/util\/HListFormats.html#hconsHListJF[H,T<:sbt.internal.util.HList](implicithf:sjsonnew.JsonFormat[H],implicittf:HListFormats.this.HListJF[T]):HListFormats.this.HListJF[H:+:T]", "kind" : "implicit def"}, {"label" : "HListJF", "tail" : "", "member" : "sbt.internal.util.HListFormats.HListJF", "link" : "sbt\/internal\/util\/HListFormats.html#HListJF[A<:sbt.internal.util.HList]extendsAnyRef", "kind" : "trait"}, {"label" : "hconsFormat", "tail" : "(hf: JsonFormat[H], tf: HListJF[T]): JsonFormat[Types.:+:[H, T]]", "member" : "sbt.internal.util.HListFormats.hconsFormat", "link" : "sbt\/internal\/util\/HListFormats.html#hconsFormat[H,T<:sbt.internal.util.HList](implicithf:sjsonnew.JsonFormat[H],implicittf:HListFormats.this.HListJF[T]):sjsonnew.JsonFormat[H:+:T]", "kind" : "implicit def"}, {"label" : "lnilFormat2", "tail" : ": JsonFormat[HNil.type]", "member" : "sbt.internal.util.HListFormats.lnilFormat2", "link" : "sbt\/internal\/util\/HListFormats.html#lnilFormat2:sjsonnew.JsonFormat[sbt.internal.util.HNil.type]", "kind" : "implicit val"}, {"label" : "lnilFormat1", "tail" : ": JsonFormat[HNil]", "member" : "sbt.internal.util.HListFormats.lnilFormat1", "link" : "sbt\/internal\/util\/HListFormats.html#lnilFormat1:sjsonnew.JsonFormat[sbt.internal.util.HNil]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/HListFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/HListFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/HListFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/HListFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/HListFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/HListFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/HListFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HListFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HListFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HListFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/HListFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/HListFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/HListFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/HListFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/HListFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/HListFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/HListFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/HListFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/HListFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/internal\/util\/HListFormats$.html", "members_object" : [{"label" : "HListJF", "tail" : "", "member" : "sbt.internal.util.HListFormats.HListJF", "link" : "sbt\/internal\/util\/HListFormats.html#HListJF[A<:sbt.internal.util.HList]extendsAnyRef", "kind" : "trait"}, {"label" : "hnilHListJF", "tail" : "(hnil: A): HListJF[A]", "member" : "sbt.internal.util.HListFormats.hnilHListJF", "link" : "sbt\/internal\/util\/HListFormats$.html#hnilHListJF[A<:sbt.internal.util.HNil](hnil:A):HListFormats.this.HListJF[A]", "kind" : "implicit def"}, {"label" : "lnilHListJF2", "tail" : ": HListJF[HNil.type]", "member" : "sbt.internal.util.HListFormats.lnilHListJF2", "link" : "sbt\/internal\/util\/HListFormats$.html#lnilHListJF2:HListFormats.this.HListJF[sbt.internal.util.HNil.type]", "kind" : "implicit val"}, {"label" : "lnilHListJF1", "tail" : ": HListJF[HNil]", "member" : "sbt.internal.util.HListFormats.lnilHListJF1", "link" : "sbt\/internal\/util\/HListFormats$.html#lnilHListJF1:HListFormats.this.HListJF[sbt.internal.util.HNil]", "kind" : "implicit val"}, {"label" : "hconsHListJF", "tail" : "(hf: JsonFormat[H], tf: HListJF[T]): HListJF[Types.:+:[H, T]]", "member" : "sbt.internal.util.HListFormats.hconsHListJF", "link" : "sbt\/internal\/util\/HListFormats$.html#hconsHListJF[H,T<:sbt.internal.util.HList](implicithf:sjsonnew.JsonFormat[H],implicittf:HListFormats.this.HListJF[T]):HListFormats.this.HListJF[H:+:T]", "kind" : "implicit def"}, {"label" : "hconsFormat", "tail" : "(hf: JsonFormat[H], tf: HListJF[T]): JsonFormat[Types.:+:[H, T]]", "member" : "sbt.internal.util.HListFormats.hconsFormat", "link" : "sbt\/internal\/util\/HListFormats$.html#hconsFormat[H,T<:sbt.internal.util.HList](implicithf:sjsonnew.JsonFormat[H],implicittf:HListFormats.this.HListJF[T]):sjsonnew.JsonFormat[H:+:T]", "kind" : "implicit def"}, {"label" : "lnilFormat2", "tail" : ": JsonFormat[HNil.type]", "member" : "sbt.internal.util.HListFormats.lnilFormat2", "link" : "sbt\/internal\/util\/HListFormats$.html#lnilFormat2:sjsonnew.JsonFormat[sbt.internal.util.HNil.type]", "kind" : "implicit val"}, {"label" : "lnilFormat1", "tail" : ": JsonFormat[HNil]", "member" : "sbt.internal.util.HListFormats.lnilFormat1", "link" : "sbt\/internal\/util\/HListFormats$.html#lnilFormat1:sjsonnew.JsonFormat[sbt.internal.util.HNil]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/HListFormats$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/HListFormats$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/HListFormats$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/HListFormats$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/HListFormats$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/HListFormats$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/HListFormats$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HListFormats$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HListFormats$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HListFormats$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/HListFormats$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/HListFormats$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/HListFormats$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/HListFormats$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/HListFormats$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/HListFormats$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/HListFormats$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/HListFormats$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/HListFormats$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/HListFormats.html", "kind" : "trait"}, {"name" : "sbt.internal.util.HNil", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.internal.util.HNil.toString", "link" : "sbt\/internal\/util\/HNil.html#toString():String", "kind" : "def"}, {"label" : ":+:", "tail" : "(g: G): Types.:+:[G, HNil]", "member" : "sbt.internal.util.HNil.:+:", "link" : "sbt\/internal\/util\/HNil.html#:+:[G](g:G):G:+:sbt.internal.util.HNil", "kind" : "def"}, {"label" : "Wrap", "tail" : "", "member" : "sbt.internal.util.HNil.Wrap", "link" : "sbt\/internal\/util\/HNil.html#Wrap[M[_]]=sbt.internal.util.HNil", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/HNil.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/HNil.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/HNil.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/HNil.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/HNil.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/HNil.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/HNil.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HNil.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HNil.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HNil.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/HNil.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/HNil.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/HNil.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/HNil.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/HNil.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/HNil.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/HNil.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/HNil.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/internal\/util\/HNil$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.internal.util.HNil.toString", "link" : "sbt\/internal\/util\/HNil$.html#toString():String", "kind" : "def"}, {"label" : ":+:", "tail" : "(g: G): Types.:+:[G, HNil]", "member" : "sbt.internal.util.HNil.:+:", "link" : "sbt\/internal\/util\/HNil$.html#:+:[G](g:G):G:+:sbt.internal.util.HNil", "kind" : "def"}, {"label" : "Wrap", "tail" : "", "member" : "sbt.internal.util.HNil.Wrap", "link" : "sbt\/internal\/util\/HNil$.html#Wrap[M[_]]=sbt.internal.util.HNil", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/HNil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/HNil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/HNil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/HNil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/HNil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/HNil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/HNil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HNil$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HNil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/HNil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/HNil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/HNil$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/HNil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/HNil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/HNil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/HNil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/HNil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/HNil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/HNil.html", "kind" : "trait"}, {"name" : "sbt.internal.util.IDSet", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/IDSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/IDSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/IDSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/IDSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/IDSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/IDSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/IDSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/IDSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/IDSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/IDSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/IDSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/IDSet.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/IDSet.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/IDSet.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/IDSet.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/IDSet.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/IDSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/IDSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/IDSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "process", "tail" : "(t: T)(ifSeen: S)(ifNew: ⇒ S): S", "member" : "sbt.internal.util.IDSet.process", "link" : "sbt\/internal\/util\/IDSet.html#process[S](t:T)(ifSeen:S)(ifNew:=>S):S", "kind" : "abstract def"}, {"label" : "foreach", "tail" : "(f: (T) ⇒ Unit): Unit", "member" : "sbt.internal.util.IDSet.foreach", "link" : "sbt\/internal\/util\/IDSet.html#foreach(f:T=>Unit):Unit", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "sbt.internal.util.IDSet.isEmpty", "link" : "sbt\/internal\/util\/IDSet.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "toList", "tail" : "(): List[T]", "member" : "sbt.internal.util.IDSet.toList", "link" : "sbt\/internal\/util\/IDSet.html#toList:List[T]", "kind" : "abstract def"}, {"label" : "all", "tail" : "(): Iterable[T]", "member" : "sbt.internal.util.IDSet.all", "link" : "sbt\/internal\/util\/IDSet.html#all:Iterable[T]", "kind" : "abstract def"}, {"label" : "-=", "tail" : "(t: T): Boolean", "member" : "sbt.internal.util.IDSet.-=", "link" : "sbt\/internal\/util\/IDSet.html#-=(t:T):Boolean", "kind" : "abstract def"}, {"label" : "++=", "tail" : "(t: Iterable[T]): Unit", "member" : "sbt.internal.util.IDSet.++=", "link" : "sbt\/internal\/util\/IDSet.html#++=(t:Iterable[T]):Unit", "kind" : "abstract def"}, {"label" : "+=", "tail" : "(t: T): Unit", "member" : "sbt.internal.util.IDSet.+=", "link" : "sbt\/internal\/util\/IDSet.html#+=(t:T):Unit", "kind" : "abstract def"}, {"label" : "contains", "tail" : "(t: T): Boolean", "member" : "sbt.internal.util.IDSet.contains", "link" : "sbt\/internal\/util\/IDSet.html#contains(t:T):Boolean", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(t: T): Boolean", "member" : "sbt.internal.util.IDSet.apply", "link" : "sbt\/internal\/util\/IDSet.html#apply(t:T):Boolean", "kind" : "abstract def"}], "shortDescription" : "A mutable set interface that uses object identity to test for set membership.", "object" : "sbt\/internal\/util\/IDSet$.html", "members_object" : [{"label" : "create", "tail" : "(): IDSet[T]", "member" : "sbt.internal.util.IDSet.create", "link" : "sbt\/internal\/util\/IDSet$.html#create[T]:sbt.internal.util.IDSet[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Iterable[T]): IDSet[T]", "member" : "sbt.internal.util.IDSet.apply", "link" : "sbt\/internal\/util\/IDSet$.html#apply[T](values:Iterable[T]):sbt.internal.util.IDSet[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: T*): IDSet[T]", "member" : "sbt.internal.util.IDSet.apply", "link" : "sbt\/internal\/util\/IDSet$.html#apply[T](values:T*):sbt.internal.util.IDSet[T]", "kind" : "def"}, {"label" : "toTraversable", "tail" : "(): (IDSet[T]) ⇒ Traversable[T]", "member" : "sbt.internal.util.IDSet.toTraversable", "link" : "sbt\/internal\/util\/IDSet$.html#toTraversable[T]:sbt.internal.util.IDSet[T]=>Traversable[T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/IDSet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/IDSet$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/IDSet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/IDSet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/IDSet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/IDSet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/IDSet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/IDSet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/IDSet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/IDSet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/IDSet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/IDSet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/IDSet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/IDSet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/IDSet$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/IDSet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/IDSet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/IDSet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/IDSet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/IDSet.html", "kind" : "trait"}, {"name" : "sbt.internal.util.IMap", "members_trait" : [{"label" : "TPair", "tail" : "", "member" : "sbt.internal.util.RMap.TPair", "link" : "sbt\/internal\/util\/RMap.html#TPair[T]extendsProductwithSerializable", "kind" : "sealed case class"}, {"label" : "toTypedSeq", "tail" : "(): Seq[TPair[_]]", "member" : "sbt.internal.util.RMap.toTypedSeq", "link" : "sbt\/internal\/util\/IMap.html#toTypedSeq:Seq[RMap.this.TPair[_]]", "kind" : "def"}, {"label" : "fn", "tail" : "(): (K[T]) ⇒ V[T]", "member" : "sbt.internal.util.~>.fn", "link" : "sbt\/internal\/util\/IMap.html#fn[T]:A[T]=>B[T]", "kind" : "final def"}, {"label" : "∙", "tail" : "(g: (C) ⇒ D)(ev: <:<[D, K[D]]): (C) ⇒ V[D]", "member" : "sbt.internal.util.~>.∙", "link" : "sbt\/internal\/util\/IMap.html#∙[C,D](g:C=>D)(implicitev:D<:<A[D]):C=>B[D]", "kind" : "final def"}, {"label" : "∙", "tail" : "(g: ~>[C, K]): ~>[C, V]", "member" : "sbt.internal.util.~>.∙", "link" : "sbt\/internal\/util\/IMap.html#∙[C[_]](g:C~>A):C~>B", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/IMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/IMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/IMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/IMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/IMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/IMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/IMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/IMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/IMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/IMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/IMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/IMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/IMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/IMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/IMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/IMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/IMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/IMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/IMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapSeparate", "tail" : "(f: ~>[V, [T]Either[VL[T], VR[T]]]): (IMap[K, VL], IMap[K, VR])", "member" : "sbt.internal.util.IMap.mapSeparate", "link" : "sbt\/internal\/util\/IMap.html#mapSeparate[VL[_],VR[_]](f:V~>[T]scala.util.Either[VL[T],VR[T]]):(sbt.internal.util.IMap[K,VL],sbt.internal.util.IMap[K,VR])", "kind" : "abstract def"}, {"label" : "mapValues", "tail" : "(f: ~>[V, V2]): IMap[K, V2]", "member" : "sbt.internal.util.IMap.mapValues", "link" : "sbt\/internal\/util\/IMap.html#mapValues[V2[_]](f:V~>V2):sbt.internal.util.IMap[K,V2]", "kind" : "abstract def"}, {"label" : "mapValue", "tail" : "(k: K[T], init: V[T], f: (V[T]) ⇒ V[T]): IMap[K, V]", "member" : "sbt.internal.util.IMap.mapValue", "link" : "sbt\/internal\/util\/IMap.html#mapValue[T](k:K[T],init:V[T],f:V[T]=>V[T]):sbt.internal.util.IMap[K,V]", "kind" : "abstract def"}, {"label" : "remove", "tail" : "(k: K[T]): IMap[K, V]", "member" : "sbt.internal.util.IMap.remove", "link" : "sbt\/internal\/util\/IMap.html#remove[T](k:K[T]):sbt.internal.util.IMap[K,V]", "kind" : "abstract def"}, {"label" : "put", "tail" : "(k: K[T], v: V[T]): IMap[K, V]", "member" : "sbt.internal.util.IMap.put", "link" : "sbt\/internal\/util\/IMap.html#put[T](k:K[T],v:V[T]):sbt.internal.util.IMap[K,V]", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "sbt.internal.util.RMap.isEmpty", "link" : "sbt\/internal\/util\/IMap.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "values", "tail" : "(): Iterable[V[_]]", "member" : "sbt.internal.util.RMap.values", "link" : "sbt\/internal\/util\/IMap.html#values:Iterable[V[_]]", "kind" : "abstract def"}, {"label" : "keys", "tail" : "(): Iterable[K[_]]", "member" : "sbt.internal.util.RMap.keys", "link" : "sbt\/internal\/util\/IMap.html#keys:Iterable[K[_]]", "kind" : "abstract def"}, {"label" : "toSeq", "tail" : "(): Seq[(K[_], V[_])]", "member" : "sbt.internal.util.RMap.toSeq", "link" : "sbt\/internal\/util\/IMap.html#toSeq:Seq[(K[_],V[_])]", "kind" : "abstract def"}, {"label" : "contains", "tail" : "(k: K[T]): Boolean", "member" : "sbt.internal.util.RMap.contains", "link" : "sbt\/internal\/util\/IMap.html#contains[T](k:K[T]):Boolean", "kind" : "abstract def"}, {"label" : "get", "tail" : "(k: K[T]): Option[V[T]]", "member" : "sbt.internal.util.RMap.get", "link" : "sbt\/internal\/util\/IMap.html#get[T](k:K[T]):Option[V[T]]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(k: K[T]): V[T]", "member" : "sbt.internal.util.RMap.apply", "link" : "sbt\/internal\/util\/IMap.html#apply[T](k:K[T]):V[T]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/internal\/util\/IMap$.html", "members_object" : [{"label" : "empty", "tail" : "(): IMap[K, V]", "member" : "sbt.internal.util.IMap.empty", "link" : "sbt\/internal\/util\/IMap$.html#empty[K[_],V[_]]:sbt.internal.util.IMap[K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/IMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/IMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/IMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/IMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/IMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/IMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/IMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/IMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/IMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/IMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/IMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/IMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/IMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/IMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/IMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/IMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/IMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/IMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/IMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/IMap.html", "kind" : "trait"}, {"name" : "sbt.internal.util.Init", "members_trait" : [{"label" : "KeyedInitialize", "tail" : "", "member" : "sbt.internal.util.Init.KeyedInitialize", "link" : "sbt\/internal\/util\/Init.html#KeyedInitialize[T]extendsInit.this.Keyed[T,T]", "kind" : "trait"}, {"label" : "Keyed", "tail" : "", "member" : "sbt.internal.util.Init.Keyed", "link" : "sbt\/internal\/util\/Init.html#Keyed[S,T]extendsInit.this.Initialize[T]", "kind" : "sealed trait"}, {"label" : "DefaultSetting", "tail" : "", "member" : "sbt.internal.util.Init.DefaultSetting", "link" : "sbt\/internal\/util\/Init.html#DefaultSetting", "kind" : "object"}, {"label" : "Setting", "tail" : "", "member" : "sbt.internal.util.Init.Setting", "link" : "sbt\/internal\/util\/Init.html#Setting[T]extendsInit.this.SettingsDefinition", "kind" : "sealed class"}, {"label" : "SettingList", "tail" : "", "member" : "sbt.internal.util.Init.SettingList", "link" : "sbt\/internal\/util\/Init.html#SettingListextendsInit.this.SettingsDefinition", "kind" : "final class"}, {"label" : "SettingsDefinition", "tail" : "", "member" : "sbt.internal.util.Init.SettingsDefinition", "link" : "sbt\/internal\/util\/Init.html#SettingsDefinitionextendsAnyRef", "kind" : "sealed trait"}, {"label" : "SettingsDefinition", "tail" : "", "member" : "sbt.internal.util.Init.SettingsDefinition", "link" : "sbt\/internal\/util\/Init.html#SettingsDefinition", "kind" : "object"}, {"label" : "Initialize", "tail" : "", "member" : "sbt.internal.util.Init.Initialize", "link" : "sbt\/internal\/util\/Init.html#Initialize", "kind" : "object"}, {"label" : "Initialize", "tail" : "", "member" : "sbt.internal.util.Init.Initialize", "link" : "sbt\/internal\/util\/Init.html#Initialize[T]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "definedAtString", "tail" : "(settings: Seq[Setting[_]]): String", "member" : "sbt.internal.util.Init.definedAtString", "link" : "sbt\/internal\/util\/Init.html#definedAtString(settings:Seq[Init.this.Setting[_]]):String", "kind" : "def"}, {"label" : "flattenLocals", "tail" : "(compiled: CompiledMap): Map[ScopedKey[_], Flattened]", "member" : "sbt.internal.util.Init.flattenLocals", "link" : "sbt\/internal\/util\/Init.html#flattenLocals(compiled:Init.this.CompiledMap):Map[Init.this.ScopedKey[_],Init.this.Flattened]", "kind" : "def"}, {"label" : "Flattened", "tail" : "", "member" : "sbt.internal.util.Init.Flattened", "link" : "sbt\/internal\/util\/Init.html#FlattenedextendsAnyRef", "kind" : "final class"}, {"label" : "Compiled", "tail" : "", "member" : "sbt.internal.util.Init.Compiled", "link" : "sbt\/internal\/util\/Init.html#Compiled[T]extendsAnyRef", "kind" : "final class"}, {"label" : "Uninitialized", "tail" : "(validKeys: Seq[ScopedKey[_]], delegates: (Scope) ⇒ Seq[Scope], keys: Seq[Undefined], runtime: Boolean)(display: Show[ScopedKey[_]]): Uninitialized", "member" : "sbt.internal.util.Init.Uninitialized", "link" : "sbt\/internal\/util\/Init.html#Uninitialized(validKeys:Seq[Init.this.ScopedKey[_]],delegates:Scope=>Seq[Scope],keys:Seq[Init.this.Undefined],runtime:Boolean)(implicitdisplay:sbt.util.Show[Init.this.ScopedKey[_]]):Init.this.Uninitialized", "kind" : "def"}, {"label" : "Undefined", "tail" : "(defining: Setting[_], referencedKey: ScopedKey[_]): Undefined", "member" : "sbt.internal.util.Init.Undefined", "link" : "sbt\/internal\/util\/Init.html#Undefined(defining:Init.this.Setting[_],referencedKey:Init.this.ScopedKey[_]):Init.this.Undefined", "kind" : "def"}, {"label" : "RuntimeUndefined", "tail" : "", "member" : "sbt.internal.util.Init.RuntimeUndefined", "link" : "sbt\/internal\/util\/Init.html#RuntimeUndefinedextendsRuntimeException", "kind" : "final class"}, {"label" : "Undefined", "tail" : "", "member" : "sbt.internal.util.Init.Undefined", "link" : "sbt\/internal\/util\/Init.html#UndefinedextendsAnyRef", "kind" : "final class"}, {"label" : "Uninitialized", "tail" : "", "member" : "sbt.internal.util.Init.Uninitialized", "link" : "sbt\/internal\/util\/Init.html#UninitializedextendsException", "kind" : "final class"}, {"label" : "refinedDistance", "tail" : "(delegates: (Scope) ⇒ Seq[Scope], a: ScopedKey[_], b: ScopedKey[_]): Option[Int]", "member" : "sbt.internal.util.Init.refinedDistance", "link" : "sbt\/internal\/util\/Init.html#refinedDistance(delegates:Scope=>Seq[Scope],a:Init.this.ScopedKey[_],b:Init.this.ScopedKey[_]):Option[Int]", "kind" : "def"}, {"label" : "guessIntendedScope", "tail" : "(validKeys: Seq[ScopedKey[_]], delegates: (Scope) ⇒ Seq[Scope], key: ScopedKey[_]): Option[ScopedKey[_]]", "member" : "sbt.internal.util.Init.guessIntendedScope", "link" : "sbt\/internal\/util\/Init.html#guessIntendedScope(validKeys:Seq[Init.this.ScopedKey[_]],delegates:Scope=>Seq[Scope],key:Init.this.ScopedKey[_]):Option[Init.this.ScopedKey[_]]", "kind" : "def"}, {"label" : "showUndefined", "tail" : "(u: Undefined, validKeys: Seq[ScopedKey[_]], delegates: (Scope) ⇒ Seq[Scope])(display: Show[ScopedKey[_]]): String", "member" : "sbt.internal.util.Init.showUndefined", "link" : "sbt\/internal\/util\/Init.html#showUndefined(u:Init.this.Undefined,validKeys:Seq[Init.this.ScopedKey[_]],delegates:Scope=>Seq[Scope])(implicitdisplay:sbt.util.Show[Init.this.ScopedKey[_]]):String", "kind" : "def"}, {"label" : "delegate", "tail" : "(sMap: ScopedMap)(delegates: (Scope) ⇒ Seq[Scope], display: Show[ScopedKey[_]]): ScopedMap", "member" : "sbt.internal.util.Init.delegate", "link" : "sbt\/internal\/util\/Init.html#delegate(sMap:Init.this.ScopedMap)(implicitdelegates:Scope=>Seq[Scope],implicitdisplay:sbt.util.Show[Init.this.ScopedKey[_]]):Init.this.ScopedMap", "kind" : "def"}, {"label" : "addLocal", "tail" : "(init: Seq[Setting[_]])(scopeLocal: ScopeLocal): Seq[Setting[_]]", "member" : "sbt.internal.util.Init.addLocal", "link" : "sbt\/internal\/util\/Init.html#addLocal(init:Seq[Init.this.Setting[_]])(implicitscopeLocal:Init.this.ScopeLocal):Seq[Init.this.Setting[_]]", "kind" : "def"}, {"label" : "append", "tail" : "(ss: Seq[Setting[T]], s: Setting[T]): Seq[Setting[T]]", "member" : "sbt.internal.util.Init.append", "link" : "sbt\/internal\/util\/Init.html#append[T](ss:Seq[Init.this.Setting[T]],s:Init.this.Setting[T]):Seq[Init.this.Setting[T]]", "kind" : "def"}, {"label" : "add", "tail" : "(m: ScopedMap, s: Setting[T]): ScopedMap", "member" : "sbt.internal.util.Init.add", "link" : "sbt\/internal\/util\/Init.html#add[T](m:Init.this.ScopedMap,s:Init.this.Setting[T]):Init.this.ScopedMap", "kind" : "def"}, {"label" : "grouped", "tail" : "(init: Seq[Setting[_]]): ScopedMap", "member" : "sbt.internal.util.Init.grouped", "link" : "sbt\/internal\/util\/Init.html#grouped(init:Seq[Init.this.Setting[_]]):Init.this.ScopedMap", "kind" : "def"}, {"label" : "compile", "tail" : "(sMap: ScopedMap): CompiledMap", "member" : "sbt.internal.util.Init.compile", "link" : "sbt\/internal\/util\/Init.html#compile(sMap:Init.this.ScopedMap):Init.this.CompiledMap", "kind" : "def"}, {"label" : "sort", "tail" : "(cMap: CompiledMap): Seq[Compiled[_]]", "member" : "sbt.internal.util.Init.sort", "link" : "sbt\/internal\/util\/Init.html#sort(cMap:Init.this.CompiledMap):Seq[Init.this.Compiled[_]]", "kind" : "def"}, {"label" : "make", "tail" : "(init: Seq[Setting[_]])(delegates: (Scope) ⇒ Seq[Scope], scopeLocal: ScopeLocal, display: Show[ScopedKey[_]]): Settings[Scope]", "member" : "sbt.internal.util.Init.make", "link" : "sbt\/internal\/util\/Init.html#make(init:Seq[Init.this.Setting[_]])(implicitdelegates:Scope=>Seq[Scope],implicitscopeLocal:Init.this.ScopeLocal,implicitdisplay:sbt.util.Show[Init.this.ScopedKey[_]]):sbt.internal.util.Settings[Scope]", "kind" : "def"}, {"label" : "compiled", "tail" : "(init: Seq[Setting[_]], actual: Boolean)(delegates: (Scope) ⇒ Seq[Scope], scopeLocal: ScopeLocal, display: Show[ScopedKey[_]]): CompiledMap", "member" : "sbt.internal.util.Init.compiled", "link" : "sbt\/internal\/util\/Init.html#compiled(init:Seq[Init.this.Setting[_]],actual:Boolean)(implicitdelegates:Scope=>Seq[Scope],implicitscopeLocal:Init.this.ScopeLocal,implicitdisplay:sbt.util.Show[Init.this.ScopedKey[_]]):Init.this.CompiledMap", "kind" : "def"}, {"label" : "mapScope", "tail" : "(f: (Scope) ⇒ Scope): MapScoped", "member" : "sbt.internal.util.Init.mapScope", "link" : "sbt\/internal\/util\/Init.html#mapScope(f:Scope=>Scope):Init.this.MapScoped", "kind" : "def"}, {"label" : "asFunction", "tail" : "(s: Settings[Scope]): (ScopedKey[T]) ⇒ T", "member" : "sbt.internal.util.Init.asFunction", "link" : "sbt\/internal\/util\/Init.html#asFunction[T](s:sbt.internal.util.Settings[Scope]):Init.this.ScopedKey[T]=>T", "kind" : "def"}, {"label" : "getValue", "tail" : "(s: Settings[Scope], k: ScopedKey[T]): T", "member" : "sbt.internal.util.Init.getValue", "link" : "sbt\/internal\/util\/Init.html#getValue[T](s:sbt.internal.util.Settings[Scope],k:Init.this.ScopedKey[T]):T", "kind" : "def"}, {"label" : "asTransform", "tail" : "(s: Settings[Scope]): ~>[ScopedKey, Types.Id]", "member" : "sbt.internal.util.Init.asTransform", "link" : "sbt\/internal\/util\/Init.html#asTransform(s:sbt.internal.util.Settings[Scope]):Init.this.ScopedKey~>sbt.internal.util.Types.Id", "kind" : "def"}, {"label" : "empty", "tail" : "(delegates: (Scope) ⇒ Seq[Scope]): Settings[Scope]", "member" : "sbt.internal.util.Init.empty", "link" : "sbt\/internal\/util\/Init.html#empty(implicitdelegates:Scope=>Seq[Scope]):sbt.internal.util.Settings[Scope]", "kind" : "def"}, {"label" : "deriveAllowed", "tail" : "(s: Setting[T], allowDynamic: Boolean): Option[String]", "member" : "sbt.internal.util.Init.deriveAllowed", "link" : "sbt\/internal\/util\/Init.html#deriveAllowed[T](s:Init.this.Setting[T],allowDynamic:Boolean):Option[String]", "kind" : "def"}, {"label" : "derive", "tail" : "(s: Setting[T], allowDynamic: Boolean, filter: (Scope) ⇒ Boolean, trigger: (AttributeKey[_]) ⇒ Boolean, default: Boolean): Setting[T]", "member" : "sbt.internal.util.Init.derive", "link" : "sbt\/internal\/util\/Init.html#derive[T](s:Init.this.Setting[T],allowDynamic:Boolean,filter:Scope=>Boolean,trigger:sbt.internal.util.AttributeKey[_]=>Boolean,default:Boolean):Init.this.Setting[T]", "kind" : "final def"}, {"label" : "uniform", "tail" : "(inputs: Seq[Initialize[S]])(f: (Seq[S]) ⇒ T): Initialize[T]", "member" : "sbt.internal.util.Init.uniform", "link" : "sbt\/internal\/util\/Init.html#uniform[S,T](inputs:Seq[Init.this.Initialize[S]])(f:Seq[S]=>T):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "app", "tail" : "(inputs: K[Initialize])(f: (K[Types.Id]) ⇒ T)(alist: AList[K]): Initialize[T]", "member" : "sbt.internal.util.Init.app", "link" : "sbt\/internal\/util\/Init.html#app[K[L[x]],T](inputs:K[Init.this.Initialize])(f:K[sbt.internal.util.Types.Id]=>T)(implicitalist:sbt.internal.util.AList[K]):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "map", "tail" : "(in: Initialize[S])(f: (S) ⇒ T): Initialize[T]", "member" : "sbt.internal.util.Init.map", "link" : "sbt\/internal\/util\/Init.html#map[S,T](in:Init.this.Initialize[S])(f:S=>T):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "bind", "tail" : "(in: Initialize[S])(f: (S) ⇒ Initialize[T]): Initialize[T]", "member" : "sbt.internal.util.Init.bind", "link" : "sbt\/internal\/util\/Init.html#bind[S,T](in:Init.this.Initialize[S])(f:S=>Init.this.Initialize[T]):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "update", "tail" : "(key: ScopedKey[T])(f: (T) ⇒ T): Setting[T]", "member" : "sbt.internal.util.Init.update", "link" : "sbt\/internal\/util\/Init.html#update[T](key:Init.this.ScopedKey[T])(f:T=>T):Init.this.Setting[T]", "kind" : "def"}, {"label" : "optional", "tail" : "(i: Initialize[T])(f: (Option[T]) ⇒ U): Initialize[U]", "member" : "sbt.internal.util.Init.optional", "link" : "sbt\/internal\/util\/Init.html#optional[T,U](i:Init.this.Initialize[T])(f:Option[T]=>U):Init.this.Initialize[U]", "kind" : "def"}, {"label" : "pure", "tail" : "(value: () ⇒ T): Initialize[T]", "member" : "sbt.internal.util.Init.pure", "link" : "sbt\/internal\/util\/Init.html#pure[T](value:()=>T):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "value", "tail" : "(value: ⇒ T): Initialize[T]", "member" : "sbt.internal.util.Init.value", "link" : "sbt\/internal\/util\/Init.html#value[T](value:=>T):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "valueStrict", "tail" : "(value: T): Initialize[T]", "member" : "sbt.internal.util.Init.valueStrict", "link" : "sbt\/internal\/util\/Init.html#valueStrict[T](value:T):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "setting", "tail" : "(key: ScopedKey[T], init: Initialize[T], pos: SourcePosition): Setting[T]", "member" : "sbt.internal.util.Init.setting", "link" : "sbt\/internal\/util\/Init.html#setting[T](key:Init.this.ScopedKey[T],init:Init.this.Initialize[T],pos:sbt.internal.util.SourcePosition):Init.this.Setting[T]", "kind" : "def"}, {"label" : "capturedTransformations", "tail" : ": Initialize[~>[Initialize, Initialize]]", "member" : "sbt.internal.util.Init.capturedTransformations", "link" : "sbt\/internal\/util\/Init.html#capturedTransformations:Init.this.Initialize[Init.this.Initialize~>Init.this.Initialize]", "kind" : "lazy val"}, {"label" : "MapConstant", "tail" : "", "member" : "sbt.internal.util.Init.MapConstant", "link" : "sbt\/internal\/util\/Init.html#MapConstant=Init.this.ScopedKey~>Option", "kind" : "type"}, {"label" : "ScopeLocal", "tail" : "", "member" : "sbt.internal.util.Init.ScopeLocal", "link" : "sbt\/internal\/util\/Init.html#ScopeLocal=Init.this.ScopedKey[_]=>Seq[Init.this.Setting[_]]", "kind" : "type"}, {"label" : "ValidateRef", "tail" : "", "member" : "sbt.internal.util.Init.ValidateRef", "link" : "sbt\/internal\/util\/Init.html#ValidateRef=Init.this.ScopedKey~>Init.this.ValidatedRef", "kind" : "type"}, {"label" : "ValidatedInit", "tail" : "", "member" : "sbt.internal.util.Init.ValidatedInit", "link" : "sbt\/internal\/util\/Init.html#ValidatedInit[T]=Either[Seq[Init.this.Undefined],Init.this.Initialize[T]]", "kind" : "type"}, {"label" : "ValidatedRef", "tail" : "", "member" : "sbt.internal.util.Init.ValidatedRef", "link" : "sbt\/internal\/util\/Init.html#ValidatedRef[T]=Either[Init.this.Undefined,Init.this.ScopedKey[T]]", "kind" : "type"}, {"label" : "MapScoped", "tail" : "", "member" : "sbt.internal.util.Init.MapScoped", "link" : "sbt\/internal\/util\/Init.html#MapScoped=Init.this.ScopedKey~>Init.this.ScopedKey", "kind" : "type"}, {"label" : "CompiledMap", "tail" : "", "member" : "sbt.internal.util.Init.CompiledMap", "link" : "sbt\/internal\/util\/Init.html#CompiledMap=Map[Init.this.ScopedKey[_],Init.this.Compiled[_]]", "kind" : "type"}, {"label" : "ScopedMap", "tail" : "", "member" : "sbt.internal.util.Init.ScopedMap", "link" : "sbt\/internal\/util\/Init.html#ScopedMap=sbt.internal.util.IMap[Init.this.ScopedKey,Init.this.SettingSeq]", "kind" : "type"}, {"label" : "SettingSeq", "tail" : "", "member" : "sbt.internal.util.Init.SettingSeq", "link" : "sbt\/internal\/util\/Init.html#SettingSeq[T]=Seq[Init.this.Setting[T]]", "kind" : "type"}, {"label" : "ScopedKey", "tail" : "", "member" : "sbt.internal.util.Init.ScopedKey", "link" : "sbt\/internal\/util\/Init.html#ScopedKey[T]extendsInit.this.KeyedInitialize[T]withProductwithSerializable", "kind" : "sealed case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Init.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Init.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Init.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Init.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Init.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Init.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Init.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Init.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Init.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Init.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Init.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Init.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/Init.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Init.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/Init.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/Init.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Init.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Init.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Init.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "showFullKey", "tail" : "(): Show[ScopedKey[_]]", "member" : "sbt.internal.util.Init.showFullKey", "link" : "sbt\/internal\/util\/Init.html#showFullKey:sbt.util.Show[Init.this.ScopedKey[_]]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/internal\/util\/Init.html", "kind" : "trait"}, {"name" : "sbt.internal.util.JLine", "shortDescription" : "", "members_class" : [{"label" : "readLine", "tail" : "(prompt: String, mask: Option[Char]): Option[String]", "member" : "sbt.internal.util.JLine.readLine", "link" : "sbt\/internal\/util\/JLine.html#readLine(prompt:String,mask:Option[Char]):Option[String]", "kind" : "def"}, {"label" : "in", "tail" : ": InputStream", "member" : "sbt.internal.util.JLine.in", "link" : "sbt\/internal\/util\/JLine.html#in:java.io.InputStream", "kind" : "lazy val"}, {"member" : "sbt.internal.util.JLine#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/JLine.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/JLine.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/JLine.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/JLine.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/JLine.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/JLine.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/JLine.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/JLine.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/JLine.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/JLine.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/JLine.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/JLine.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/JLine.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/JLine.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/JLine.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/JLine.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/JLine.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/JLine.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/JLine.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "injectThreadSleep", "tail" : "(): Boolean", "member" : "sbt.internal.util.JLine.injectThreadSleep", "link" : "sbt\/internal\/util\/JLine.html#injectThreadSleep:Boolean", "kind" : "abstract def"}, {"label" : "reader", "tail" : "(): ConsoleReader", "member" : "sbt.internal.util.JLine.reader", "link" : "sbt\/internal\/util\/JLine.html#reader:jline.console.ConsoleReader", "kind" : "abstract def"}, {"label" : "handleCONT", "tail" : "(): Boolean", "member" : "sbt.internal.util.JLine.handleCONT", "link" : "sbt\/internal\/util\/JLine.html#handleCONT:Boolean", "kind" : "abstract def"}], "class" : "sbt\/internal\/util\/JLine.html", "kind" : "class"}, {"name" : "sbt.internal.util.KCons", "shortDescription" : "", "members_case class" : [{"label" : "foldr", "tail" : "(f: (M[_], B) ⇒ B, init: B): B", "member" : "sbt.internal.util.KCons.foldr", "link" : "sbt\/internal\/util\/KCons.html#foldr[B](f:(M[_],B)=>B,init:B):B", "kind" : "def"}, {"label" : ":^:", "tail" : "(h: N[A]): KCons[A, KCons[H, T, M], N]", "member" : "sbt.internal.util.KCons.:^:", "link" : "sbt\/internal\/util\/KCons.html#:^:[A,N[x]>:M[x]](h:N[A]):sbt.internal.util.KCons[A,sbt.internal.util.KCons[H,T,M],N]", "kind" : "def"}, {"label" : "traverse", "tail" : "(f: ~>[M, [T]N[P[T]]])(np: Applicative[N]): N[Transform[P]]", "member" : "sbt.internal.util.KCons.traverse", "link" : "sbt\/internal\/util\/KCons.html#traverse[N[_],P[_]](f:M~>[T]N[P[T]])(implicitnp:sbt.internal.util.Classes.Applicative[N]):N[KCons.this.Transform[P]]", "kind" : "def"}, {"label" : "apply", "tail" : "(f: (Transform[Types.Id]) ⇒ Z)(ap: Applicative[N]): N[Z]", "member" : "sbt.internal.util.KCons.apply", "link" : "sbt\/internal\/util\/KCons.html#apply[N[x]>:M[x],Z](f:KCons.this.Transform[sbt.internal.util.Types.Id]=>Z)(implicitap:sbt.internal.util.Classes.Applicative[N]):N[Z]", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[M[_]]", "member" : "sbt.internal.util.KCons.toList", "link" : "sbt\/internal\/util\/KCons.html#toList:List[M[_]]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: ~>[M, N]): KCons[H, T.Transform[N], N]", "member" : "sbt.internal.util.KCons.transform", "link" : "sbt\/internal\/util\/KCons.html#transform[N[_]](f:M~>N):sbt.internal.util.KCons[H,KCons.this.tail.Transform[N],N]", "kind" : "def"}, {"label" : "Transform", "tail" : "", "member" : "sbt.internal.util.KCons.Transform", "link" : "sbt\/internal\/util\/KCons.html#Transform[N[_]]=sbt.internal.util.KCons[H,KCons.this.tail.Transform[N],N]", "kind" : "final type"}, {"member" : "sbt.internal.util.KCons#<init>", "error" : "unsupported entity"}, {"label" : "tail", "tail" : ": T", "member" : "sbt.internal.util.KCons.tail", "link" : "sbt\/internal\/util\/KCons.html#tail:T", "kind" : "val"}, {"label" : "head", "tail" : ": M[H]", "member" : "sbt.internal.util.KCons.head", "link" : "sbt\/internal\/util\/KCons.html#head:M[H]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/KCons.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/KCons.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/KCons.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/KCons.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/KCons.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/KCons.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/KCons.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/KCons.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/KCons.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/KCons.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/KCons.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/KCons.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/KCons.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/KCons.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/KCons.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/KCons.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/util\/KCons.html", "kind" : "case class"}, {"name" : "sbt.internal.util.KList", "members_trait" : [{"label" : "foldr", "tail" : "(f: (M[_], B) ⇒ B, init: B): B", "member" : "sbt.internal.util.KList.foldr", "link" : "sbt\/internal\/util\/KList.html#foldr[B](f:(M[_],B)=>B,init:B):B", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/KList.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/KList.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/KList.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/KList.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/KList.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/KList.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/KList.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/KList.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/KList.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/KList.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/KList.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/KList.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/KList.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/KList.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/KList.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/KList.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/KList.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/KList.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/KList.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toList", "tail" : "(): List[M[_]]", "member" : "sbt.internal.util.KList.toList", "link" : "sbt\/internal\/util\/KList.html#toList:List[M[_]]", "kind" : "abstract def"}, {"label" : "traverse", "tail" : "(f: ~>[M, [T]N[P[T]]])(np: Applicative[N]): N[Transform[P]]", "member" : "sbt.internal.util.KList.traverse", "link" : "sbt\/internal\/util\/KList.html#traverse[N[_],P[_]](f:M~>[T]N[P[T]])(implicitnp:sbt.internal.util.Classes.Applicative[N]):N[KList.this.Transform[P]]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(f: (Transform[Types.Id]) ⇒ Z)(ap: Applicative[N]): N[Z]", "member" : "sbt.internal.util.KList.apply", "link" : "sbt\/internal\/util\/KList.html#apply[N[x]>:M[x],Z](f:KList.this.Transform[sbt.internal.util.Types.Id]=>Z)(implicitap:sbt.internal.util.Classes.Applicative[N]):N[Z]", "kind" : "abstract def"}, {"label" : "transform", "tail" : "(f: ~>[M, N]): Transform[N]", "member" : "sbt.internal.util.KList.transform", "link" : "sbt\/internal\/util\/KList.html#transform[N[_]](f:M~>N):KList.this.Transform[N]", "kind" : "abstract def"}, {"member" : "sbt.internal.util.KList.Transform", "error" : "unsupported entity"}], "shortDescription" : "Heterogeneous list with each element having type M[T] for some type T.", "trait" : "sbt\/internal\/util\/KList.html", "kind" : "trait"}, {"name" : "sbt.internal.util.KNil", "shortDescription" : "", "object" : "sbt\/internal\/util\/KNil$.html", "members_class" : [{"label" : "traverse", "tail" : "(f: ~>[Nothing, [T]N[P[T]]])(np: Applicative[N]): N[KNil]", "member" : "sbt.internal.util.KNil.traverse", "link" : "sbt\/internal\/util\/KNil.html#traverse[N[_],P[_]](f:Nothing~>[T]N[P[T]])(implicitnp:sbt.internal.util.Classes.Applicative[N]):N[sbt.internal.util.KNil]", "kind" : "final def"}, {"label" : "apply", "tail" : "(f: (KNil) ⇒ Z)(ap: Applicative[N]): N[Z]", "member" : "sbt.internal.util.KNil.apply", "link" : "sbt\/internal\/util\/KNil.html#apply[N[x],Z](f:sbt.internal.util.KNil=>Z)(implicitap:sbt.internal.util.Classes.Applicative[N]):N[Z]", "kind" : "final def"}, {"label" : "toList", "tail" : "(): Nil.type", "member" : "sbt.internal.util.KNil.toList", "link" : "sbt\/internal\/util\/KNil.html#toList:scala.collection.immutable.Nil.type", "kind" : "final def"}, {"label" : "transform", "tail" : "(f: ~>[Nothing, N]): Transform[N]", "member" : "sbt.internal.util.KNil.transform", "link" : "sbt\/internal\/util\/KNil.html#transform[N[_]](f:Nothing~>N):KNil.this.Transform[N]", "kind" : "final def"}, {"label" : "Transform", "tail" : "", "member" : "sbt.internal.util.KNil.Transform", "link" : "sbt\/internal\/util\/KNil.html#Transform[N[_]]=sbt.internal.util.KNil", "kind" : "final type"}, {"label" : "foldr", "tail" : "(f: (Nothing[], B) ⇒ B, init: B): B", "member" : "sbt.internal.util.KList.foldr", "link" : "sbt\/internal\/util\/KNil.html#foldr[B](f:(M[_],B)=>B,init:B):B", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/KNil.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/KNil.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/KNil.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/KNil.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/KNil.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/KNil.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/KNil.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/KNil.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/KNil.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/KNil.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/KNil.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/KNil.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/KNil.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/KNil.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/KNil.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/KNil.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/KNil.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/KNil.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/KNil.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : ":^:", "tail" : "(h: M[H]): KCons[H, KNil, M]", "member" : "sbt.internal.util.KNil.:^:", "link" : "sbt\/internal\/util\/KNil$.html#:^:[M[_],H](h:M[H]):sbt.internal.util.KCons[H,sbt.internal.util.KNil,M]", "kind" : "def"}, {"label" : "traverse", "tail" : "(f: ~>[Nothing, [T]N[P[T]]])(np: Applicative[N]): N[KNil]", "member" : "sbt.internal.util.KNil.traverse", "link" : "sbt\/internal\/util\/KNil$.html#traverse[N[_],P[_]](f:Nothing~>[T]N[P[T]])(implicitnp:sbt.internal.util.Classes.Applicative[N]):N[sbt.internal.util.KNil]", "kind" : "final def"}, {"label" : "apply", "tail" : "(f: (KNil) ⇒ Z)(ap: Applicative[N]): N[Z]", "member" : "sbt.internal.util.KNil.apply", "link" : "sbt\/internal\/util\/KNil$.html#apply[N[x],Z](f:sbt.internal.util.KNil=>Z)(implicitap:sbt.internal.util.Classes.Applicative[N]):N[Z]", "kind" : "final def"}, {"label" : "toList", "tail" : "(): Nil.type", "member" : "sbt.internal.util.KNil.toList", "link" : "sbt\/internal\/util\/KNil$.html#toList:scala.collection.immutable.Nil.type", "kind" : "final def"}, {"label" : "transform", "tail" : "(f: ~>[Nothing, N]): Transform[N]", "member" : "sbt.internal.util.KNil.transform", "link" : "sbt\/internal\/util\/KNil$.html#transform[N[_]](f:Nothing~>N):KNil.this.Transform[N]", "kind" : "final def"}, {"label" : "Transform", "tail" : "", "member" : "sbt.internal.util.KNil.Transform", "link" : "sbt\/internal\/util\/KNil$.html#Transform[N[_]]=sbt.internal.util.KNil", "kind" : "final type"}, {"label" : "foldr", "tail" : "(f: (Nothing[], B) ⇒ B, init: B): B", "member" : "sbt.internal.util.KList.foldr", "link" : "sbt\/internal\/util\/KNil$.html#foldr[B](f:(M[_],B)=>B,init:B):B", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/KNil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/KNil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/KNil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/KNil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/KNil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/KNil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/KNil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/KNil$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/KNil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/KNil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/KNil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/KNil$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/KNil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/KNil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/KNil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/KNil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/KNil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/util\/KNil.html", "kind" : "class"}, {"name" : "sbt.internal.util.LineReader", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/LineReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/LineReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/LineReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/LineReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/LineReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/LineReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/LineReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/LineReader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/LineReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/LineReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/LineReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/LineReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/LineReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/LineReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/LineReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/LineReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/LineReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/LineReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/LineReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "readLine", "tail" : "(prompt: String, mask: Option[Char]): Option[String]", "member" : "sbt.internal.util.LineReader.readLine", "link" : "sbt\/internal\/util\/LineReader.html#readLine(prompt:String,mask:Option[Char]):Option[String]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/internal\/util\/LineReader.html", "kind" : "trait"}, {"name" : "sbt.internal.util.Param", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Param.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Param.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Param.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Param.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Param.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Param.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Param.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Param.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Param.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Param.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Param.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Param.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/Param.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Param.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/Param.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/Param.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Param.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Param.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Param.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "ret", "tail" : "(): B[T]", "member" : "sbt.internal.util.Param.ret", "link" : "sbt\/internal\/util\/Param.html#ret:B[Param.this.T]", "kind" : "abstract def"}, {"label" : "ret", "tail" : "(out: B[T]): Unit", "member" : "sbt.internal.util.Param.ret", "link" : "sbt\/internal\/util\/Param.html#ret(out:B[Param.this.T]):Unit", "kind" : "abstract def"}, {"label" : "in", "tail" : "(): A[T]", "member" : "sbt.internal.util.Param.in", "link" : "sbt\/internal\/util\/Param.html#in:A[Param.this.T]", "kind" : "abstract def"}, {"member" : "sbt.internal.util.Param.T", "error" : "unsupported entity"}], "shortDescription" : "", "object" : "sbt\/internal\/util\/Param$.html", "members_object" : [{"label" : "pToT", "tail" : "(p: (Param[A, B]) ⇒ Unit): ~>[A, B]", "member" : "sbt.internal.util.Param.pToT", "link" : "sbt\/internal\/util\/Param$.html#pToT[A[_],B[_]](p:sbt.internal.util.Param[A,B]=>Unit):A~>B", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Param$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Param$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Param$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Param$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Param$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Param$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Param$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Param$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Param$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Param$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Param$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Param$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/Param$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Param$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/Param$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/Param$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Param$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Param$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Param$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/Param.html", "kind" : "trait"}, {"name" : "sbt.internal.util.PMap", "members_trait" : [{"label" : "TPair", "tail" : "", "member" : "sbt.internal.util.RMap.TPair", "link" : "sbt\/internal\/util\/RMap.html#TPair[T]extendsProductwithSerializable", "kind" : "sealed case class"}, {"label" : "toTypedSeq", "tail" : "(): Seq[TPair[_]]", "member" : "sbt.internal.util.RMap.toTypedSeq", "link" : "sbt\/internal\/util\/PMap.html#toTypedSeq:Seq[RMap.this.TPair[_]]", "kind" : "def"}, {"label" : "fn", "tail" : "(): (K[T]) ⇒ V[T]", "member" : "sbt.internal.util.~>.fn", "link" : "sbt\/internal\/util\/PMap.html#fn[T]:A[T]=>B[T]", "kind" : "final def"}, {"label" : "∙", "tail" : "(g: (C) ⇒ D)(ev: <:<[D, K[D]]): (C) ⇒ V[D]", "member" : "sbt.internal.util.~>.∙", "link" : "sbt\/internal\/util\/PMap.html#∙[C,D](g:C=>D)(implicitev:D<:<A[D]):C=>B[D]", "kind" : "final def"}, {"label" : "∙", "tail" : "(g: ~>[C, K]): ~>[C, V]", "member" : "sbt.internal.util.~>.∙", "link" : "sbt\/internal\/util\/PMap.html#∙[C[_]](g:C~>A):C~>B", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/PMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/PMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/PMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/PMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/PMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/PMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/PMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/PMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/PMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/PMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/PMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/PMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/PMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/PMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/PMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/PMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/PMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/PMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/PMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapValue", "tail" : "(k: K[T], init: V[T], f: (V[T]) ⇒ V[T]): V[T]", "member" : "sbt.internal.util.PMap.mapValue", "link" : "sbt\/internal\/util\/PMap.html#mapValue[T](k:K[T],init:V[T],f:V[T]=>V[T]):V[T]", "kind" : "abstract def"}, {"label" : "getOrUpdate", "tail" : "(k: K[T], make: ⇒ V[T]): V[T]", "member" : "sbt.internal.util.PMap.getOrUpdate", "link" : "sbt\/internal\/util\/PMap.html#getOrUpdate[T](k:K[T],make:=>V[T]):V[T]", "kind" : "abstract def"}, {"label" : "remove", "tail" : "(k: K[T]): Option[V[T]]", "member" : "sbt.internal.util.PMap.remove", "link" : "sbt\/internal\/util\/PMap.html#remove[T](k:K[T]):Option[V[T]]", "kind" : "abstract def"}, {"label" : "update", "tail" : "(k: K[T], v: V[T]): Unit", "member" : "sbt.internal.util.PMap.update", "link" : "sbt\/internal\/util\/PMap.html#update[T](k:K[T],v:V[T]):Unit", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "sbt.internal.util.RMap.isEmpty", "link" : "sbt\/internal\/util\/PMap.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "values", "tail" : "(): Iterable[V[_]]", "member" : "sbt.internal.util.RMap.values", "link" : "sbt\/internal\/util\/PMap.html#values:Iterable[V[_]]", "kind" : "abstract def"}, {"label" : "keys", "tail" : "(): Iterable[K[_]]", "member" : "sbt.internal.util.RMap.keys", "link" : "sbt\/internal\/util\/PMap.html#keys:Iterable[K[_]]", "kind" : "abstract def"}, {"label" : "toSeq", "tail" : "(): Seq[(K[_], V[_])]", "member" : "sbt.internal.util.RMap.toSeq", "link" : "sbt\/internal\/util\/PMap.html#toSeq:Seq[(K[_],V[_])]", "kind" : "abstract def"}, {"label" : "contains", "tail" : "(k: K[T]): Boolean", "member" : "sbt.internal.util.RMap.contains", "link" : "sbt\/internal\/util\/PMap.html#contains[T](k:K[T]):Boolean", "kind" : "abstract def"}, {"label" : "get", "tail" : "(k: K[T]): Option[V[T]]", "member" : "sbt.internal.util.RMap.get", "link" : "sbt\/internal\/util\/PMap.html#get[T](k:K[T]):Option[V[T]]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(k: K[T]): V[T]", "member" : "sbt.internal.util.RMap.apply", "link" : "sbt\/internal\/util\/PMap.html#apply[T](k:K[T]):V[T]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/internal\/util\/PMap$.html", "members_object" : [{"label" : "empty", "tail" : "(): PMap[K, V]", "member" : "sbt.internal.util.PMap.empty", "link" : "sbt\/internal\/util\/PMap$.html#empty[K[_],V[_]]:sbt.internal.util.PMap[K,V]", "kind" : "def"}, {"label" : "toFunction", "tail" : "(map: PMap[K, V]): (K[_]) ⇒ V[_]", "member" : "sbt.internal.util.PMap.toFunction", "link" : "sbt\/internal\/util\/PMap$.html#toFunction[K[_],V[_]](map:sbt.internal.util.PMap[K,V]):K[_]=>V[_]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/PMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/PMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/PMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/PMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/PMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/PMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/PMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/PMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/PMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/PMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/PMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/PMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/PMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/PMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/PMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/PMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/PMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/PMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/PMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/PMap.html", "kind" : "trait"}, {"name" : "sbt.internal.util.RMap", "members_trait" : [{"label" : "TPair", "tail" : "", "member" : "sbt.internal.util.RMap.TPair", "link" : "sbt\/internal\/util\/RMap.html#TPair[T]extendsProductwithSerializable", "kind" : "sealed case class"}, {"label" : "toTypedSeq", "tail" : "(): Seq[TPair[_]]", "member" : "sbt.internal.util.RMap.toTypedSeq", "link" : "sbt\/internal\/util\/RMap.html#toTypedSeq:Seq[RMap.this.TPair[_]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/RMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/RMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/RMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/RMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/RMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/RMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/RMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/RMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/RMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/RMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/RMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/RMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/RMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/RMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/RMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/RMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/RMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/RMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/RMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "sbt.internal.util.RMap.isEmpty", "link" : "sbt\/internal\/util\/RMap.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "values", "tail" : "(): Iterable[V[_]]", "member" : "sbt.internal.util.RMap.values", "link" : "sbt\/internal\/util\/RMap.html#values:Iterable[V[_]]", "kind" : "abstract def"}, {"label" : "keys", "tail" : "(): Iterable[K[_]]", "member" : "sbt.internal.util.RMap.keys", "link" : "sbt\/internal\/util\/RMap.html#keys:Iterable[K[_]]", "kind" : "abstract def"}, {"label" : "toSeq", "tail" : "(): Seq[(K[_], V[_])]", "member" : "sbt.internal.util.RMap.toSeq", "link" : "sbt\/internal\/util\/RMap.html#toSeq:Seq[(K[_],V[_])]", "kind" : "abstract def"}, {"label" : "contains", "tail" : "(k: K[T]): Boolean", "member" : "sbt.internal.util.RMap.contains", "link" : "sbt\/internal\/util\/RMap.html#contains[T](k:K[T]):Boolean", "kind" : "abstract def"}, {"label" : "get", "tail" : "(k: K[T]): Option[V[T]]", "member" : "sbt.internal.util.RMap.get", "link" : "sbt\/internal\/util\/RMap.html#get[T](k:K[T]):Option[V[T]]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(k: K[T]): V[T]", "member" : "sbt.internal.util.RMap.apply", "link" : "sbt\/internal\/util\/RMap.html#apply[T](k:K[T]):V[T]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/internal\/util\/RMap.html", "kind" : "trait"}, {"name" : "sbt.internal.util.ScalaKeywords", "shortDescription" : "", "object" : "sbt\/internal\/util\/ScalaKeywords$.html", "members_object" : [{"label" : "values", "tail" : ": Set[String]", "member" : "sbt.internal.util.ScalaKeywords.values", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#values:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/ScalaKeywords$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/ScalaKeywords$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.Settings", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Settings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Settings.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Settings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Settings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Settings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Settings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Settings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Settings.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Settings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Settings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Settings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Settings.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/Settings.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Settings.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/Settings.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/Settings.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Settings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Settings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Settings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "set", "tail" : "(scope: Scope, key: AttributeKey[T], value: T): Settings[Scope]", "member" : "sbt.internal.util.Settings.set", "link" : "sbt\/internal\/util\/Settings.html#set[T](scope:Scope,key:sbt.internal.util.AttributeKey[T],value:T):sbt.internal.util.Settings[Scope]", "kind" : "abstract def"}, {"label" : "getDirect", "tail" : "(scope: Scope, key: AttributeKey[T]): Option[T]", "member" : "sbt.internal.util.Settings.getDirect", "link" : "sbt\/internal\/util\/Settings.html#getDirect[T](scope:Scope,key:sbt.internal.util.AttributeKey[T]):Option[T]", "kind" : "abstract def"}, {"label" : "get", "tail" : "(scope: Scope, key: AttributeKey[T]): Option[T]", "member" : "sbt.internal.util.Settings.get", "link" : "sbt\/internal\/util\/Settings.html#get[T](scope:Scope,key:sbt.internal.util.AttributeKey[T]):Option[T]", "kind" : "abstract def"}, {"label" : "allKeys", "tail" : "(f: (Scope, AttributeKey[_]) ⇒ T): Seq[T]", "member" : "sbt.internal.util.Settings.allKeys", "link" : "sbt\/internal\/util\/Settings.html#allKeys[T](f:(Scope,sbt.internal.util.AttributeKey[_])=>T):Seq[T]", "kind" : "abstract def"}, {"label" : "definingScope", "tail" : "(scope: Scope, key: AttributeKey[_]): Option[Scope]", "member" : "sbt.internal.util.Settings.definingScope", "link" : "sbt\/internal\/util\/Settings.html#definingScope(scope:Scope,key:sbt.internal.util.AttributeKey[_]):Option[Scope]", "kind" : "abstract def"}, {"label" : "scopes", "tail" : "(): Set[Scope]", "member" : "sbt.internal.util.Settings.scopes", "link" : "sbt\/internal\/util\/Settings.html#scopes:Set[Scope]", "kind" : "abstract def"}, {"label" : "keys", "tail" : "(scope: Scope): Set[AttributeKey[_]]", "member" : "sbt.internal.util.Settings.keys", "link" : "sbt\/internal\/util\/Settings.html#keys(scope:Scope):Set[sbt.internal.util.AttributeKey[_]]", "kind" : "abstract def"}, {"label" : "data", "tail" : "(): Map[Scope, AttributeMap]", "member" : "sbt.internal.util.Settings.data", "link" : "sbt\/internal\/util\/Settings.html#data:Map[Scope,sbt.internal.util.AttributeMap]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/internal\/util\/Settings.html", "kind" : "trait"}, {"name" : "sbt.internal.util.Signals", "shortDescription" : "", "object" : "sbt\/internal\/util\/Signals$.html", "members_object" : [{"label" : "supported", "tail" : "(signal: String): Boolean", "member" : "sbt.internal.util.Signals.supported", "link" : "sbt\/internal\/util\/Signals$.html#supported(signal:String):Boolean", "kind" : "def"}, {"label" : "register", "tail" : "(handler: () ⇒ Unit, signal: String): Registration", "member" : "sbt.internal.util.Signals.register", "link" : "sbt\/internal\/util\/Signals$.html#register(handler:()=>Unit,signal:String):sbt.internal.util.Signals.Registration", "kind" : "def"}, {"label" : "Registration", "tail" : "", "member" : "sbt.internal.util.Signals.Registration", "link" : "sbt\/internal\/util\/Signals$.html#RegistrationextendsAnyRef", "kind" : "sealed trait"}, {"label" : "withHandler", "tail" : "(handler: () ⇒ Unit, signal: String)(action: () ⇒ T): T", "member" : "sbt.internal.util.Signals.withHandler", "link" : "sbt\/internal\/util\/Signals$.html#withHandler[T](handler:()=>Unit,signal:String)(action:()=>T):T", "kind" : "def"}, {"label" : "INT", "tail" : ": String", "member" : "sbt.internal.util.Signals.INT", "link" : "sbt\/internal\/util\/Signals$.html#INT:String", "kind" : "val"}, {"label" : "CONT", "tail" : ": String", "member" : "sbt.internal.util.Signals.CONT", "link" : "sbt\/internal\/util\/Signals$.html#CONT:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Signals$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Signals$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Signals$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Signals$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Signals$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Signals$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Signals$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Signals$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Signals$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Signals$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Signals$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Signals$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/Signals$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Signals$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/Signals$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/Signals$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Signals$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Signals$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Signals$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.SimpleReader", "shortDescription" : "", "object" : "sbt\/internal\/util\/SimpleReader$.html", "members_class" : [{"label" : "reader", "tail" : ": ConsoleReader", "member" : "sbt.internal.util.SimpleReader.reader", "link" : "sbt\/internal\/util\/SimpleReader.html#reader:jline.console.ConsoleReader", "kind" : "val"}, {"label" : "injectThreadSleep", "tail" : ": Boolean", "member" : "sbt.internal.util.SimpleReader.injectThreadSleep", "link" : "sbt\/internal\/util\/SimpleReader.html#injectThreadSleep:Boolean", "kind" : "val"}, {"label" : "handleCONT", "tail" : ": Boolean", "member" : "sbt.internal.util.SimpleReader.handleCONT", "link" : "sbt\/internal\/util\/SimpleReader.html#handleCONT:Boolean", "kind" : "val"}, {"label" : "readLine", "tail" : "(prompt: String, mask: Option[Char]): Option[String]", "member" : "sbt.internal.util.JLine.readLine", "link" : "sbt\/internal\/util\/SimpleReader.html#readLine(prompt:String,mask:Option[Char]):Option[String]", "kind" : "def"}, {"label" : "in", "tail" : ": InputStream", "member" : "sbt.internal.util.JLine.in", "link" : "sbt\/internal\/util\/SimpleReader.html#in:java.io.InputStream", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/SimpleReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/SimpleReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/SimpleReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/SimpleReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/SimpleReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/SimpleReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/SimpleReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/SimpleReader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/SimpleReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/SimpleReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/SimpleReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/SimpleReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/SimpleReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/SimpleReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/SimpleReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/SimpleReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/SimpleReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/SimpleReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/SimpleReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "reader", "tail" : ": ConsoleReader", "member" : "sbt.internal.util.SimpleReader.reader", "link" : "sbt\/internal\/util\/SimpleReader$.html#reader:jline.console.ConsoleReader", "kind" : "val"}, {"label" : "injectThreadSleep", "tail" : ": Boolean", "member" : "sbt.internal.util.SimpleReader.injectThreadSleep", "link" : "sbt\/internal\/util\/SimpleReader$.html#injectThreadSleep:Boolean", "kind" : "val"}, {"label" : "handleCONT", "tail" : ": Boolean", "member" : "sbt.internal.util.SimpleReader.handleCONT", "link" : "sbt\/internal\/util\/SimpleReader$.html#handleCONT:Boolean", "kind" : "val"}, {"label" : "readLine", "tail" : "(prompt: String, mask: Option[Char]): Option[String]", "member" : "sbt.internal.util.JLine.readLine", "link" : "sbt\/internal\/util\/SimpleReader$.html#readLine(prompt:String,mask:Option[Char]):Option[String]", "kind" : "def"}, {"label" : "in", "tail" : ": InputStream", "member" : "sbt.internal.util.JLine.in", "link" : "sbt\/internal\/util\/SimpleReader$.html#in:java.io.InputStream", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/SimpleReader$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/SimpleReader$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/SimpleReader$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/SimpleReader$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/SimpleReader$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/SimpleReader$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/SimpleReader$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/SimpleReader$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/SimpleReader$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/SimpleReader$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/SimpleReader$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/SimpleReader$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/SimpleReader$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/SimpleReader$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/SimpleReader$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/SimpleReader$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/SimpleReader$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/SimpleReader$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/SimpleReader$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/util\/SimpleReader.html", "kind" : "class"}, {"name" : "sbt.internal.util.TypeFunctions", "members_trait" : [{"label" : "~>|", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.~>|", "link" : "sbt\/internal\/util\/TypeFunctions.html#~>|[A[_],B[_]]=A~>[T]Option[B[T]]", "kind" : "type"}, {"label" : "Endo", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Endo", "link" : "sbt\/internal\/util\/TypeFunctions.html#Endo[T]=T=>T", "kind" : "type"}, {"label" : "toFn1", "tail" : "(f: (A) ⇒ B): Fn1[A, B]", "member" : "sbt.internal.util.TypeFunctions.toFn1", "link" : "sbt\/internal\/util\/TypeFunctions.html#toFn1[A,B](f:A=>B):sbt.internal.util.Fn1[A,B]", "kind" : "implicit def"}, {"label" : "nestCon", "tail" : "(f: ~>[M, N]): ~>[[T]M[G[T]], [T]N[G[T]]]", "member" : "sbt.internal.util.TypeFunctions.nestCon", "link" : "sbt\/internal\/util\/TypeFunctions.html#nestCon[M[_],N[_],G[_]](f:M~>N):[T]M[G[T]]~>[T]N[G[T]]", "kind" : "def"}, {"label" : "idK", "tail" : "(): ~>[M, M]", "member" : "sbt.internal.util.TypeFunctions.idK", "link" : "sbt\/internal\/util\/TypeFunctions.html#idK[M[_]]:M~>M", "kind" : "final def"}, {"label" : "const", "tail" : "(b: B): (A) ⇒ B", "member" : "sbt.internal.util.TypeFunctions.const", "link" : "sbt\/internal\/util\/TypeFunctions.html#const[A,B](b:B):A=>B", "kind" : "final def"}, {"label" : "idFun", "tail" : "(): (T) ⇒ T", "member" : "sbt.internal.util.TypeFunctions.idFun", "link" : "sbt\/internal\/util\/TypeFunctions.html#idFun[T]:T=>T", "kind" : "final def"}, {"label" : "some", "tail" : ": ~>[Id, Some]", "member" : "sbt.internal.util.TypeFunctions.some", "link" : "sbt\/internal\/util\/TypeFunctions.html#some:TypeFunctions.this.Id~>Some", "kind" : "final val"}, {"label" : "right", "tail" : ": ~>[Id, [B]Right[Nothing, B]]", "member" : "sbt.internal.util.TypeFunctions.right", "link" : "sbt\/internal\/util\/TypeFunctions.html#right:TypeFunctions.this.Id~>[B]scala.util.Right[Nothing,B]", "kind" : "final val"}, {"label" : "left", "tail" : ": ~>[Id, [B]Left[B, Nothing]]", "member" : "sbt.internal.util.TypeFunctions.left", "link" : "sbt\/internal\/util\/TypeFunctions.html#left:TypeFunctions.this.Id~>[B]scala.util.Left[B,Nothing]", "kind" : "final val"}, {"label" : "P1of2", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.P1of2", "link" : "sbt\/internal\/util\/TypeFunctions.html#P1of2[M[_,_],A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "∙", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.∙", "link" : "sbt\/internal\/util\/TypeFunctions.html#∙[A[_],B[_]]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "Compose", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Compose", "link" : "sbt\/internal\/util\/TypeFunctions.html#Compose[A[_],B[_]]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "ConstK", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.ConstK", "link" : "sbt\/internal\/util\/TypeFunctions.html#ConstK[A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "Const", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Const", "link" : "sbt\/internal\/util\/TypeFunctions.html#Const[A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "Id", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Id", "link" : "sbt\/internal\/util\/TypeFunctions.html#Id[X]=X", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/TypeFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/TypeFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/TypeFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/TypeFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/TypeFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/TypeFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/TypeFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/TypeFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/TypeFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/TypeFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/TypeFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/TypeFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/TypeFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/TypeFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/TypeFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/TypeFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/TypeFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/TypeFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/TypeFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/internal\/util\/TypeFunctions$.html", "members_object" : [{"label" : "P1of2", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.P1of2", "link" : "sbt\/internal\/util\/TypeFunctions.html#P1of2[M[_,_],A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "∙", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.∙", "link" : "sbt\/internal\/util\/TypeFunctions.html#∙[A[_],B[_]]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "Compose", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Compose", "link" : "sbt\/internal\/util\/TypeFunctions.html#Compose[A[_],B[_]]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "ConstK", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.ConstK", "link" : "sbt\/internal\/util\/TypeFunctions.html#ConstK[A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "Const", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Const", "link" : "sbt\/internal\/util\/TypeFunctions.html#Const[A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "~>|", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.~>|", "link" : "sbt\/internal\/util\/TypeFunctions$.html#~>|[A[_],B[_]]=A~>[T]Option[B[T]]", "kind" : "type"}, {"label" : "Endo", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Endo", "link" : "sbt\/internal\/util\/TypeFunctions$.html#Endo[T]=T=>T", "kind" : "type"}, {"label" : "toFn1", "tail" : "(f: (A) ⇒ B): Fn1[A, B]", "member" : "sbt.internal.util.TypeFunctions.toFn1", "link" : "sbt\/internal\/util\/TypeFunctions$.html#toFn1[A,B](f:A=>B):sbt.internal.util.Fn1[A,B]", "kind" : "implicit def"}, {"label" : "nestCon", "tail" : "(f: ~>[M, N]): ~>[[T]M[G[T]], [T]N[G[T]]]", "member" : "sbt.internal.util.TypeFunctions.nestCon", "link" : "sbt\/internal\/util\/TypeFunctions$.html#nestCon[M[_],N[_],G[_]](f:M~>N):[T]M[G[T]]~>[T]N[G[T]]", "kind" : "def"}, {"label" : "idK", "tail" : "(): ~>[M, M]", "member" : "sbt.internal.util.TypeFunctions.idK", "link" : "sbt\/internal\/util\/TypeFunctions$.html#idK[M[_]]:M~>M", "kind" : "final def"}, {"label" : "const", "tail" : "(b: B): (A) ⇒ B", "member" : "sbt.internal.util.TypeFunctions.const", "link" : "sbt\/internal\/util\/TypeFunctions$.html#const[A,B](b:B):A=>B", "kind" : "final def"}, {"label" : "idFun", "tail" : "(): (T) ⇒ T", "member" : "sbt.internal.util.TypeFunctions.idFun", "link" : "sbt\/internal\/util\/TypeFunctions$.html#idFun[T]:T=>T", "kind" : "final def"}, {"label" : "some", "tail" : ": ~>[Id, Some]", "member" : "sbt.internal.util.TypeFunctions.some", "link" : "sbt\/internal\/util\/TypeFunctions$.html#some:TypeFunctions.this.Id~>Some", "kind" : "final val"}, {"label" : "right", "tail" : ": ~>[Id, [B]Right[Nothing, B]]", "member" : "sbt.internal.util.TypeFunctions.right", "link" : "sbt\/internal\/util\/TypeFunctions$.html#right:TypeFunctions.this.Id~>[B]scala.util.Right[Nothing,B]", "kind" : "final val"}, {"label" : "left", "tail" : ": ~>[Id, [B]Left[B, Nothing]]", "member" : "sbt.internal.util.TypeFunctions.left", "link" : "sbt\/internal\/util\/TypeFunctions$.html#left:TypeFunctions.this.Id~>[B]scala.util.Left[B,Nothing]", "kind" : "final val"}, {"label" : "Id", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Id", "link" : "sbt\/internal\/util\/TypeFunctions$.html#Id[X]=X", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/TypeFunctions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/TypeFunctions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/TypeFunctions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/TypeFunctions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/TypeFunctions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/TypeFunctions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/TypeFunctions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/TypeFunctions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/TypeFunctions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/TypeFunctions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/TypeFunctions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/TypeFunctions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/TypeFunctions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/TypeFunctions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/TypeFunctions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/TypeFunctions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/TypeFunctions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/TypeFunctions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/TypeFunctions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/TypeFunctions.html", "kind" : "trait"}, {"name" : "sbt.internal.util.Types", "members_trait" : [{"label" : "P1of2", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.P1of2", "link" : "sbt\/internal\/util\/TypeFunctions.html#P1of2[M[_,_],A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "∙", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.∙", "link" : "sbt\/internal\/util\/TypeFunctions.html#∙[A[_],B[_]]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "Compose", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Compose", "link" : "sbt\/internal\/util\/TypeFunctions.html#Compose[A[_],B[_]]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "ConstK", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.ConstK", "link" : "sbt\/internal\/util\/TypeFunctions.html#ConstK[A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "Const", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Const", "link" : "sbt\/internal\/util\/TypeFunctions.html#Const[A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : ":+:", "tail" : ": HCons.type", "member" : "sbt.internal.util.Types.:+:", "link" : "sbt\/internal\/util\/Types.html#:+::sbt.internal.util.HCons.type", "kind" : "val"}, {"label" : ":+:", "tail" : "", "member" : "sbt.internal.util.Types.:+:", "link" : "sbt\/internal\/util\/Types.html#:+:[H,T<:sbt.internal.util.HList]=sbt.internal.util.HCons[H,T]", "kind" : "type"}, {"label" : ":^:", "tail" : ": KCons.type", "member" : "sbt.internal.util.Types.:^:", "link" : "sbt\/internal\/util\/Types.html#:^::sbt.internal.util.KCons.type", "kind" : "val"}, {"label" : "~>|", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.~>|", "link" : "sbt\/internal\/util\/Types.html#~>|[A[_],B[_]]=A~>[T]Option[B[T]]", "kind" : "type"}, {"label" : "Endo", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Endo", "link" : "sbt\/internal\/util\/Types.html#Endo[T]=T=>T", "kind" : "type"}, {"label" : "toFn1", "tail" : "(f: (A) ⇒ B): Fn1[A, B]", "member" : "sbt.internal.util.TypeFunctions.toFn1", "link" : "sbt\/internal\/util\/Types.html#toFn1[A,B](f:A=>B):sbt.internal.util.Fn1[A,B]", "kind" : "implicit def"}, {"label" : "nestCon", "tail" : "(f: ~>[M, N]): ~>[[T]M[G[T]], [T]N[G[T]]]", "member" : "sbt.internal.util.TypeFunctions.nestCon", "link" : "sbt\/internal\/util\/Types.html#nestCon[M[_],N[_],G[_]](f:M~>N):[T]M[G[T]]~>[T]N[G[T]]", "kind" : "def"}, {"label" : "idK", "tail" : "(): ~>[M, M]", "member" : "sbt.internal.util.TypeFunctions.idK", "link" : "sbt\/internal\/util\/Types.html#idK[M[_]]:M~>M", "kind" : "final def"}, {"label" : "const", "tail" : "(b: B): (A) ⇒ B", "member" : "sbt.internal.util.TypeFunctions.const", "link" : "sbt\/internal\/util\/Types.html#const[A,B](b:B):A=>B", "kind" : "final def"}, {"label" : "idFun", "tail" : "(): (T) ⇒ T", "member" : "sbt.internal.util.TypeFunctions.idFun", "link" : "sbt\/internal\/util\/Types.html#idFun[T]:T=>T", "kind" : "final def"}, {"label" : "some", "tail" : ": ~>[Id, Some]", "member" : "sbt.internal.util.TypeFunctions.some", "link" : "sbt\/internal\/util\/Types.html#some:TypeFunctions.this.Id~>Some", "kind" : "final val"}, {"label" : "right", "tail" : ": ~>[Id, [B]Right[Nothing, B]]", "member" : "sbt.internal.util.TypeFunctions.right", "link" : "sbt\/internal\/util\/Types.html#right:TypeFunctions.this.Id~>[B]scala.util.Right[Nothing,B]", "kind" : "final val"}, {"label" : "left", "tail" : ": ~>[Id, [B]Left[B, Nothing]]", "member" : "sbt.internal.util.TypeFunctions.left", "link" : "sbt\/internal\/util\/Types.html#left:TypeFunctions.this.Id~>[B]scala.util.Left[B,Nothing]", "kind" : "final val"}, {"label" : "Id", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Id", "link" : "sbt\/internal\/util\/Types.html#Id[X]=X", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Types.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Types.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Types.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Types.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Types.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Types.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Types.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Types.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Types.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Types.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Types.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Types.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/Types.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Types.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/Types.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/Types.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Types.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Types.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Types.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/internal\/util\/Types$.html", "members_object" : [{"label" : "P1of2", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.P1of2", "link" : "sbt\/internal\/util\/TypeFunctions.html#P1of2[M[_,_],A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "∙", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.∙", "link" : "sbt\/internal\/util\/TypeFunctions.html#∙[A[_],B[_]]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "Compose", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Compose", "link" : "sbt\/internal\/util\/TypeFunctions.html#Compose[A[_],B[_]]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "ConstK", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.ConstK", "link" : "sbt\/internal\/util\/TypeFunctions.html#ConstK[A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "Const", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Const", "link" : "sbt\/internal\/util\/TypeFunctions.html#Const[A]extendsAnyRef", "kind" : "sealed trait"}, {"label" : ":+:", "tail" : ": HCons.type", "member" : "sbt.internal.util.Types.:+:", "link" : "sbt\/internal\/util\/Types$.html#:+::sbt.internal.util.HCons.type", "kind" : "val"}, {"label" : ":+:", "tail" : "", "member" : "sbt.internal.util.Types.:+:", "link" : "sbt\/internal\/util\/Types$.html#:+:[H,T<:sbt.internal.util.HList]=sbt.internal.util.HCons[H,T]", "kind" : "type"}, {"label" : ":^:", "tail" : ": KCons.type", "member" : "sbt.internal.util.Types.:^:", "link" : "sbt\/internal\/util\/Types$.html#:^::sbt.internal.util.KCons.type", "kind" : "val"}, {"label" : "~>|", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.~>|", "link" : "sbt\/internal\/util\/Types$.html#~>|[A[_],B[_]]=A~>[T]Option[B[T]]", "kind" : "type"}, {"label" : "Endo", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Endo", "link" : "sbt\/internal\/util\/Types$.html#Endo[T]=T=>T", "kind" : "type"}, {"label" : "toFn1", "tail" : "(f: (A) ⇒ B): Fn1[A, B]", "member" : "sbt.internal.util.TypeFunctions.toFn1", "link" : "sbt\/internal\/util\/Types$.html#toFn1[A,B](f:A=>B):sbt.internal.util.Fn1[A,B]", "kind" : "implicit def"}, {"label" : "nestCon", "tail" : "(f: ~>[M, N]): ~>[[T]M[G[T]], [T]N[G[T]]]", "member" : "sbt.internal.util.TypeFunctions.nestCon", "link" : "sbt\/internal\/util\/Types$.html#nestCon[M[_],N[_],G[_]](f:M~>N):[T]M[G[T]]~>[T]N[G[T]]", "kind" : "def"}, {"label" : "idK", "tail" : "(): ~>[M, M]", "member" : "sbt.internal.util.TypeFunctions.idK", "link" : "sbt\/internal\/util\/Types$.html#idK[M[_]]:M~>M", "kind" : "final def"}, {"label" : "const", "tail" : "(b: B): (A) ⇒ B", "member" : "sbt.internal.util.TypeFunctions.const", "link" : "sbt\/internal\/util\/Types$.html#const[A,B](b:B):A=>B", "kind" : "final def"}, {"label" : "idFun", "tail" : "(): (T) ⇒ T", "member" : "sbt.internal.util.TypeFunctions.idFun", "link" : "sbt\/internal\/util\/Types$.html#idFun[T]:T=>T", "kind" : "final def"}, {"label" : "some", "tail" : ": ~>[Id, Some]", "member" : "sbt.internal.util.TypeFunctions.some", "link" : "sbt\/internal\/util\/Types$.html#some:TypeFunctions.this.Id~>Some", "kind" : "final val"}, {"label" : "right", "tail" : ": ~>[Id, [B]Right[Nothing, B]]", "member" : "sbt.internal.util.TypeFunctions.right", "link" : "sbt\/internal\/util\/Types$.html#right:TypeFunctions.this.Id~>[B]scala.util.Right[Nothing,B]", "kind" : "final val"}, {"label" : "left", "tail" : ": ~>[Id, [B]Left[B, Nothing]]", "member" : "sbt.internal.util.TypeFunctions.left", "link" : "sbt\/internal\/util\/Types$.html#left:TypeFunctions.this.Id~>[B]scala.util.Left[B,Nothing]", "kind" : "final val"}, {"label" : "Id", "tail" : "", "member" : "sbt.internal.util.TypeFunctions.Id", "link" : "sbt\/internal\/util\/Types$.html#Id[X]=X", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Types$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Types$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Types$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Types$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Types$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Types$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Types$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Types$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Types$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Types$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Types$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Types$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/Types$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Types$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/Types$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/Types$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Types$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Types$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Types$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/Types.html", "kind" : "object"}, {"name" : "sbt.internal.util.Util", "shortDescription" : "", "object" : "sbt\/internal\/util\/Util$.html", "members_object" : [{"label" : "isCygwinWindows", "tail" : ": Boolean", "member" : "sbt.internal.util.Util.isCygwinWindows", "link" : "sbt\/internal\/util\/Util$.html#isCygwinWindows:Boolean", "kind" : "lazy val"}, {"label" : "isNonCygwinWindows", "tail" : ": Boolean", "member" : "sbt.internal.util.Util.isNonCygwinWindows", "link" : "sbt\/internal\/util\/Util$.html#isNonCygwinWindows:Boolean", "kind" : "lazy val"}, {"label" : "isCygwin", "tail" : ": Boolean", "member" : "sbt.internal.util.Util.isCygwin", "link" : "sbt\/internal\/util\/Util$.html#isCygwin:Boolean", "kind" : "lazy val"}, {"label" : "isWindows", "tail" : ": Boolean", "member" : "sbt.internal.util.Util.isWindows", "link" : "sbt\/internal\/util\/Util$.html#isWindows:Boolean", "kind" : "lazy val"}, {"label" : "quoteIfKeyword", "tail" : "(s: String): String", "member" : "sbt.internal.util.Util.quoteIfKeyword", "link" : "sbt\/internal\/util\/Util$.html#quoteIfKeyword(s:String):String", "kind" : "def"}, {"label" : "camelToHyphen", "tail" : "(s: String): String", "member" : "sbt.internal.util.Util.camelToHyphen", "link" : "sbt\/internal\/util\/Util$.html#camelToHyphen(s:String):String", "kind" : "def"}, {"label" : "hyphenToCamel", "tail" : "(s: String): String", "member" : "sbt.internal.util.Util.hyphenToCamel", "link" : "sbt\/internal\/util\/Util$.html#hyphenToCamel(s:String):String", "kind" : "def"}, {"label" : "hasHyphen", "tail" : "(s: String): Boolean", "member" : "sbt.internal.util.Util.hasHyphen", "link" : "sbt\/internal\/util\/Util$.html#hasHyphen(s:String):Boolean", "kind" : "def"}, {"label" : "pairID", "tail" : "(): (A, B) ⇒ (A, B)", "member" : "sbt.internal.util.Util.pairID", "link" : "sbt\/internal\/util\/Util$.html#pairID[A,B]:(A,B)=>(A,B)", "kind" : "def"}, {"label" : "prependEither", "tail" : "(acc: (Seq[A], Seq[B]), next: Either[A, B]): (Seq[A], Seq[B])", "member" : "sbt.internal.util.Util.prependEither", "link" : "sbt\/internal\/util\/Util$.html#prependEither[A,B](acc:(Seq[A],Seq[B]),next:Either[A,B]):(Seq[A],Seq[B])", "kind" : "def"}, {"label" : "separate", "tail" : "(ps: Seq[T])(f: (T) ⇒ Either[A, B]): (Seq[A], Seq[B])", "member" : "sbt.internal.util.Util.separate", "link" : "sbt\/internal\/util\/Util$.html#separate[T,A,B](ps:Seq[T])(f:T=>Either[A,B]):(Seq[A],Seq[B])", "kind" : "def"}, {"label" : "separateE", "tail" : "(ps: Seq[Either[A, B]]): (Seq[A], Seq[B])", "member" : "sbt.internal.util.Util.separateE", "link" : "sbt\/internal\/util\/Util$.html#separateE[A,B](ps:Seq[Either[A,B]]):(Seq[A],Seq[B])", "kind" : "def"}, {"label" : "makeList", "tail" : "(size: Int, value: T): List[T]", "member" : "sbt.internal.util.Util.makeList", "link" : "sbt\/internal\/util\/Util$.html#makeList[T](size:Int,value:T):List[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/Util$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/Util$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/Util$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/Util$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/Util$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/Util$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/Util$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Util$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Util$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/Util$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/Util$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/Util$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/Util$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/Util$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/Util$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/Util$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/Util$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/Util$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/Util$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.~>", "members_trait" : [{"label" : "fn", "tail" : "(): (A[T]) ⇒ B[T]", "member" : "sbt.internal.util.~>.fn", "link" : "sbt\/internal\/util\/$tilde$greater.html#fn[T]:A[T]=>B[T]", "kind" : "final def"}, {"label" : "∙", "tail" : "(g: (C) ⇒ D)(ev: <:<[D, A[D]]): (C) ⇒ B[D]", "member" : "sbt.internal.util.~>.∙", "link" : "sbt\/internal\/util\/$tilde$greater.html#∙[C,D](g:C=>D)(implicitev:D<:<A[D]):C=>B[D]", "kind" : "final def"}, {"label" : "∙", "tail" : "(g: ~>[C, A]): ~>[C, B]", "member" : "sbt.internal.util.~>.∙", "link" : "sbt\/internal\/util\/$tilde$greater.html#∙[C[_]](g:C~>A):C~>B", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/$tilde$greater.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/$tilde$greater.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/$tilde$greater.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/$tilde$greater.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/$tilde$greater.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/$tilde$greater.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/$tilde$greater.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/$tilde$greater.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/$tilde$greater.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/$tilde$greater.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/$tilde$greater.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/$tilde$greater.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/$tilde$greater.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/$tilde$greater.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/$tilde$greater.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/$tilde$greater.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/$tilde$greater.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/$tilde$greater.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/$tilde$greater.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A[T]): B[T]", "member" : "sbt.internal.util.~>.apply", "link" : "sbt\/internal\/util\/$tilde$greater.html#apply[T](a:A[T]):B[T]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/internal\/util\/$tilde$greater$.html", "members_object" : [{"label" : "tcIdEquals", "tail" : "(): ~>[TypeFunctions.Id, TypeFunctions.Id]", "member" : "sbt.internal.util.~>.tcIdEquals", "link" : "sbt\/internal\/util\/$tilde$greater$.html#tcIdEquals:sbt.internal.util.TypeFunctions.Id~>sbt.internal.util.TypeFunctions.Id", "kind" : "implicit def"}, {"label" : "Id", "tail" : ": ~>[TypeFunctions.Id, TypeFunctions.Id]", "member" : "sbt.internal.util.~>.Id", "link" : "sbt\/internal\/util\/$tilde$greater$.html#Id:sbt.internal.util.TypeFunctions.Id~>sbt.internal.util.TypeFunctions.Id", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/$tilde$greater$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/$tilde$greater$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/$tilde$greater$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/$tilde$greater$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/$tilde$greater$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/$tilde$greater$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/$tilde$greater$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/$tilde$greater$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/$tilde$greater$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/$tilde$greater$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/$tilde$greater$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/$tilde$greater$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/$tilde$greater$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/$tilde$greater$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/$tilde$greater$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/$tilde$greater$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/$tilde$greater$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/$tilde$greater$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/$tilde$greater$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/$tilde$greater.html", "kind" : "trait"}], "sbt.internal" : [{"name" : "sbt.internal.Act", "shortDescription" : "", "object" : "sbt\/internal\/Act$.html", "members_object" : [{"label" : "value", "tail" : "(t: Parser[T]): Parser[ParsedAxis[T]]", "member" : "sbt.internal.Act.value", "link" : "sbt\/internal\/Act$.html#value[T](t:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[sbt.internal.Act.ParsedAxis[T]]", "kind" : "def"}, {"label" : "ParsedValue", "tail" : "", "member" : "sbt.internal.Act.ParsedValue", "link" : "sbt\/internal\/Act$.html#ParsedValue[T]extendsAct.ParsedAxis[T]", "kind" : "final class"}, {"label" : "Omitted", "tail" : "", "member" : "sbt.internal.Act.Omitted", "link" : "sbt\/internal\/Act$.html#Omitted", "kind" : "object"}, {"label" : "ParsedZero", "tail" : "", "member" : "sbt.internal.Act.ParsedZero", "link" : "sbt\/internal\/Act$.html#ParsedZero", "kind" : "object"}, {"label" : "ParsedAxis", "tail" : "", "member" : "sbt.internal.Act.ParsedAxis", "link" : "sbt\/internal\/Act$.html#ParsedAxis[+T]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "requireSession", "tail" : "(s: State, p: ⇒ Parser[T]): Parser[T]", "member" : "sbt.internal.Act.requireSession", "link" : "sbt\/internal\/Act$.html#requireSession[T](s:sbt.State,p:=>sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "keyValues", "tail" : "(structure: BuildStructure)(keys: Seq[Def.ScopedKey[T]]): Values[T]", "member" : "sbt.internal.Act.keyValues", "link" : "sbt\/internal\/Act$.html#keyValues[T](structure:sbt.internal.BuildStructure)(keys:Seq[sbt.Def.ScopedKey[T]]):sbt.internal.Aggregation.Values[T]", "kind" : "def"}, {"label" : "keyValues", "tail" : "(extracted: Extracted)(keys: Seq[Def.ScopedKey[T]]): Values[T]", "member" : "sbt.internal.Act.keyValues", "link" : "sbt\/internal\/Act$.html#keyValues[T](extracted:sbt.Extracted)(keys:Seq[sbt.Def.ScopedKey[T]]):sbt.internal.Aggregation.Values[T]", "kind" : "def"}, {"label" : "keyValues", "tail" : "(state: State)(keys: Seq[Def.ScopedKey[T]]): Values[T]", "member" : "sbt.internal.Act.keyValues", "link" : "sbt\/internal\/Act$.html#keyValues[T](state:sbt.State)(keys:Seq[sbt.Def.ScopedKey[T]]):sbt.internal.Aggregation.Values[T]", "kind" : "def"}, {"label" : "aggregatedKeyParser", "tail" : "(structure: BuildStructure, currentRef: ProjectRef): KeysParser", "member" : "sbt.internal.Act.aggregatedKeyParser", "link" : "sbt\/internal\/Act$.html#aggregatedKeyParser(structure:sbt.internal.BuildStructure,currentRef:sbt.ProjectRef):sbt.internal.Act.KeysParser", "kind" : "def"}, {"label" : "aggregatedKeyParser", "tail" : "(extracted: Extracted): KeysParser", "member" : "sbt.internal.Act.aggregatedKeyParser", "link" : "sbt\/internal\/Act$.html#aggregatedKeyParser(extracted:sbt.Extracted):sbt.internal.Act.KeysParser", "kind" : "def"}, {"label" : "aggregatedKeyParser", "tail" : "(state: State): KeysParser", "member" : "sbt.internal.Act.aggregatedKeyParser", "link" : "sbt\/internal\/Act$.html#aggregatedKeyParser(state:sbt.State):sbt.internal.Act.KeysParser", "kind" : "def"}, {"label" : "KeysParser", "tail" : "", "member" : "sbt.internal.Act.KeysParser", "link" : "sbt\/internal\/Act$.html#KeysParser=sbt.internal.util.complete.Parser[Seq[sbt.Def.ScopedKey[T]]forSome{typeT}]", "kind" : "type"}, {"label" : "scopedKeyParser", "tail" : "(structure: BuildStructure, currentRef: ProjectRef): Parser[Def.ScopedKey[_]]", "member" : "sbt.internal.Act.scopedKeyParser", "link" : "sbt\/internal\/Act$.html#scopedKeyParser(structure:sbt.internal.BuildStructure,currentRef:sbt.ProjectRef):sbt.internal.util.complete.Parser[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "scopedKeyParser", "tail" : "(extracted: Extracted): Parser[Def.ScopedKey[_]]", "member" : "sbt.internal.Act.scopedKeyParser", "link" : "sbt\/internal\/Act$.html#scopedKeyParser(extracted:sbt.Extracted):sbt.internal.util.complete.Parser[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "scopedKeyParser", "tail" : "(state: State): Parser[Def.ScopedKey[_]]", "member" : "sbt.internal.Act.scopedKeyParser", "link" : "sbt\/internal\/Act$.html#scopedKeyParser(state:sbt.State):sbt.internal.util.complete.Parser[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "actParser", "tail" : "(s: State): Parser[() ⇒ State]", "member" : "sbt.internal.Act.actParser", "link" : "sbt\/internal\/Act$.html#actParser(s:sbt.State):sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "resolveProject", "tail" : "(parsed: ParsedAxis[ResolvedReference], current: ProjectRef): Option[ResolvedReference]", "member" : "sbt.internal.Act.resolveProject", "link" : "sbt\/internal\/Act$.html#resolveProject(parsed:sbt.internal.Act.ParsedAxis[sbt.ResolvedReference],current:sbt.ProjectRef):Option[sbt.ResolvedReference]", "kind" : "def"}, {"label" : "optProjectRef", "tail" : "(index: KeyIndex, current: ProjectRef): Parser[ParsedAxis[ResolvedReference]]", "member" : "sbt.internal.Act.optProjectRef", "link" : "sbt\/internal\/Act$.html#optProjectRef(index:sbt.internal.KeyIndex,current:sbt.ProjectRef):sbt.internal.util.complete.Parser[sbt.internal.Act.ParsedAxis[sbt.ResolvedReference]]", "kind" : "def"}, {"label" : "resolvedReference", "tail" : "(index: KeyIndex, currentBuild: URI, trailing: Parser[_]): Parser[ResolvedReference]", "member" : "sbt.internal.Act.resolvedReference", "link" : "sbt\/internal\/Act$.html#resolvedReference(index:sbt.internal.KeyIndex,currentBuild:java.net.URI,trailing:sbt.internal.util.complete.Parser[_]):sbt.internal.util.complete.Parser[sbt.ResolvedReference]", "kind" : "def"}, {"label" : "projectRef", "tail" : "(index: KeyIndex, currentBuild: URI): Parser[ParsedAxis[ResolvedReference]]", "member" : "sbt.internal.Act.projectRef", "link" : "sbt\/internal\/Act$.html#projectRef(index:sbt.internal.KeyIndex,currentBuild:java.net.URI):sbt.internal.util.complete.Parser[sbt.internal.Act.ParsedAxis[sbt.ResolvedReference]]", "kind" : "def"}, {"label" : "knownPluginParser", "tail" : "(knownPlugins: Map[String, T], label: String): Parser[T]", "member" : "sbt.internal.Act.knownPluginParser", "link" : "sbt\/internal\/Act$.html#knownPluginParser[T](knownPlugins:Map[String,T],label:String):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "knownIDParser", "tail" : "(knownKeys: Map[String, T], label: String): Parser[T]", "member" : "sbt.internal.Act.knownIDParser", "link" : "sbt\/internal\/Act$.html#knownIDParser[T](knownKeys:Map[String,T],label:String):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "extraParser", "tail" : "(knownKeys: Map[String, AttributeKey[_]], knownValues: IMap[AttributeKey, Set]): Parser[AttributeEntry[_]]", "member" : "sbt.internal.Act.extraParser", "link" : "sbt\/internal\/Act$.html#extraParser(knownKeys:Map[String,sbt.internal.util.AttributeKey[_]],knownValues:sbt.internal.util.IMap[sbt.internal.util.AttributeKey,Set]):sbt.internal.util.complete.Parser[sbt.internal.util.AttributeEntry[_]]", "kind" : "def"}, {"label" : "extrasParser", "tail" : "(knownKeys: Map[String, AttributeKey[_]], knownValues: IMap[AttributeKey, Set]): Parser[AttributeMap]", "member" : "sbt.internal.Act.extrasParser", "link" : "sbt\/internal\/Act$.html#extrasParser(knownKeys:Map[String,sbt.internal.util.AttributeKey[_]],knownValues:sbt.internal.util.IMap[sbt.internal.util.AttributeKey,Set]):sbt.internal.util.complete.Parser[sbt.internal.util.AttributeMap]", "kind" : "def"}, {"label" : "filterStrings", "tail" : "(base: Parser[String], valid: Set[String], label: String): Parser[String]", "member" : "sbt.internal.Act.filterStrings", "link" : "sbt\/internal\/Act$.html#filterStrings(base:sbt.internal.util.complete.Parser[String],valid:Set[String],label:String):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "resolveTask", "tail" : "(task: ParsedAxis[AttributeKey[_]]): Option[AttributeKey[_]]", "member" : "sbt.internal.Act.resolveTask", "link" : "sbt\/internal\/Act$.html#resolveTask(task:sbt.internal.Act.ParsedAxis[sbt.internal.util.AttributeKey[_]]):Option[sbt.internal.util.AttributeKey[_]]", "kind" : "def"}, {"label" : "taskAxis", "tail" : "(d: Option[String], tasks: Set[AttributeKey[_]], allKnown: Map[String, AttributeKey[_]]): Parser[ParsedAxis[AttributeKey[_]]]", "member" : "sbt.internal.Act.taskAxis", "link" : "sbt\/internal\/Act$.html#taskAxis(d:Option[String],tasks:Set[sbt.internal.util.AttributeKey[_]],allKnown:Map[String,sbt.internal.util.AttributeKey[_]]):sbt.internal.util.complete.Parser[sbt.internal.Act.ParsedAxis[sbt.internal.util.AttributeKey[_]]]", "kind" : "def"}, {"label" : "extraAxis", "tail" : "(knownKeys: Map[String, AttributeKey[_]], knownValues: IMap[AttributeKey, Set]): Parser[ScopeAxis[AttributeMap]]", "member" : "sbt.internal.Act.extraAxis", "link" : "sbt\/internal\/Act$.html#extraAxis(knownKeys:Map[String,sbt.internal.util.AttributeKey[_]],knownValues:sbt.internal.util.IMap[sbt.internal.util.AttributeKey,Set]):sbt.internal.util.complete.Parser[sbt.ScopeAxis[sbt.internal.util.AttributeMap]]", "kind" : "def"}, {"label" : "spacedComma", "tail" : ": Parser[((Seq[Char], Char), Seq[Char])]", "member" : "sbt.internal.Act.spacedComma", "link" : "sbt\/internal\/Act$.html#spacedComma:sbt.internal.util.complete.Parser[((Seq[Char],Char),Seq[Char])]", "kind" : "val"}, {"label" : "getKey", "tail" : "(keyMap: Map[String, AttributeKey[_]], keyString: String, f: (AttributeKey[_]) ⇒ T): Parser[T]", "member" : "sbt.internal.Act.getKey", "link" : "sbt\/internal\/Act$.html#getKey[T](keyMap:Map[String,sbt.internal.util.AttributeKey[_]],keyString:String,f:sbt.internal.util.AttributeKey[_]=>T):sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "key", "tail" : "(index: KeyIndex, proj: Option[ResolvedReference], conf: Option[String], task: Option[AttributeKey[_]], keyMap: Map[String, AttributeKey[_]]): Parser[AttributeKey[_]]", "member" : "sbt.internal.Act.key", "link" : "sbt\/internal\/Act$.html#key(index:sbt.internal.KeyIndex,proj:Option[sbt.ResolvedReference],conf:Option[String],task:Option[sbt.internal.util.AttributeKey[_]],keyMap:Map[String,sbt.internal.util.AttributeKey[_]]):sbt.internal.util.complete.Parser[sbt.internal.util.AttributeKey[_]]", "kind" : "def"}, {"label" : "nonEmptyConfig", "tail" : "(index: KeyIndex, proj: Option[ResolvedReference]): (String) ⇒ Seq[Option[String]]", "member" : "sbt.internal.Act.nonEmptyConfig", "link" : "sbt\/internal\/Act$.html#nonEmptyConfig(index:sbt.internal.KeyIndex,proj:Option[sbt.ResolvedReference]):String=>Seq[Option[String]]", "kind" : "def"}, {"label" : "defaultConfigurations", "tail" : "(proj: Option[ResolvedReference], index: KeyIndex, defaultConfigs: (Option[ResolvedReference]) ⇒ Seq[String]): Seq[String]", "member" : "sbt.internal.Act.defaultConfigurations", "link" : "sbt\/internal\/Act$.html#defaultConfigurations(proj:Option[sbt.ResolvedReference],index:sbt.internal.KeyIndex,defaultConfigs:Option[sbt.ResolvedReference]=>Seq[String]):Seq[String]", "kind" : "def"}, {"label" : "configs", "tail" : "(explicit: ParsedAxis[String], defaultConfigs: (Option[ResolvedReference]) ⇒ Seq[String], proj: Option[ResolvedReference], index: KeyIndex): Seq[Option[String]]", "member" : "sbt.internal.Act.configs", "link" : "sbt\/internal\/Act$.html#configs(explicit:sbt.internal.Act.ParsedAxis[String],defaultConfigs:Option[sbt.ResolvedReference]=>Seq[String],proj:Option[sbt.ResolvedReference],index:sbt.internal.KeyIndex):Seq[Option[String]]", "kind" : "def"}, {"label" : "config", "tail" : "(confs: Set[String]): Parser[ParsedAxis[String]]", "member" : "sbt.internal.Act.config", "link" : "sbt\/internal\/Act$.html#config(confs:Set[String]):sbt.internal.util.complete.Parser[sbt.internal.Act.ParsedAxis[String]]", "kind" : "def"}, {"label" : "toAxis", "tail" : "(opt: Option[T], ifNone: ScopeAxis[T]): ScopeAxis[T]", "member" : "sbt.internal.Act.toAxis", "link" : "sbt\/internal\/Act$.html#toAxis[T](opt:Option[T],ifNone:sbt.ScopeAxis[T]):sbt.ScopeAxis[T]", "kind" : "def"}, {"label" : "optionalAxis", "tail" : "(p: Parser[T], ifNone: ScopeAxis[T]): Parser[ScopeAxis[T]]", "member" : "sbt.internal.Act.optionalAxis", "link" : "sbt\/internal\/Act$.html#optionalAxis[T](p:sbt.internal.util.complete.Parser[T],ifNone:sbt.ScopeAxis[T]):sbt.internal.util.complete.Parser[sbt.ScopeAxis[T]]", "kind" : "def"}, {"label" : "examplesStrict", "tail" : "(p: Parser[String], exs: Set[String], label: String): Parser[String]", "member" : "sbt.internal.Act.examplesStrict", "link" : "sbt\/internal\/Act$.html#examplesStrict(p:sbt.internal.util.complete.Parser[String],exs:Set[String],label:String):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "examples", "tail" : "(p: Parser[String], exs: Set[String], label: String): Parser[String]", "member" : "sbt.internal.Act.examples", "link" : "sbt\/internal\/Act$.html#examples(p:sbt.internal.util.complete.Parser[String],exs:Set[String],label:String):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "isValid", "tail" : "(data: Settings[Scope])(parsed: ParsedKey): Boolean", "member" : "sbt.internal.Act.isValid", "link" : "sbt\/internal\/Act$.html#isValid(data:sbt.internal.util.Settings[sbt.Scope])(parsed:sbt.internal.ParsedKey):Boolean", "kind" : "def"}, {"label" : "showAmbiguous", "tail" : "(keys: Seq[Def.ScopedKey[_]])(show: Show[Def.ScopedKey[_]]): String", "member" : "sbt.internal.Act.showAmbiguous", "link" : "sbt\/internal\/Act$.html#showAmbiguous(keys:Seq[sbt.Def.ScopedKey[_]])(implicitshow:sbt.util.Show[sbt.Def.ScopedKey[_]]):String", "kind" : "def"}, {"label" : "noValidKeys", "tail" : "(): Parser[Nothing]", "member" : "sbt.internal.Act.noValidKeys", "link" : "sbt\/internal\/Act$.html#noValidKeys:sbt.internal.util.complete.Parser[Nothing]", "kind" : "def"}, {"label" : "selectByTask", "tail" : "(ss: Seq[ParsedKey]): Seq[ParsedKey]", "member" : "sbt.internal.Act.selectByTask", "link" : "sbt\/internal\/Act$.html#selectByTask(ss:Seq[sbt.internal.ParsedKey]):Seq[sbt.internal.ParsedKey]", "kind" : "def"}, {"label" : "selectByConfig", "tail" : "(ss: Seq[ParsedKey]): Seq[ParsedKey]", "member" : "sbt.internal.Act.selectByConfig", "link" : "sbt\/internal\/Act$.html#selectByConfig(ss:Seq[sbt.internal.ParsedKey]):Seq[sbt.internal.ParsedKey]", "kind" : "def"}, {"label" : "selectFromValid", "tail" : "(ss: Seq[ParsedKey], default: Parser[ParsedKey])(show: Show[Def.ScopedKey[_]]): Parser[ParsedKey]", "member" : "sbt.internal.Act.selectFromValid", "link" : "sbt\/internal\/Act$.html#selectFromValid(ss:Seq[sbt.internal.ParsedKey],default:sbt.internal.util.complete.Parser[sbt.internal.ParsedKey])(implicitshow:sbt.util.Show[sbt.Def.ScopedKey[_]]):sbt.internal.util.complete.Parser[sbt.internal.ParsedKey]", "kind" : "def"}, {"label" : "select", "tail" : "(allKeys: Seq[Parser[ParsedKey]], data: Settings[Scope])(show: Show[Def.ScopedKey[_]]): Parser[ParsedKey]", "member" : "sbt.internal.Act.select", "link" : "sbt\/internal\/Act$.html#select(allKeys:Seq[sbt.internal.util.complete.Parser[sbt.internal.ParsedKey]],data:sbt.internal.util.Settings[sbt.Scope])(implicitshow:sbt.util.Show[sbt.Def.ScopedKey[_]]):sbt.internal.util.complete.Parser[sbt.internal.ParsedKey]", "kind" : "def"}, {"label" : "makeScopedKey", "tail" : "(proj: Option[ResolvedReference], conf: Option[String], task: Option[AttributeKey[_]], extra: ScopeAxis[AttributeMap], key: AttributeKey[_]): Def.ScopedKey[_]", "member" : "sbt.internal.Act.makeScopedKey", "link" : "sbt\/internal\/Act$.html#makeScopedKey(proj:Option[sbt.ResolvedReference],conf:Option[String],task:Option[sbt.internal.util.AttributeKey[_]],extra:sbt.ScopeAxis[sbt.internal.util.AttributeMap],key:sbt.internal.util.AttributeKey[_]):sbt.Def.ScopedKey[_]", "kind" : "def"}, {"label" : "taskKeyExtra", "tail" : "(index: KeyIndex, defaultConfigs: (Option[ResolvedReference]) ⇒ Seq[String], keyMap: Map[String, AttributeKey[_]], proj: Option[ResolvedReference], confAmb: ParsedAxis[String], baseMask: ScopeMask): Seq[Parser[ParsedKey]]", "member" : "sbt.internal.Act.taskKeyExtra", "link" : "sbt\/internal\/Act$.html#taskKeyExtra(index:sbt.internal.KeyIndex,defaultConfigs:Option[sbt.ResolvedReference]=>Seq[String],keyMap:Map[String,sbt.internal.util.AttributeKey[_]],proj:Option[sbt.ResolvedReference],confAmb:sbt.internal.Act.ParsedAxis[String],baseMask:sbt.ScopeMask):Seq[sbt.internal.util.complete.Parser[sbt.internal.ParsedKey]]", "kind" : "def"}, {"label" : "scopedKeyFull", "tail" : "(index: KeyIndex, current: ProjectRef, defaultConfigs: (Option[ResolvedReference]) ⇒ Seq[String], keyMap: Map[String, AttributeKey[_]]): Parser[Seq[Parser[ParsedKey]]]", "member" : "sbt.internal.Act.scopedKeyFull", "link" : "sbt\/internal\/Act$.html#scopedKeyFull(index:sbt.internal.KeyIndex,current:sbt.ProjectRef,defaultConfigs:Option[sbt.ResolvedReference]=>Seq[String],keyMap:Map[String,sbt.internal.util.AttributeKey[_]]):sbt.internal.util.complete.Parser[Seq[sbt.internal.util.complete.Parser[sbt.internal.ParsedKey]]]", "kind" : "def"}, {"label" : "scopedKeySelected", "tail" : "(index: KeyIndex, current: ProjectRef, defaultConfigs: (Option[ResolvedReference]) ⇒ Seq[String], keyMap: Map[String, AttributeKey[_]], data: Settings[Scope]): Parser[ParsedKey]", "member" : "sbt.internal.Act.scopedKeySelected", "link" : "sbt\/internal\/Act$.html#scopedKeySelected(index:sbt.internal.KeyIndex,current:sbt.ProjectRef,defaultConfigs:Option[sbt.ResolvedReference]=>Seq[String],keyMap:Map[String,sbt.internal.util.AttributeKey[_]],data:sbt.internal.util.Settings[sbt.Scope]):sbt.internal.util.complete.Parser[sbt.internal.ParsedKey]", "kind" : "def"}, {"label" : "scopedKeyAggregated", "tail" : "(current: ProjectRef, defaultConfigs: (Option[ResolvedReference]) ⇒ Seq[String], structure: BuildStructure): KeysParser", "member" : "sbt.internal.Act.scopedKeyAggregated", "link" : "sbt\/internal\/Act$.html#scopedKeyAggregated(current:sbt.ProjectRef,defaultConfigs:Option[sbt.ResolvedReference]=>Seq[String],structure:sbt.internal.BuildStructure):sbt.internal.Act.KeysParser", "kind" : "def"}, {"label" : "scopedKey", "tail" : "(index: KeyIndex, current: ProjectRef, defaultConfigs: (Option[ResolvedReference]) ⇒ Seq[String], keyMap: Map[String, AttributeKey[_]], data: Settings[Scope]): Parser[Def.ScopedKey[_]]", "member" : "sbt.internal.Act.scopedKey", "link" : "sbt\/internal\/Act$.html#scopedKey(index:sbt.internal.KeyIndex,current:sbt.ProjectRef,defaultConfigs:Option[sbt.ResolvedReference]=>Seq[String],keyMap:Map[String,sbt.internal.util.AttributeKey[_]],data:sbt.internal.util.Settings[sbt.Scope]):sbt.internal.util.complete.Parser[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "ZeroString", "tail" : ": String", "member" : "sbt.internal.Act.ZeroString", "link" : "sbt\/internal\/Act$.html#ZeroString:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/Act$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/Act$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/Act$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/Act$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/Act$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/Act$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/Act$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Act$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Act$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Act$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/Act$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/Act$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/Act$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/Act$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/Act$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/Act$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/Act$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/Act$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/Act$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.AddSettings", "shortDescription" : "Represents how settings from various sources are automatically merged into a Project's settings.", "object" : "sbt\/internal\/AddSettings$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/AddSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/AddSettings.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/AddSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/AddSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/AddSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/AddSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/AddSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/AddSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/AddSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/AddSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/AddSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/AddSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/AddSettings.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/AddSettings.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/AddSettings.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/AddSettings.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/AddSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/AddSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/AddSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "clearSbtFiles", "tail" : "(a: AddSettings): AddSettings", "member" : "sbt.internal.AddSettings.clearSbtFiles", "link" : "sbt\/internal\/AddSettings$.html#clearSbtFiles(a:sbt.internal.AddSettings):sbt.internal.AddSettings", "kind" : "def"}, {"label" : "append", "tail" : "(a: AddSettings, b: AddSettings): AddSettings", "member" : "sbt.internal.AddSettings.append", "link" : "sbt\/internal\/AddSettings$.html#append(a:sbt.internal.AddSettings,b:sbt.internal.AddSettings):sbt.internal.AddSettings", "kind" : "def"}, {"label" : "allDefaults", "tail" : ": AddSettings", "member" : "sbt.internal.AddSettings.allDefaults", "link" : "sbt\/internal\/AddSettings$.html#allDefaults:sbt.internal.AddSettings", "kind" : "val"}, {"label" : "seq", "tail" : "(autos: AddSettings*): AddSettings", "member" : "sbt.internal.AddSettings.seq", "link" : "sbt\/internal\/AddSettings$.html#seq(autos:sbt.internal.AddSettings*):sbt.internal.AddSettings", "kind" : "def"}, {"label" : "sbtFiles", "tail" : "(files: File*): AddSettings", "member" : "sbt.internal.AddSettings.sbtFiles", "link" : "sbt\/internal\/AddSettings$.html#sbtFiles(files:java.io.File*):sbt.internal.AddSettings", "kind" : "def"}, {"label" : "defaultSbtFiles", "tail" : ": AddSettings", "member" : "sbt.internal.AddSettings.defaultSbtFiles", "link" : "sbt\/internal\/AddSettings$.html#defaultSbtFiles:sbt.internal.AddSettings", "kind" : "val"}, {"label" : "userSettings", "tail" : ": AddSettings", "member" : "sbt.internal.AddSettings.userSettings", "link" : "sbt\/internal\/AddSettings$.html#userSettings:sbt.internal.AddSettings", "kind" : "val"}, {"label" : "allPlugins", "tail" : ": AddSettings", "member" : "sbt.internal.AddSettings.allPlugins", "link" : "sbt\/internal\/AddSettings$.html#allPlugins:sbt.internal.AddSettings", "kind" : "val"}, {"label" : "buildScalaFiles", "tail" : ": AddSettings", "member" : "sbt.internal.AddSettings.buildScalaFiles", "link" : "sbt\/internal\/AddSettings$.html#buildScalaFiles:sbt.internal.AddSettings", "kind" : "val"}, {"label" : "autoPlugins", "tail" : ": AddSettings", "member" : "sbt.internal.AddSettings.autoPlugins", "link" : "sbt\/internal\/AddSettings$.html#autoPlugins:sbt.internal.AddSettings", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/AddSettings$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/AddSettings$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/AddSettings$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/AddSettings$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/AddSettings$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/AddSettings$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/AddSettings$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/AddSettings$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/AddSettings$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/AddSettings$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/AddSettings$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/AddSettings$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/AddSettings$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/AddSettings$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/AddSettings$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/AddSettings$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/AddSettings$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/AddSettings$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/AddSettings$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/AddSettings.html", "kind" : "class"}, {"name" : "sbt.internal.Aggregation", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/Aggregation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/Aggregation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/Aggregation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/Aggregation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/Aggregation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/Aggregation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/Aggregation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Aggregation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Aggregation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Aggregation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/Aggregation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/Aggregation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/Aggregation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/Aggregation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/Aggregation.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/Aggregation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/Aggregation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/Aggregation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/Aggregation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/internal\/Aggregation$.html", "members_object" : [{"label" : "aggregationEnabled", "tail" : "(key: Def.ScopedKey[_], data: Settings[Scope]): Boolean", "member" : "sbt.internal.Aggregation.aggregationEnabled", "link" : "sbt\/internal\/Aggregation$.html#aggregationEnabled(key:sbt.Def.ScopedKey[_],data:sbt.internal.util.Settings[sbt.Scope]):Boolean", "kind" : "def"}, {"label" : "aggregatedKeys", "tail" : "(key: Def.ScopedKey[T], extra: BuildUtil[_], mask: ScopeMask): Seq[Def.ScopedKey[T]]", "member" : "sbt.internal.Aggregation.aggregatedKeys", "link" : "sbt\/internal\/Aggregation$.html#aggregatedKeys[T](key:sbt.Def.ScopedKey[T],extra:sbt.internal.BuildUtil[_],mask:sbt.ScopeMask):Seq[sbt.Def.ScopedKey[T]]", "kind" : "def"}, {"label" : "reverseAggregatedKeys", "tail" : "(key: Def.ScopedKey[T], extra: BuildUtil[_], mask: ScopeMask): Seq[Def.ScopedKey[T]]", "member" : "sbt.internal.Aggregation.reverseAggregatedKeys", "link" : "sbt\/internal\/Aggregation$.html#reverseAggregatedKeys[T](key:sbt.Def.ScopedKey[T],extra:sbt.internal.BuildUtil[_],mask:sbt.ScopeMask):Seq[sbt.Def.ScopedKey[T]]", "kind" : "def"}, {"label" : "aggregate", "tail" : "(key: Def.ScopedKey[T], rawMask: ScopeMask, extra: BuildUtil[Proj], reverse: Boolean): Seq[Def.ScopedKey[T]]", "member" : "sbt.internal.Aggregation.aggregate", "link" : "sbt\/internal\/Aggregation$.html#aggregate[T,Proj](key:sbt.Def.ScopedKey[T],rawMask:sbt.ScopeMask,extra:sbt.internal.BuildUtil[Proj],reverse:Boolean):Seq[sbt.Def.ScopedKey[T]]", "kind" : "def"}, {"label" : "projectAggregates", "tail" : "(proj: Option[Reference], extra: BuildUtil[Proj], reverse: Boolean): Seq[ProjectRef]", "member" : "sbt.internal.Aggregation.projectAggregates", "link" : "sbt\/internal\/Aggregation$.html#projectAggregates[Proj](proj:Option[sbt.Reference],extra:sbt.internal.BuildUtil[Proj],reverse:Boolean):Seq[sbt.ProjectRef]", "kind" : "def"}, {"label" : "evaluatingParser", "tail" : "(s: State, structure: BuildStructure, show: ShowConfig)(keys: Seq[KeyValue[_]])(display: Show[Def.ScopedKey[_]]): Parser[() ⇒ State]", "member" : "sbt.internal.Aggregation.evaluatingParser", "link" : "sbt\/internal\/Aggregation$.html#evaluatingParser(s:sbt.State,structure:sbt.internal.BuildStructure,show:sbt.internal.Aggregation.ShowConfig)(keys:Seq[sbt.internal.Aggregation.KeyValue[_]])(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "applyDynamicTasks", "tail" : "(s: State, structure: BuildStructure, inputs: Values[InputTask[I]], show: ShowConfig)(display: Show[Def.ScopedKey[_]]): Parser[() ⇒ State]", "member" : "sbt.internal.Aggregation.applyDynamicTasks", "link" : "sbt\/internal\/Aggregation$.html#applyDynamicTasks[I](s:sbt.State,structure:sbt.internal.BuildStructure,inputs:sbt.internal.Aggregation.Values[sbt.InputTask[I]],show:sbt.internal.Aggregation.ShowConfig)(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "defaultFormat", "tail" : "(): DateFormat", "member" : "sbt.internal.Aggregation.defaultFormat", "link" : "sbt\/internal\/Aggregation$.html#defaultFormat:java.text.DateFormat", "kind" : "def"}, {"label" : "timing", "tail" : "(format: DateFormat, startTime: Long, endTime: Long, s: String, log: Logger): String", "member" : "sbt.internal.Aggregation.timing", "link" : "sbt\/internal\/Aggregation$.html#timing(format:java.text.DateFormat,startTime:Long,endTime:Long,s:String,log:sbt.util.Logger):String", "kind" : "def"}, {"label" : "printSuccess", "tail" : "(start: Long, stop: Long, extracted: Extracted, success: Boolean, log: Logger): Unit", "member" : "sbt.internal.Aggregation.printSuccess", "link" : "sbt\/internal\/Aggregation$.html#printSuccess(start:Long,stop:Long,extracted:sbt.Extracted,success:Boolean,log:sbt.util.Logger):Unit", "kind" : "def"}, {"label" : "runTasks", "tail" : "(s: State, structure: BuildStructure, ts: Values[Task[T]], extra: DummyTaskMap, show: ShowConfig)(display: Show[Def.ScopedKey[_]]): State", "member" : "sbt.internal.Aggregation.runTasks", "link" : "sbt\/internal\/Aggregation$.html#runTasks[HL<:sbt.internal.util.HList,T](s:sbt.State,structure:sbt.internal.BuildStructure,ts:sbt.internal.Aggregation.Values[sbt.Task[T]],extra:sbt.std.Transform.DummyTaskMap,show:sbt.internal.Aggregation.ShowConfig)(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):sbt.State", "kind" : "def"}, {"label" : "timedRun", "tail" : "(s: State, ts: Values[Task[T]], extra: DummyTaskMap): Complete[T]", "member" : "sbt.internal.Aggregation.timedRun", "link" : "sbt\/internal\/Aggregation$.html#timedRun[T](s:sbt.State,ts:sbt.internal.Aggregation.Values[sbt.Task[T]],extra:sbt.std.Transform.DummyTaskMap):sbt.internal.Aggregation.Complete[T]", "kind" : "def"}, {"label" : "applyTasks", "tail" : "(s: State, structure: BuildStructure, ps: Values[Parser[Task[T]]], show: ShowConfig)(display: Show[Def.ScopedKey[_]]): Parser[() ⇒ State]", "member" : "sbt.internal.Aggregation.applyTasks", "link" : "sbt\/internal\/Aggregation$.html#applyTasks[T](s:sbt.State,structure:sbt.internal.BuildStructure,ps:sbt.internal.Aggregation.Values[sbt.internal.util.complete.Parser[sbt.Task[T]]],show:sbt.internal.Aggregation.ShowConfig)(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "seqParser", "tail" : "(ps: Values[Parser[T]]): Parser[Seq[KeyValue[T]]]", "member" : "sbt.internal.Aggregation.seqParser", "link" : "sbt\/internal\/Aggregation$.html#seqParser[T](ps:sbt.internal.Aggregation.Values[sbt.internal.util.complete.Parser[T]]):sbt.internal.util.complete.Parser[Seq[sbt.internal.Aggregation.KeyValue[T]]]", "kind" : "def"}, {"label" : "AnyKeys", "tail" : "", "member" : "sbt.internal.Aggregation.AnyKeys", "link" : "sbt\/internal\/Aggregation$.html#AnyKeys=sbt.internal.Aggregation.Values[_]", "kind" : "type"}, {"label" : "Values", "tail" : "", "member" : "sbt.internal.Aggregation.Values", "link" : "sbt\/internal\/Aggregation$.html#Values[T]=Seq[sbt.internal.Aggregation.KeyValue[T]]", "kind" : "type"}, {"label" : "printSettings", "tail" : "(xs: Seq[KeyValue[_]], print: (String) ⇒ Unit)(display: Show[Def.ScopedKey[_]]): Unit", "member" : "sbt.internal.Aggregation.printSettings", "link" : "sbt\/internal\/Aggregation$.html#printSettings(xs:Seq[sbt.internal.Aggregation.KeyValue[_]],print:String=>Unit)(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):Unit", "kind" : "def"}, {"label" : "defaultShow", "tail" : "(state: State, showTasks: Boolean): ShowConfig", "member" : "sbt.internal.Aggregation.defaultShow", "link" : "sbt\/internal\/Aggregation$.html#defaultShow(state:sbt.State,showTasks:Boolean):sbt.internal.Aggregation.ShowConfig", "kind" : "def"}, {"label" : "KeyValue", "tail" : "", "member" : "sbt.internal.Aggregation.KeyValue", "link" : "sbt\/internal\/Aggregation$.html#KeyValue[+T]extendsProductwithSerializable", "kind" : "final case class"}, {"label" : "Complete", "tail" : "", "member" : "sbt.internal.Aggregation.Complete", "link" : "sbt\/internal\/Aggregation$.html#Complete[T]extendsProductwithSerializable", "kind" : "final case class"}, {"label" : "ShowConfig", "tail" : "", "member" : "sbt.internal.Aggregation.ShowConfig", "link" : "sbt\/internal\/Aggregation$.html#ShowConfigextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/Aggregation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/Aggregation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/Aggregation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/Aggregation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/Aggregation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/Aggregation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/Aggregation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Aggregation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Aggregation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Aggregation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/Aggregation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/Aggregation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/Aggregation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/Aggregation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/Aggregation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/Aggregation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/Aggregation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/Aggregation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/Aggregation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/Aggregation.html", "kind" : "trait"}, {"name" : "sbt.internal.BuildDef", "members_trait" : [{"label" : "rootProject", "tail" : "(): Option[Project]", "member" : "sbt.internal.BuildDef.rootProject", "link" : "sbt\/internal\/BuildDef.html#rootProject:Option[sbt.Project]", "kind" : "def"}, {"label" : "buildLoaders", "tail" : "(): Seq[Components]", "member" : "sbt.internal.BuildDef.buildLoaders", "link" : "sbt\/internal\/BuildDef.html#buildLoaders:Seq[sbt.internal.BuildLoader.Components]", "kind" : "def"}, {"label" : "settings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.internal.BuildDef.settings", "link" : "sbt\/internal\/BuildDef.html#settings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "projects", "tail" : "(): Seq[Project]", "member" : "sbt.internal.BuildDef.projects", "link" : "sbt\/internal\/BuildDef.html#projects:Seq[sbt.Project]", "kind" : "def"}, {"label" : "projectDefinitions", "tail" : "(baseDirectory: File): Seq[Project]", "member" : "sbt.internal.BuildDef.projectDefinitions", "link" : "sbt\/internal\/BuildDef.html#projectDefinitions(baseDirectory:java.io.File):Seq[sbt.Project]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/BuildDef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/BuildDef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/BuildDef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/BuildDef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/BuildDef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/BuildDef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/BuildDef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildDef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildDef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildDef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/BuildDef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/BuildDef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/BuildDef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/BuildDef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/BuildDef.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/BuildDef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/BuildDef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/BuildDef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/BuildDef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/internal\/BuildDef.html", "kind" : "trait"}, {"name" : "sbt.internal.BuildDependencies", "shortDescription" : "", "object" : "sbt\/internal\/BuildDependencies$.html", "members_class" : [{"label" : "addAggregate", "tail" : "(ref: ProjectRef, deps: ProjectRef*): BuildDependencies", "member" : "sbt.internal.BuildDependencies.addAggregate", "link" : "sbt\/internal\/BuildDependencies.html#addAggregate(ref:sbt.ProjectRef,deps:sbt.ProjectRef*):sbt.internal.BuildDependencies", "kind" : "def"}, {"label" : "addClasspath", "tail" : "(ref: ProjectRef, deps: ClasspathDep[ProjectRef]*): BuildDependencies", "member" : "sbt.internal.BuildDependencies.addClasspath", "link" : "sbt\/internal\/BuildDependencies.html#addClasspath(ref:sbt.ProjectRef,deps:sbt.ClasspathDep[sbt.ProjectRef]*):sbt.internal.BuildDependencies", "kind" : "def"}, {"label" : "aggregateTransitive", "tail" : ": DependencyMap[ProjectRef]", "member" : "sbt.internal.BuildDependencies.aggregateTransitive", "link" : "sbt\/internal\/BuildDependencies.html#aggregateTransitive:sbt.internal.BuildDependencies.DependencyMap[sbt.ProjectRef]", "kind" : "lazy val"}, {"label" : "classpathTransitive", "tail" : ": DependencyMap[ProjectRef]", "member" : "sbt.internal.BuildDependencies.classpathTransitive", "link" : "sbt\/internal\/BuildDependencies.html#classpathTransitive:sbt.internal.BuildDependencies.DependencyMap[sbt.ProjectRef]", "kind" : "lazy val"}, {"label" : "classpathTransitiveRefs", "tail" : "(ref: ProjectRef): Seq[ProjectRef]", "member" : "sbt.internal.BuildDependencies.classpathTransitiveRefs", "link" : "sbt\/internal\/BuildDependencies.html#classpathTransitiveRefs(ref:sbt.ProjectRef):Seq[sbt.ProjectRef]", "kind" : "def"}, {"label" : "classpathRefs", "tail" : "(ref: ProjectRef): Seq[ProjectRef]", "member" : "sbt.internal.BuildDependencies.classpathRefs", "link" : "sbt\/internal\/BuildDependencies.html#classpathRefs(ref:sbt.ProjectRef):Seq[sbt.ProjectRef]", "kind" : "def"}, {"label" : "aggregate", "tail" : ": DependencyMap[ProjectRef]", "member" : "sbt.internal.BuildDependencies.aggregate", "link" : "sbt\/internal\/BuildDependencies.html#aggregate:sbt.internal.BuildDependencies.DependencyMap[sbt.ProjectRef]", "kind" : "val"}, {"label" : "classpath", "tail" : ": DependencyMap[ClasspathDep[ProjectRef]]", "member" : "sbt.internal.BuildDependencies.classpath", "link" : "sbt\/internal\/BuildDependencies.html#classpath:sbt.internal.BuildDependencies.DependencyMap[sbt.ClasspathDep[sbt.ProjectRef]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/BuildDependencies.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/BuildDependencies.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/BuildDependencies.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/BuildDependencies.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/BuildDependencies.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/BuildDependencies.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/BuildDependencies.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildDependencies.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildDependencies.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildDependencies.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/BuildDependencies.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/BuildDependencies.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/BuildDependencies.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/BuildDependencies.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/BuildDependencies.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/BuildDependencies.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/BuildDependencies.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/BuildDependencies.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/BuildDependencies.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "getID", "tail" : ": (ClasspathDep[ProjectRef]) ⇒ ProjectRef", "member" : "sbt.internal.BuildDependencies.getID", "link" : "sbt\/internal\/BuildDependencies$.html#getID:sbt.ClasspathDep[sbt.ProjectRef]=>sbt.ProjectRef", "kind" : "val"}, {"label" : "transitive", "tail" : "(deps: DependencyMap[D], extract: (D) ⇒ ProjectRef): DependencyMap[ProjectRef]", "member" : "sbt.internal.BuildDependencies.transitive", "link" : "sbt\/internal\/BuildDependencies$.html#transitive[D](deps:sbt.internal.BuildDependencies.DependencyMap[D],extract:D=>sbt.ProjectRef):sbt.internal.BuildDependencies.DependencyMap[sbt.ProjectRef]", "kind" : "def"}, {"label" : "DependencyMap", "tail" : "", "member" : "sbt.internal.BuildDependencies.DependencyMap", "link" : "sbt\/internal\/BuildDependencies$.html#DependencyMap[D]=Map[sbt.ProjectRef,Seq[D]]", "kind" : "type"}, {"label" : "apply", "tail" : "(classpath: DependencyMap[ClasspathDep[ProjectRef]], aggregate: DependencyMap[ProjectRef]): BuildDependencies", "member" : "sbt.internal.BuildDependencies.apply", "link" : "sbt\/internal\/BuildDependencies$.html#apply(classpath:sbt.internal.BuildDependencies.DependencyMap[sbt.ClasspathDep[sbt.ProjectRef]],aggregate:sbt.internal.BuildDependencies.DependencyMap[sbt.ProjectRef]):sbt.internal.BuildDependencies", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/BuildDependencies$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/BuildDependencies$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/BuildDependencies$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/BuildDependencies$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/BuildDependencies$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/BuildDependencies$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/BuildDependencies$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildDependencies$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildDependencies$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildDependencies$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/BuildDependencies$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/BuildDependencies$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/BuildDependencies$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/BuildDependencies$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/BuildDependencies$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/BuildDependencies$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/BuildDependencies$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/BuildDependencies$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/BuildDependencies$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/BuildDependencies.html", "kind" : "class"}, {"name" : "sbt.internal.BuildLoader", "shortDescription" : "", "object" : "sbt\/internal\/BuildLoader$.html", "members_class" : [{"label" : "apply", "tail" : "(uri: URI): BuildUnit", "member" : "sbt.internal.BuildLoader.apply", "link" : "sbt\/internal\/BuildLoader.html#apply(uri:java.net.URI):sbt.internal.BuildUnit", "kind" : "def"}, {"label" : "components", "tail" : "(): Components", "member" : "sbt.internal.BuildLoader.components", "link" : "sbt\/internal\/BuildLoader.html#components:sbt.internal.BuildLoader.Components", "kind" : "def"}, {"label" : "updatePluginManagement", "tail" : "(overrides: Set[ModuleID]): BuildLoader", "member" : "sbt.internal.BuildLoader.updatePluginManagement", "link" : "sbt\/internal\/BuildLoader.html#updatePluginManagement(overrides:Set[sbt.librarymanagement.ModuleID]):sbt.internal.BuildLoader", "kind" : "def"}, {"label" : "resetPluginDepth", "tail" : "(): BuildLoader", "member" : "sbt.internal.BuildLoader.resetPluginDepth", "link" : "sbt\/internal\/BuildLoader.html#resetPluginDepth:sbt.internal.BuildLoader", "kind" : "def"}, {"label" : "setRoot", "tail" : "(loaders: Components): BuildLoader", "member" : "sbt.internal.BuildLoader.setRoot", "link" : "sbt\/internal\/BuildLoader.html#setRoot(loaders:sbt.internal.BuildLoader.Components):sbt.internal.BuildLoader", "kind" : "def"}, {"label" : "addNonRoot", "tail" : "(uri: URI, loaders: Components): BuildLoader", "member" : "sbt.internal.BuildLoader.addNonRoot", "link" : "sbt\/internal\/BuildLoader.html#addNonRoot(uri:java.net.URI,loaders:sbt.internal.BuildLoader.Components):sbt.internal.BuildLoader", "kind" : "def"}, {"member" : "sbt.internal.BuildLoader#<init>", "error" : "unsupported entity"}, {"label" : "transformAll", "tail" : ": TransformAll", "member" : "sbt.internal.BuildLoader.transformAll", "link" : "sbt\/internal\/BuildLoader.html#transformAll:sbt.internal.BuildLoader.TransformAll", "kind" : "val"}, {"label" : "full", "tail" : ": MultiHandler[LoadInfo, () ⇒ BuildUnit]", "member" : "sbt.internal.BuildLoader.full", "link" : "sbt\/internal\/BuildLoader.html#full:sbt.internal.MultiHandler[sbt.internal.BuildLoader.LoadInfo,()=>sbt.internal.BuildUnit]", "kind" : "val"}, {"label" : "transformer", "tail" : ": Transformer", "member" : "sbt.internal.BuildLoader.transformer", "link" : "sbt\/internal\/BuildLoader.html#transformer:sbt.internal.BuildLoader.Transformer", "kind" : "val"}, {"label" : "builders", "tail" : ": MultiHandler[BuildInfo, () ⇒ BuildUnit]", "member" : "sbt.internal.BuildLoader.builders", "link" : "sbt\/internal\/BuildLoader.html#builders:sbt.internal.MultiHandler[sbt.internal.BuildLoader.BuildInfo,()=>sbt.internal.BuildUnit]", "kind" : "val"}, {"label" : "resolvers", "tail" : ": MultiHandler[ResolveInfo, () ⇒ File]", "member" : "sbt.internal.BuildLoader.resolvers", "link" : "sbt\/internal\/BuildLoader.html#resolvers:sbt.internal.MultiHandler[sbt.internal.BuildLoader.ResolveInfo,()=>java.io.File]", "kind" : "val"}, {"label" : "config", "tail" : ": LoadBuildConfiguration", "member" : "sbt.internal.BuildLoader.config", "link" : "sbt\/internal\/BuildLoader.html#config:sbt.internal.LoadBuildConfiguration", "kind" : "val"}, {"label" : "state", "tail" : ": State", "member" : "sbt.internal.BuildLoader.state", "link" : "sbt\/internal\/BuildLoader.html#state:sbt.State", "kind" : "val"}, {"label" : "fail", "tail" : ": (URI) ⇒ Nothing", "member" : "sbt.internal.BuildLoader.fail", "link" : "sbt\/internal\/BuildLoader.html#fail:java.net.URI=>Nothing", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/BuildLoader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/BuildLoader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/BuildLoader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/BuildLoader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/BuildLoader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/BuildLoader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/BuildLoader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildLoader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildLoader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildLoader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/BuildLoader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/BuildLoader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/BuildLoader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/BuildLoader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/BuildLoader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/BuildLoader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/BuildLoader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/BuildLoader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/BuildLoader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "componentLoader", "tail" : "(): Loader", "member" : "sbt.internal.BuildLoader.componentLoader", "link" : "sbt\/internal\/BuildLoader$.html#componentLoader:sbt.internal.BuildLoader.Loader", "kind" : "def"}, {"label" : "apply", "tail" : "(base: Components, fail: (URI) ⇒ Nothing, s: State, config: LoadBuildConfiguration): BuildLoader", "member" : "sbt.internal.BuildLoader.apply", "link" : "sbt\/internal\/BuildLoader$.html#apply(base:sbt.internal.BuildLoader.Components,fail:java.net.URI=>Nothing,s:sbt.State,config:sbt.internal.LoadBuildConfiguration):sbt.internal.BuildLoader", "kind" : "def"}, {"label" : "LoadInfo", "tail" : "", "member" : "sbt.internal.BuildLoader.LoadInfo", "link" : "sbt\/internal\/BuildLoader$.html#LoadInfoextendsBuildLoader.Info", "kind" : "final class"}, {"label" : "TransformInfo", "tail" : "", "member" : "sbt.internal.BuildLoader.TransformInfo", "link" : "sbt\/internal\/BuildLoader$.html#TransformInfoextendsBuildLoader.Info", "kind" : "final class"}, {"label" : "BuildInfo", "tail" : "", "member" : "sbt.internal.BuildLoader.BuildInfo", "link" : "sbt\/internal\/BuildLoader$.html#BuildInfoextendsBuildLoader.Info", "kind" : "final class"}, {"label" : "ResolveInfo", "tail" : "", "member" : "sbt.internal.BuildLoader.ResolveInfo", "link" : "sbt\/internal\/BuildLoader$.html#ResolveInfoextendsBuildLoader.Info", "kind" : "final class"}, {"label" : "Info", "tail" : "", "member" : "sbt.internal.BuildLoader.Info", "link" : "sbt\/internal\/BuildLoader$.html#InfoextendsAnyRef", "kind" : "sealed trait"}, {"label" : "seq", "tail" : "(a: Transformer, b: Transformer): Transformer", "member" : "sbt.internal.BuildLoader.seq", "link" : "sbt\/internal\/BuildLoader$.html#seq(a:sbt.internal.BuildLoader.Transformer,b:sbt.internal.BuildLoader.Transformer):sbt.internal.BuildLoader.Transformer", "kind" : "def"}, {"label" : "components", "tail" : "(resolver: Resolver, builder: Builder, transformer: Transformer, full: Loader, transformAll: TransformAll): Components", "member" : "sbt.internal.BuildLoader.components", "link" : "sbt\/internal\/BuildLoader$.html#components(resolver:sbt.internal.BuildLoader.Resolver,builder:sbt.internal.BuildLoader.Builder,transformer:sbt.internal.BuildLoader.Transformer,full:sbt.internal.BuildLoader.Loader,transformAll:sbt.internal.BuildLoader.TransformAll):sbt.internal.BuildLoader.Components", "kind" : "def"}, {"label" : "transformAll", "tail" : "(t: TransformAll): Components", "member" : "sbt.internal.BuildLoader.transformAll", "link" : "sbt\/internal\/BuildLoader$.html#transformAll(t:sbt.internal.BuildLoader.TransformAll):sbt.internal.BuildLoader.Components", "kind" : "def"}, {"label" : "full", "tail" : "(f: Loader): Components", "member" : "sbt.internal.BuildLoader.full", "link" : "sbt\/internal\/BuildLoader$.html#full(f:sbt.internal.BuildLoader.Loader):sbt.internal.BuildLoader.Components", "kind" : "def"}, {"label" : "build", "tail" : "(b: Builder): Components", "member" : "sbt.internal.BuildLoader.build", "link" : "sbt\/internal\/BuildLoader$.html#build(b:sbt.internal.BuildLoader.Builder):sbt.internal.BuildLoader.Components", "kind" : "def"}, {"label" : "resolve", "tail" : "(r: Resolver): Components", "member" : "sbt.internal.BuildLoader.resolve", "link" : "sbt\/internal\/BuildLoader$.html#resolve(r:sbt.internal.BuildLoader.Resolver):sbt.internal.BuildLoader.Components", "kind" : "def"}, {"label" : "transform", "tail" : "(t: Transformer): Components", "member" : "sbt.internal.BuildLoader.transform", "link" : "sbt\/internal\/BuildLoader$.html#transform(t:sbt.internal.BuildLoader.Transformer):sbt.internal.BuildLoader.Components", "kind" : "def"}, {"label" : "Components", "tail" : "", "member" : "sbt.internal.BuildLoader.Components", "link" : "sbt\/internal\/BuildLoader$.html#ComponentsextendsAnyRef", "kind" : "final class"}, {"label" : "TransformAll", "tail" : "", "member" : "sbt.internal.BuildLoader.TransformAll", "link" : "sbt\/internal\/BuildLoader$.html#TransformAll=sbt.internal.PartBuild=>sbt.internal.PartBuild", "kind" : "type"}, {"label" : "Loader", "tail" : "", "member" : "sbt.internal.BuildLoader.Loader", "link" : "sbt\/internal\/BuildLoader$.html#Loader=sbt.internal.BuildLoader.LoadInfo=>Option[()=>sbt.internal.BuildUnit]", "kind" : "type"}, {"label" : "Transformer", "tail" : "", "member" : "sbt.internal.BuildLoader.Transformer", "link" : "sbt\/internal\/BuildLoader$.html#Transformer=sbt.internal.BuildLoader.TransformInfo=>sbt.internal.BuildUnit", "kind" : "type"}, {"label" : "Builder", "tail" : "", "member" : "sbt.internal.BuildLoader.Builder", "link" : "sbt\/internal\/BuildLoader$.html#Builder=sbt.internal.BuildLoader.BuildInfo=>Option[()=>sbt.internal.BuildUnit]", "kind" : "type"}, {"label" : "Resolver", "tail" : "", "member" : "sbt.internal.BuildLoader.Resolver", "link" : "sbt\/internal\/BuildLoader$.html#Resolver=sbt.internal.BuildLoader.ResolveInfo=>Option[()=>java.io.File]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/BuildLoader$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/BuildLoader$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/BuildLoader$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/BuildLoader$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/BuildLoader$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/BuildLoader$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/BuildLoader$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildLoader$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildLoader$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildLoader$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/BuildLoader$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/BuildLoader$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/BuildLoader$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/BuildLoader$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/BuildLoader$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/BuildLoader$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/BuildLoader$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/BuildLoader$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/BuildLoader$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/BuildLoader.html", "kind" : "object"}, {"name" : "sbt.internal.BuildStreams", "shortDescription" : "", "object" : "sbt\/internal\/BuildStreams$.html", "members_object" : [{"label" : "refTarget", "tail" : "(scope: Scope, fallbackBase: File, data: Settings[Scope]): File", "member" : "sbt.internal.BuildStreams.refTarget", "link" : "sbt\/internal\/BuildStreams$.html#refTarget(scope:sbt.Scope,fallbackBase:java.io.File,data:sbt.internal.util.Settings[sbt.Scope]):java.io.File", "kind" : "def"}, {"label" : "refTarget", "tail" : "(ref: ResolvedReference, fallbackBase: File, data: Settings[Scope]): File", "member" : "sbt.internal.BuildStreams.refTarget", "link" : "sbt\/internal\/BuildStreams$.html#refTarget(ref:sbt.ResolvedReference,fallbackBase:java.io.File,data:sbt.internal.util.Settings[sbt.Scope]):java.io.File", "kind" : "def"}, {"label" : "projectPath", "tail" : "(units: Map[URI, LoadedBuildUnit], root: URI, scoped: Def.ScopedKey[_], data: Settings[Scope]): File", "member" : "sbt.internal.BuildStreams.projectPath", "link" : "sbt\/internal\/BuildStreams$.html#projectPath(units:Map[java.net.URI,sbt.internal.LoadedBuildUnit],root:java.net.URI,scoped:sbt.Def.ScopedKey[_],data:sbt.internal.util.Settings[sbt.Scope]):java.io.File", "kind" : "def"}, {"label" : "showAMap", "tail" : "(a: AttributeMap): String", "member" : "sbt.internal.BuildStreams.showAMap", "link" : "sbt\/internal\/BuildStreams$.html#showAMap(a:sbt.internal.util.AttributeMap):String", "kind" : "def"}, {"label" : "nonProjectPath", "tail" : "(scoped: Def.ScopedKey[T]): Seq[String]", "member" : "sbt.internal.BuildStreams.nonProjectPath", "link" : "sbt\/internal\/BuildStreams$.html#nonProjectPath[T](scoped:sbt.Def.ScopedKey[T]):Seq[String]", "kind" : "def"}, {"label" : "pathComponent", "tail" : "(axis: ScopeAxis[T], scoped: Def.ScopedKey[_], label: String)(show: (T) ⇒ String): String", "member" : "sbt.internal.BuildStreams.pathComponent", "link" : "sbt\/internal\/BuildStreams$.html#pathComponent[T](axis:sbt.ScopeAxis[T],scoped:sbt.Def.ScopedKey[_],label:String)(show:T=>String):String", "kind" : "def"}, {"label" : "resolvePath", "tail" : "(base: File, components: Seq[String]): File", "member" : "sbt.internal.BuildStreams.resolvePath", "link" : "sbt\/internal\/BuildStreams$.html#resolvePath(base:java.io.File,components:Seq[String]):java.io.File", "kind" : "def"}, {"label" : "path", "tail" : "(units: Map[URI, LoadedBuildUnit], root: URI, data: Settings[Scope])(scoped: Def.ScopedKey[_]): File", "member" : "sbt.internal.BuildStreams.path", "link" : "sbt\/internal\/BuildStreams$.html#path(units:Map[java.net.URI,sbt.internal.LoadedBuildUnit],root:java.net.URI,data:sbt.internal.util.Settings[sbt.Scope])(scoped:sbt.Def.ScopedKey[_]):java.io.File", "kind" : "def"}, {"label" : "mkStreams", "tail" : "(units: Map[URI, LoadedBuildUnit], root: URI, data: Settings[Scope]): (State) ⇒ Streams", "member" : "sbt.internal.BuildStreams.mkStreams", "link" : "sbt\/internal\/BuildStreams$.html#mkStreams(units:Map[java.net.URI,sbt.internal.LoadedBuildUnit],root:java.net.URI,data:sbt.internal.util.Settings[sbt.Scope]):sbt.State=>sbt.internal.BuildStreams.Streams", "kind" : "def"}, {"label" : "StreamsDirectory", "tail" : ": String(\"streams\")", "member" : "sbt.internal.BuildStreams.StreamsDirectory", "link" : "sbt\/internal\/BuildStreams$.html#StreamsDirectory:String(\"streams\")", "kind" : "final val"}, {"label" : "BuildUnitPath", "tail" : ": String(\"$build\")", "member" : "sbt.internal.BuildStreams.BuildUnitPath", "link" : "sbt\/internal\/BuildStreams$.html#BuildUnitPath:String(\"$build\")", "kind" : "final val"}, {"label" : "GlobalPath", "tail" : ": String(\"$global\")", "member" : "sbt.internal.BuildStreams.GlobalPath", "link" : "sbt\/internal\/BuildStreams$.html#GlobalPath:String(\"$global\")", "kind" : "final val"}, {"label" : "Streams", "tail" : "", "member" : "sbt.internal.BuildStreams.Streams", "link" : "sbt\/internal\/BuildStreams$.html#Streams=sbt.std.Streams[sbt.Def.ScopedKey[_]]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/BuildStreams$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/BuildStreams$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/BuildStreams$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/BuildStreams$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/BuildStreams$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/BuildStreams$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/BuildStreams$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildStreams$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildStreams$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildStreams$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/BuildStreams$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/BuildStreams$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/BuildStreams$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/BuildStreams$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/BuildStreams$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/BuildStreams$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/BuildStreams$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/BuildStreams$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/BuildStreams$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.BuildStructure", "shortDescription" : "", "members_class" : [{"label" : "extra", "tail" : ": BuildUtil[ResolvedProject]", "member" : "sbt.internal.BuildStructure.extra", "link" : "sbt\/internal\/BuildStructure.html#extra:sbt.internal.BuildUtil[sbt.ResolvedProject]", "kind" : "val"}, {"label" : "allProjectRefs", "tail" : "(build: URI): Seq[ProjectRef]", "member" : "sbt.internal.BuildStructure.allProjectRefs", "link" : "sbt\/internal\/BuildStructure.html#allProjectRefs(build:java.net.URI):Seq[sbt.ProjectRef]", "kind" : "def"}, {"label" : "allProjectRefs", "tail" : "(): Seq[ProjectRef]", "member" : "sbt.internal.BuildStructure.allProjectRefs", "link" : "sbt\/internal\/BuildStructure.html#allProjectRefs:Seq[sbt.ProjectRef]", "kind" : "def"}, {"label" : "allProjects", "tail" : "(build: URI): Seq[ResolvedProject]", "member" : "sbt.internal.BuildStructure.allProjects", "link" : "sbt\/internal\/BuildStructure.html#allProjects(build:java.net.URI):Seq[sbt.ResolvedProject]", "kind" : "def"}, {"label" : "allProjects", "tail" : "(): Seq[ResolvedProject]", "member" : "sbt.internal.BuildStructure.allProjects", "link" : "sbt\/internal\/BuildStructure.html#allProjects:Seq[sbt.ResolvedProject]", "kind" : "def"}, {"label" : "rootProject", "tail" : ": (URI) ⇒ String", "member" : "sbt.internal.BuildStructure.rootProject", "link" : "sbt\/internal\/BuildStructure.html#rootProject:java.net.URI=>String", "kind" : "val"}, {"member" : "sbt.internal.BuildStructure#<init>", "error" : "unsupported entity"}, {"label" : "scopeLocal", "tail" : ": Def.ScopeLocal", "member" : "sbt.internal.BuildStructure.scopeLocal", "link" : "sbt\/internal\/BuildStructure.html#scopeLocal:sbt.Def.ScopeLocal", "kind" : "val"}, {"label" : "delegates", "tail" : ": (Scope) ⇒ Seq[Scope]", "member" : "sbt.internal.BuildStructure.delegates", "link" : "sbt\/internal\/BuildStructure.html#delegates:sbt.Scope=>Seq[sbt.Scope]", "kind" : "val"}, {"label" : "streams", "tail" : ": (State) ⇒ Streams", "member" : "sbt.internal.BuildStructure.streams", "link" : "sbt\/internal\/BuildStructure.html#streams:sbt.State=>sbt.internal.BuildStreams.Streams", "kind" : "val"}, {"label" : "index", "tail" : ": StructureIndex", "member" : "sbt.internal.BuildStructure.index", "link" : "sbt\/internal\/BuildStructure.html#index:sbt.internal.StructureIndex", "kind" : "val"}, {"label" : "data", "tail" : ": Settings[Scope]", "member" : "sbt.internal.BuildStructure.data", "link" : "sbt\/internal\/BuildStructure.html#data:sbt.internal.util.Settings[sbt.Scope]", "kind" : "val"}, {"label" : "settings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.internal.BuildStructure.settings", "link" : "sbt\/internal\/BuildStructure.html#settings:Seq[sbt.Def.Setting[_]]", "kind" : "val"}, {"label" : "root", "tail" : ": URI", "member" : "sbt.internal.BuildStructure.root", "link" : "sbt\/internal\/BuildStructure.html#root:java.net.URI", "kind" : "val"}, {"label" : "units", "tail" : ": Map[URI, LoadedBuildUnit]", "member" : "sbt.internal.BuildStructure.units", "link" : "sbt\/internal\/BuildStructure.html#units:Map[java.net.URI,sbt.internal.LoadedBuildUnit]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/BuildStructure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/BuildStructure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/BuildStructure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/BuildStructure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/BuildStructure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/BuildStructure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/BuildStructure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildStructure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildStructure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildStructure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/BuildStructure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/BuildStructure.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/BuildStructure.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/BuildStructure.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/BuildStructure.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/BuildStructure.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/BuildStructure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/BuildStructure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/BuildStructure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/BuildStructure.html", "kind" : "class"}, {"name" : "sbt.internal.BuildUnit", "shortDescription" : "The loaded, but unresolved build unit.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.internal.BuildUnit.toString", "link" : "sbt\/internal\/BuildUnit.html#toString():String", "kind" : "def"}, {"member" : "sbt.internal.BuildUnit#<init>", "error" : "unsupported entity"}, {"label" : "plugins", "tail" : ": LoadedPlugins", "member" : "sbt.internal.BuildUnit.plugins", "link" : "sbt\/internal\/BuildUnit.html#plugins:sbt.internal.LoadedPlugins", "kind" : "val"}, {"label" : "definitions", "tail" : ": LoadedDefinitions", "member" : "sbt.internal.BuildUnit.definitions", "link" : "sbt\/internal\/BuildUnit.html#definitions:sbt.internal.LoadedDefinitions", "kind" : "val"}, {"label" : "localBase", "tail" : ": File", "member" : "sbt.internal.BuildUnit.localBase", "link" : "sbt\/internal\/BuildUnit.html#localBase:java.io.File", "kind" : "val"}, {"label" : "uri", "tail" : ": URI", "member" : "sbt.internal.BuildUnit.uri", "link" : "sbt\/internal\/BuildUnit.html#uri:java.net.URI", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/BuildUnit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/BuildUnit.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/BuildUnit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/BuildUnit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/BuildUnit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/BuildUnit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/BuildUnit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildUnit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildUnit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildUnit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/BuildUnit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/BuildUnit.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/BuildUnit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/BuildUnit.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/BuildUnit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/BuildUnit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/BuildUnit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/BuildUnit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/BuildUnit.html", "kind" : "class"}, {"name" : "sbt.internal.BuildUnitBase", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/BuildUnitBase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/BuildUnitBase.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/BuildUnitBase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/BuildUnitBase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/BuildUnitBase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/BuildUnitBase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/BuildUnitBase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildUnitBase.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildUnitBase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildUnitBase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/BuildUnitBase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/BuildUnitBase.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/BuildUnitBase.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/BuildUnitBase.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/BuildUnitBase.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/BuildUnitBase.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/BuildUnitBase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/BuildUnitBase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/BuildUnitBase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "buildSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.internal.BuildUnitBase.buildSettings", "link" : "sbt\/internal\/BuildUnitBase.html#buildSettings:Seq[sbt.Def.Setting[_]]", "kind" : "abstract def"}, {"label" : "rootProjects", "tail" : "(): Seq[String]", "member" : "sbt.internal.BuildUnitBase.rootProjects", "link" : "sbt\/internal\/BuildUnitBase.html#rootProjects:Seq[String]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/internal\/BuildUnitBase.html", "kind" : "trait"}, {"name" : "sbt.internal.BuildUtil", "shortDescription" : "", "object" : "sbt\/internal\/BuildUtil$.html", "members_class" : [{"label" : "configurationsForAxis", "tail" : ": (Option[ResolvedReference]) ⇒ Seq[String]", "member" : "sbt.internal.BuildUtil.configurationsForAxis", "link" : "sbt\/internal\/BuildUtil.html#configurationsForAxis:Option[sbt.ResolvedReference]=>Seq[String]", "kind" : "val"}, {"label" : "exactProject", "tail" : "(refOpt: Option[Reference]): Option[Proj]", "member" : "sbt.internal.BuildUtil.exactProject", "link" : "sbt\/internal\/BuildUtil.html#exactProject(refOpt:Option[sbt.Reference]):Option[Proj]", "kind" : "def"}, {"label" : "projectForAxis", "tail" : "(ref: Option[ResolvedReference]): Proj", "member" : "sbt.internal.BuildUtil.projectForAxis", "link" : "sbt\/internal\/BuildUtil.html#projectForAxis(ref:Option[sbt.ResolvedReference]):Proj", "kind" : "def"}, {"label" : "projectRefFor", "tail" : "(ref: ResolvedReference): ProjectRef", "member" : "sbt.internal.BuildUtil.projectRefFor", "link" : "sbt\/internal\/BuildUtil.html#projectRefFor(ref:sbt.ResolvedReference):sbt.ProjectRef", "kind" : "def"}, {"label" : "projectFor", "tail" : "(ref: ResolvedReference): Proj", "member" : "sbt.internal.BuildUtil.projectFor", "link" : "sbt\/internal\/BuildUtil.html#projectFor(ref:sbt.ResolvedReference):Proj", "kind" : "def"}, {"label" : "resolveRef", "tail" : "(ref: Reference): ResolvedReference", "member" : "sbt.internal.BuildUtil.resolveRef", "link" : "sbt\/internal\/BuildUtil.html#resolveRef(ref:sbt.Reference):sbt.ResolvedReference", "kind" : "def"}, {"label" : "rootProject", "tail" : "(uri: URI): Proj", "member" : "sbt.internal.BuildUtil.rootProject", "link" : "sbt\/internal\/BuildUtil.html#rootProject(uri:java.net.URI):Proj", "kind" : "def"}, {"member" : "sbt.internal.BuildUtil#<init>", "error" : "unsupported entity"}, {"label" : "aggregates", "tail" : ": Relation[ProjectRef, ProjectRef]", "member" : "sbt.internal.BuildUtil.aggregates", "link" : "sbt\/internal\/BuildUtil.html#aggregates:sbt.internal.util.Relation[sbt.ProjectRef,sbt.ProjectRef]", "kind" : "val"}, {"label" : "configurations", "tail" : ": (Proj) ⇒ Seq[ConfigKey]", "member" : "sbt.internal.BuildUtil.configurations", "link" : "sbt\/internal\/BuildUtil.html#configurations:Proj=>Seq[sbt.ConfigKey]", "kind" : "val"}, {"label" : "project", "tail" : ": (URI, String) ⇒ Proj", "member" : "sbt.internal.BuildUtil.project", "link" : "sbt\/internal\/BuildUtil.html#project:(java.net.URI,String)=>Proj", "kind" : "val"}, {"label" : "rootProjectID", "tail" : ": (URI) ⇒ String", "member" : "sbt.internal.BuildUtil.rootProjectID", "link" : "sbt\/internal\/BuildUtil.html#rootProjectID:java.net.URI=>String", "kind" : "val"}, {"label" : "root", "tail" : ": URI", "member" : "sbt.internal.BuildUtil.root", "link" : "sbt\/internal\/BuildUtil.html#root:java.net.URI", "kind" : "val"}, {"label" : "data", "tail" : ": Settings[Scope]", "member" : "sbt.internal.BuildUtil.data", "link" : "sbt\/internal\/BuildUtil.html#data:sbt.internal.util.Settings[sbt.Scope]", "kind" : "val"}, {"label" : "keyIndex", "tail" : ": KeyIndex", "member" : "sbt.internal.BuildUtil.keyIndex", "link" : "sbt\/internal\/BuildUtil.html#keyIndex:sbt.internal.KeyIndex", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/BuildUtil.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/BuildUtil.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/BuildUtil.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/BuildUtil.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/BuildUtil.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/BuildUtil.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/BuildUtil.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildUtil.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildUtil.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildUtil.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/BuildUtil.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/BuildUtil.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/BuildUtil.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/BuildUtil.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/BuildUtil.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/BuildUtil.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/BuildUtil.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/BuildUtil.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/BuildUtil.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "aggregationRelation", "tail" : "(units: Map[URI, LoadedBuildUnit]): Relation[ProjectRef, ProjectRef]", "member" : "sbt.internal.BuildUtil.aggregationRelation", "link" : "sbt\/internal\/BuildUtil$.html#aggregationRelation(units:Map[java.net.URI,sbt.internal.LoadedBuildUnit]):sbt.internal.util.Relation[sbt.ProjectRef,sbt.ProjectRef]", "kind" : "def"}, {"label" : "rootedName", "tail" : "(s: String): String", "member" : "sbt.internal.BuildUtil.rootedName", "link" : "sbt\/internal\/BuildUtil$.html#rootedName(s:String):String", "kind" : "def"}, {"label" : "importAllRoot", "tail" : "(values: Seq[String]): Seq[String]", "member" : "sbt.internal.BuildUtil.importAllRoot", "link" : "sbt\/internal\/BuildUtil$.html#importAllRoot(values:Seq[String]):Seq[String]", "kind" : "def"}, {"label" : "importAll", "tail" : "(values: Seq[String]): Seq[String]", "member" : "sbt.internal.BuildUtil.importAll", "link" : "sbt\/internal\/BuildUtil$.html#importAll(values:Seq[String]):Seq[String]", "kind" : "def"}, {"label" : "importNamesRoot", "tail" : "(names: Seq[String]): Seq[String]", "member" : "sbt.internal.BuildUtil.importNamesRoot", "link" : "sbt\/internal\/BuildUtil$.html#importNamesRoot(names:Seq[String]):Seq[String]", "kind" : "def"}, {"label" : "importNames", "tail" : "(names: Seq[String]): Seq[String]", "member" : "sbt.internal.BuildUtil.importNames", "link" : "sbt\/internal\/BuildUtil$.html#importNames(names:Seq[String]):Seq[String]", "kind" : "def"}, {"label" : "getImports", "tail" : "(names: Seq[String]): Seq[String]", "member" : "sbt.internal.BuildUtil.getImports", "link" : "sbt\/internal\/BuildUtil$.html#getImports(names:Seq[String]):Seq[String]", "kind" : "def"}, {"label" : "getImports", "tail" : "(unit: BuildUnit): Seq[String]", "member" : "sbt.internal.BuildUtil.getImports", "link" : "sbt\/internal\/BuildUtil$.html#getImports(unit:sbt.internal.BuildUnit):Seq[String]", "kind" : "def"}, {"label" : "baseImports", "tail" : "(): Seq[String]", "member" : "sbt.internal.BuildUtil.baseImports", "link" : "sbt\/internal\/BuildUtil$.html#baseImports:Seq[String]", "kind" : "def"}, {"label" : "checkCycles", "tail" : "(units: Map[URI, LoadedBuildUnit]): Unit", "member" : "sbt.internal.BuildUtil.checkCycles", "link" : "sbt\/internal\/BuildUtil$.html#checkCycles(units:Map[java.net.URI,sbt.internal.LoadedBuildUnit]):Unit", "kind" : "def"}, {"label" : "dependencies", "tail" : "(units: Map[URI, LoadedBuildUnit]): BuildDependencies", "member" : "sbt.internal.BuildUtil.dependencies", "link" : "sbt\/internal\/BuildUtil$.html#dependencies(units:Map[java.net.URI,sbt.internal.LoadedBuildUnit]):sbt.internal.BuildDependencies", "kind" : "def"}, {"label" : "apply", "tail" : "(root: URI, units: Map[URI, LoadedBuildUnit], keyIndex: KeyIndex, data: Settings[Scope]): BuildUtil[ResolvedProject]", "member" : "sbt.internal.BuildUtil.apply", "link" : "sbt\/internal\/BuildUtil$.html#apply(root:java.net.URI,units:Map[java.net.URI,sbt.internal.LoadedBuildUnit],keyIndex:sbt.internal.KeyIndex,data:sbt.internal.util.Settings[sbt.Scope]):sbt.internal.BuildUtil[sbt.ResolvedProject]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/BuildUtil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/BuildUtil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/BuildUtil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/BuildUtil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/BuildUtil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/BuildUtil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/BuildUtil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildUtil$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildUtil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/BuildUtil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/BuildUtil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/BuildUtil$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/BuildUtil$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/BuildUtil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/BuildUtil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/BuildUtil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/BuildUtil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/BuildUtil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/BuildUtil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/BuildUtil.html", "kind" : "class"}, {"name" : "sbt.internal.CommandChannel", "shortDescription" : "A command channel represents an IO device such as network socket or humanthat can issue command or listen for some outputs.", "members_class" : [{"label" : "poll", "tail" : "(): Option[Exec]", "member" : "sbt.internal.CommandChannel.poll", "link" : "sbt\/internal\/CommandChannel.html#poll:Option[sbt.Exec]", "kind" : "def"}, {"label" : "append", "tail" : "(exec: Exec): Boolean", "member" : "sbt.internal.CommandChannel.append", "link" : "sbt\/internal\/CommandChannel.html#append(exec:sbt.Exec):Boolean", "kind" : "def"}, {"member" : "sbt.internal.CommandChannel#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/CommandChannel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/CommandChannel.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/CommandChannel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/CommandChannel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/CommandChannel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/CommandChannel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/CommandChannel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/CommandChannel.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/CommandChannel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/CommandChannel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/CommandChannel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/CommandChannel.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/CommandChannel.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/CommandChannel.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/CommandChannel.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/CommandChannel.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/CommandChannel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/CommandChannel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/CommandChannel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "sbt.internal.CommandChannel.name", "link" : "sbt\/internal\/CommandChannel.html#name:String", "kind" : "abstract def"}, {"label" : "shutdown", "tail" : "(): Unit", "member" : "sbt.internal.CommandChannel.shutdown", "link" : "sbt\/internal\/CommandChannel.html#shutdown():Unit", "kind" : "abstract def"}, {"label" : "publishBytes", "tail" : "(bytes: Array[Byte]): Unit", "member" : "sbt.internal.CommandChannel.publishBytes", "link" : "sbt\/internal\/CommandChannel.html#publishBytes(bytes:Array[Byte]):Unit", "kind" : "abstract def"}, {"label" : "publishEventMessage", "tail" : "(event: EventMessage): Unit", "member" : "sbt.internal.CommandChannel.publishEventMessage", "link" : "sbt\/internal\/CommandChannel.html#publishEventMessage(event:sbt.protocol.EventMessage):Unit", "kind" : "abstract def"}, {"label" : "publishEvent", "tail" : "(event: A)(arg0: JsonFormat[A]): Unit", "member" : "sbt.internal.CommandChannel.publishEvent", "link" : "sbt\/internal\/CommandChannel.html#publishEvent[A](event:A)(implicitevidence$1:sjsonnew.JsonFormat[A]):Unit", "kind" : "abstract def"}], "class" : "sbt\/internal\/CommandChannel.html", "kind" : "class"}, {"name" : "sbt.internal.CommandStrings", "shortDescription" : "", "object" : "sbt\/internal\/CommandStrings$.html", "members_object" : [{"label" : "PluginSwitchDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.PluginSwitchDetailed", "link" : "sbt\/internal\/CommandStrings$.html#PluginSwitchDetailed:String", "kind" : "def"}, {"label" : "PluginCrossDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.PluginCrossDetailed", "link" : "sbt\/internal\/CommandStrings$.html#PluginCrossDetailed:String", "kind" : "def"}, {"label" : "pluginSwitchHelp", "tail" : "(): Help", "member" : "sbt.internal.CommandStrings.pluginSwitchHelp", "link" : "sbt\/internal\/CommandStrings$.html#pluginSwitchHelp:sbt.Help", "kind" : "def"}, {"label" : "pluginCrossHelp", "tail" : "(): Help", "member" : "sbt.internal.CommandStrings.pluginCrossHelp", "link" : "sbt\/internal\/CommandStrings$.html#pluginCrossHelp:sbt.Help", "kind" : "def"}, {"label" : "PluginSwitchCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.PluginSwitchCommand", "link" : "sbt\/internal\/CommandStrings$.html#PluginSwitchCommand:String", "kind" : "val"}, {"label" : "PluginCrossCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.PluginCrossCommand", "link" : "sbt\/internal\/CommandStrings$.html#PluginCrossCommand:String", "kind" : "val"}, {"label" : "SwitchDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.SwitchDetailed", "link" : "sbt\/internal\/CommandStrings$.html#SwitchDetailed:String", "kind" : "def"}, {"label" : "CrossRestoreSessionDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.CrossRestoreSessionDetailed", "link" : "sbt\/internal\/CommandStrings$.html#CrossRestoreSessionDetailed:String", "kind" : "def"}, {"label" : "CrossDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.CrossDetailed", "link" : "sbt\/internal\/CommandStrings$.html#CrossDetailed:String", "kind" : "def"}, {"label" : "switchHelp", "tail" : "(): Help", "member" : "sbt.internal.CommandStrings.switchHelp", "link" : "sbt\/internal\/CommandStrings$.html#switchHelp:sbt.Help", "kind" : "def"}, {"label" : "crossRestoreSessionHelp", "tail" : "(): Help", "member" : "sbt.internal.CommandStrings.crossRestoreSessionHelp", "link" : "sbt\/internal\/CommandStrings$.html#crossRestoreSessionHelp:sbt.Help", "kind" : "def"}, {"label" : "crossHelp", "tail" : "(): Help", "member" : "sbt.internal.CommandStrings.crossHelp", "link" : "sbt\/internal\/CommandStrings$.html#crossHelp:sbt.Help", "kind" : "def"}, {"label" : "SwitchCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.SwitchCommand", "link" : "sbt\/internal\/CommandStrings$.html#SwitchCommand:String", "kind" : "val"}, {"label" : "CrossRestoreSessionCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.CrossRestoreSessionCommand", "link" : "sbt\/internal\/CommandStrings$.html#CrossRestoreSessionCommand:String", "kind" : "val"}, {"label" : "CrossCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.CrossCommand", "link" : "sbt\/internal\/CommandStrings$.html#CrossCommand:String", "kind" : "val"}, {"label" : "sbtRCs", "tail" : "(s: State): Seq[File]", "member" : "sbt.internal.CommandStrings.sbtRCs", "link" : "sbt\/internal\/CommandStrings$.html#sbtRCs(s:sbt.State):Seq[java.io.File]", "kind" : "def"}, {"label" : "InitDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.InitDetailed", "link" : "sbt\/internal\/CommandStrings$.html#InitDetailed:String", "kind" : "def"}, {"label" : "InitBrief", "tail" : "(): (String, String)", "member" : "sbt.internal.CommandStrings.InitBrief", "link" : "sbt\/internal\/CommandStrings$.html#InitBrief:(String,String)", "kind" : "def"}, {"label" : "InitCommand", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.InitCommand", "link" : "sbt\/internal\/CommandStrings$.html#InitCommand:String", "kind" : "def"}, {"label" : "LoadProjectDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.LoadProjectDetailed", "link" : "sbt\/internal\/CommandStrings$.html#LoadProjectDetailed:String", "kind" : "def"}, {"label" : "LoadProjectBrief", "tail" : "(): (String, String)", "member" : "sbt.internal.CommandStrings.LoadProjectBrief", "link" : "sbt\/internal\/CommandStrings$.html#LoadProjectBrief:(String,String)", "kind" : "def"}, {"label" : "LoadProject", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.LoadProject", "link" : "sbt\/internal\/CommandStrings$.html#LoadProject:String", "kind" : "def"}, {"label" : "LoadProjectImpl", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.LoadProjectImpl", "link" : "sbt\/internal\/CommandStrings$.html#LoadProjectImpl:String", "kind" : "def"}, {"label" : "LoadFailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.LoadFailed", "link" : "sbt\/internal\/CommandStrings$.html#LoadFailed:String", "kind" : "def"}, {"label" : "LoadCommandLabel", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.LoadCommandLabel", "link" : "sbt\/internal\/CommandStrings$.html#LoadCommandLabel:String", "kind" : "def"}, {"label" : "LoadCommand", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.LoadCommand", "link" : "sbt\/internal\/CommandStrings$.html#LoadCommand:String", "kind" : "def"}, {"label" : "LoadLabel", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.LoadLabel", "link" : "sbt\/internal\/CommandStrings$.html#LoadLabel:String", "kind" : "def"}, {"label" : "Load", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.Load", "link" : "sbt\/internal\/CommandStrings$.html#Load:String", "kind" : "def"}, {"label" : "DefaultsDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.DefaultsDetailed", "link" : "sbt\/internal\/CommandStrings$.html#DefaultsDetailed:String", "kind" : "def"}, {"label" : "DefaultsBrief", "tail" : "(): (String, String)", "member" : "sbt.internal.CommandStrings.DefaultsBrief", "link" : "sbt\/internal\/CommandStrings$.html#DefaultsBrief:(String,String)", "kind" : "def"}, {"label" : "DefaultsCommand", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.DefaultsCommand", "link" : "sbt\/internal\/CommandStrings$.html#DefaultsCommand:String", "kind" : "def"}, {"label" : "sbtrc", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.sbtrc", "link" : "sbt\/internal\/CommandStrings$.html#sbtrc:String", "kind" : "def"}, {"label" : "projectsDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.projectsDetailed", "link" : "sbt\/internal\/CommandStrings$.html#projectsDetailed:String", "kind" : "def"}, {"label" : "projectsBrief", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.projectsBrief", "link" : "sbt\/internal\/CommandStrings$.html#projectsBrief:String", "kind" : "def"}, {"label" : "projectDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.projectDetailed", "link" : "sbt\/internal\/CommandStrings$.html#projectDetailed:String", "kind" : "def"}, {"label" : "projectBrief", "tail" : "(): (String, String)", "member" : "sbt.internal.CommandStrings.projectBrief", "link" : "sbt\/internal\/CommandStrings$.html#projectBrief:(String,String)", "kind" : "def"}, {"label" : "aboutDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.aboutDetailed", "link" : "sbt\/internal\/CommandStrings$.html#aboutDetailed:String", "kind" : "def"}, {"label" : "aboutBrief", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.aboutBrief", "link" : "sbt\/internal\/CommandStrings$.html#aboutBrief:String", "kind" : "def"}, {"label" : "moreAvailableMessage", "tail" : "(label: String, search: Boolean): String", "member" : "sbt.internal.CommandStrings.moreAvailableMessage", "link" : "sbt\/internal\/CommandStrings$.html#moreAvailableMessage(label:String,search:Boolean):String", "kind" : "def"}, {"label" : "settingsDetailed", "tail" : "(label: String): String", "member" : "sbt.internal.CommandStrings.settingsDetailed", "link" : "sbt\/internal\/CommandStrings$.html#settingsDetailed(label:String):String", "kind" : "def"}, {"label" : "settingsBrief", "tail" : "(label: String): (String, String)", "member" : "sbt.internal.CommandStrings.settingsBrief", "link" : "sbt\/internal\/CommandStrings$.html#settingsBrief(label:String):(String,String)", "kind" : "def"}, {"label" : "commonPreamble", "tail" : "(label: String): String", "member" : "sbt.internal.CommandStrings.commonPreamble", "link" : "sbt\/internal\/CommandStrings$.html#commonPreamble(label:String):String", "kind" : "def"}, {"label" : "tasksPreamble", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.tasksPreamble", "link" : "sbt\/internal\/CommandStrings$.html#tasksPreamble:String", "kind" : "def"}, {"label" : "settingsPreamble", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.settingsPreamble", "link" : "sbt\/internal\/CommandStrings$.html#settingsPreamble:String", "kind" : "def"}, {"label" : "sessionBrief", "tail" : "(): (String, String)", "member" : "sbt.internal.CommandStrings.sessionBrief", "link" : "sbt\/internal\/CommandStrings$.html#sessionBrief:(String,String)", "kind" : "def"}, {"label" : "SessionCommand", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.SessionCommand", "link" : "sbt\/internal\/CommandStrings$.html#SessionCommand:String", "kind" : "def"}, {"label" : "setDetailed", "tail" : ": String", "member" : "sbt.internal.CommandStrings.setDetailed", "link" : "sbt\/internal\/CommandStrings$.html#setDetailed:String", "kind" : "val"}, {"label" : "setBrief", "tail" : ": (String, String)", "member" : "sbt.internal.CommandStrings.setBrief", "link" : "sbt\/internal\/CommandStrings$.html#setBrief:(String,String)", "kind" : "val"}, {"label" : "SetCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.SetCommand", "link" : "sbt\/internal\/CommandStrings$.html#SetCommand:String", "kind" : "val"}, {"label" : "inspectDetailed", "tail" : ": String", "member" : "sbt.internal.CommandStrings.inspectDetailed", "link" : "sbt\/internal\/CommandStrings$.html#inspectDetailed:String", "kind" : "val"}, {"label" : "inspectBrief", "tail" : ": (String, String)", "member" : "sbt.internal.CommandStrings.inspectBrief", "link" : "sbt\/internal\/CommandStrings$.html#inspectBrief:(String,String)", "kind" : "val"}, {"label" : "InspectCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.InspectCommand", "link" : "sbt\/internal\/CommandStrings$.html#InspectCommand:String", "kind" : "val"}, {"label" : "exportDetailed", "tail" : ": String", "member" : "sbt.internal.CommandStrings.exportDetailed", "link" : "sbt\/internal\/CommandStrings$.html#exportDetailed:String", "kind" : "val"}, {"label" : "exportBrief", "tail" : ": (String, String)", "member" : "sbt.internal.CommandStrings.exportBrief", "link" : "sbt\/internal\/CommandStrings$.html#exportBrief:(String,String)", "kind" : "val"}, {"label" : "lastDetailed", "tail" : ": String", "member" : "sbt.internal.CommandStrings.lastDetailed", "link" : "sbt\/internal\/CommandStrings$.html#lastDetailed:String", "kind" : "val"}, {"label" : "lastBrief", "tail" : ": (String, String)", "member" : "sbt.internal.CommandStrings.lastBrief", "link" : "sbt\/internal\/CommandStrings$.html#lastBrief:(String,String)", "kind" : "val"}, {"label" : "lastGrepDetailed", "tail" : ": String", "member" : "sbt.internal.CommandStrings.lastGrepDetailed", "link" : "sbt\/internal\/CommandStrings$.html#lastGrepDetailed:String", "kind" : "val"}, {"label" : "lastGrepBrief", "tail" : ": (String, String)", "member" : "sbt.internal.CommandStrings.lastGrepBrief", "link" : "sbt\/internal\/CommandStrings$.html#lastGrepBrief:(String,String)", "kind" : "val"}, {"label" : "ExportStream", "tail" : ": String", "member" : "sbt.internal.CommandStrings.ExportStream", "link" : "sbt\/internal\/CommandStrings$.html#ExportStream:String", "kind" : "val"}, {"label" : "ExportCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.ExportCommand", "link" : "sbt\/internal\/CommandStrings$.html#ExportCommand:String", "kind" : "val"}, {"label" : "LastGrepCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.LastGrepCommand", "link" : "sbt\/internal\/CommandStrings$.html#LastGrepCommand:String", "kind" : "val"}, {"label" : "LastCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.LastCommand", "link" : "sbt\/internal\/CommandStrings$.html#LastCommand:String", "kind" : "val"}, {"label" : "pluginsDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.pluginsDetailed", "link" : "sbt\/internal\/CommandStrings$.html#pluginsDetailed:String", "kind" : "def"}, {"label" : "pluginsBrief", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.pluginsBrief", "link" : "sbt\/internal\/CommandStrings$.html#pluginsBrief:String", "kind" : "def"}, {"label" : "PluginCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.PluginCommand", "link" : "sbt\/internal\/CommandStrings$.html#PluginCommand:String", "kind" : "val"}, {"label" : "PluginsCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.PluginsCommand", "link" : "sbt\/internal\/CommandStrings$.html#PluginsCommand:String", "kind" : "val"}, {"label" : "showDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.showDetailed", "link" : "sbt\/internal\/CommandStrings$.html#showDetailed:String", "kind" : "def"}, {"label" : "showBrief", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.showBrief", "link" : "sbt\/internal\/CommandStrings$.html#showBrief:String", "kind" : "def"}, {"label" : "showHelp", "tail" : "(): Help", "member" : "sbt.internal.CommandStrings.showHelp", "link" : "sbt\/internal\/CommandStrings$.html#showHelp:sbt.Help", "kind" : "def"}, {"label" : "multiTaskBrief", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.multiTaskBrief", "link" : "sbt\/internal\/CommandStrings$.html#multiTaskBrief:String", "kind" : "def"}, {"label" : "multiTaskSyntax", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.multiTaskSyntax", "link" : "sbt\/internal\/CommandStrings$.html#multiTaskSyntax:String", "kind" : "def"}, {"label" : "multiTaskDetailed", "tail" : "(): String", "member" : "sbt.internal.CommandStrings.multiTaskDetailed", "link" : "sbt\/internal\/CommandStrings$.html#multiTaskDetailed:String", "kind" : "def"}, {"label" : "multiTaskHelp", "tail" : "(): Help", "member" : "sbt.internal.CommandStrings.multiTaskHelp", "link" : "sbt\/internal\/CommandStrings$.html#multiTaskHelp:sbt.Help", "kind" : "def"}, {"label" : "actHelp", "tail" : "(): Help", "member" : "sbt.internal.CommandStrings.actHelp", "link" : "sbt\/internal\/CommandStrings$.html#actHelp:sbt.Help", "kind" : "def"}, {"label" : "evalDetailed", "tail" : ": String", "member" : "sbt.internal.CommandStrings.evalDetailed", "link" : "sbt\/internal\/CommandStrings$.html#evalDetailed:String", "kind" : "val"}, {"label" : "evalBrief", "tail" : ": (String, String)", "member" : "sbt.internal.CommandStrings.evalBrief", "link" : "sbt\/internal\/CommandStrings$.html#evalBrief:(String,String)", "kind" : "val"}, {"label" : "EvalCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.EvalCommand", "link" : "sbt\/internal\/CommandStrings$.html#EvalCommand:String", "kind" : "val"}, {"label" : "BootCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.BootCommand", "link" : "sbt\/internal\/CommandStrings$.html#BootCommand:String", "kind" : "val"}, {"label" : "MultiTaskCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.MultiTaskCommand", "link" : "sbt\/internal\/CommandStrings$.html#MultiTaskCommand:String", "kind" : "val"}, {"label" : "ShowCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.ShowCommand", "link" : "sbt\/internal\/CommandStrings$.html#ShowCommand:String", "kind" : "val"}, {"label" : "ProjectsCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.ProjectsCommand", "link" : "sbt\/internal\/CommandStrings$.html#ProjectsCommand:String", "kind" : "val"}, {"label" : "ProjectCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.ProjectCommand", "link" : "sbt\/internal\/CommandStrings$.html#ProjectCommand:String", "kind" : "val"}, {"label" : "SettingsCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.SettingsCommand", "link" : "sbt\/internal\/CommandStrings$.html#SettingsCommand:String", "kind" : "val"}, {"label" : "TasksCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.TasksCommand", "link" : "sbt\/internal\/CommandStrings$.html#TasksCommand:String", "kind" : "val"}, {"label" : "AboutCommand", "tail" : ": String", "member" : "sbt.internal.CommandStrings.AboutCommand", "link" : "sbt\/internal\/CommandStrings$.html#AboutCommand:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/CommandStrings$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/CommandStrings$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/CommandStrings$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/CommandStrings$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/CommandStrings$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/CommandStrings$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/CommandStrings$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/CommandStrings$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/CommandStrings$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/CommandStrings$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/CommandStrings$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/CommandStrings$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/CommandStrings$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/CommandStrings$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/CommandStrings$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/CommandStrings$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/CommandStrings$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/CommandStrings$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/CommandStrings$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.ConsoleProject", "shortDescription" : "", "object" : "sbt\/internal\/ConsoleProject$.html", "members_object" : [{"label" : "Evaluate", "tail" : "", "member" : "sbt.internal.ConsoleProject.Evaluate", "link" : "sbt\/internal\/ConsoleProject$.html#Evaluate[T]extendsAnyRef", "kind" : "final class"}, {"label" : "Imports", "tail" : "", "member" : "sbt.internal.ConsoleProject.Imports", "link" : "sbt\/internal\/ConsoleProject$.html#ImportsextendsAnyRef", "kind" : "final class"}, {"label" : "apply", "tail" : "(state: State, extra: String, cleanupCommands: String, options: Seq[String])(log: Logger): Unit", "member" : "sbt.internal.ConsoleProject.apply", "link" : "sbt\/internal\/ConsoleProject$.html#apply(state:sbt.State,extra:String,cleanupCommands:String,options:Seq[String])(implicitlog:sbt.util.Logger):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/ConsoleProject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/ConsoleProject$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/ConsoleProject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/ConsoleProject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/ConsoleProject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/ConsoleProject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/ConsoleProject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ConsoleProject$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ConsoleProject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ConsoleProject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/ConsoleProject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/ConsoleProject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/ConsoleProject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/ConsoleProject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/ConsoleProject$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/ConsoleProject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/ConsoleProject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/ConsoleProject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/ConsoleProject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.ConsolePromptEvent", "shortDescription" : "", "members_case class" : [{"member" : "sbt.internal.ConsolePromptEvent#<init>", "error" : "unsupported entity"}, {"label" : "state", "tail" : ": State", "member" : "sbt.internal.ConsolePromptEvent.state", "link" : "sbt\/internal\/ConsolePromptEvent.html#state:sbt.State", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.EventMessage.toString", "link" : "sbt\/internal\/ConsolePromptEvent.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.EventMessage.hashCode", "link" : "sbt\/internal\/ConsolePromptEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.EventMessage.equals", "link" : "sbt\/internal\/ConsolePromptEvent.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/ConsolePromptEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/ConsolePromptEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/ConsolePromptEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/ConsolePromptEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/ConsolePromptEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/ConsolePromptEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/ConsolePromptEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ConsolePromptEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ConsolePromptEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ConsolePromptEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/ConsolePromptEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/ConsolePromptEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/ConsolePromptEvent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/ConsolePromptEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/ConsolePromptEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/ConsolePromptEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/ConsolePromptEvent.html", "kind" : "case class"}, {"name" : "sbt.internal.ConsoleUnpromptEvent", "shortDescription" : "", "members_case class" : [{"member" : "sbt.internal.ConsoleUnpromptEvent#<init>", "error" : "unsupported entity"}, {"label" : "lastSource", "tail" : ": Option[CommandSource]", "member" : "sbt.internal.ConsoleUnpromptEvent.lastSource", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#lastSource:Option[sbt.CommandSource]", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.EventMessage.toString", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.EventMessage.hashCode", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.EventMessage.equals", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/ConsoleUnpromptEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/ConsoleUnpromptEvent.html", "kind" : "case class"}, {"name" : "sbt.internal.DetectedAutoPlugin", "shortDescription" : "Auto-detected auto plugin.", "members_case class" : [{"member" : "sbt.internal.DetectedAutoPlugin#<init>", "error" : "unsupported entity"}, {"label" : "hasAutoImport", "tail" : ": Boolean", "member" : "sbt.internal.DetectedAutoPlugin.hasAutoImport", "link" : "sbt\/internal\/DetectedAutoPlugin.html#hasAutoImport:Boolean", "kind" : "val"}, {"label" : "value", "tail" : ": AutoPlugin", "member" : "sbt.internal.DetectedAutoPlugin.value", "link" : "sbt\/internal\/DetectedAutoPlugin.html#value:sbt.AutoPlugin", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "sbt.internal.DetectedAutoPlugin.name", "link" : "sbt\/internal\/DetectedAutoPlugin.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/DetectedAutoPlugin.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/DetectedAutoPlugin.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/DetectedAutoPlugin.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/DetectedAutoPlugin.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/DetectedAutoPlugin.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/DetectedAutoPlugin.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/DetectedAutoPlugin.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DetectedAutoPlugin.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DetectedAutoPlugin.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DetectedAutoPlugin.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/DetectedAutoPlugin.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/DetectedAutoPlugin.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/DetectedAutoPlugin.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/DetectedAutoPlugin.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/DetectedAutoPlugin.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/DetectedAutoPlugin.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/DetectedAutoPlugin.html", "kind" : "case class"}, {"name" : "sbt.internal.DetectedModules", "shortDescription" : "Auto-detected top-level modules (as in object X) of type T paired with their source names.", "members_class" : [{"label" : "values", "tail" : "(): Seq[T]", "member" : "sbt.internal.DetectedModules.values", "link" : "sbt\/internal\/DetectedModules.html#values:Seq[T]", "kind" : "def"}, {"label" : "names", "tail" : "(): Seq[String]", "member" : "sbt.internal.DetectedModules.names", "link" : "sbt\/internal\/DetectedModules.html#names:Seq[String]", "kind" : "def"}, {"member" : "sbt.internal.DetectedModules#<init>", "error" : "unsupported entity"}, {"label" : "modules", "tail" : ": Seq[(String, T)]", "member" : "sbt.internal.DetectedModules.modules", "link" : "sbt\/internal\/DetectedModules.html#modules:Seq[(String,T)]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/DetectedModules.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/DetectedModules.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/DetectedModules.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/DetectedModules.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/DetectedModules.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/DetectedModules.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/DetectedModules.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DetectedModules.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DetectedModules.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DetectedModules.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/DetectedModules.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/DetectedModules.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/DetectedModules.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/DetectedModules.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/DetectedModules.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/DetectedModules.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/DetectedModules.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/DetectedModules.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/DetectedModules.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/DetectedModules.html", "kind" : "class"}, {"name" : "sbt.internal.DetectedPlugins", "shortDescription" : "Auto-discovered modules for the build definition project.", "members_class" : [{"label" : "deducePluginsFromProject", "tail" : "(p: Project, log: Logger): Seq[AutoPlugin]", "member" : "sbt.internal.DetectedPlugins.deducePluginsFromProject", "link" : "sbt\/internal\/DetectedPlugins.html#deducePluginsFromProject(p:sbt.Project,log:sbt.util.Logger):Seq[sbt.AutoPlugin]", "kind" : "def"}, {"label" : "imports", "tail" : ": Seq[String]", "member" : "sbt.internal.DetectedPlugins.imports", "link" : "sbt\/internal\/DetectedPlugins.html#imports:Seq[String]", "kind" : "lazy val"}, {"member" : "sbt.internal.DetectedPlugins#<init>", "error" : "unsupported entity"}, {"label" : "builds", "tail" : ": DetectedModules[BuildDef]", "member" : "sbt.internal.DetectedPlugins.builds", "link" : "sbt\/internal\/DetectedPlugins.html#builds:sbt.internal.DetectedModules[sbt.internal.BuildDef]", "kind" : "val"}, {"label" : "autoPlugins", "tail" : ": Seq[DetectedAutoPlugin]", "member" : "sbt.internal.DetectedPlugins.autoPlugins", "link" : "sbt\/internal\/DetectedPlugins.html#autoPlugins:Seq[sbt.internal.DetectedAutoPlugin]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/DetectedPlugins.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/DetectedPlugins.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/DetectedPlugins.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/DetectedPlugins.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/DetectedPlugins.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/DetectedPlugins.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/DetectedPlugins.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DetectedPlugins.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DetectedPlugins.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DetectedPlugins.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/DetectedPlugins.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/DetectedPlugins.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/DetectedPlugins.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/DetectedPlugins.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/DetectedPlugins.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/DetectedPlugins.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/DetectedPlugins.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/DetectedPlugins.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/DetectedPlugins.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/DetectedPlugins.html", "kind" : "class"}, {"name" : "sbt.internal.DslEntry", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/DslEntry.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/DslEntry.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/DslEntry.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/DslEntry.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/DslEntry.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/DslEntry.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/DslEntry.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DslEntry.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DslEntry.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DslEntry.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/DslEntry.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/DslEntry.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/DslEntry.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/DslEntry.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/DslEntry.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/DslEntry.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/DslEntry.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/DslEntry.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/DslEntry.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withPos", "tail" : "(pos: RangePosition): DslEntry", "member" : "sbt.internal.DslEntry.withPos", "link" : "sbt\/internal\/DslEntry.html#withPos(pos:sbt.internal.util.RangePosition):sbt.internal.DslEntry", "kind" : "abstract def"}], "shortDescription" : "This represents a Setting expression configured by the sbt DSL.", "object" : "sbt\/internal\/DslEntry$.html", "members_object" : [{"label" : "DslAggregate", "tail" : "", "member" : "sbt.internal.DslEntry.DslAggregate", "link" : "sbt\/internal\/DslEntry$.html#DslAggregateextendsDslEntry.ProjectManipulationwithProductwithSerializable", "kind" : "case class"}, {"label" : "DslConfigs", "tail" : "", "member" : "sbt.internal.DslEntry.DslConfigs", "link" : "sbt\/internal\/DslEntry$.html#DslConfigsextendsDslEntry.ProjectManipulationwithProductwithSerializable", "kind" : "case class"}, {"label" : "DslDependsOn", "tail" : "", "member" : "sbt.internal.DslEntry.DslDependsOn", "link" : "sbt\/internal\/DslEntry$.html#DslDependsOnextendsDslEntry.ProjectManipulationwithProductwithSerializable", "kind" : "case class"}, {"label" : "DslDisablePlugins", "tail" : "", "member" : "sbt.internal.DslEntry.DslDisablePlugins", "link" : "sbt\/internal\/DslEntry$.html#DslDisablePluginsextendsDslEntry.ProjectManipulationwithProductwithSerializable", "kind" : "case class"}, {"label" : "DslEnablePlugins", "tail" : "", "member" : "sbt.internal.DslEntry.DslEnablePlugins", "link" : "sbt\/internal\/DslEntry$.html#DslEnablePluginsextendsDslEntry.ProjectManipulationwithProductwithSerializable", "kind" : "case class"}, {"label" : "DslSetting", "tail" : "", "member" : "sbt.internal.DslEntry.DslSetting", "link" : "sbt\/internal\/DslEntry$.html#DslSettingextendsDslEntry.ProjectSettingswithProductwithSerializable", "kind" : "case class"}, {"label" : "ProjectManipulation", "tail" : "", "member" : "sbt.internal.DslEntry.ProjectManipulation", "link" : "sbt\/internal\/DslEntry$.html#ProjectManipulation", "kind" : "object"}, {"label" : "ProjectManipulation", "tail" : "", "member" : "sbt.internal.DslEntry.ProjectManipulation", "link" : "sbt\/internal\/DslEntry$.html#ProjectManipulationextendsDslEntry", "kind" : "sealed trait"}, {"label" : "ProjectSettings", "tail" : "", "member" : "sbt.internal.DslEntry.ProjectSettings", "link" : "sbt\/internal\/DslEntry$.html#ProjectSettings", "kind" : "object"}, {"label" : "ProjectSettings", "tail" : "", "member" : "sbt.internal.DslEntry.ProjectSettings", "link" : "sbt\/internal\/DslEntry$.html#ProjectSettingsextendsDslEntry", "kind" : "sealed trait"}, {"label" : "fromSettingsDef", "tail" : "(inc: Seq[Def.Setting[_]]): DslEntry", "member" : "sbt.internal.DslEntry.fromSettingsDef", "link" : "sbt\/internal\/DslEntry$.html#fromSettingsDef(inc:Seq[sbt.Def.Setting[_]]):sbt.internal.DslEntry", "kind" : "implicit def"}, {"label" : "fromSettingsDef", "tail" : "(inc: Def.SettingsDefinition): DslEntry", "member" : "sbt.internal.DslEntry.fromSettingsDef", "link" : "sbt\/internal\/DslEntry$.html#fromSettingsDef(inc:sbt.Def.SettingsDefinition):sbt.internal.DslEntry", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/DslEntry$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/DslEntry$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/DslEntry$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/DslEntry$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/DslEntry$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/DslEntry$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/DslEntry$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DslEntry$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DslEntry$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/DslEntry$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/DslEntry$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/DslEntry$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/DslEntry$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/DslEntry$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/DslEntry$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/DslEntry$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/DslEntry$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/DslEntry$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/DslEntry$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/DslEntry.html", "kind" : "trait"}, {"name" : "sbt.internal.ExtendableKeyIndex", "members_trait" : [{"label" : "isEmpty", "tail" : "(proj: Option[ResolvedReference], conf: Option[String], task: Option[AttributeKey[_]]): Boolean", "member" : "sbt.internal.KeyIndex.isEmpty", "link" : "sbt\/internal\/ExtendableKeyIndex.html#isEmpty(proj:Option[sbt.ResolvedReference],conf:Option[String],task:Option[sbt.internal.util.AttributeKey[_]]):Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(proj: Option[ResolvedReference], conf: Option[String]): Boolean", "member" : "sbt.internal.KeyIndex.isEmpty", "link" : "sbt\/internal\/ExtendableKeyIndex.html#isEmpty(proj:Option[sbt.ResolvedReference],conf:Option[String]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/ExtendableKeyIndex.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/ExtendableKeyIndex.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/ExtendableKeyIndex.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/ExtendableKeyIndex.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/ExtendableKeyIndex.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/ExtendableKeyIndex.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/ExtendableKeyIndex.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ExtendableKeyIndex.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ExtendableKeyIndex.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ExtendableKeyIndex.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/ExtendableKeyIndex.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/ExtendableKeyIndex.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/ExtendableKeyIndex.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/ExtendableKeyIndex.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/ExtendableKeyIndex.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/ExtendableKeyIndex.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/ExtendableKeyIndex.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/ExtendableKeyIndex.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/ExtendableKeyIndex.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "addAggregated", "tail" : "(scoped: Def.ScopedKey[_], extra: BuildUtil[_]): ExtendableKeyIndex", "member" : "sbt.internal.ExtendableKeyIndex.addAggregated", "link" : "sbt\/internal\/ExtendableKeyIndex.html#addAggregated(scoped:sbt.Def.ScopedKey[_],extra:sbt.internal.BuildUtil[_]):sbt.internal.ExtendableKeyIndex", "kind" : "abstract def"}, {"label" : "add", "tail" : "(scoped: Def.ScopedKey[_]): ExtendableKeyIndex", "member" : "sbt.internal.ExtendableKeyIndex.add", "link" : "sbt\/internal\/ExtendableKeyIndex.html#add(scoped:sbt.Def.ScopedKey[_]):sbt.internal.ExtendableKeyIndex", "kind" : "abstract def"}, {"label" : "keys", "tail" : "(proj: Option[ResolvedReference], conf: Option[String], task: Option[AttributeKey[_]]): Set[String]", "member" : "sbt.internal.KeyIndex.keys", "link" : "sbt\/internal\/ExtendableKeyIndex.html#keys(proj:Option[sbt.ResolvedReference],conf:Option[String],task:Option[sbt.internal.util.AttributeKey[_]]):Set[String]", "kind" : "abstract def"}, {"label" : "keys", "tail" : "(proj: Option[ResolvedReference], conf: Option[String]): Set[String]", "member" : "sbt.internal.KeyIndex.keys", "link" : "sbt\/internal\/ExtendableKeyIndex.html#keys(proj:Option[sbt.ResolvedReference],conf:Option[String]):Set[String]", "kind" : "abstract def"}, {"label" : "keys", "tail" : "(proj: Option[ResolvedReference]): Set[String]", "member" : "sbt.internal.KeyIndex.keys", "link" : "sbt\/internal\/ExtendableKeyIndex.html#keys(proj:Option[sbt.ResolvedReference]):Set[String]", "kind" : "abstract def"}, {"label" : "tasks", "tail" : "(proj: Option[ResolvedReference], conf: Option[String], key: String): Set[AttributeKey[_]]", "member" : "sbt.internal.KeyIndex.tasks", "link" : "sbt\/internal\/ExtendableKeyIndex.html#tasks(proj:Option[sbt.ResolvedReference],conf:Option[String],key:String):Set[sbt.internal.util.AttributeKey[_]]", "kind" : "abstract def"}, {"label" : "tasks", "tail" : "(proj: Option[ResolvedReference], conf: Option[String]): Set[AttributeKey[_]]", "member" : "sbt.internal.KeyIndex.tasks", "link" : "sbt\/internal\/ExtendableKeyIndex.html#tasks(proj:Option[sbt.ResolvedReference],conf:Option[String]):Set[sbt.internal.util.AttributeKey[_]]", "kind" : "abstract def"}, {"label" : "configs", "tail" : "(proj: Option[ResolvedReference]): Set[String]", "member" : "sbt.internal.KeyIndex.configs", "link" : "sbt\/internal\/ExtendableKeyIndex.html#configs(proj:Option[sbt.ResolvedReference]):Set[String]", "kind" : "abstract def"}, {"label" : "exists", "tail" : "(project: Option[ResolvedReference]): Boolean", "member" : "sbt.internal.KeyIndex.exists", "link" : "sbt\/internal\/ExtendableKeyIndex.html#exists(project:Option[sbt.ResolvedReference]):Boolean", "kind" : "abstract def"}, {"label" : "projects", "tail" : "(uri: URI): Set[String]", "member" : "sbt.internal.KeyIndex.projects", "link" : "sbt\/internal\/ExtendableKeyIndex.html#projects(uri:java.net.URI):Set[String]", "kind" : "abstract def"}, {"label" : "buildURIs", "tail" : "(): Set[URI]", "member" : "sbt.internal.KeyIndex.buildURIs", "link" : "sbt\/internal\/ExtendableKeyIndex.html#buildURIs:Set[java.net.URI]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/internal\/ExtendableKeyIndex.html", "kind" : "trait"}, {"name" : "sbt.internal.GlobalPlugin", "shortDescription" : "", "object" : "sbt\/internal\/GlobalPlugin$.html", "members_object" : [{"label" : "globalPluginSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.internal.GlobalPlugin.globalPluginSettings", "link" : "sbt\/internal\/GlobalPlugin$.html#globalPluginSettings:Seq[sbt.Def.Setting[_]]", "kind" : "val"}, {"label" : "evaluate", "tail" : "(state: State, structure: BuildStructure, t: Task[T], roots: Seq[Def.ScopedKey[_]]): (State, T)", "member" : "sbt.internal.GlobalPlugin.evaluate", "link" : "sbt\/internal\/GlobalPlugin$.html#evaluate[T](state:sbt.State,structure:sbt.internal.BuildStructure,t:sbt.Task[T],roots:Seq[sbt.Def.ScopedKey[_]]):(sbt.State,T)", "kind" : "def"}, {"label" : "extract", "tail" : "(state: State, structure: BuildStructure): (State, GlobalPluginData)", "member" : "sbt.internal.GlobalPlugin.extract", "link" : "sbt\/internal\/GlobalPlugin$.html#extract(state:sbt.State,structure:sbt.internal.BuildStructure):(sbt.State,sbt.internal.GlobalPluginData)", "kind" : "def"}, {"label" : "load", "tail" : "(base: File, s: State, config: LoadBuildConfiguration): GlobalPlugin", "member" : "sbt.internal.GlobalPlugin.load", "link" : "sbt\/internal\/GlobalPlugin$.html#load(base:java.io.File,s:sbt.State,config:sbt.internal.LoadBuildConfiguration):sbt.internal.GlobalPlugin", "kind" : "def"}, {"label" : "build", "tail" : "(base: File, s: State, config: LoadBuildConfiguration): (BuildStructure, State)", "member" : "sbt.internal.GlobalPlugin.build", "link" : "sbt\/internal\/GlobalPlugin$.html#build(base:java.io.File,s:sbt.State,config:sbt.internal.LoadBuildConfiguration):(sbt.internal.BuildStructure,sbt.State)", "kind" : "def"}, {"label" : "inject", "tail" : "(gp: GlobalPluginData): Seq[Def.Setting[_]]", "member" : "sbt.internal.GlobalPlugin.inject", "link" : "sbt\/internal\/GlobalPlugin$.html#inject(gp:sbt.internal.GlobalPluginData):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/GlobalPlugin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/GlobalPlugin$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/GlobalPlugin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/GlobalPlugin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/GlobalPlugin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/GlobalPlugin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/GlobalPlugin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/GlobalPlugin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/GlobalPlugin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/GlobalPlugin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/GlobalPlugin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/GlobalPlugin$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/GlobalPlugin$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/GlobalPlugin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/GlobalPlugin$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/GlobalPlugin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/GlobalPlugin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/GlobalPlugin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/GlobalPlugin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "sbt.internal.GlobalPlugin#<init>", "error" : "unsupported entity"}, {"label" : "base", "tail" : ": File", "member" : "sbt.internal.GlobalPlugin.base", "link" : "sbt\/internal\/GlobalPlugin.html#base:java.io.File", "kind" : "val"}, {"label" : "inject", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.internal.GlobalPlugin.inject", "link" : "sbt\/internal\/GlobalPlugin.html#inject:Seq[sbt.Def.Setting[_]]", "kind" : "val"}, {"label" : "structure", "tail" : ": BuildStructure", "member" : "sbt.internal.GlobalPlugin.structure", "link" : "sbt\/internal\/GlobalPlugin.html#structure:sbt.internal.BuildStructure", "kind" : "val"}, {"label" : "data", "tail" : ": GlobalPluginData", "member" : "sbt.internal.GlobalPlugin.data", "link" : "sbt\/internal\/GlobalPlugin.html#data:sbt.internal.GlobalPluginData", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/GlobalPlugin.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/GlobalPlugin.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/GlobalPlugin.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/GlobalPlugin.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/GlobalPlugin.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/GlobalPlugin.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/GlobalPlugin.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/GlobalPlugin.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/GlobalPlugin.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/GlobalPlugin.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/GlobalPlugin.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/GlobalPlugin.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/GlobalPlugin.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/GlobalPlugin.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/GlobalPlugin.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/GlobalPlugin.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/GlobalPlugin.html", "kind" : "object"}, {"name" : "sbt.internal.GlobalPluginData", "shortDescription" : "", "members_case class" : [{"member" : "sbt.internal.GlobalPluginData#<init>", "error" : "unsupported entity"}, {"label" : "updateReport", "tail" : ": UpdateReport", "member" : "sbt.internal.GlobalPluginData.updateReport", "link" : "sbt\/internal\/GlobalPluginData.html#updateReport:sbt.librarymanagement.UpdateReport", "kind" : "val"}, {"label" : "internalClasspath", "tail" : ": Classpath", "member" : "sbt.internal.GlobalPluginData.internalClasspath", "link" : "sbt\/internal\/GlobalPluginData.html#internalClasspath:sbt.Keys.Classpath", "kind" : "val"}, {"label" : "fullClasspath", "tail" : ": Classpath", "member" : "sbt.internal.GlobalPluginData.fullClasspath", "link" : "sbt\/internal\/GlobalPluginData.html#fullClasspath:sbt.Keys.Classpath", "kind" : "val"}, {"label" : "resolvers", "tail" : ": Vector[Resolver]", "member" : "sbt.internal.GlobalPluginData.resolvers", "link" : "sbt\/internal\/GlobalPluginData.html#resolvers:Vector[sbt.librarymanagement.Resolver]", "kind" : "val"}, {"label" : "descriptors", "tail" : ": Map[ModuleRevisionId, ModuleDescriptor]", "member" : "sbt.internal.GlobalPluginData.descriptors", "link" : "sbt\/internal\/GlobalPluginData.html#descriptors:Map[org.apache.ivy.core.module.id.ModuleRevisionId,org.apache.ivy.core.module.descriptor.ModuleDescriptor]", "kind" : "val"}, {"label" : "dependencies", "tail" : ": Seq[ModuleID]", "member" : "sbt.internal.GlobalPluginData.dependencies", "link" : "sbt\/internal\/GlobalPluginData.html#dependencies:Seq[sbt.librarymanagement.ModuleID]", "kind" : "val"}, {"label" : "projectID", "tail" : ": ModuleID", "member" : "sbt.internal.GlobalPluginData.projectID", "link" : "sbt\/internal\/GlobalPluginData.html#projectID:sbt.librarymanagement.ModuleID", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/GlobalPluginData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/GlobalPluginData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/GlobalPluginData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/GlobalPluginData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/GlobalPluginData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/GlobalPluginData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/GlobalPluginData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/GlobalPluginData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/GlobalPluginData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/GlobalPluginData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/GlobalPluginData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/GlobalPluginData.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/GlobalPluginData.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/GlobalPluginData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/GlobalPluginData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/GlobalPluginData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/GlobalPluginData.html", "kind" : "case class"}, {"name" : "sbt.internal.Graph", "shortDescription" : "", "object" : "sbt\/internal\/Graph$.html", "members_object" : [{"label" : "toAscii", "tail" : "(top: A, children: (A) ⇒ Seq[A], display: (A) ⇒ String, defaultWidth: Int): String", "member" : "sbt.internal.Graph.toAscii", "link" : "sbt\/internal\/Graph$.html#toAscii[A](top:A,children:A=>Seq[A],display:A=>String,defaultWidth:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/Graph$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/Graph$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/Graph$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/Graph$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/Graph$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/Graph$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/Graph$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Graph$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Graph$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Graph$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/Graph$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/Graph$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/Graph$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/Graph$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/Graph$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/Graph$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/Graph$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/Graph$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/Graph$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.IncompatiblePluginsException", "shortDescription" : "", "members_class" : [{"member" : "sbt.internal.IncompatiblePluginsException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "sbt\/internal\/IncompatiblePluginsException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "sbt\/internal\/IncompatiblePluginsException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "sbt\/internal\/IncompatiblePluginsException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "sbt\/internal\/IncompatiblePluginsException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "sbt\/internal\/IncompatiblePluginsException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/internal\/IncompatiblePluginsException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/internal\/IncompatiblePluginsException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/internal\/IncompatiblePluginsException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "sbt\/internal\/IncompatiblePluginsException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "sbt\/internal\/IncompatiblePluginsException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "sbt\/internal\/IncompatiblePluginsException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "sbt\/internal\/IncompatiblePluginsException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "sbt\/internal\/IncompatiblePluginsException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/IncompatiblePluginsException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/IncompatiblePluginsException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/IncompatiblePluginsException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/IncompatiblePluginsException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/IncompatiblePluginsException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/IncompatiblePluginsException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/IncompatiblePluginsException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/IncompatiblePluginsException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/IncompatiblePluginsException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/IncompatiblePluginsException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/IncompatiblePluginsException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/IncompatiblePluginsException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/IncompatiblePluginsException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/IncompatiblePluginsException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/IncompatiblePluginsException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/IncompatiblePluginsException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/IncompatiblePluginsException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/IncompatiblePluginsException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/IncompatiblePluginsException.html", "kind" : "class"}, {"name" : "sbt.internal.Index", "shortDescription" : "", "object" : "sbt\/internal\/Index$.html", "members_object" : [{"label" : "triggers", "tail" : "(ss: Settings[Scope]): Triggers[Task]", "member" : "sbt.internal.Index.triggers", "link" : "sbt\/internal\/Index$.html#triggers(ss:sbt.internal.util.Settings[sbt.Scope]):sbt.Triggers[sbt.Task]", "kind" : "def"}, {"label" : "stringToKeyMap", "tail" : "(settings: Set[AttributeKey[_]]): Map[String, AttributeKey[_]]", "member" : "sbt.internal.Index.stringToKeyMap", "link" : "sbt\/internal\/Index$.html#stringToKeyMap(settings:Set[sbt.internal.util.AttributeKey[_]]):Map[String,sbt.internal.util.AttributeKey[_]]", "kind" : "def"}, {"label" : "attributeKeys", "tail" : "(settings: Settings[Scope]): Set[AttributeKey[_]]", "member" : "sbt.internal.Index.attributeKeys", "link" : "sbt\/internal\/Index$.html#attributeKeys(settings:sbt.internal.util.Settings[sbt.Scope]):Set[sbt.internal.util.AttributeKey[_]]", "kind" : "def"}, {"label" : "allKeys", "tail" : "(settings: Seq[Def.Setting[_]]): Set[Def.ScopedKey[_]]", "member" : "sbt.internal.Index.allKeys", "link" : "sbt\/internal\/Index$.html#allKeys(settings:Seq[sbt.Def.Setting[_]]):Set[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "taskToKeyMap", "tail" : "(data: Settings[Scope]): Map[Task[_], Def.ScopedKey[Task[_]]]", "member" : "sbt.internal.Index.taskToKeyMap", "link" : "sbt\/internal\/Index$.html#taskToKeyMap(data:sbt.internal.util.Settings[sbt.Scope]):Map[sbt.Task[_],sbt.Def.ScopedKey[sbt.Task[_]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/Index$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/Index$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/Index$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/Index$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/Index$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/Index$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/Index$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Index$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Index$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Index$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/Index$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/Index$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/Index$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/Index$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/Index$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/Index$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/Index$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/Index$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/Index$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.Inspect", "shortDescription" : "", "object" : "sbt\/internal\/Inspect$.html", "members_object" : [{"label" : "output", "tail" : "(s: State, option: Mode, sk: Def.ScopedKey[_]): String", "member" : "sbt.internal.Inspect.output", "link" : "sbt\/internal\/Inspect$.html#output(s:sbt.State,option:sbt.internal.Inspect.Mode,sk:sbt.Def.ScopedKey[_]):String", "kind" : "def"}, {"label" : "spacedKeyParser", "tail" : ": (State) ⇒ Parser[Def.ScopedKey[_]]", "member" : "sbt.internal.Inspect.spacedKeyParser", "link" : "sbt\/internal\/Inspect$.html#spacedKeyParser:sbt.State=>sbt.internal.util.complete.Parser[sbt.Def.ScopedKey[_]]", "kind" : "val"}, {"label" : "allKeyParser", "tail" : "(s: State): Parser[AttributeKey[_]]", "member" : "sbt.internal.Inspect.allKeyParser", "link" : "sbt\/internal\/Inspect$.html#allKeyParser(s:sbt.State):sbt.internal.util.complete.Parser[sbt.internal.util.AttributeKey[_]]", "kind" : "def"}, {"label" : "spacedModeParser", "tail" : ": (State) ⇒ Parser[Mode]", "member" : "sbt.internal.Inspect.spacedModeParser", "link" : "sbt\/internal\/Inspect$.html#spacedModeParser:sbt.State=>sbt.internal.util.complete.Parser[sbt.internal.Inspect.Mode]", "kind" : "val"}, {"label" : "parser", "tail" : "(): (State) ⇒ Parser[(Mode, Def.ScopedKey[_])]", "member" : "sbt.internal.Inspect.parser", "link" : "sbt\/internal\/Inspect$.html#parser:sbt.State=>sbt.internal.util.complete.Parser[(sbt.internal.Inspect.Mode,sbt.Def.ScopedKey[_])]", "kind" : "def"}, {"label" : "Definitions", "tail" : ": Mode", "member" : "sbt.internal.Inspect.Definitions", "link" : "sbt\/internal\/Inspect$.html#Definitions:sbt.internal.Inspect.Mode", "kind" : "val"}, {"label" : "Uses", "tail" : ": Mode", "member" : "sbt.internal.Inspect.Uses", "link" : "sbt\/internal\/Inspect$.html#Uses:sbt.internal.Inspect.Mode", "kind" : "val"}, {"label" : "DependencyTree", "tail" : ": Mode", "member" : "sbt.internal.Inspect.DependencyTree", "link" : "sbt\/internal\/Inspect$.html#DependencyTree:sbt.internal.Inspect.Mode", "kind" : "val"}, {"label" : "Details", "tail" : "", "member" : "sbt.internal.Inspect.Details", "link" : "sbt\/internal\/Inspect$.html#DetailsextendsInspect.ModewithProductwithSerializable", "kind" : "final case class"}, {"label" : "Mode", "tail" : "", "member" : "sbt.internal.Inspect.Mode", "link" : "sbt\/internal\/Inspect$.html#ModeextendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/Inspect$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/Inspect$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/Inspect$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/Inspect$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/Inspect$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/Inspect$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/Inspect$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Inspect$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Inspect$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Inspect$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/Inspect$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/Inspect$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/Inspect$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/Inspect$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/Inspect$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/Inspect$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/Inspect$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/Inspect$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/Inspect$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.IvyConsole", "shortDescription" : "", "object" : "sbt\/internal\/IvyConsole$.html", "members_object" : [{"label" : "parseManaged", "tail" : "(arg: String, log: Logger): Seq[ModuleID]", "member" : "sbt.internal.IvyConsole.parseManaged", "link" : "sbt\/internal\/IvyConsole$.html#parseManaged(arg:String,log:sbt.util.Logger):Seq[sbt.librarymanagement.ModuleID]", "kind" : "def"}, {"label" : "DepPattern", "tail" : ": Regex", "member" : "sbt.internal.IvyConsole.DepPattern", "link" : "sbt\/internal\/IvyConsole$.html#DepPattern:scala.util.matching.Regex", "kind" : "val"}, {"label" : "parseArgument", "tail" : "(log: Logger)(acc: Dependencies, arg: String): Dependencies", "member" : "sbt.internal.IvyConsole.parseArgument", "link" : "sbt\/internal\/IvyConsole$.html#parseArgument(log:sbt.util.Logger)(acc:sbt.internal.IvyConsole.Dependencies,arg:String):sbt.internal.IvyConsole.Dependencies", "kind" : "def"}, {"label" : "parseDependencies", "tail" : "(args: Seq[String], log: Logger): Dependencies", "member" : "sbt.internal.IvyConsole.parseDependencies", "link" : "sbt\/internal\/IvyConsole$.html#parseDependencies(args:Seq[String],log:sbt.util.Logger):sbt.internal.IvyConsole.Dependencies", "kind" : "def"}, {"label" : "Dependencies", "tail" : "", "member" : "sbt.internal.IvyConsole.Dependencies", "link" : "sbt\/internal\/IvyConsole$.html#DependenciesextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "command", "tail" : ": Command", "member" : "sbt.internal.IvyConsole.command", "link" : "sbt\/internal\/IvyConsole$.html#command:sbt.Command", "kind" : "lazy val"}, {"label" : "Name", "tail" : ": String(\"ivy-console\")", "member" : "sbt.internal.IvyConsole.Name", "link" : "sbt\/internal\/IvyConsole$.html#Name:String(\"ivy-console\")", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/IvyConsole$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/IvyConsole$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/IvyConsole$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/IvyConsole$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/IvyConsole$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/IvyConsole$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/IvyConsole$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/IvyConsole$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/IvyConsole$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/IvyConsole$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/IvyConsole$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/IvyConsole$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/IvyConsole$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/IvyConsole$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/IvyConsole$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/IvyConsole$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/IvyConsole$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/IvyConsole$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/IvyConsole$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.KeyIndex", "members_trait" : [{"label" : "isEmpty", "tail" : "(proj: Option[ResolvedReference], conf: Option[String], task: Option[AttributeKey[_]]): Boolean", "member" : "sbt.internal.KeyIndex.isEmpty", "link" : "sbt\/internal\/KeyIndex.html#isEmpty(proj:Option[sbt.ResolvedReference],conf:Option[String],task:Option[sbt.internal.util.AttributeKey[_]]):Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(proj: Option[ResolvedReference], conf: Option[String]): Boolean", "member" : "sbt.internal.KeyIndex.isEmpty", "link" : "sbt\/internal\/KeyIndex.html#isEmpty(proj:Option[sbt.ResolvedReference],conf:Option[String]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/KeyIndex.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/KeyIndex.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/KeyIndex.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/KeyIndex.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/KeyIndex.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/KeyIndex.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/KeyIndex.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/KeyIndex.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/KeyIndex.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/KeyIndex.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/KeyIndex.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/KeyIndex.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/KeyIndex.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/KeyIndex.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/KeyIndex.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/KeyIndex.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/KeyIndex.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/KeyIndex.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/KeyIndex.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "keys", "tail" : "(proj: Option[ResolvedReference], conf: Option[String], task: Option[AttributeKey[_]]): Set[String]", "member" : "sbt.internal.KeyIndex.keys", "link" : "sbt\/internal\/KeyIndex.html#keys(proj:Option[sbt.ResolvedReference],conf:Option[String],task:Option[sbt.internal.util.AttributeKey[_]]):Set[String]", "kind" : "abstract def"}, {"label" : "keys", "tail" : "(proj: Option[ResolvedReference], conf: Option[String]): Set[String]", "member" : "sbt.internal.KeyIndex.keys", "link" : "sbt\/internal\/KeyIndex.html#keys(proj:Option[sbt.ResolvedReference],conf:Option[String]):Set[String]", "kind" : "abstract def"}, {"label" : "keys", "tail" : "(proj: Option[ResolvedReference]): Set[String]", "member" : "sbt.internal.KeyIndex.keys", "link" : "sbt\/internal\/KeyIndex.html#keys(proj:Option[sbt.ResolvedReference]):Set[String]", "kind" : "abstract def"}, {"label" : "tasks", "tail" : "(proj: Option[ResolvedReference], conf: Option[String], key: String): Set[AttributeKey[_]]", "member" : "sbt.internal.KeyIndex.tasks", "link" : "sbt\/internal\/KeyIndex.html#tasks(proj:Option[sbt.ResolvedReference],conf:Option[String],key:String):Set[sbt.internal.util.AttributeKey[_]]", "kind" : "abstract def"}, {"label" : "tasks", "tail" : "(proj: Option[ResolvedReference], conf: Option[String]): Set[AttributeKey[_]]", "member" : "sbt.internal.KeyIndex.tasks", "link" : "sbt\/internal\/KeyIndex.html#tasks(proj:Option[sbt.ResolvedReference],conf:Option[String]):Set[sbt.internal.util.AttributeKey[_]]", "kind" : "abstract def"}, {"label" : "configs", "tail" : "(proj: Option[ResolvedReference]): Set[String]", "member" : "sbt.internal.KeyIndex.configs", "link" : "sbt\/internal\/KeyIndex.html#configs(proj:Option[sbt.ResolvedReference]):Set[String]", "kind" : "abstract def"}, {"label" : "exists", "tail" : "(project: Option[ResolvedReference]): Boolean", "member" : "sbt.internal.KeyIndex.exists", "link" : "sbt\/internal\/KeyIndex.html#exists(project:Option[sbt.ResolvedReference]):Boolean", "kind" : "abstract def"}, {"label" : "projects", "tail" : "(uri: URI): Set[String]", "member" : "sbt.internal.KeyIndex.projects", "link" : "sbt\/internal\/KeyIndex.html#projects(uri:java.net.URI):Set[String]", "kind" : "abstract def"}, {"label" : "buildURIs", "tail" : "(): Set[URI]", "member" : "sbt.internal.KeyIndex.buildURIs", "link" : "sbt\/internal\/KeyIndex.html#buildURIs:Set[java.net.URI]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/internal\/KeyIndex$.html", "members_object" : [{"label" : "combine", "tail" : "(indices: Seq[KeyIndex]): KeyIndex", "member" : "sbt.internal.KeyIndex.combine", "link" : "sbt\/internal\/KeyIndex$.html#combine(indices:Seq[sbt.internal.KeyIndex]):sbt.internal.KeyIndex", "kind" : "def"}, {"label" : "aggregate", "tail" : "(known: Iterable[Def.ScopedKey[_]], extra: BuildUtil[_], projects: Map[URI, Set[String]]): ExtendableKeyIndex", "member" : "sbt.internal.KeyIndex.aggregate", "link" : "sbt\/internal\/KeyIndex$.html#aggregate(known:Iterable[sbt.Def.ScopedKey[_]],extra:sbt.internal.BuildUtil[_],projects:Map[java.net.URI,Set[String]]):sbt.internal.ExtendableKeyIndex", "kind" : "def"}, {"label" : "apply", "tail" : "(known: Iterable[Def.ScopedKey[_]], projects: Map[URI, Set[String]]): ExtendableKeyIndex", "member" : "sbt.internal.KeyIndex.apply", "link" : "sbt\/internal\/KeyIndex$.html#apply(known:Iterable[sbt.Def.ScopedKey[_]],projects:Map[java.net.URI,Set[String]]):sbt.internal.ExtendableKeyIndex", "kind" : "def"}, {"label" : "empty", "tail" : "(): ExtendableKeyIndex", "member" : "sbt.internal.KeyIndex.empty", "link" : "sbt\/internal\/KeyIndex$.html#empty:sbt.internal.ExtendableKeyIndex", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/KeyIndex$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/KeyIndex$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/KeyIndex$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/KeyIndex$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/KeyIndex$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/KeyIndex$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/KeyIndex$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/KeyIndex$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/KeyIndex$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/KeyIndex$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/KeyIndex$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/KeyIndex$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/KeyIndex$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/KeyIndex$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/KeyIndex$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/KeyIndex$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/KeyIndex$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/KeyIndex$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/KeyIndex$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/KeyIndex.html", "kind" : "object"}, {"name" : "sbt.internal.LoadBuildConfiguration", "shortDescription" : "", "members_case class" : [{"label" : "detectedGlobalPlugins", "tail" : ": DetectedPlugins", "member" : "sbt.internal.LoadBuildConfiguration.detectedGlobalPlugins", "link" : "sbt\/internal\/LoadBuildConfiguration.html#detectedGlobalPlugins:sbt.internal.DetectedPlugins", "kind" : "lazy val"}, {"label" : "globalPluginClasspath", "tail" : ": Classpath", "member" : "sbt.internal.LoadBuildConfiguration.globalPluginClasspath", "link" : "sbt\/internal\/LoadBuildConfiguration.html#globalPluginClasspath:sbt.Def.Classpath", "kind" : "lazy val"}, {"member" : "sbt.internal.LoadBuildConfiguration#<init>", "error" : "unsupported entity"}, {"label" : "log", "tail" : ": Logger", "member" : "sbt.internal.LoadBuildConfiguration.log", "link" : "sbt\/internal\/LoadBuildConfiguration.html#log:sbt.util.Logger", "kind" : "val"}, {"label" : "extraBuilds", "tail" : ": Seq[URI]", "member" : "sbt.internal.LoadBuildConfiguration.extraBuilds", "link" : "sbt\/internal\/LoadBuildConfiguration.html#extraBuilds:Seq[java.net.URI]", "kind" : "val"}, {"label" : "globalPlugin", "tail" : ": Option[GlobalPlugin]", "member" : "sbt.internal.LoadBuildConfiguration.globalPlugin", "link" : "sbt\/internal\/LoadBuildConfiguration.html#globalPlugin:Option[sbt.internal.GlobalPlugin]", "kind" : "val"}, {"label" : "injectSettings", "tail" : ": InjectSettings", "member" : "sbt.internal.LoadBuildConfiguration.injectSettings", "link" : "sbt\/internal\/LoadBuildConfiguration.html#injectSettings:sbt.internal.Load.InjectSettings", "kind" : "val"}, {"label" : "pluginManagement", "tail" : ": PluginManagement", "member" : "sbt.internal.LoadBuildConfiguration.pluginManagement", "link" : "sbt\/internal\/LoadBuildConfiguration.html#pluginManagement:sbt.internal.PluginManagement", "kind" : "val"}, {"label" : "scopeLocal", "tail" : ": Def.ScopeLocal", "member" : "sbt.internal.LoadBuildConfiguration.scopeLocal", "link" : "sbt\/internal\/LoadBuildConfiguration.html#scopeLocal:sbt.Def.ScopeLocal", "kind" : "val"}, {"label" : "delegates", "tail" : ": (LoadedBuild) ⇒ (Scope) ⇒ Seq[Scope]", "member" : "sbt.internal.LoadBuildConfiguration.delegates", "link" : "sbt\/internal\/LoadBuildConfiguration.html#delegates:sbt.internal.LoadedBuild=>(sbt.Scope=>Seq[sbt.Scope])", "kind" : "val"}, {"label" : "evalPluginDef", "tail" : ": (BuildStructure, State) ⇒ PluginData", "member" : "sbt.internal.LoadBuildConfiguration.evalPluginDef", "link" : "sbt\/internal\/LoadBuildConfiguration.html#evalPluginDef:(sbt.internal.BuildStructure,sbt.State)=>sbt.PluginData", "kind" : "val"}, {"label" : "compilers", "tail" : ": Compilers", "member" : "sbt.internal.LoadBuildConfiguration.compilers", "link" : "sbt\/internal\/LoadBuildConfiguration.html#compilers:xsbti.compile.Compilers", "kind" : "val"}, {"label" : "loader", "tail" : ": ClassLoader", "member" : "sbt.internal.LoadBuildConfiguration.loader", "link" : "sbt\/internal\/LoadBuildConfiguration.html#loader:ClassLoader", "kind" : "val"}, {"label" : "classpath", "tail" : ": Classpath", "member" : "sbt.internal.LoadBuildConfiguration.classpath", "link" : "sbt\/internal\/LoadBuildConfiguration.html#classpath:sbt.Def.Classpath", "kind" : "val"}, {"label" : "stagingDirectory", "tail" : ": File", "member" : "sbt.internal.LoadBuildConfiguration.stagingDirectory", "link" : "sbt\/internal\/LoadBuildConfiguration.html#stagingDirectory:java.io.File", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/LoadBuildConfiguration.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/LoadBuildConfiguration.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/LoadBuildConfiguration.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/LoadBuildConfiguration.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/LoadBuildConfiguration.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/LoadBuildConfiguration.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/LoadBuildConfiguration.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadBuildConfiguration.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadBuildConfiguration.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadBuildConfiguration.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/LoadBuildConfiguration.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/LoadBuildConfiguration.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/LoadBuildConfiguration.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/LoadBuildConfiguration.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/LoadBuildConfiguration.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/LoadBuildConfiguration.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/LoadBuildConfiguration.html", "kind" : "case class"}, {"name" : "sbt.internal.LoadedBuild", "shortDescription" : "", "members_class" : [{"label" : "extra", "tail" : "(data: Settings[Scope])(keyIndex: KeyIndex): BuildUtil[ResolvedProject]", "member" : "sbt.internal.LoadedBuild.extra", "link" : "sbt\/internal\/LoadedBuild.html#extra(data:sbt.internal.util.Settings[sbt.Scope])(keyIndex:sbt.internal.KeyIndex):sbt.internal.BuildUtil[sbt.ResolvedProject]", "kind" : "def"}, {"label" : "allProjectRefs", "tail" : "(): Seq[(ProjectRef, ResolvedProject)]", "member" : "sbt.internal.LoadedBuild.allProjectRefs", "link" : "sbt\/internal\/LoadedBuild.html#allProjectRefs:Seq[(sbt.ProjectRef,sbt.ResolvedProject)]", "kind" : "def"}, {"member" : "sbt.internal.LoadedBuild#<init>", "error" : "unsupported entity"}, {"label" : "units", "tail" : ": Map[URI, LoadedBuildUnit]", "member" : "sbt.internal.LoadedBuild.units", "link" : "sbt\/internal\/LoadedBuild.html#units:Map[java.net.URI,sbt.internal.LoadedBuildUnit]", "kind" : "val"}, {"label" : "root", "tail" : ": URI", "member" : "sbt.internal.LoadedBuild.root", "link" : "sbt\/internal\/LoadedBuild.html#root:java.net.URI", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/LoadedBuild.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/LoadedBuild.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/LoadedBuild.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/LoadedBuild.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/LoadedBuild.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/LoadedBuild.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/LoadedBuild.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadedBuild.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadedBuild.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadedBuild.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/LoadedBuild.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/LoadedBuild.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/LoadedBuild.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/LoadedBuild.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/LoadedBuild.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/LoadedBuild.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/LoadedBuild.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/LoadedBuild.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/LoadedBuild.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/LoadedBuild.html", "kind" : "class"}, {"name" : "sbt.internal.LoadedBuildUnit", "shortDescription" : "A resolved build unit.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.internal.LoadedBuildUnit.toString", "link" : "sbt\/internal\/LoadedBuildUnit.html#toString():String", "kind" : "def"}, {"label" : "imports", "tail" : "(): Seq[String]", "member" : "sbt.internal.LoadedBuildUnit.imports", "link" : "sbt\/internal\/LoadedBuildUnit.html#imports:Seq[String]", "kind" : "def"}, {"label" : "loader", "tail" : "(): ClassLoader", "member" : "sbt.internal.LoadedBuildUnit.loader", "link" : "sbt\/internal\/LoadedBuildUnit.html#loader:ClassLoader", "kind" : "def"}, {"label" : "classpath", "tail" : "(): Seq[File]", "member" : "sbt.internal.LoadedBuildUnit.classpath", "link" : "sbt\/internal\/LoadedBuildUnit.html#classpath:Seq[java.io.File]", "kind" : "def"}, {"label" : "localBase", "tail" : "(): File", "member" : "sbt.internal.LoadedBuildUnit.localBase", "link" : "sbt\/internal\/LoadedBuildUnit.html#localBase:java.io.File", "kind" : "def"}, {"label" : "root", "tail" : ": String", "member" : "sbt.internal.LoadedBuildUnit.root", "link" : "sbt\/internal\/LoadedBuildUnit.html#root:String", "kind" : "val"}, {"member" : "sbt.internal.LoadedBuildUnit#<init>", "error" : "unsupported entity"}, {"label" : "buildSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.internal.LoadedBuildUnit.buildSettings", "link" : "sbt\/internal\/LoadedBuildUnit.html#buildSettings:Seq[sbt.Def.Setting[_]]", "kind" : "val"}, {"label" : "rootProjects", "tail" : ": Seq[String]", "member" : "sbt.internal.LoadedBuildUnit.rootProjects", "link" : "sbt\/internal\/LoadedBuildUnit.html#rootProjects:Seq[String]", "kind" : "val"}, {"label" : "defined", "tail" : ": Map[String, ResolvedProject]", "member" : "sbt.internal.LoadedBuildUnit.defined", "link" : "sbt\/internal\/LoadedBuildUnit.html#defined:Map[String,sbt.ResolvedProject]", "kind" : "val"}, {"label" : "unit", "tail" : ": BuildUnit", "member" : "sbt.internal.LoadedBuildUnit.unit", "link" : "sbt\/internal\/LoadedBuildUnit.html#unit:sbt.internal.BuildUnit", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/LoadedBuildUnit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/LoadedBuildUnit.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/LoadedBuildUnit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/LoadedBuildUnit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/LoadedBuildUnit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/LoadedBuildUnit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/LoadedBuildUnit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadedBuildUnit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadedBuildUnit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadedBuildUnit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/LoadedBuildUnit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/LoadedBuildUnit.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/LoadedBuildUnit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/LoadedBuildUnit.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/LoadedBuildUnit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/LoadedBuildUnit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/LoadedBuildUnit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/LoadedBuildUnit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/LoadedBuildUnit.html", "kind" : "class"}, {"name" : "sbt.internal.LoadedDefinitions", "shortDescription" : "The built and loaded build definition, including loaded but unresolved Projects, for a build unit (for a single URI).", "members_class" : [{"member" : "sbt.internal.LoadedDefinitions#<init>", "error" : "unsupported entity"}, {"member" : "sbt.internal.LoadedDefinitions#<init>", "error" : "unsupported entity"}, {"label" : "dslDefinitions", "tail" : ": DefinedSbtValues", "member" : "sbt.internal.LoadedDefinitions.dslDefinitions", "link" : "sbt\/internal\/LoadedDefinitions.html#dslDefinitions:sbt.internal.DefinedSbtValues", "kind" : "val"}, {"label" : "buildNames", "tail" : ": Seq[String]", "member" : "sbt.internal.LoadedDefinitions.buildNames", "link" : "sbt\/internal\/LoadedDefinitions.html#buildNames:Seq[String]", "kind" : "val"}, {"label" : "projects", "tail" : ": Seq[Project]", "member" : "sbt.internal.LoadedDefinitions.projects", "link" : "sbt\/internal\/LoadedDefinitions.html#projects:Seq[sbt.Project]", "kind" : "val"}, {"label" : "builds", "tail" : ": Seq[BuildDef]", "member" : "sbt.internal.LoadedDefinitions.builds", "link" : "sbt\/internal\/LoadedDefinitions.html#builds:Seq[sbt.internal.BuildDef]", "kind" : "val"}, {"label" : "loader", "tail" : ": ClassLoader", "member" : "sbt.internal.LoadedDefinitions.loader", "link" : "sbt\/internal\/LoadedDefinitions.html#loader:ClassLoader", "kind" : "val"}, {"label" : "target", "tail" : ": Seq[File]", "member" : "sbt.internal.LoadedDefinitions.target", "link" : "sbt\/internal\/LoadedDefinitions.html#target:Seq[java.io.File]", "kind" : "val"}, {"label" : "base", "tail" : ": File", "member" : "sbt.internal.LoadedDefinitions.base", "link" : "sbt\/internal\/LoadedDefinitions.html#base:java.io.File", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/LoadedDefinitions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/LoadedDefinitions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/LoadedDefinitions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/LoadedDefinitions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/LoadedDefinitions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/LoadedDefinitions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/LoadedDefinitions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadedDefinitions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadedDefinitions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadedDefinitions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/LoadedDefinitions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/LoadedDefinitions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/LoadedDefinitions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/LoadedDefinitions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/LoadedDefinitions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/LoadedDefinitions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/LoadedDefinitions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/LoadedDefinitions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/LoadedDefinitions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/LoadedDefinitions.html", "kind" : "class"}, {"name" : "sbt.internal.LoadedPlugins", "shortDescription" : "The built and loaded build definition project.", "members_class" : [{"label" : "classpath", "tail" : "(): Seq[File]", "member" : "sbt.internal.LoadedPlugins.classpath", "link" : "sbt\/internal\/LoadedPlugins.html#classpath:Seq[java.io.File]", "kind" : "def"}, {"label" : "fullClasspath", "tail" : "(): Seq[Attributed[File]]", "member" : "sbt.internal.LoadedPlugins.fullClasspath", "link" : "sbt\/internal\/LoadedPlugins.html#fullClasspath:Seq[sbt.internal.util.Attributed[java.io.File]]", "kind" : "def"}, {"member" : "sbt.internal.LoadedPlugins#<init>", "error" : "unsupported entity"}, {"label" : "detected", "tail" : ": DetectedPlugins", "member" : "sbt.internal.LoadedPlugins.detected", "link" : "sbt\/internal\/LoadedPlugins.html#detected:sbt.internal.DetectedPlugins", "kind" : "val"}, {"label" : "loader", "tail" : ": ClassLoader", "member" : "sbt.internal.LoadedPlugins.loader", "link" : "sbt\/internal\/LoadedPlugins.html#loader:ClassLoader", "kind" : "val"}, {"label" : "pluginData", "tail" : ": PluginData", "member" : "sbt.internal.LoadedPlugins.pluginData", "link" : "sbt\/internal\/LoadedPlugins.html#pluginData:sbt.PluginData", "kind" : "val"}, {"label" : "base", "tail" : ": File", "member" : "sbt.internal.LoadedPlugins.base", "link" : "sbt\/internal\/LoadedPlugins.html#base:java.io.File", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/LoadedPlugins.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/LoadedPlugins.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/LoadedPlugins.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/LoadedPlugins.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/LoadedPlugins.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/LoadedPlugins.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/LoadedPlugins.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadedPlugins.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadedPlugins.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LoadedPlugins.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/LoadedPlugins.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/LoadedPlugins.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/LoadedPlugins.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/LoadedPlugins.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/LoadedPlugins.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/LoadedPlugins.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/LoadedPlugins.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/LoadedPlugins.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/LoadedPlugins.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/LoadedPlugins.html", "kind" : "class"}, {"name" : "sbt.internal.LogManager", "shortDescription" : "", "object" : "sbt\/internal\/LogManager$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/LogManager.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/LogManager.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/LogManager.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/LogManager.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/LogManager.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/LogManager.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/LogManager.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LogManager.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LogManager.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LogManager.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/LogManager.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/LogManager.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/LogManager.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/LogManager.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/LogManager.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/LogManager.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/LogManager.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/LogManager.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/LogManager.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "backgroundLog", "tail" : "(data: Settings[Scope], state: State, task: Def.ScopedKey[_]): ManagedLogger", "member" : "sbt.internal.LogManager.backgroundLog", "link" : "sbt\/internal\/LogManager.html#backgroundLog(data:sbt.internal.util.Settings[sbt.Scope],state:sbt.State,task:sbt.Def.ScopedKey[_]):sbt.internal.util.ManagedLogger", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(data: Settings[Scope], state: State, task: Def.ScopedKey[_], writer: PrintWriter): ManagedLogger", "member" : "sbt.internal.LogManager.apply", "link" : "sbt\/internal\/LogManager.html#apply(data:sbt.internal.util.Settings[sbt.Scope],state:sbt.State,task:sbt.Def.ScopedKey[_],writer:java.io.PrintWriter):sbt.internal.util.ManagedLogger", "kind" : "abstract def"}], "members_object" : [{"label" : "defaultRelay", "tail" : ": (Unit) ⇒ Appender", "member" : "sbt.internal.LogManager.defaultRelay", "link" : "sbt\/internal\/LogManager$.html#defaultRelay:Unit=>org.apache.logging.log4j.core.Appender", "kind" : "val"}, {"label" : "setGlobalLogLevel", "tail" : "(s: State, level: util.Level.Value): State", "member" : "sbt.internal.LogManager.setGlobalLogLevel", "link" : "sbt\/internal\/LogManager$.html#setGlobalLogLevel(s:sbt.State,level:sbt.util.Level.Value):sbt.State", "kind" : "def"}, {"label" : "backgroundLog", "tail" : "(data: Settings[Scope], state: State, task: Def.ScopedKey[_], console: Appender, relay: Appender, extra: List[Appender]): ManagedLogger", "member" : "sbt.internal.LogManager.backgroundLog", "link" : "sbt\/internal\/LogManager$.html#backgroundLog(data:sbt.internal.util.Settings[sbt.Scope],state:sbt.State,task:sbt.Def.ScopedKey[_],console:org.apache.logging.log4j.core.Appender,relay:org.apache.logging.log4j.core.Appender,extra:List[org.apache.logging.log4j.core.Appender]):sbt.internal.util.ManagedLogger", "kind" : "def"}, {"label" : "unwrapStreamsKey", "tail" : "(key: Def.ScopedKey[_]): Def.ScopedKey[_]", "member" : "sbt.internal.LogManager.unwrapStreamsKey", "link" : "sbt\/internal\/LogManager$.html#unwrapStreamsKey(key:sbt.Def.ScopedKey[_]):sbt.Def.ScopedKey[_]", "kind" : "def"}, {"label" : "suppressedMessage", "tail" : "(key: Def.ScopedKey[_], state: State): (SuppressedTraceContext) ⇒ Option[String]", "member" : "sbt.internal.LogManager.suppressedMessage", "link" : "sbt\/internal\/LogManager$.html#suppressedMessage(key:sbt.Def.ScopedKey[_],state:sbt.State):sbt.internal.util.SuppressedTraceContext=>Option[String]", "kind" : "def"}, {"label" : "defaultTraceLevel", "tail" : "(state: State): Int", "member" : "sbt.internal.LogManager.defaultTraceLevel", "link" : "sbt\/internal\/LogManager$.html#defaultTraceLevel(state:sbt.State):Int", "kind" : "def"}, {"label" : "consoleLocally", "tail" : "(state: State, console: Appender): Option[Appender]", "member" : "sbt.internal.LogManager.consoleLocally", "link" : "sbt\/internal\/LogManager$.html#consoleLocally(state:sbt.State,console:org.apache.logging.log4j.core.Appender):Option[org.apache.logging.log4j.core.Appender]", "kind" : "def"}, {"label" : "defaultLogger", "tail" : "(data: Settings[Scope], state: State, task: Def.ScopedKey[_], console: Appender, backed: Appender, relay: Appender, extra: List[Appender]): ManagedLogger", "member" : "sbt.internal.LogManager.defaultLogger", "link" : "sbt\/internal\/LogManager$.html#defaultLogger(data:sbt.internal.util.Settings[sbt.Scope],state:sbt.State,task:sbt.Def.ScopedKey[_],console:org.apache.logging.log4j.core.Appender,backed:org.apache.logging.log4j.core.Appender,relay:org.apache.logging.log4j.core.Appender,extra:List[org.apache.logging.log4j.core.Appender]):sbt.internal.util.ManagedLogger", "kind" : "def"}, {"label" : "withLoggers", "tail" : "(screen: (Def.ScopedKey[_], State) ⇒ Appender, backed: (PrintWriter) ⇒ Appender, relay: (Unit) ⇒ Appender, extra: (Def.ScopedKey[_]) ⇒ Seq[Appender]): LogManager", "member" : "sbt.internal.LogManager.withLoggers", "link" : "sbt\/internal\/LogManager$.html#withLoggers(screen:(sbt.Def.ScopedKey[_],sbt.State)=>org.apache.logging.log4j.core.Appender,backed:java.io.PrintWriter=>org.apache.logging.log4j.core.Appender,relay:Unit=>org.apache.logging.log4j.core.Appender,extra:sbt.Def.ScopedKey[_]=>Seq[org.apache.logging.log4j.core.Appender]):sbt.internal.LogManager", "kind" : "def"}, {"label" : "withScreenLogger", "tail" : "(mk: (Def.ScopedKey[_], State) ⇒ Appender): LogManager", "member" : "sbt.internal.LogManager.withScreenLogger", "link" : "sbt\/internal\/LogManager$.html#withScreenLogger(mk:(sbt.Def.ScopedKey[_],sbt.State)=>org.apache.logging.log4j.core.Appender):sbt.internal.LogManager", "kind" : "def"}, {"label" : "defaults", "tail" : "(extra: (Def.ScopedKey[_]) ⇒ Seq[Appender], console: ConsoleOut): LogManager", "member" : "sbt.internal.LogManager.defaults", "link" : "sbt\/internal\/LogManager$.html#defaults(extra:sbt.Def.ScopedKey[_]=>Seq[org.apache.logging.log4j.core.Appender],console:sbt.internal.util.ConsoleOut):sbt.internal.LogManager", "kind" : "def"}, {"label" : "defaultManager", "tail" : "(console: ConsoleOut): LogManager", "member" : "sbt.internal.LogManager.defaultManager", "link" : "sbt\/internal\/LogManager$.html#defaultManager(console:sbt.internal.util.ConsoleOut):sbt.internal.LogManager", "kind" : "def"}, {"label" : "constructBackgroundLog", "tail" : "(data: Settings[Scope], state: State): (Def.ScopedKey[_]) ⇒ ManagedLogger", "member" : "sbt.internal.LogManager.constructBackgroundLog", "link" : "sbt\/internal\/LogManager$.html#constructBackgroundLog(data:sbt.internal.util.Settings[sbt.Scope],state:sbt.State):sbt.Def.ScopedKey[_]=>sbt.internal.util.ManagedLogger", "kind" : "def"}, {"label" : "construct", "tail" : "(data: Settings[Scope], state: State): (Def.ScopedKey[_], PrintWriter) ⇒ ManagedLogger", "member" : "sbt.internal.LogManager.construct", "link" : "sbt\/internal\/LogManager$.html#construct(data:sbt.internal.util.Settings[sbt.Scope],state:sbt.State):(sbt.Def.ScopedKey[_],java.io.PrintWriter)=>sbt.internal.util.ManagedLogger", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/LogManager$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/LogManager$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/LogManager$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/LogManager$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/LogManager$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/LogManager$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/LogManager$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LogManager$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LogManager$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/LogManager$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/LogManager$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/LogManager$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/LogManager$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/LogManager$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/LogManager$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/LogManager$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/LogManager$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/LogManager$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/LogManager$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/LogManager.html", "kind" : "class"}, {"name" : "sbt.internal.MultiHandler", "shortDescription" : "", "members_class" : [{"label" : "applyNonRoots", "tail" : "(info: S): List[(URI, T)]", "member" : "sbt.internal.MultiHandler.applyNonRoots", "link" : "sbt\/internal\/MultiHandler.html#applyNonRoots(info:S):List[(java.net.URI,T)]", "kind" : "def"}, {"label" : "setRoot", "tail" : "(resolver: (S) ⇒ Option[T]): MultiHandler[S, T]", "member" : "sbt.internal.MultiHandler.setRoot", "link" : "sbt\/internal\/MultiHandler.html#setRoot(resolver:S=>Option[T]):sbt.internal.MultiHandler[S,T]", "kind" : "def"}, {"label" : "addNonRoot", "tail" : "(uri: URI, loader: (S) ⇒ Option[T]): MultiHandler[S, T]", "member" : "sbt.internal.MultiHandler.addNonRoot", "link" : "sbt\/internal\/MultiHandler.html#addNonRoot(uri:java.net.URI,loader:S=>Option[T]):sbt.internal.MultiHandler[S,T]", "kind" : "def"}, {"label" : "baseLoader", "tail" : "(): (S) ⇒ Option[T]", "member" : "sbt.internal.MultiHandler.baseLoader", "link" : "sbt\/internal\/MultiHandler.html#baseLoader:S=>Option[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(info: S): Option[T]", "member" : "sbt.internal.MultiHandler.apply", "link" : "sbt\/internal\/MultiHandler.html#apply(info:S):Option[T]", "kind" : "def"}, {"label" : "applyFun", "tail" : "(): (S) ⇒ Option[T]", "member" : "sbt.internal.MultiHandler.applyFun", "link" : "sbt\/internal\/MultiHandler.html#applyFun:S=>Option[T]", "kind" : "def"}, {"member" : "sbt.internal.MultiHandler#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/MultiHandler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/MultiHandler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/MultiHandler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/MultiHandler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/MultiHandler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/MultiHandler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/MultiHandler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/MultiHandler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/MultiHandler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/MultiHandler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/MultiHandler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/MultiHandler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/MultiHandler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/MultiHandler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/MultiHandler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/MultiHandler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/MultiHandler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/MultiHandler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/MultiHandler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/MultiHandler.html", "kind" : "class"}, {"name" : "sbt.internal.Output", "shortDescription" : "", "object" : "sbt\/internal\/Output$.html", "members_object" : [{"label" : "headLines", "tail" : "(lines: Seq[String], tailDelim: String): Seq[String]", "member" : "sbt.internal.Output.headLines", "link" : "sbt\/internal\/Output$.html#headLines(lines:Seq[String],tailDelim:String):Seq[String]", "kind" : "def"}, {"label" : "tailLines", "tail" : "(file: File, tailDelim: String): Seq[String]", "member" : "sbt.internal.Output.tailLines", "link" : "sbt\/internal\/Output$.html#tailLines(file:java.io.File,tailDelim:String):Seq[String]", "kind" : "def"}, {"label" : "lastLines", "tail" : "(key: Def.ScopedKey[_], mgr: Streams, sid: Option[String]): Seq[String]", "member" : "sbt.internal.Output.lastLines", "link" : "sbt\/internal\/Output$.html#lastLines(key:sbt.Def.ScopedKey[_],mgr:sbt.Keys.Streams,sid:Option[String]):Seq[String]", "kind" : "def"}, {"label" : "lastLines", "tail" : "(keys: Values[_], streams: Streams, sid: Option[String]): Values[Seq[String]]", "member" : "sbt.internal.Output.lastLines", "link" : "sbt\/internal\/Output$.html#lastLines(keys:sbt.internal.Aggregation.Values[_],streams:sbt.Keys.Streams,sid:Option[String]):sbt.internal.Aggregation.Values[Seq[String]]", "kind" : "def"}, {"label" : "flatLines", "tail" : "(outputs: Values[Seq[String]])(f: (Seq[String]) ⇒ Seq[String])(display: Show[Def.ScopedKey[_]]): Seq[String]", "member" : "sbt.internal.Output.flatLines", "link" : "sbt\/internal\/Output$.html#flatLines(outputs:sbt.internal.Aggregation.Values[Seq[String]])(f:Seq[String]=>Seq[String])(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):Seq[String]", "kind" : "def"}, {"label" : "grep", "tail" : "(lines: Seq[String], patternString: String): Seq[String]", "member" : "sbt.internal.Output.grep", "link" : "sbt\/internal\/Output$.html#grep(lines:Seq[String],patternString:String):Seq[String]", "kind" : "def"}, {"label" : "lastGrep", "tail" : "(file: File, patternString: String, printLines: (Seq[String]) ⇒ Unit, tailDelim: String): Unit", "member" : "sbt.internal.Output.lastGrep", "link" : "sbt\/internal\/Output$.html#lastGrep(file:java.io.File,patternString:String,printLines:Seq[String]=>Unit,tailDelim:String):Unit", "kind" : "def"}, {"label" : "lastGrep", "tail" : "(keys: Values[_], streams: Streams, patternString: String, printLines: (Seq[String]) ⇒ Unit)(display: Show[Def.ScopedKey[_]]): Unit", "member" : "sbt.internal.Output.lastGrep", "link" : "sbt\/internal\/Output$.html#lastGrep(keys:sbt.internal.Aggregation.Values[_],streams:sbt.Keys.Streams,patternString:String,printLines:Seq[String]=>Unit)(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):Unit", "kind" : "def"}, {"label" : "last", "tail" : "(file: File, printLines: (Seq[String]) ⇒ Unit, tailDelim: String): Unit", "member" : "sbt.internal.Output.last", "link" : "sbt\/internal\/Output$.html#last(file:java.io.File,printLines:Seq[String]=>Unit,tailDelim:String):Unit", "kind" : "def"}, {"label" : "last", "tail" : "(keys: Values[_], streams: Streams, printLines: (Seq[String]) ⇒ Unit, sid: Option[String])(display: Show[Def.ScopedKey[_]]): Unit", "member" : "sbt.internal.Output.last", "link" : "sbt\/internal\/Output$.html#last(keys:sbt.internal.Aggregation.Values[_],streams:sbt.Keys.Streams,printLines:Seq[String]=>Unit,sid:Option[String])(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):Unit", "kind" : "def"}, {"label" : "DefaultTail", "tail" : ": String(\"> \")", "member" : "sbt.internal.Output.DefaultTail", "link" : "sbt\/internal\/Output$.html#DefaultTail:String(\">\")", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/Output$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/Output$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/Output$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/Output$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/Output$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/Output$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/Output$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Output$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Output$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Output$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/Output$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/Output$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/Output$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/Output$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/Output$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/Output$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/Output$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/Output$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/Output$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.ParsedKey", "shortDescription" : "", "members_class" : [{"member" : "sbt.internal.ParsedKey#<init>", "error" : "unsupported entity"}, {"label" : "mask", "tail" : ": ScopeMask", "member" : "sbt.internal.ParsedKey.mask", "link" : "sbt\/internal\/ParsedKey.html#mask:sbt.ScopeMask", "kind" : "val"}, {"label" : "key", "tail" : ": Def.ScopedKey[_]", "member" : "sbt.internal.ParsedKey.key", "link" : "sbt\/internal\/ParsedKey.html#key:sbt.Def.ScopedKey[_]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/ParsedKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/ParsedKey.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/ParsedKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/ParsedKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/ParsedKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/ParsedKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/ParsedKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ParsedKey.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ParsedKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ParsedKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/ParsedKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/ParsedKey.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/ParsedKey.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/ParsedKey.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/ParsedKey.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/ParsedKey.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/ParsedKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/ParsedKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/ParsedKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/ParsedKey.html", "kind" : "class"}, {"name" : "sbt.internal.PartBuild", "shortDescription" : "", "members_class" : [{"member" : "sbt.internal.PartBuild#<init>", "error" : "unsupported entity"}, {"label" : "units", "tail" : ": Map[URI, PartBuildUnit]", "member" : "sbt.internal.PartBuild.units", "link" : "sbt\/internal\/PartBuild.html#units:Map[java.net.URI,sbt.internal.PartBuildUnit]", "kind" : "val"}, {"label" : "root", "tail" : ": URI", "member" : "sbt.internal.PartBuild.root", "link" : "sbt\/internal\/PartBuild.html#root:java.net.URI", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/PartBuild.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/PartBuild.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/PartBuild.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/PartBuild.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/PartBuild.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/PartBuild.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/PartBuild.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PartBuild.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PartBuild.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PartBuild.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/PartBuild.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/PartBuild.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/PartBuild.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/PartBuild.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/PartBuild.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/PartBuild.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/PartBuild.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/PartBuild.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/PartBuild.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/PartBuild.html", "kind" : "class"}, {"name" : "sbt.internal.PartBuildUnit", "shortDescription" : "", "members_class" : [{"label" : "resolveRefs", "tail" : "(f: (ProjectReference) ⇒ ProjectRef): LoadedBuildUnit", "member" : "sbt.internal.PartBuildUnit.resolveRefs", "link" : "sbt\/internal\/PartBuildUnit.html#resolveRefs(f:sbt.ProjectReference=>sbt.ProjectRef):sbt.internal.LoadedBuildUnit", "kind" : "def"}, {"label" : "resolve", "tail" : "(f: (Project) ⇒ ResolvedProject): LoadedBuildUnit", "member" : "sbt.internal.PartBuildUnit.resolve", "link" : "sbt\/internal\/PartBuildUnit.html#resolve(f:sbt.Project=>sbt.ResolvedProject):sbt.internal.LoadedBuildUnit", "kind" : "def"}, {"member" : "sbt.internal.PartBuildUnit#<init>", "error" : "unsupported entity"}, {"label" : "buildSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.internal.PartBuildUnit.buildSettings", "link" : "sbt\/internal\/PartBuildUnit.html#buildSettings:Seq[sbt.Def.Setting[_]]", "kind" : "val"}, {"label" : "rootProjects", "tail" : ": Seq[String]", "member" : "sbt.internal.PartBuildUnit.rootProjects", "link" : "sbt\/internal\/PartBuildUnit.html#rootProjects:Seq[String]", "kind" : "val"}, {"label" : "defined", "tail" : ": Map[String, Project]", "member" : "sbt.internal.PartBuildUnit.defined", "link" : "sbt\/internal\/PartBuildUnit.html#defined:Map[String,sbt.Project]", "kind" : "val"}, {"label" : "unit", "tail" : ": BuildUnit", "member" : "sbt.internal.PartBuildUnit.unit", "link" : "sbt\/internal\/PartBuildUnit.html#unit:sbt.internal.BuildUnit", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/PartBuildUnit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/PartBuildUnit.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/PartBuildUnit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/PartBuildUnit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/PartBuildUnit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/PartBuildUnit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/PartBuildUnit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PartBuildUnit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PartBuildUnit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PartBuildUnit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/PartBuildUnit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/PartBuildUnit.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/PartBuildUnit.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/PartBuildUnit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/PartBuildUnit.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/PartBuildUnit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/PartBuildUnit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/PartBuildUnit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/PartBuildUnit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/PartBuildUnit.html", "kind" : "class"}, {"name" : "sbt.internal.PluginDiscovery", "shortDescription" : "", "object" : "sbt\/internal\/PluginDiscovery$.html", "members_object" : [{"label" : "onClasspath", "tail" : "(classpath: Seq[File])(url: URL): Boolean", "member" : "sbt.internal.PluginDiscovery.onClasspath", "link" : "sbt\/internal\/PluginDiscovery$.html#onClasspath(classpath:Seq[java.io.File])(url:java.net.URL):Boolean", "kind" : "def"}, {"label" : "binaryModuleNames", "tail" : "(classpath: Seq[File], loader: ClassLoader, resourceName: String): Seq[String]", "member" : "sbt.internal.PluginDiscovery.binaryModuleNames", "link" : "sbt\/internal\/PluginDiscovery$.html#binaryModuleNames(classpath:Seq[java.io.File],loader:ClassLoader,resourceName:String):Seq[String]", "kind" : "def"}, {"label" : "sourceModuleNames", "tail" : "(analysis: CompileAnalysis, subclasses: String*): Seq[String]", "member" : "sbt.internal.PluginDiscovery.sourceModuleNames", "link" : "sbt\/internal\/PluginDiscovery$.html#sourceModuleNames(analysis:xsbti.compile.CompileAnalysis,subclasses:String*):Seq[String]", "kind" : "def"}, {"label" : "binarySourceModuleNames", "tail" : "(classpath: Seq[Attributed[File]], loader: ClassLoader, resourceName: String, subclasses: String*): Seq[String]", "member" : "sbt.internal.PluginDiscovery.binarySourceModuleNames", "link" : "sbt\/internal\/PluginDiscovery$.html#binarySourceModuleNames(classpath:Seq[sbt.internal.util.Attributed[java.io.File]],loader:ClassLoader,resourceName:String,subclasses:String*):Seq[String]", "kind" : "def"}, {"label" : "writeDescriptor", "tail" : "(names: Seq[String], dir: File, path: String): Option[File]", "member" : "sbt.internal.PluginDiscovery.writeDescriptor", "link" : "sbt\/internal\/PluginDiscovery$.html#writeDescriptor(names:Seq[String],dir:java.io.File,path:String):Option[java.io.File]", "kind" : "def"}, {"label" : "writeDescriptors", "tail" : "(names: DiscoveredNames, dir: File): Seq[File]", "member" : "sbt.internal.PluginDiscovery.writeDescriptors", "link" : "sbt\/internal\/PluginDiscovery$.html#writeDescriptors(names:sbt.internal.PluginDiscovery.DiscoveredNames,dir:java.io.File):Seq[java.io.File]", "kind" : "def"}, {"label" : "discoverSourceAll", "tail" : "(analysis: CompileAnalysis): DiscoveredNames", "member" : "sbt.internal.PluginDiscovery.discoverSourceAll", "link" : "sbt\/internal\/PluginDiscovery$.html#discoverSourceAll(analysis:xsbti.compile.CompileAnalysis):sbt.internal.PluginDiscovery.DiscoveredNames", "kind" : "def"}, {"label" : "discoverAll", "tail" : "(data: PluginData, loader: ClassLoader): DetectedPlugins", "member" : "sbt.internal.PluginDiscovery.discoverAll", "link" : "sbt\/internal\/PluginDiscovery$.html#discoverAll(data:sbt.PluginData,loader:ClassLoader):sbt.internal.DetectedPlugins", "kind" : "def"}, {"label" : "emptyDiscoveredNames", "tail" : "(): DiscoveredNames", "member" : "sbt.internal.PluginDiscovery.emptyDiscoveredNames", "link" : "sbt\/internal\/PluginDiscovery$.html#emptyDiscoveredNames:sbt.internal.PluginDiscovery.DiscoveredNames", "kind" : "def"}, {"label" : "DiscoveredNames", "tail" : "", "member" : "sbt.internal.PluginDiscovery.DiscoveredNames", "link" : "sbt\/internal\/PluginDiscovery$.html#DiscoveredNamesextendsAnyRef", "kind" : "final class"}, {"label" : "Paths", "tail" : "", "member" : "sbt.internal.PluginDiscovery.Paths", "link" : "sbt\/internal\/PluginDiscovery$.html#Paths", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/PluginDiscovery$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/PluginDiscovery$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/PluginDiscovery$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/PluginDiscovery$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/PluginDiscovery$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/PluginDiscovery$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/PluginDiscovery$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PluginDiscovery$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PluginDiscovery$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PluginDiscovery$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/PluginDiscovery$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/PluginDiscovery$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/PluginDiscovery$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/PluginDiscovery$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/PluginDiscovery$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/PluginDiscovery$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/PluginDiscovery$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/PluginDiscovery$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/PluginDiscovery$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.PluginManagement", "shortDescription" : "", "object" : "sbt\/internal\/PluginManagement$.html", "members_object" : [{"label" : "PluginClassLoader", "tail" : "", "member" : "sbt.internal.PluginManagement.PluginClassLoader", "link" : "sbt\/internal\/PluginManagement$.html#PluginClassLoaderextendsURLClassLoader", "kind" : "final class"}, {"label" : "keepOverrideInfo", "tail" : "(m: ModuleID): ModuleID", "member" : "sbt.internal.PluginManagement.keepOverrideInfo", "link" : "sbt\/internal\/PluginManagement$.html#keepOverrideInfo(m:sbt.librarymanagement.ModuleID):sbt.librarymanagement.ModuleID", "kind" : "def"}, {"label" : "extractOverrides", "tail" : "(classpath: Classpath): Set[ModuleID]", "member" : "sbt.internal.PluginManagement.extractOverrides", "link" : "sbt\/internal\/PluginManagement$.html#extractOverrides(classpath:sbt.Keys.Classpath):Set[sbt.librarymanagement.ModuleID]", "kind" : "def"}, {"label" : "apply", "tail" : "(initialLoader: ClassLoader): PluginManagement", "member" : "sbt.internal.PluginManagement.apply", "link" : "sbt\/internal\/PluginManagement$.html#apply(initialLoader:ClassLoader):sbt.internal.PluginManagement", "kind" : "def"}, {"label" : "emptyContext", "tail" : ": Context", "member" : "sbt.internal.PluginManagement.emptyContext", "link" : "sbt\/internal\/PluginManagement$.html#emptyContext:sbt.internal.PluginManagement.Context", "kind" : "val"}, {"label" : "Context", "tail" : "", "member" : "sbt.internal.PluginManagement.Context", "link" : "sbt\/internal\/PluginManagement$.html#ContextextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/PluginManagement$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/PluginManagement$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/PluginManagement$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/PluginManagement$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/PluginManagement$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/PluginManagement$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/PluginManagement$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PluginManagement$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PluginManagement$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PluginManagement$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/PluginManagement$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/PluginManagement$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/PluginManagement$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/PluginManagement$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/PluginManagement$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/PluginManagement$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/PluginManagement$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/PluginManagement$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/PluginManagement$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "forPlugin", "tail" : "(): PluginManagement", "member" : "sbt.internal.PluginManagement.forPlugin", "link" : "sbt\/internal\/PluginManagement.html#forPlugin:sbt.internal.PluginManagement", "kind" : "def"}, {"label" : "forGlobalPlugin", "tail" : "(): PluginManagement", "member" : "sbt.internal.PluginManagement.forGlobalPlugin", "link" : "sbt\/internal\/PluginManagement.html#forGlobalPlugin:sbt.internal.PluginManagement", "kind" : "def"}, {"label" : "resetDepth", "tail" : "(): PluginManagement", "member" : "sbt.internal.PluginManagement.resetDepth", "link" : "sbt\/internal\/PluginManagement.html#resetDepth:sbt.internal.PluginManagement", "kind" : "def"}, {"label" : "inject", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.internal.PluginManagement.inject", "link" : "sbt\/internal\/PluginManagement.html#inject:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "addOverrides", "tail" : "(cp: Classpath): PluginManagement", "member" : "sbt.internal.PluginManagement.addOverrides", "link" : "sbt\/internal\/PluginManagement.html#addOverrides(cp:sbt.Keys.Classpath):sbt.internal.PluginManagement", "kind" : "def"}, {"label" : "addOverrides", "tail" : "(os: Set[ModuleID]): PluginManagement", "member" : "sbt.internal.PluginManagement.addOverrides", "link" : "sbt\/internal\/PluginManagement.html#addOverrides(os:Set[sbt.librarymanagement.ModuleID]):sbt.internal.PluginManagement", "kind" : "def"}, {"label" : "shift", "tail" : "(): PluginManagement", "member" : "sbt.internal.PluginManagement.shift", "link" : "sbt\/internal\/PluginManagement.html#shift:sbt.internal.PluginManagement", "kind" : "def"}, {"member" : "sbt.internal.PluginManagement#<init>", "error" : "unsupported entity"}, {"label" : "context", "tail" : ": Context", "member" : "sbt.internal.PluginManagement.context", "link" : "sbt\/internal\/PluginManagement.html#context:sbt.internal.PluginManagement.Context", "kind" : "val"}, {"label" : "initialLoader", "tail" : ": ClassLoader", "member" : "sbt.internal.PluginManagement.initialLoader", "link" : "sbt\/internal\/PluginManagement.html#initialLoader:ClassLoader", "kind" : "val"}, {"label" : "loader", "tail" : ": PluginClassLoader", "member" : "sbt.internal.PluginManagement.loader", "link" : "sbt\/internal\/PluginManagement.html#loader:sbt.internal.PluginManagement.PluginClassLoader", "kind" : "val"}, {"label" : "applyOverrides", "tail" : ": Set[ModuleID]", "member" : "sbt.internal.PluginManagement.applyOverrides", "link" : "sbt\/internal\/PluginManagement.html#applyOverrides:Set[sbt.librarymanagement.ModuleID]", "kind" : "val"}, {"label" : "overrides", "tail" : ": Set[ModuleID]", "member" : "sbt.internal.PluginManagement.overrides", "link" : "sbt\/internal\/PluginManagement.html#overrides:Set[sbt.librarymanagement.ModuleID]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/PluginManagement.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/PluginManagement.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/PluginManagement.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/PluginManagement.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/PluginManagement.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/PluginManagement.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/PluginManagement.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PluginManagement.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PluginManagement.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/PluginManagement.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/PluginManagement.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/PluginManagement.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/PluginManagement.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/PluginManagement.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/PluginManagement.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/PluginManagement.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/PluginManagement.html", "kind" : "case class"}, {"name" : "sbt.internal.ProjectNavigation", "shortDescription" : "", "object" : "sbt\/internal\/ProjectNavigation$.html", "members_class" : [{"label" : "command", "tail" : ": Parser[() ⇒ State]", "member" : "sbt.internal.ProjectNavigation.command", "link" : "sbt\/internal\/ProjectNavigation.html#command:sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "val"}, {"label" : "rootRef", "tail" : "(): ProjectRef", "member" : "sbt.internal.ProjectNavigation.rootRef", "link" : "sbt\/internal\/ProjectNavigation.html#rootRef:sbt.ProjectRef", "kind" : "def"}, {"label" : "parser", "tail" : ": Parser[Option[ResolvedReference]]", "member" : "sbt.internal.ProjectNavigation.parser", "link" : "sbt\/internal\/ProjectNavigation.html#parser:sbt.internal.util.complete.Parser[Option[sbt.ResolvedReference]]", "kind" : "val"}, {"label" : "fail", "tail" : "(msg: String): State", "member" : "sbt.internal.ProjectNavigation.fail", "link" : "sbt\/internal\/ProjectNavigation.html#fail(msg:String):sbt.State", "kind" : "def"}, {"label" : "changeBuild", "tail" : "(newBuild: URI): State", "member" : "sbt.internal.ProjectNavigation.changeBuild", "link" : "sbt\/internal\/ProjectNavigation.html#changeBuild(newBuild:java.net.URI):sbt.State", "kind" : "def"}, {"label" : "selectProject", "tail" : "(uri: URI, to: String): State", "member" : "sbt.internal.ProjectNavigation.selectProject", "link" : "sbt\/internal\/ProjectNavigation.html#selectProject(uri:java.net.URI,to:String):sbt.State", "kind" : "def"}, {"label" : "show", "tail" : "(): Unit", "member" : "sbt.internal.ProjectNavigation.show", "link" : "sbt\/internal\/ProjectNavigation.html#show():Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(action: Option[ResolvedReference]): State", "member" : "sbt.internal.ProjectNavigation.apply", "link" : "sbt\/internal\/ProjectNavigation.html#apply(action:Option[sbt.ResolvedReference]):sbt.State", "kind" : "def"}, {"label" : "getRoot", "tail" : "(uri: URI): String", "member" : "sbt.internal.ProjectNavigation.getRoot", "link" : "sbt\/internal\/ProjectNavigation.html#getRoot(uri:java.net.URI):String", "kind" : "def"}, {"label" : "mkEval", "tail" : "(nuri: URI): () ⇒ Eval", "member" : "sbt.internal.ProjectNavigation.mkEval", "link" : "sbt\/internal\/ProjectNavigation.html#mkEval(nuri:java.net.URI):()=>sbt.compiler.Eval", "kind" : "def"}, {"label" : "setProject", "tail" : "(nuri: URI, nid: String): State", "member" : "sbt.internal.ProjectNavigation.setProject", "link" : "sbt\/internal\/ProjectNavigation.html#setProject(nuri:java.net.URI,nid:String):sbt.State", "kind" : "def"}, {"label" : "extracted", "tail" : ": Extracted", "member" : "sbt.internal.ProjectNavigation.extracted", "link" : "sbt\/internal\/ProjectNavigation.html#extracted:sbt.Extracted", "kind" : "val"}, {"member" : "sbt.internal.ProjectNavigation#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/ProjectNavigation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/ProjectNavigation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/ProjectNavigation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/ProjectNavigation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/ProjectNavigation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/ProjectNavigation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/ProjectNavigation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ProjectNavigation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ProjectNavigation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ProjectNavigation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/ProjectNavigation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/ProjectNavigation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/ProjectNavigation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/ProjectNavigation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/ProjectNavigation.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/ProjectNavigation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/ProjectNavigation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/ProjectNavigation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/ProjectNavigation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "command", "tail" : "(s: State): Parser[() ⇒ State]", "member" : "sbt.internal.ProjectNavigation.command", "link" : "sbt\/internal\/ProjectNavigation$.html#command(s:sbt.State):sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/ProjectNavigation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/ProjectNavigation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/ProjectNavigation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/ProjectNavigation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/ProjectNavigation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/ProjectNavigation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/ProjectNavigation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ProjectNavigation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ProjectNavigation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/ProjectNavigation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/ProjectNavigation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/ProjectNavigation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/ProjectNavigation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/ProjectNavigation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/ProjectNavigation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/ProjectNavigation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/ProjectNavigation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/ProjectNavigation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/ProjectNavigation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/ProjectNavigation.html", "kind" : "object"}, {"name" : "sbt.internal.RelayAppender", "shortDescription" : "", "members_class" : [{"label" : "appendEvent", "tail" : "(level: util.Level.Value, event: AnyRef): Unit", "member" : "sbt.internal.RelayAppender.appendEvent", "link" : "sbt\/internal\/RelayAppender.html#appendEvent(level:sbt.util.Level.Value,event:AnyRef):Unit", "kind" : "def"}, {"label" : "appendLog", "tail" : "(level: util.Level.Value, message: ⇒ String): Unit", "member" : "sbt.internal.RelayAppender.appendLog", "link" : "sbt\/internal\/RelayAppender.html#appendLog(level:sbt.util.Level.Value,message:=>String):Unit", "kind" : "def"}, {"label" : "append", "tail" : "(event: LogEvent): Unit", "member" : "sbt.internal.RelayAppender.append", "link" : "sbt\/internal\/RelayAppender.html#append(event:org.apache.logging.log4j.core.LogEvent):Unit", "kind" : "def"}, {"label" : "jsonFormat", "tail" : ": BasicJsonProtocol with JValueFormats", "member" : "sbt.internal.RelayAppender.jsonFormat", "link" : "sbt\/internal\/RelayAppender.html#jsonFormat:sjsonnew.BasicJsonProtocolwithsbt.internal.util.codec.JValueFormats", "kind" : "lazy val"}, {"label" : "exchange", "tail" : ": CommandExchange", "member" : "sbt.internal.RelayAppender.exchange", "link" : "sbt\/internal\/RelayAppender.html#exchange:sbt.internal.CommandExchange", "kind" : "lazy val"}, {"member" : "sbt.internal.RelayAppender#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.logging.log4j.core.appender.AbstractAppender.toString", "link" : "sbt\/internal\/RelayAppender.html#toString():String", "kind" : "def"}, {"label" : "setHandler", "tail" : "(arg0: ErrorHandler): Unit", "member" : "org.apache.logging.log4j.core.appender.AbstractAppender.setHandler", "link" : "sbt\/internal\/RelayAppender.html#setHandler(x$1:org.apache.logging.log4j.core.ErrorHandler):Unit", "kind" : "def"}, {"label" : "ignoreExceptions", "tail" : "(): Boolean", "member" : "org.apache.logging.log4j.core.appender.AbstractAppender.ignoreExceptions", "link" : "sbt\/internal\/RelayAppender.html#ignoreExceptions():Boolean", "kind" : "def"}, {"label" : "getName", "tail" : "(): String", "member" : "org.apache.logging.log4j.core.appender.AbstractAppender.getName", "link" : "sbt\/internal\/RelayAppender.html#getName():String", "kind" : "def"}, {"label" : "getLayout", "tail" : "(): Layout[_ <: Serializable]", "member" : "org.apache.logging.log4j.core.appender.AbstractAppender.getLayout", "link" : "sbt\/internal\/RelayAppender.html#getLayout():org.apache.logging.log4j.core.Layout[_<:java.io.Serializable]", "kind" : "def"}, {"label" : "getHandler", "tail" : "(): ErrorHandler", "member" : "org.apache.logging.log4j.core.appender.AbstractAppender.getHandler", "link" : "sbt\/internal\/RelayAppender.html#getHandler():org.apache.logging.log4j.core.ErrorHandler", "kind" : "def"}, {"label" : "error", "tail" : "(arg0: String, arg1: Throwable): Unit", "member" : "org.apache.logging.log4j.core.appender.AbstractAppender.error", "link" : "sbt\/internal\/RelayAppender.html#error(x$1:String,x$2:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(arg0: String, arg1: LogEvent, arg2: Throwable): Unit", "member" : "org.apache.logging.log4j.core.appender.AbstractAppender.error", "link" : "sbt\/internal\/RelayAppender.html#error(x$1:String,x$2:org.apache.logging.log4j.core.LogEvent,x$3:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(arg0: String): Unit", "member" : "org.apache.logging.log4j.core.appender.AbstractAppender.error", "link" : "sbt\/internal\/RelayAppender.html#error(x$1:String):Unit", "kind" : "def"}, {"label" : "isFiltered", "tail" : "(arg0: LogEvent): Boolean", "member" : "org.apache.logging.log4j.core.filter.AbstractFilterable.isFiltered", "link" : "sbt\/internal\/RelayAppender.html#isFiltered(x$1:org.apache.logging.log4j.core.LogEvent):Boolean", "kind" : "def"}, {"label" : "stop", "tail" : "(arg0: Long, arg1: TimeUnit, arg2: Boolean): Boolean", "member" : "org.apache.logging.log4j.core.filter.AbstractFilterable.stop", "link" : "sbt\/internal\/RelayAppender.html#stop(x$1:Long,x$2:java.util.concurrent.TimeUnit,x$3:Boolean):Boolean", "kind" : "def"}, {"label" : "stop", "tail" : "(arg0: Long, arg1: TimeUnit): Boolean", "member" : "org.apache.logging.log4j.core.filter.AbstractFilterable.stop", "link" : "sbt\/internal\/RelayAppender.html#stop(x$1:Long,x$2:java.util.concurrent.TimeUnit):Boolean", "kind" : "def"}, {"label" : "start", "tail" : "(): Unit", "member" : "org.apache.logging.log4j.core.filter.AbstractFilterable.start", "link" : "sbt\/internal\/RelayAppender.html#start():Unit", "kind" : "def"}, {"label" : "hasFilter", "tail" : "(): Boolean", "member" : "org.apache.logging.log4j.core.filter.AbstractFilterable.hasFilter", "link" : "sbt\/internal\/RelayAppender.html#hasFilter():Boolean", "kind" : "def"}, {"label" : "removeFilter", "tail" : "(arg0: Filter): Unit", "member" : "org.apache.logging.log4j.core.filter.AbstractFilterable.removeFilter", "link" : "sbt\/internal\/RelayAppender.html#removeFilter(x$1:org.apache.logging.log4j.core.Filter):Unit", "kind" : "def"}, {"label" : "addFilter", "tail" : "(arg0: Filter): Unit", "member" : "org.apache.logging.log4j.core.filter.AbstractFilterable.addFilter", "link" : "sbt\/internal\/RelayAppender.html#addFilter(x$1:org.apache.logging.log4j.core.Filter):Unit", "kind" : "def"}, {"label" : "getFilter", "tail" : "(): Filter", "member" : "org.apache.logging.log4j.core.filter.AbstractFilterable.getFilter", "link" : "sbt\/internal\/RelayAppender.html#getFilter():org.apache.logging.log4j.core.Filter", "kind" : "def"}, {"label" : "stop", "tail" : "(arg0: Future[_]): Boolean", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.stop", "link" : "sbt\/internal\/RelayAppender.html#stop(x$1:java.util.concurrent.Future[_]):Boolean", "kind" : "def"}, {"label" : "stop", "tail" : "(): Unit", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.stop", "link" : "sbt\/internal\/RelayAppender.html#stop():Unit", "kind" : "def"}, {"label" : "initialize", "tail" : "(): Unit", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.initialize", "link" : "sbt\/internal\/RelayAppender.html#initialize():Unit", "kind" : "def"}, {"label" : "setStopping", "tail" : "(): Unit", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.setStopping", "link" : "sbt\/internal\/RelayAppender.html#setStopping():Unit", "kind" : "def"}, {"label" : "setStopped", "tail" : "(): Unit", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.setStopped", "link" : "sbt\/internal\/RelayAppender.html#setStopped():Unit", "kind" : "def"}, {"label" : "setState", "tail" : "(arg0: org.apache.logging.log4j.core.LifeCycle.State): Unit", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.setState", "link" : "sbt\/internal\/RelayAppender.html#setState(x$1:org.apache.logging.log4j.core.LifeCycle.State):Unit", "kind" : "def"}, {"label" : "setStarting", "tail" : "(): Unit", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.setStarting", "link" : "sbt\/internal\/RelayAppender.html#setStarting():Unit", "kind" : "def"}, {"label" : "setStarted", "tail" : "(): Unit", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.setStarted", "link" : "sbt\/internal\/RelayAppender.html#setStarted():Unit", "kind" : "def"}, {"label" : "isStopping", "tail" : "(): Boolean", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.isStopping", "link" : "sbt\/internal\/RelayAppender.html#isStopping():Boolean", "kind" : "def"}, {"label" : "isStopped", "tail" : "(): Boolean", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.isStopped", "link" : "sbt\/internal\/RelayAppender.html#isStopped():Boolean", "kind" : "def"}, {"label" : "isStarting", "tail" : "(): Boolean", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.isStarting", "link" : "sbt\/internal\/RelayAppender.html#isStarting():Boolean", "kind" : "def"}, {"label" : "isStarted", "tail" : "(): Boolean", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.isStarted", "link" : "sbt\/internal\/RelayAppender.html#isStarted():Boolean", "kind" : "def"}, {"label" : "isInitialized", "tail" : "(): Boolean", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.isInitialized", "link" : "sbt\/internal\/RelayAppender.html#isInitialized():Boolean", "kind" : "def"}, {"label" : "hashCodeImpl", "tail" : "(): Int", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.hashCodeImpl", "link" : "sbt\/internal\/RelayAppender.html#hashCodeImpl():Int", "kind" : "def"}, {"label" : "getState", "tail" : "(): org.apache.logging.log4j.core.LifeCycle.State", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.getState", "link" : "sbt\/internal\/RelayAppender.html#getState():org.apache.logging.log4j.core.LifeCycle.State", "kind" : "def"}, {"label" : "equalsImpl", "tail" : "(arg0: Any): Boolean", "member" : "org.apache.logging.log4j.core.AbstractLifeCycle.equalsImpl", "link" : "sbt\/internal\/RelayAppender.html#equalsImpl(x$1:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/RelayAppender.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/RelayAppender.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/RelayAppender.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/RelayAppender.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/RelayAppender.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/RelayAppender.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/RelayAppender.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/RelayAppender.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/RelayAppender.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/RelayAppender.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/RelayAppender.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/RelayAppender.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/RelayAppender.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/RelayAppender.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/RelayAppender.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/RelayAppender.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/RelayAppender.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/RelayAppender.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/RelayAppender.html", "kind" : "class"}, {"name" : "sbt.internal.Resolve", "shortDescription" : "", "object" : "sbt\/internal\/Resolve$.html", "members_object" : [{"label" : "resolveConfig", "tail" : "(index: BuildUtil[P], key: AttributeKey[_], mask: ScopeMask)(scope: Scope): Scope", "member" : "sbt.internal.Resolve.resolveConfig", "link" : "sbt\/internal\/Resolve$.html#resolveConfig[P](index:sbt.internal.BuildUtil[P],key:sbt.internal.util.AttributeKey[_],mask:sbt.ScopeMask)(scope:sbt.Scope):sbt.Scope", "kind" : "def"}, {"label" : "resolveExtra", "tail" : "(mask: ScopeMask)(scope: Scope): Scope", "member" : "sbt.internal.Resolve.resolveExtra", "link" : "sbt\/internal\/Resolve$.html#resolveExtra(mask:sbt.ScopeMask)(scope:sbt.Scope):sbt.Scope", "kind" : "def"}, {"label" : "resolveProject", "tail" : "(current: ScopeAxis[Reference], mask: ScopeMask)(scope: Scope): Scope", "member" : "sbt.internal.Resolve.resolveProject", "link" : "sbt\/internal\/Resolve$.html#resolveProject(current:sbt.ScopeAxis[sbt.Reference],mask:sbt.ScopeMask)(scope:sbt.Scope):sbt.Scope", "kind" : "def"}, {"label" : "resolveTask", "tail" : "(mask: ScopeMask)(scope: Scope): Scope", "member" : "sbt.internal.Resolve.resolveTask", "link" : "sbt\/internal\/Resolve$.html#resolveTask(mask:sbt.ScopeMask)(scope:sbt.Scope):sbt.Scope", "kind" : "def"}, {"label" : "apply", "tail" : "(index: BuildUtil[_], current: ScopeAxis[Reference], key: AttributeKey[_], mask: ScopeMask): (Scope) ⇒ Scope", "member" : "sbt.internal.Resolve.apply", "link" : "sbt\/internal\/Resolve$.html#apply(index:sbt.internal.BuildUtil[_],current:sbt.ScopeAxis[sbt.Reference],key:sbt.internal.util.AttributeKey[_],mask:sbt.ScopeMask):sbt.Scope=>sbt.Scope", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/Resolve$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/Resolve$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/Resolve$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/Resolve$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/Resolve$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/Resolve$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/Resolve$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Resolve$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Resolve$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Resolve$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/Resolve$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/Resolve$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/Resolve$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/Resolve$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/Resolve$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/Resolve$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/Resolve$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/Resolve$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/Resolve$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.RetrieveUnit", "shortDescription" : "", "object" : "sbt\/internal\/RetrieveUnit$.html", "members_object" : [{"label" : "Path", "tail" : "", "member" : "sbt.internal.RetrieveUnit.Path", "link" : "sbt\/internal\/RetrieveUnit$.html#Path", "kind" : "object"}, {"label" : "Scheme", "tail" : "", "member" : "sbt.internal.RetrieveUnit.Scheme", "link" : "sbt\/internal\/RetrieveUnit$.html#Scheme", "kind" : "object"}, {"label" : "apply", "tail" : "(info: ResolveInfo): Option[() ⇒ File]", "member" : "sbt.internal.RetrieveUnit.apply", "link" : "sbt\/internal\/RetrieveUnit$.html#apply(info:sbt.internal.BuildLoader.ResolveInfo):Option[()=>java.io.File]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/RetrieveUnit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/RetrieveUnit$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/RetrieveUnit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/RetrieveUnit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/RetrieveUnit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/RetrieveUnit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/RetrieveUnit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/RetrieveUnit$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/RetrieveUnit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/RetrieveUnit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/RetrieveUnit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/RetrieveUnit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/RetrieveUnit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/RetrieveUnit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/RetrieveUnit$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/RetrieveUnit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/RetrieveUnit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/RetrieveUnit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/RetrieveUnit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.Script", "shortDescription" : "", "object" : "sbt\/internal\/Script$.html", "members_object" : [{"label" : "fail", "tail" : "(s: State, msg: String): State", "member" : "sbt.internal.Script.fail", "link" : "sbt\/internal\/Script$.html#fail(s:sbt.State,msg:String):sbt.State", "kind" : "def"}, {"label" : "BlockEnd", "tail" : ": String", "member" : "sbt.internal.Script.BlockEnd", "link" : "sbt\/internal\/Script$.html#BlockEnd:String", "kind" : "val"}, {"label" : "BlockStart", "tail" : ": String", "member" : "sbt.internal.Script.BlockStart", "link" : "sbt\/internal\/Script$.html#BlockStart:String", "kind" : "val"}, {"label" : "blocks", "tail" : "(file: File): Seq[Block]", "member" : "sbt.internal.Script.blocks", "link" : "sbt\/internal\/Script$.html#blocks(file:java.io.File):Seq[sbt.internal.Script.Block]", "kind" : "def"}, {"label" : "Block", "tail" : "", "member" : "sbt.internal.Script.Block", "link" : "sbt\/internal\/Script$.html#BlockextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "command", "tail" : ": Command", "member" : "sbt.internal.Script.command", "link" : "sbt\/internal\/Script$.html#command:sbt.Command", "kind" : "lazy val"}, {"label" : "Name", "tail" : ": String(\"script\")", "member" : "sbt.internal.Script.Name", "link" : "sbt\/internal\/Script$.html#Name:String(\"script\")", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/Script$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/Script$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/Script$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/Script$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/Script$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/Script$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/Script$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Script$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Script$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/Script$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/Script$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/Script$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/Script$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/Script$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/Script$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/Script$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/Script$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/Script$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/Script$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.SessionSettings", "shortDescription" : "Represents (potentially) transient settings added into a build via commands\/user.", "object" : "sbt\/internal\/SessionSettings$.html", "members_object" : [{"label" : "command", "tail" : "(s: State): Parser[() ⇒ State]", "member" : "sbt.internal.SessionSettings.command", "link" : "sbt\/internal\/SessionSettings$.html#command(s:sbt.State):sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "range", "tail" : "(): Parser[(Int, Int)]", "member" : "sbt.internal.SessionSettings.range", "link" : "sbt\/internal\/SessionSettings$.html#range:sbt.internal.util.complete.Parser[(Int,Int)]", "kind" : "def"}, {"label" : "natSelect", "tail" : "(): Parser[Seq[(Int, Int)]]", "member" : "sbt.internal.SessionSettings.natSelect", "link" : "sbt\/internal\/SessionSettings$.html#natSelect:sbt.internal.util.complete.Parser[Seq[(Int,Int)]]", "kind" : "def"}, {"label" : "remove", "tail" : ": Parser[Remove]", "member" : "sbt.internal.SessionSettings.remove", "link" : "sbt\/internal\/SessionSettings$.html#remove:sbt.internal.util.complete.Parser[sbt.internal.SessionSettings.Remove]", "kind" : "lazy val"}, {"label" : "parser", "tail" : ": Parser[SessionCommand]", "member" : "sbt.internal.SessionSettings.parser", "link" : "sbt\/internal\/SessionSettings$.html#parser:sbt.internal.util.complete.Parser[sbt.internal.SessionSettings.SessionCommand]", "kind" : "lazy val"}, {"label" : "Remove", "tail" : "", "member" : "sbt.internal.SessionSettings.Remove", "link" : "sbt\/internal\/SessionSettings$.html#RemoveextendsSessionSettings.SessionCommand", "kind" : "final class"}, {"label" : "Save", "tail" : "", "member" : "sbt.internal.SessionSettings.Save", "link" : "sbt\/internal\/SessionSettings$.html#SaveextendsSessionSettings.SessionCommand", "kind" : "final class"}, {"label" : "Clear", "tail" : "", "member" : "sbt.internal.SessionSettings.Clear", "link" : "sbt\/internal\/SessionSettings$.html#ClearextendsSessionSettings.SessionCommand", "kind" : "final class"}, {"label" : "Print", "tail" : "", "member" : "sbt.internal.SessionSettings.Print", "link" : "sbt\/internal\/SessionSettings$.html#PrintextendsSessionSettings.SessionCommand", "kind" : "final class"}, {"label" : "SessionCommand", "tail" : "", "member" : "sbt.internal.SessionSettings.SessionCommand", "link" : "sbt\/internal\/SessionSettings$.html#SessionCommandextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Help", "tail" : "(): String", "member" : "sbt.internal.SessionSettings.Help", "link" : "sbt\/internal\/SessionSettings$.html#Help:String", "kind" : "def"}, {"label" : "printSettings", "tail" : "(settings: Seq[SessionSetting]): Unit", "member" : "sbt.internal.SessionSettings.printSettings", "link" : "sbt\/internal\/SessionSettings$.html#printSettings(settings:Seq[sbt.internal.SessionSettings.SessionSetting]):Unit", "kind" : "def"}, {"label" : "printSettings", "tail" : "(s: State): State", "member" : "sbt.internal.SessionSettings.printSettings", "link" : "sbt\/internal\/SessionSettings$.html#printSettings(s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "printAllSettings", "tail" : "(s: State): State", "member" : "sbt.internal.SessionSettings.printAllSettings", "link" : "sbt\/internal\/SessionSettings$.html#printAllSettings(s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "needsTrailingBlank", "tail" : "(lines: Seq[String]): Boolean", "member" : "sbt.internal.SessionSettings.needsTrailingBlank", "link" : "sbt\/internal\/SessionSettings$.html#needsTrailingBlank(lines:Seq[String]):Boolean", "kind" : "def"}, {"label" : "writeSettings", "tail" : "(pref: ProjectRef, settings: List[SessionSetting], original: Seq[Def.Setting[_]], structure: BuildStructure): (Seq[SessionSetting], Seq[Def.Setting[_]])", "member" : "sbt.internal.SessionSettings.writeSettings", "link" : "sbt\/internal\/SessionSettings$.html#writeSettings(pref:sbt.ProjectRef,settings:List[sbt.internal.SessionSettings.SessionSetting],original:Seq[sbt.Def.Setting[_]],structure:sbt.internal.BuildStructure):(Seq[sbt.internal.SessionSettings.SessionSetting],Seq[sbt.Def.Setting[_]])", "kind" : "def"}, {"label" : "saveSomeSettings", "tail" : "(s: State)(include: (ProjectRef) ⇒ Boolean): State", "member" : "sbt.internal.SessionSettings.saveSomeSettings", "link" : "sbt\/internal\/SessionSettings$.html#saveSomeSettings(s:sbt.State)(include:sbt.ProjectRef=>Boolean):sbt.State", "kind" : "def"}, {"label" : "saveSettings", "tail" : "(s: State): State", "member" : "sbt.internal.SessionSettings.saveSettings", "link" : "sbt\/internal\/SessionSettings$.html#saveSettings(s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "saveAllSettings", "tail" : "(s: State): State", "member" : "sbt.internal.SessionSettings.saveAllSettings", "link" : "sbt\/internal\/SessionSettings$.html#saveAllSettings(s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "removeSettings", "tail" : "(s: State, ranges: Seq[(Int, Int)]): State", "member" : "sbt.internal.SessionSettings.removeSettings", "link" : "sbt\/internal\/SessionSettings$.html#removeSettings(s:sbt.State,ranges:Seq[(Int,Int)]):sbt.State", "kind" : "def"}, {"label" : "removeRanges", "tail" : "(in: Seq[T], ranges: Seq[(Int, Int)]): Seq[T]", "member" : "sbt.internal.SessionSettings.removeRanges", "link" : "sbt\/internal\/SessionSettings$.html#removeRanges[T](in:Seq[T],ranges:Seq[(Int,Int)]):Seq[T]", "kind" : "def"}, {"label" : "checkSession", "tail" : "(newSession: SessionSettings, oldState: State): Unit", "member" : "sbt.internal.SessionSettings.checkSession", "link" : "sbt\/internal\/SessionSettings$.html#checkSession(newSession:sbt.internal.SessionSettings,oldState:sbt.State):Unit", "kind" : "def"}, {"label" : "pluralize", "tail" : "(size: Int, of: String): String", "member" : "sbt.internal.SessionSettings.pluralize", "link" : "sbt\/internal\/SessionSettings$.html#pluralize(size:Int,of:String):String", "kind" : "def"}, {"label" : "withSettings", "tail" : "(s: State)(f: (SessionSettings) ⇒ State): State", "member" : "sbt.internal.SessionSettings.withSettings", "link" : "sbt\/internal\/SessionSettings$.html#withSettings(s:sbt.State)(f:sbt.internal.SessionSettings=>sbt.State):sbt.State", "kind" : "def"}, {"label" : "clearAllSettings", "tail" : "(s: State): State", "member" : "sbt.internal.SessionSettings.clearAllSettings", "link" : "sbt\/internal\/SessionSettings$.html#clearAllSettings(s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "clearSettings", "tail" : "(s: State): State", "member" : "sbt.internal.SessionSettings.clearSettings", "link" : "sbt\/internal\/SessionSettings$.html#clearSettings(s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "reapply", "tail" : "(session: SessionSettings, s: State): State", "member" : "sbt.internal.SessionSettings.reapply", "link" : "sbt\/internal\/SessionSettings$.html#reapply(session:sbt.internal.SessionSettings,s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "SbtConfigFile", "tail" : "", "member" : "sbt.internal.SessionSettings.SbtConfigFile", "link" : "sbt\/internal\/SessionSettings$.html#SbtConfigFile=(java.io.File,Seq[String])", "kind" : "type"}, {"label" : "SessionMap", "tail" : "", "member" : "sbt.internal.SessionSettings.SessionMap", "link" : "sbt\/internal\/SessionSettings$.html#SessionMap=Map[sbt.ProjectRef,Seq[sbt.internal.SessionSettings.SessionSetting]]", "kind" : "type"}, {"label" : "SessionSetting", "tail" : "", "member" : "sbt.internal.SessionSettings.SessionSetting", "link" : "sbt\/internal\/SessionSettings$.html#SessionSetting=(sbt.Def.Setting[_],Seq[String])", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/SessionSettings$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/SessionSettings$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/SessionSettings$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/SessionSettings$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/SessionSettings$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/SessionSettings$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/SessionSettings$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/SessionSettings$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/SessionSettings$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/SessionSettings$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/SessionSettings$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/SessionSettings$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/SessionSettings$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/SessionSettings$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/SessionSettings$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/SessionSettings$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/SessionSettings$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/SessionSettings$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/SessionSettings$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "clearExtraSettings", "tail" : "(): SessionSettings", "member" : "sbt.internal.SessionSettings.clearExtraSettings", "link" : "sbt\/internal\/SessionSettings.html#clearExtraSettings:sbt.internal.SessionSettings", "kind" : "def"}, {"label" : "mergeSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.internal.SessionSettings.mergeSettings", "link" : "sbt\/internal\/SessionSettings.html#mergeSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "appendRaw", "tail" : "(ss: Seq[Def.Setting[_]]): SessionSettings", "member" : "sbt.internal.SessionSettings.appendRaw", "link" : "sbt\/internal\/SessionSettings.html#appendRaw(ss:Seq[sbt.Def.Setting[_]]):sbt.internal.SessionSettings", "kind" : "def"}, {"label" : "appendSettings", "tail" : "(s: Seq[SessionSetting]): SessionSettings", "member" : "sbt.internal.SessionSettings.appendSettings", "link" : "sbt\/internal\/SessionSettings.html#appendSettings(s:Seq[sbt.internal.SessionSettings.SessionSetting]):sbt.internal.SessionSettings", "kind" : "def"}, {"label" : "current", "tail" : "(): ProjectRef", "member" : "sbt.internal.SessionSettings.current", "link" : "sbt\/internal\/SessionSettings.html#current:sbt.ProjectRef", "kind" : "def"}, {"label" : "setCurrent", "tail" : "(build: URI, project: String, eval: () ⇒ Eval): SessionSettings", "member" : "sbt.internal.SessionSettings.setCurrent", "link" : "sbt\/internal\/SessionSettings.html#setCurrent(build:java.net.URI,project:String,eval:()=>sbt.compiler.Eval):sbt.internal.SessionSettings", "kind" : "def"}, {"member" : "sbt.internal.SessionSettings#<init>", "error" : "unsupported entity"}, {"label" : "currentEval", "tail" : ": () ⇒ Eval", "member" : "sbt.internal.SessionSettings.currentEval", "link" : "sbt\/internal\/SessionSettings.html#currentEval:()=>sbt.compiler.Eval", "kind" : "val"}, {"label" : "rawAppend", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.internal.SessionSettings.rawAppend", "link" : "sbt\/internal\/SessionSettings.html#rawAppend:Seq[sbt.Def.Setting[_]]", "kind" : "val"}, {"label" : "append", "tail" : ": SessionMap", "member" : "sbt.internal.SessionSettings.append", "link" : "sbt\/internal\/SessionSettings.html#append:sbt.internal.SessionSettings.SessionMap", "kind" : "val"}, {"label" : "original", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.internal.SessionSettings.original", "link" : "sbt\/internal\/SessionSettings.html#original:Seq[sbt.Def.Setting[_]]", "kind" : "val"}, {"label" : "currentProject", "tail" : ": Map[URI, String]", "member" : "sbt.internal.SessionSettings.currentProject", "link" : "sbt\/internal\/SessionSettings.html#currentProject:Map[java.net.URI,String]", "kind" : "val"}, {"label" : "currentBuild", "tail" : ": URI", "member" : "sbt.internal.SessionSettings.currentBuild", "link" : "sbt\/internal\/SessionSettings.html#currentBuild:java.net.URI", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/SessionSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/SessionSettings.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/SessionSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/SessionSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/SessionSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/SessionSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/SessionSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/SessionSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/SessionSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/SessionSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/SessionSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/SessionSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/SessionSettings.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/SessionSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/SessionSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/SessionSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/SessionSettings.html", "kind" : "case class"}, {"name" : "sbt.internal.SettingGraph", "shortDescription" : "", "object" : "sbt\/internal\/SettingGraph$.html", "members_object" : [{"label" : "apply", "tail" : "(structure: BuildStructure, basedir: File, scoped: Def.ScopedKey[_], generation: Int)(display: Show[Def.ScopedKey[_]]): SettingGraph", "member" : "sbt.internal.SettingGraph.apply", "link" : "sbt\/internal\/SettingGraph$.html#apply(structure:sbt.internal.BuildStructure,basedir:java.io.File,scoped:sbt.Def.ScopedKey[_],generation:Int)(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):sbt.internal.SettingGraph", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/SettingGraph$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/SettingGraph$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/SettingGraph$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/SettingGraph$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/SettingGraph$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/SettingGraph$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/SettingGraph$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/SettingGraph$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/SettingGraph$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/SettingGraph$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/SettingGraph$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/SettingGraph$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/SettingGraph$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/SettingGraph$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/SettingGraph$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/SettingGraph$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/SettingGraph$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/SettingGraph$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/SettingGraph$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "dependsAscii", "tail" : "(defaultWidth: Int): String", "member" : "sbt.internal.SettingGraph.dependsAscii", "link" : "sbt\/internal\/SettingGraph.html#dependsAscii(defaultWidth:Int):String", "kind" : "def"}, {"label" : "dataString", "tail" : "(): String", "member" : "sbt.internal.SettingGraph.dataString", "link" : "sbt\/internal\/SettingGraph.html#dataString:String", "kind" : "def"}, {"member" : "sbt.internal.SettingGraph#<init>", "error" : "unsupported entity"}, {"label" : "depends", "tail" : ": Set[SettingGraph]", "member" : "sbt.internal.SettingGraph.depends", "link" : "sbt\/internal\/SettingGraph.html#depends:Set[sbt.internal.SettingGraph]", "kind" : "val"}, {"label" : "basedir", "tail" : ": File", "member" : "sbt.internal.SettingGraph.basedir", "link" : "sbt\/internal\/SettingGraph.html#basedir:java.io.File", "kind" : "val"}, {"label" : "description", "tail" : ": Option[String]", "member" : "sbt.internal.SettingGraph.description", "link" : "sbt\/internal\/SettingGraph.html#description:Option[String]", "kind" : "val"}, {"label" : "data", "tail" : ": Option[ScopedKeyData[_]]", "member" : "sbt.internal.SettingGraph.data", "link" : "sbt\/internal\/SettingGraph.html#data:Option[sbt.ScopedKeyData[_]]", "kind" : "val"}, {"label" : "definedIn", "tail" : ": Option[String]", "member" : "sbt.internal.SettingGraph.definedIn", "link" : "sbt\/internal\/SettingGraph.html#definedIn:Option[String]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "sbt.internal.SettingGraph.name", "link" : "sbt\/internal\/SettingGraph.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/SettingGraph.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/SettingGraph.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/SettingGraph.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/SettingGraph.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/SettingGraph.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/SettingGraph.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/SettingGraph.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/SettingGraph.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/SettingGraph.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/SettingGraph.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/SettingGraph.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/SettingGraph.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/SettingGraph.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/SettingGraph.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/SettingGraph.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/SettingGraph.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/SettingGraph.html", "kind" : "object"}, {"name" : "sbt.internal.StructureIndex", "shortDescription" : "", "members_class" : [{"member" : "sbt.internal.StructureIndex#<init>", "error" : "unsupported entity"}, {"label" : "aggregateKeyIndex", "tail" : ": KeyIndex", "member" : "sbt.internal.StructureIndex.aggregateKeyIndex", "link" : "sbt\/internal\/StructureIndex.html#aggregateKeyIndex:sbt.internal.KeyIndex", "kind" : "val"}, {"label" : "keyIndex", "tail" : ": KeyIndex", "member" : "sbt.internal.StructureIndex.keyIndex", "link" : "sbt\/internal\/StructureIndex.html#keyIndex:sbt.internal.KeyIndex", "kind" : "val"}, {"label" : "triggers", "tail" : ": Triggers[Task]", "member" : "sbt.internal.StructureIndex.triggers", "link" : "sbt\/internal\/StructureIndex.html#triggers:sbt.Triggers[sbt.Task]", "kind" : "val"}, {"label" : "taskToKey", "tail" : ": Map[Task[_], Def.ScopedKey[Task[_]]]", "member" : "sbt.internal.StructureIndex.taskToKey", "link" : "sbt\/internal\/StructureIndex.html#taskToKey:Map[sbt.Task[_],sbt.Def.ScopedKey[sbt.Task[_]]]", "kind" : "val"}, {"label" : "keyMap", "tail" : ": Map[String, AttributeKey[_]]", "member" : "sbt.internal.StructureIndex.keyMap", "link" : "sbt\/internal\/StructureIndex.html#keyMap:Map[String,sbt.internal.util.AttributeKey[_]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/StructureIndex.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/StructureIndex.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/StructureIndex.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/StructureIndex.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/StructureIndex.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/StructureIndex.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/StructureIndex.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/StructureIndex.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/StructureIndex.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/StructureIndex.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/StructureIndex.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/StructureIndex.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/StructureIndex.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/StructureIndex.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/StructureIndex.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/StructureIndex.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/StructureIndex.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/StructureIndex.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/StructureIndex.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/StructureIndex.html", "kind" : "class"}, {"name" : "sbt.internal.TaskSequential", "members_trait" : [{"label" : "sequential", "tail" : "(tasks: Seq[Def.Initialize[Task[Unit]]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[B](tasks:Seq[sbt.Def.Initialize[sbt.Task[Unit]]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], task9: Def.Initialize[Task[A9]], task10: Def.Initialize[Task[A10]], task11: Def.Initialize[Task[A11]], task12: Def.Initialize[Task[A12]], task13: Def.Initialize[Task[A13]], task14: Def.Initialize[Task[A14]], task15: Def.Initialize[Task[A15]], task16: Def.Initialize[Task[A16]], task17: Def.Initialize[Task[A17]], task18: Def.Initialize[Task[A18]], task19: Def.Initialize[Task[A19]], task20: Def.Initialize[Task[A20]], task21: Def.Initialize[Task[A21]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],task9:sbt.Def.Initialize[sbt.Task[A9]],task10:sbt.Def.Initialize[sbt.Task[A10]],task11:sbt.Def.Initialize[sbt.Task[A11]],task12:sbt.Def.Initialize[sbt.Task[A12]],task13:sbt.Def.Initialize[sbt.Task[A13]],task14:sbt.Def.Initialize[sbt.Task[A14]],task15:sbt.Def.Initialize[sbt.Task[A15]],task16:sbt.Def.Initialize[sbt.Task[A16]],task17:sbt.Def.Initialize[sbt.Task[A17]],task18:sbt.Def.Initialize[sbt.Task[A18]],task19:sbt.Def.Initialize[sbt.Task[A19]],task20:sbt.Def.Initialize[sbt.Task[A20]],task21:sbt.Def.Initialize[sbt.Task[A21]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], task9: Def.Initialize[Task[A9]], task10: Def.Initialize[Task[A10]], task11: Def.Initialize[Task[A11]], task12: Def.Initialize[Task[A12]], task13: Def.Initialize[Task[A13]], task14: Def.Initialize[Task[A14]], task15: Def.Initialize[Task[A15]], task16: Def.Initialize[Task[A16]], task17: Def.Initialize[Task[A17]], task18: Def.Initialize[Task[A18]], task19: Def.Initialize[Task[A19]], task20: Def.Initialize[Task[A20]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],task9:sbt.Def.Initialize[sbt.Task[A9]],task10:sbt.Def.Initialize[sbt.Task[A10]],task11:sbt.Def.Initialize[sbt.Task[A11]],task12:sbt.Def.Initialize[sbt.Task[A12]],task13:sbt.Def.Initialize[sbt.Task[A13]],task14:sbt.Def.Initialize[sbt.Task[A14]],task15:sbt.Def.Initialize[sbt.Task[A15]],task16:sbt.Def.Initialize[sbt.Task[A16]],task17:sbt.Def.Initialize[sbt.Task[A17]],task18:sbt.Def.Initialize[sbt.Task[A18]],task19:sbt.Def.Initialize[sbt.Task[A19]],task20:sbt.Def.Initialize[sbt.Task[A20]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], task9: Def.Initialize[Task[A9]], task10: Def.Initialize[Task[A10]], task11: Def.Initialize[Task[A11]], task12: Def.Initialize[Task[A12]], task13: Def.Initialize[Task[A13]], task14: Def.Initialize[Task[A14]], task15: Def.Initialize[Task[A15]], task16: Def.Initialize[Task[A16]], task17: Def.Initialize[Task[A17]], task18: Def.Initialize[Task[A18]], task19: Def.Initialize[Task[A19]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],task9:sbt.Def.Initialize[sbt.Task[A9]],task10:sbt.Def.Initialize[sbt.Task[A10]],task11:sbt.Def.Initialize[sbt.Task[A11]],task12:sbt.Def.Initialize[sbt.Task[A12]],task13:sbt.Def.Initialize[sbt.Task[A13]],task14:sbt.Def.Initialize[sbt.Task[A14]],task15:sbt.Def.Initialize[sbt.Task[A15]],task16:sbt.Def.Initialize[sbt.Task[A16]],task17:sbt.Def.Initialize[sbt.Task[A17]],task18:sbt.Def.Initialize[sbt.Task[A18]],task19:sbt.Def.Initialize[sbt.Task[A19]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], task9: Def.Initialize[Task[A9]], task10: Def.Initialize[Task[A10]], task11: Def.Initialize[Task[A11]], task12: Def.Initialize[Task[A12]], task13: Def.Initialize[Task[A13]], task14: Def.Initialize[Task[A14]], task15: Def.Initialize[Task[A15]], task16: Def.Initialize[Task[A16]], task17: Def.Initialize[Task[A17]], task18: Def.Initialize[Task[A18]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],task9:sbt.Def.Initialize[sbt.Task[A9]],task10:sbt.Def.Initialize[sbt.Task[A10]],task11:sbt.Def.Initialize[sbt.Task[A11]],task12:sbt.Def.Initialize[sbt.Task[A12]],task13:sbt.Def.Initialize[sbt.Task[A13]],task14:sbt.Def.Initialize[sbt.Task[A14]],task15:sbt.Def.Initialize[sbt.Task[A15]],task16:sbt.Def.Initialize[sbt.Task[A16]],task17:sbt.Def.Initialize[sbt.Task[A17]],task18:sbt.Def.Initialize[sbt.Task[A18]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], task9: Def.Initialize[Task[A9]], task10: Def.Initialize[Task[A10]], task11: Def.Initialize[Task[A11]], task12: Def.Initialize[Task[A12]], task13: Def.Initialize[Task[A13]], task14: Def.Initialize[Task[A14]], task15: Def.Initialize[Task[A15]], task16: Def.Initialize[Task[A16]], task17: Def.Initialize[Task[A17]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],task9:sbt.Def.Initialize[sbt.Task[A9]],task10:sbt.Def.Initialize[sbt.Task[A10]],task11:sbt.Def.Initialize[sbt.Task[A11]],task12:sbt.Def.Initialize[sbt.Task[A12]],task13:sbt.Def.Initialize[sbt.Task[A13]],task14:sbt.Def.Initialize[sbt.Task[A14]],task15:sbt.Def.Initialize[sbt.Task[A15]],task16:sbt.Def.Initialize[sbt.Task[A16]],task17:sbt.Def.Initialize[sbt.Task[A17]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], task9: Def.Initialize[Task[A9]], task10: Def.Initialize[Task[A10]], task11: Def.Initialize[Task[A11]], task12: Def.Initialize[Task[A12]], task13: Def.Initialize[Task[A13]], task14: Def.Initialize[Task[A14]], task15: Def.Initialize[Task[A15]], task16: Def.Initialize[Task[A16]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],task9:sbt.Def.Initialize[sbt.Task[A9]],task10:sbt.Def.Initialize[sbt.Task[A10]],task11:sbt.Def.Initialize[sbt.Task[A11]],task12:sbt.Def.Initialize[sbt.Task[A12]],task13:sbt.Def.Initialize[sbt.Task[A13]],task14:sbt.Def.Initialize[sbt.Task[A14]],task15:sbt.Def.Initialize[sbt.Task[A15]],task16:sbt.Def.Initialize[sbt.Task[A16]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], task9: Def.Initialize[Task[A9]], task10: Def.Initialize[Task[A10]], task11: Def.Initialize[Task[A11]], task12: Def.Initialize[Task[A12]], task13: Def.Initialize[Task[A13]], task14: Def.Initialize[Task[A14]], task15: Def.Initialize[Task[A15]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],task9:sbt.Def.Initialize[sbt.Task[A9]],task10:sbt.Def.Initialize[sbt.Task[A10]],task11:sbt.Def.Initialize[sbt.Task[A11]],task12:sbt.Def.Initialize[sbt.Task[A12]],task13:sbt.Def.Initialize[sbt.Task[A13]],task14:sbt.Def.Initialize[sbt.Task[A14]],task15:sbt.Def.Initialize[sbt.Task[A15]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], task9: Def.Initialize[Task[A9]], task10: Def.Initialize[Task[A10]], task11: Def.Initialize[Task[A11]], task12: Def.Initialize[Task[A12]], task13: Def.Initialize[Task[A13]], task14: Def.Initialize[Task[A14]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],task9:sbt.Def.Initialize[sbt.Task[A9]],task10:sbt.Def.Initialize[sbt.Task[A10]],task11:sbt.Def.Initialize[sbt.Task[A11]],task12:sbt.Def.Initialize[sbt.Task[A12]],task13:sbt.Def.Initialize[sbt.Task[A13]],task14:sbt.Def.Initialize[sbt.Task[A14]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], task9: Def.Initialize[Task[A9]], task10: Def.Initialize[Task[A10]], task11: Def.Initialize[Task[A11]], task12: Def.Initialize[Task[A12]], task13: Def.Initialize[Task[A13]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],task9:sbt.Def.Initialize[sbt.Task[A9]],task10:sbt.Def.Initialize[sbt.Task[A10]],task11:sbt.Def.Initialize[sbt.Task[A11]],task12:sbt.Def.Initialize[sbt.Task[A12]],task13:sbt.Def.Initialize[sbt.Task[A13]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], task9: Def.Initialize[Task[A9]], task10: Def.Initialize[Task[A10]], task11: Def.Initialize[Task[A11]], task12: Def.Initialize[Task[A12]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],task9:sbt.Def.Initialize[sbt.Task[A9]],task10:sbt.Def.Initialize[sbt.Task[A10]],task11:sbt.Def.Initialize[sbt.Task[A11]],task12:sbt.Def.Initialize[sbt.Task[A12]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], task9: Def.Initialize[Task[A9]], task10: Def.Initialize[Task[A10]], task11: Def.Initialize[Task[A11]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],task9:sbt.Def.Initialize[sbt.Task[A9]],task10:sbt.Def.Initialize[sbt.Task[A10]],task11:sbt.Def.Initialize[sbt.Task[A11]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], task9: Def.Initialize[Task[A9]], task10: Def.Initialize[Task[A10]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],task9:sbt.Def.Initialize[sbt.Task[A9]],task10:sbt.Def.Initialize[sbt.Task[A10]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], task9: Def.Initialize[Task[A9]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],task9:sbt.Def.Initialize[sbt.Task[A9]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], task8: Def.Initialize[Task[A8]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,A8,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],task8:sbt.Def.Initialize[sbt.Task[A8]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], task7: Def.Initialize[Task[A7]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,A7,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],task7:sbt.Def.Initialize[sbt.Task[A7]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], task6: Def.Initialize[Task[A6]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,A6,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],task6:sbt.Def.Initialize[sbt.Task[A6]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], task5: Def.Initialize[Task[A5]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,A5,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],task5:sbt.Def.Initialize[sbt.Task[A5]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], task4: Def.Initialize[Task[A4]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,A4,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],task4:sbt.Def.Initialize[sbt.Task[A4]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], task3: Def.Initialize[Task[A3]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,A3,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],task3:sbt.Def.Initialize[sbt.Task[A3]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], task2: Def.Initialize[Task[A2]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,A2,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],task2:sbt.Def.Initialize[sbt.Task[A2]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], task1: Def.Initialize[Task[A1]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,A1,B](task0:sbt.Def.Initialize[sbt.Task[A0]],task1:sbt.Def.Initialize[sbt.Task[A1]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(task0: Def.Initialize[Task[A0]], last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[A0,B](task0:sbt.Def.Initialize[sbt.Task[A0]],last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "sequential", "tail" : "(last: Def.Initialize[Task[B]]): Def.Initialize[Task[B]]", "member" : "sbt.internal.TaskSequential.sequential", "link" : "sbt\/internal\/TaskSequential.html#sequential[B](last:sbt.Def.Initialize[sbt.Task[B]]):sbt.Def.Initialize[sbt.Task[B]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/TaskSequential.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/TaskSequential.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/TaskSequential.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/TaskSequential.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/TaskSequential.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/TaskSequential.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/TaskSequential.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/TaskSequential.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/TaskSequential.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/TaskSequential.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/TaskSequential.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/TaskSequential.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/TaskSequential.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/TaskSequential.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/TaskSequential.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/TaskSequential.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/TaskSequential.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/TaskSequential.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/TaskSequential.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "This trait injected to Def object to provide sequential functions for tasks.", "trait" : "sbt\/internal\/TaskSequential.html", "kind" : "trait"}], "sbt.compiler" : [{"name" : "sbt.compiler.Eval", "shortDescription" : "", "members_class" : [{"label" : "DefaultStartLine", "tail" : ": Int", "member" : "sbt.compiler.Eval.DefaultStartLine", "link" : "sbt\/compiler\/Eval.html#DefaultStartLine:Int", "kind" : "val"}, {"label" : "augment", "tail" : "(parser: (EvalGlobal.syntaxAnalyzer)#UnitParser, imports: Seq[EvalGlobal.Tree], tree: EvalGlobal.Tree, tpt: EvalGlobal.Tree, objectName: String): EvalGlobal.Tree", "member" : "sbt.compiler.Eval.augment", "link" : "sbt\/compiler\/Eval.html#augment(parser:Eval.this.global.syntaxAnalyzer.UnitParser,imports:Seq[Eval.this.global.Tree],tree:Eval.this.global.Tree,tpt:Eval.this.global.Tree,objectName:String):Eval.this.global.Tree", "kind" : "def"}, {"label" : "loadPlain", "tail" : "(dir: File, moduleName: String): (ClassLoader) ⇒ Any", "member" : "sbt.compiler.Eval.loadPlain", "link" : "sbt\/compiler\/Eval.html#loadPlain(dir:java.io.File,moduleName:String):ClassLoader=>Any", "kind" : "def"}, {"label" : "load", "tail" : "(dir: AbstractFile, moduleName: String): (ClassLoader) ⇒ Any", "member" : "sbt.compiler.Eval.load", "link" : "sbt\/compiler\/Eval.html#load(dir:scala.tools.nsc.io.AbstractFile,moduleName:String):ClassLoader=>Any", "kind" : "def"}, {"label" : "evalDefinitions", "tail" : "(definitions: Seq[(String, Range)], imports: EvalImports, srcName: String, file: Option[File], valTypes: Seq[String]): EvalDefinitions", "member" : "sbt.compiler.Eval.evalDefinitions", "link" : "sbt\/compiler\/Eval.html#evalDefinitions(definitions:Seq[(String,Range)],imports:sbt.compiler.EvalImports,srcName:String,file:Option[java.io.File],valTypes:Seq[String]):sbt.compiler.EvalDefinitions", "kind" : "def"}, {"label" : "eval", "tail" : "(expression: String, imports: EvalImports, tpeName: Option[String], srcName: String, line: Int): EvalResult", "member" : "sbt.compiler.Eval.eval", "link" : "sbt\/compiler\/Eval.html#eval(expression:String,imports:sbt.compiler.EvalImports,tpeName:Option[String],srcName:String,line:Int):sbt.compiler.EvalResult", "kind" : "def"}, {"label" : "global", "tail" : ": EvalGlobal", "member" : "sbt.compiler.Eval.global", "link" : "sbt\/compiler\/Eval.html#global:Eval.this.EvalGlobal", "kind" : "lazy val"}, {"label" : "EvalGlobal", "tail" : "", "member" : "sbt.compiler.Eval.EvalGlobal", "link" : "sbt\/compiler\/Eval.html#EvalGlobalextendsGlobal", "kind" : "final class"}, {"label" : "reporter", "tail" : ": Reporter", "member" : "sbt.compiler.Eval.reporter", "link" : "sbt\/compiler\/Eval.html#reporter:scala.tools.nsc.reporters.Reporter", "kind" : "lazy val"}, {"label" : "settings", "tail" : ": Settings", "member" : "sbt.compiler.Eval.settings", "link" : "sbt\/compiler\/Eval.html#settings:scala.tools.nsc.Settings", "kind" : "lazy val"}, {"label" : "options", "tail" : ": Seq[String]", "member" : "sbt.compiler.Eval.options", "link" : "sbt\/compiler\/Eval.html#options:Seq[String]", "kind" : "val"}, {"label" : "classpathString", "tail" : ": String", "member" : "sbt.compiler.Eval.classpathString", "link" : "sbt\/compiler\/Eval.html#classpathString:String", "kind" : "val"}, {"member" : "sbt.compiler.Eval#<init>", "error" : "unsupported entity"}, {"member" : "sbt.compiler.Eval#<init>", "error" : "unsupported entity"}, {"member" : "sbt.compiler.Eval#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/compiler\/Eval.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/compiler\/Eval.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/compiler\/Eval.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/compiler\/Eval.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/compiler\/Eval.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/compiler\/Eval.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/compiler\/Eval.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/Eval.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/Eval.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/Eval.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/compiler\/Eval.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/compiler\/Eval.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/compiler\/Eval.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/compiler\/Eval.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/compiler\/Eval.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/compiler\/Eval.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/compiler\/Eval.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/compiler\/Eval.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/compiler\/Eval.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/compiler\/Eval.html", "kind" : "class"}, {"name" : "sbt.compiler.EvalDefinitions", "shortDescription" : "The result of evaluating a group of Scala definitions.", "members_class" : [{"label" : "values", "tail" : "(parent: ClassLoader): Seq[Any]", "member" : "sbt.compiler.EvalDefinitions.values", "link" : "sbt\/compiler\/EvalDefinitions.html#values(parent:ClassLoader):Seq[Any]", "kind" : "def"}, {"member" : "sbt.compiler.EvalDefinitions#<init>", "error" : "unsupported entity"}, {"label" : "valNames", "tail" : ": Seq[String]", "member" : "sbt.compiler.EvalDefinitions.valNames", "link" : "sbt\/compiler\/EvalDefinitions.html#valNames:Seq[String]", "kind" : "val"}, {"label" : "enclosingModule", "tail" : ": String", "member" : "sbt.compiler.EvalDefinitions.enclosingModule", "link" : "sbt\/compiler\/EvalDefinitions.html#enclosingModule:String", "kind" : "val"}, {"label" : "generated", "tail" : ": Seq[File]", "member" : "sbt.compiler.EvalDefinitions.generated", "link" : "sbt\/compiler\/EvalDefinitions.html#generated:Seq[java.io.File]", "kind" : "val"}, {"label" : "loader", "tail" : ": (ClassLoader) ⇒ ClassLoader", "member" : "sbt.compiler.EvalDefinitions.loader", "link" : "sbt\/compiler\/EvalDefinitions.html#loader:ClassLoader=>ClassLoader", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/compiler\/EvalDefinitions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/compiler\/EvalDefinitions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/compiler\/EvalDefinitions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/compiler\/EvalDefinitions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/compiler\/EvalDefinitions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/compiler\/EvalDefinitions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/compiler\/EvalDefinitions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/EvalDefinitions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/EvalDefinitions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/EvalDefinitions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/compiler\/EvalDefinitions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/compiler\/EvalDefinitions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/compiler\/EvalDefinitions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/compiler\/EvalDefinitions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/compiler\/EvalDefinitions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/compiler\/EvalDefinitions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/compiler\/EvalDefinitions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/compiler\/EvalDefinitions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/compiler\/EvalDefinitions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/compiler\/EvalDefinitions.html", "kind" : "class"}, {"name" : "sbt.compiler.EvalException", "shortDescription" : "", "members_class" : [{"member" : "sbt.compiler.EvalException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "sbt\/compiler\/EvalException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "sbt\/compiler\/EvalException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "sbt\/compiler\/EvalException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "sbt\/compiler\/EvalException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "sbt\/compiler\/EvalException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/compiler\/EvalException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/compiler\/EvalException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/compiler\/EvalException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "sbt\/compiler\/EvalException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "sbt\/compiler\/EvalException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "sbt\/compiler\/EvalException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "sbt\/compiler\/EvalException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "sbt\/compiler\/EvalException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/compiler\/EvalException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/compiler\/EvalException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/compiler\/EvalException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/compiler\/EvalException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/compiler\/EvalException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/compiler\/EvalException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/compiler\/EvalException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/EvalException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/EvalException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/EvalException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/compiler\/EvalException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/compiler\/EvalException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/compiler\/EvalException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/compiler\/EvalException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/compiler\/EvalException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/compiler\/EvalException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/compiler\/EvalException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/compiler\/EvalException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/compiler\/EvalException.html", "kind" : "class"}, {"name" : "sbt.compiler.EvalImports", "shortDescription" : "", "members_class" : [{"member" : "sbt.compiler.EvalImports#<init>", "error" : "unsupported entity"}, {"label" : "srcName", "tail" : ": String", "member" : "sbt.compiler.EvalImports.srcName", "link" : "sbt\/compiler\/EvalImports.html#srcName:String", "kind" : "val"}, {"label" : "strings", "tail" : ": Seq[(String, Int)]", "member" : "sbt.compiler.EvalImports.strings", "link" : "sbt\/compiler\/EvalImports.html#strings:Seq[(String,Int)]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/compiler\/EvalImports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/compiler\/EvalImports.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/compiler\/EvalImports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/compiler\/EvalImports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/compiler\/EvalImports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/compiler\/EvalImports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/compiler\/EvalImports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/EvalImports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/EvalImports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/EvalImports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/compiler\/EvalImports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/compiler\/EvalImports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/compiler\/EvalImports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/compiler\/EvalImports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/compiler\/EvalImports.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/compiler\/EvalImports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/compiler\/EvalImports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/compiler\/EvalImports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/compiler\/EvalImports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/compiler\/EvalImports.html", "kind" : "class"}, {"name" : "sbt.compiler.EvalResult", "shortDescription" : "The result of evaluating a Scala expression.", "members_class" : [{"member" : "sbt.compiler.EvalResult#<init>", "error" : "unsupported entity"}, {"label" : "enclosingModule", "tail" : ": String", "member" : "sbt.compiler.EvalResult.enclosingModule", "link" : "sbt\/compiler\/EvalResult.html#enclosingModule:String", "kind" : "val"}, {"label" : "generated", "tail" : ": Seq[File]", "member" : "sbt.compiler.EvalResult.generated", "link" : "sbt\/compiler\/EvalResult.html#generated:Seq[java.io.File]", "kind" : "val"}, {"label" : "getValue", "tail" : ": (ClassLoader) ⇒ Any", "member" : "sbt.compiler.EvalResult.getValue", "link" : "sbt\/compiler\/EvalResult.html#getValue:ClassLoader=>Any", "kind" : "val"}, {"label" : "tpe", "tail" : ": String", "member" : "sbt.compiler.EvalResult.tpe", "link" : "sbt\/compiler\/EvalResult.html#tpe:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/compiler\/EvalResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/compiler\/EvalResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/compiler\/EvalResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/compiler\/EvalResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/compiler\/EvalResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/compiler\/EvalResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/compiler\/EvalResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/EvalResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/EvalResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/compiler\/EvalResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/compiler\/EvalResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/compiler\/EvalResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/compiler\/EvalResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/compiler\/EvalResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/compiler\/EvalResult.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/compiler\/EvalResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/compiler\/EvalResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/compiler\/EvalResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/compiler\/EvalResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/compiler\/EvalResult.html", "kind" : "class"}], "sbt.internal.client" : [{"name" : "sbt.internal.client.NetworkClient", "shortDescription" : "", "object" : "sbt\/internal\/client\/NetworkClient$.html", "members_class" : [{"label" : "publishCommand", "tail" : "(command: CommandMessage): Unit", "member" : "sbt.internal.client.NetworkClient.publishCommand", "link" : "sbt\/internal\/client\/NetworkClient.html#publishCommand(command:sbt.protocol.CommandMessage):Unit", "kind" : "def"}, {"label" : "start", "tail" : "(): Unit", "member" : "sbt.internal.client.NetworkClient.start", "link" : "sbt\/internal\/client\/NetworkClient.html#start():Unit", "kind" : "def"}, {"label" : "onEvent", "tail" : "(event: EventMessage): Unit", "member" : "sbt.internal.client.NetworkClient.onEvent", "link" : "sbt\/internal\/client\/NetworkClient.html#onEvent(event:sbt.protocol.EventMessage):Unit", "kind" : "def"}, {"label" : "onLogEntry", "tail" : "(event: StringEvent): Unit", "member" : "sbt.internal.client.NetworkClient.onLogEntry", "link" : "sbt\/internal\/client\/NetworkClient.html#onLogEntry(event:sbt.internal.util.StringEvent):Unit", "kind" : "def"}, {"label" : "init", "tail" : "(): ServerConnection", "member" : "sbt.internal.client.NetworkClient.init", "link" : "sbt\/internal\/client\/NetworkClient.html#init():sbt.internal.client.ServerConnection", "kind" : "def"}, {"label" : "connection", "tail" : ": ServerConnection", "member" : "sbt.internal.client.NetworkClient.connection", "link" : "sbt\/internal\/client\/NetworkClient.html#connection:sbt.internal.client.ServerConnection", "kind" : "val"}, {"label" : "usageError", "tail" : "(): Nothing", "member" : "sbt.internal.client.NetworkClient.usageError", "link" : "sbt\/internal\/client\/NetworkClient.html#usageError:Nothing", "kind" : "def"}, {"member" : "sbt.internal.client.NetworkClient#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/client\/NetworkClient.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/client\/NetworkClient.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/client\/NetworkClient.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/client\/NetworkClient.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/client\/NetworkClient.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/client\/NetworkClient.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/client\/NetworkClient.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/client\/NetworkClient.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/client\/NetworkClient.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/client\/NetworkClient.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/client\/NetworkClient.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/client\/NetworkClient.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/client\/NetworkClient.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/client\/NetworkClient.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/client\/NetworkClient.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/client\/NetworkClient.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/client\/NetworkClient.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/client\/NetworkClient.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/client\/NetworkClient.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "run", "tail" : "(arguments: List[String]): Unit", "member" : "sbt.internal.client.NetworkClient.run", "link" : "sbt\/internal\/client\/NetworkClient$.html#run(arguments:List[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/client\/NetworkClient$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/client\/NetworkClient$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/client\/NetworkClient$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/client\/NetworkClient$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/client\/NetworkClient$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/client\/NetworkClient$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/client\/NetworkClient$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/client\/NetworkClient$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/client\/NetworkClient$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/client\/NetworkClient$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/client\/NetworkClient$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/client\/NetworkClient$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/client\/NetworkClient$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/client\/NetworkClient$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/client\/NetworkClient$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/client\/NetworkClient$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/client\/NetworkClient$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/client\/NetworkClient$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/client\/NetworkClient$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/client\/NetworkClient.html", "kind" : "class"}, {"name" : "sbt.internal.client.ServerConnection", "shortDescription" : "", "members_class" : [{"label" : "shutdown", "tail" : "(): Unit", "member" : "sbt.internal.client.ServerConnection.shutdown", "link" : "sbt\/internal\/client\/ServerConnection.html#shutdown():Unit", "kind" : "def"}, {"label" : "publish", "tail" : "(command: Array[Byte]): Unit", "member" : "sbt.internal.client.ServerConnection.publish", "link" : "sbt\/internal\/client\/ServerConnection.html#publish(command:Array[Byte]):Unit", "kind" : "def"}, {"label" : "thread", "tail" : ": Thread", "member" : "sbt.internal.client.ServerConnection.thread", "link" : "sbt\/internal\/client\/ServerConnection.html#thread:Thread", "kind" : "val"}, {"member" : "sbt.internal.client.ServerConnection#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/client\/ServerConnection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/client\/ServerConnection.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/client\/ServerConnection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/client\/ServerConnection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/client\/ServerConnection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/client\/ServerConnection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/client\/ServerConnection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/client\/ServerConnection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/client\/ServerConnection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/client\/ServerConnection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/client\/ServerConnection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/client\/ServerConnection.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/client\/ServerConnection.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/client\/ServerConnection.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/client\/ServerConnection.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/client\/ServerConnection.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/client\/ServerConnection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/client\/ServerConnection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/client\/ServerConnection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onShutdown", "tail" : "(): Unit", "member" : "sbt.internal.client.ServerConnection.onShutdown", "link" : "sbt\/internal\/client\/ServerConnection.html#onShutdown():Unit", "kind" : "abstract def"}, {"label" : "onLogEntry", "tail" : "(event: StringEvent): Unit", "member" : "sbt.internal.client.ServerConnection.onLogEntry", "link" : "sbt\/internal\/client\/ServerConnection.html#onLogEntry(event:sbt.internal.util.StringEvent):Unit", "kind" : "abstract def"}, {"label" : "onEvent", "tail" : "(event: EventMessage): Unit", "member" : "sbt.internal.client.ServerConnection.onEvent", "link" : "sbt\/internal\/client\/ServerConnection.html#onEvent(event:sbt.protocol.EventMessage):Unit", "kind" : "abstract def"}], "class" : "sbt\/internal\/client\/ServerConnection.html", "kind" : "class"}], "sbt.protocol.testing" : [{"name" : "sbt.protocol.testing.EndTestGroupErrorEvent", "shortDescription" : "Called if test completed with an error.", "object" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html", "members_class" : [{"label" : "withError", "tail" : "(error: String): EndTestGroupErrorEvent", "member" : "sbt.protocol.testing.EndTestGroupErrorEvent.withError", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#withError(error:String):sbt.protocol.testing.EndTestGroupErrorEvent", "kind" : "def"}, {"label" : "withName", "tail" : "(name: String): EndTestGroupErrorEvent", "member" : "sbt.protocol.testing.EndTestGroupErrorEvent.withName", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#withName(name:String):sbt.protocol.testing.EndTestGroupErrorEvent", "kind" : "def"}, {"label" : "copy", "tail" : "(name: String, error: String): EndTestGroupErrorEvent", "member" : "sbt.protocol.testing.EndTestGroupErrorEvent.copy", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#copy(name:String,error:String):sbt.protocol.testing.EndTestGroupErrorEvent", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.testing.EndTestGroupErrorEvent.toString", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.testing.EndTestGroupErrorEvent.hashCode", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.testing.EndTestGroupErrorEvent.equals", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "error", "tail" : ": String", "member" : "sbt.protocol.testing.EndTestGroupErrorEvent.error", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#error:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "sbt.protocol.testing.EndTestGroupErrorEvent.name", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(name: String, error: String): EndTestGroupErrorEvent", "member" : "sbt.protocol.testing.EndTestGroupErrorEvent.apply", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#apply(name:String,error:String):sbt.protocol.testing.EndTestGroupErrorEvent", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/testing\/EndTestGroupErrorEvent.html", "kind" : "class"}, {"name" : "sbt.protocol.testing.EndTestGroupEvent", "shortDescription" : "Called if test completed.", "object" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html", "members_class" : [{"label" : "withResult", "tail" : "(result: TestResult): EndTestGroupEvent", "member" : "sbt.protocol.testing.EndTestGroupEvent.withResult", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#withResult(result:sbt.protocol.testing.TestResult):sbt.protocol.testing.EndTestGroupEvent", "kind" : "def"}, {"label" : "withName", "tail" : "(name: String): EndTestGroupEvent", "member" : "sbt.protocol.testing.EndTestGroupEvent.withName", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#withName(name:String):sbt.protocol.testing.EndTestGroupEvent", "kind" : "def"}, {"label" : "copy", "tail" : "(name: String, result: TestResult): EndTestGroupEvent", "member" : "sbt.protocol.testing.EndTestGroupEvent.copy", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#copy(name:String,result:sbt.protocol.testing.TestResult):sbt.protocol.testing.EndTestGroupEvent", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.testing.EndTestGroupEvent.toString", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.testing.EndTestGroupEvent.hashCode", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.testing.EndTestGroupEvent.equals", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "result", "tail" : ": TestResult", "member" : "sbt.protocol.testing.EndTestGroupEvent.result", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#result:sbt.protocol.testing.TestResult", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "sbt.protocol.testing.EndTestGroupEvent.name", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(name: String, result: TestResult): EndTestGroupEvent", "member" : "sbt.protocol.testing.EndTestGroupEvent.apply", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#apply(name:String,result:sbt.protocol.testing.TestResult):sbt.protocol.testing.EndTestGroupEvent", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/EndTestGroupEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/testing\/EndTestGroupEvent.html", "kind" : "class"}, {"name" : "sbt.protocol.testing.StartTestGroupEvent", "shortDescription" : "Called for each class or equivalent grouping.", "object" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html", "members_class" : [{"label" : "withName", "tail" : "(name: String): StartTestGroupEvent", "member" : "sbt.protocol.testing.StartTestGroupEvent.withName", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#withName(name:String):sbt.protocol.testing.StartTestGroupEvent", "kind" : "def"}, {"label" : "copy", "tail" : "(name: String): StartTestGroupEvent", "member" : "sbt.protocol.testing.StartTestGroupEvent.copy", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#copy(name:String):sbt.protocol.testing.StartTestGroupEvent", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.testing.StartTestGroupEvent.toString", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.testing.StartTestGroupEvent.hashCode", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.testing.StartTestGroupEvent.equals", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "name", "tail" : ": String", "member" : "sbt.protocol.testing.StartTestGroupEvent.name", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(name: String): StartTestGroupEvent", "member" : "sbt.protocol.testing.StartTestGroupEvent.apply", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#apply(name:String):sbt.protocol.testing.StartTestGroupEvent", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/StartTestGroupEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/testing\/StartTestGroupEvent.html", "kind" : "class"}, {"name" : "sbt.protocol.testing.TestCompleteEvent", "shortDescription" : "Called once, at end of the testing.", "object" : "sbt\/protocol\/testing\/TestCompleteEvent$.html", "members_class" : [{"label" : "withResult", "tail" : "(result: TestResult): TestCompleteEvent", "member" : "sbt.protocol.testing.TestCompleteEvent.withResult", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#withResult(result:sbt.protocol.testing.TestResult):sbt.protocol.testing.TestCompleteEvent", "kind" : "def"}, {"label" : "copy", "tail" : "(result: TestResult): TestCompleteEvent", "member" : "sbt.protocol.testing.TestCompleteEvent.copy", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#copy(result:sbt.protocol.testing.TestResult):sbt.protocol.testing.TestCompleteEvent", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.testing.TestCompleteEvent.toString", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.testing.TestCompleteEvent.hashCode", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.testing.TestCompleteEvent.equals", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "result", "tail" : ": TestResult", "member" : "sbt.protocol.testing.TestCompleteEvent.result", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#result:sbt.protocol.testing.TestResult", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestCompleteEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(result: TestResult): TestCompleteEvent", "member" : "sbt.protocol.testing.TestCompleteEvent.apply", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#apply(result:sbt.protocol.testing.TestResult):sbt.protocol.testing.TestCompleteEvent", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestCompleteEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/testing\/TestCompleteEvent.html", "kind" : "class"}, {"name" : "sbt.protocol.testing.TestInitEvent", "shortDescription" : "Called once, at beginning of the testing.", "object" : "sbt\/protocol\/testing\/TestInitEvent$.html", "members_class" : [{"label" : "copy", "tail" : "(): TestInitEvent", "member" : "sbt.protocol.testing.TestInitEvent.copy", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#copy():sbt.protocol.testing.TestInitEvent", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.testing.TestInitEvent.toString", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.testing.TestInitEvent.hashCode", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.testing.TestInitEvent.equals", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestInitEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestInitEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): TestInitEvent", "member" : "sbt.protocol.testing.TestInitEvent.apply", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#apply():sbt.protocol.testing.TestInitEvent", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestInitEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/testing\/TestInitEvent.html", "kind" : "class"}, {"name" : "sbt.protocol.testing.TestItemDetail", "shortDescription" : "Mini version of sbt.testing.Event", "object" : "sbt\/protocol\/testing\/TestItemDetail$.html", "members_class" : [{"label" : "withDuration", "tail" : "(duration: Long): TestItemDetail", "member" : "sbt.protocol.testing.TestItemDetail.withDuration", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#withDuration(duration:Long):sbt.protocol.testing.TestItemDetail", "kind" : "def"}, {"label" : "withDuration", "tail" : "(duration: Option[Long]): TestItemDetail", "member" : "sbt.protocol.testing.TestItemDetail.withDuration", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#withDuration(duration:Option[Long]):sbt.protocol.testing.TestItemDetail", "kind" : "def"}, {"label" : "withStatus", "tail" : "(status: Status): TestItemDetail", "member" : "sbt.protocol.testing.TestItemDetail.withStatus", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#withStatus(status:sbt.testing.Status):sbt.protocol.testing.TestItemDetail", "kind" : "def"}, {"label" : "withFullyQualifiedName", "tail" : "(fullyQualifiedName: String): TestItemDetail", "member" : "sbt.protocol.testing.TestItemDetail.withFullyQualifiedName", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#withFullyQualifiedName(fullyQualifiedName:String):sbt.protocol.testing.TestItemDetail", "kind" : "def"}, {"label" : "copy", "tail" : "(fullyQualifiedName: String, status: Status, duration: Option[Long]): TestItemDetail", "member" : "sbt.protocol.testing.TestItemDetail.copy", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#copy(fullyQualifiedName:String,status:sbt.testing.Status,duration:Option[Long]):sbt.protocol.testing.TestItemDetail", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.testing.TestItemDetail.toString", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.testing.TestItemDetail.hashCode", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.testing.TestItemDetail.equals", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "duration", "tail" : ": Option[Long]", "member" : "sbt.protocol.testing.TestItemDetail.duration", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#duration:Option[Long]", "kind" : "val"}, {"label" : "status", "tail" : ": Status", "member" : "sbt.protocol.testing.TestItemDetail.status", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#status:sbt.testing.Status", "kind" : "val"}, {"label" : "fullyQualifiedName", "tail" : ": String", "member" : "sbt.protocol.testing.TestItemDetail.fullyQualifiedName", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#fullyQualifiedName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestItemDetail.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestItemDetail.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(fullyQualifiedName: String, status: Status, duration: Long): TestItemDetail", "member" : "sbt.protocol.testing.TestItemDetail.apply", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#apply(fullyQualifiedName:String,status:sbt.testing.Status,duration:Long):sbt.protocol.testing.TestItemDetail", "kind" : "def"}, {"label" : "apply", "tail" : "(fullyQualifiedName: String, status: Status, duration: Option[Long]): TestItemDetail", "member" : "sbt.protocol.testing.TestItemDetail.apply", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#apply(fullyQualifiedName:String,status:sbt.testing.Status,duration:Option[Long]):sbt.protocol.testing.TestItemDetail", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestItemDetail$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/testing\/TestItemDetail.html", "kind" : "class"}, {"name" : "sbt.protocol.testing.TestItemEvent", "shortDescription" : "Called for each test method or equivalent.", "object" : "sbt\/protocol\/testing\/TestItemEvent$.html", "members_class" : [{"label" : "withDetail", "tail" : "(detail: Vector[TestItemDetail]): TestItemEvent", "member" : "sbt.protocol.testing.TestItemEvent.withDetail", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#withDetail(detail:Vector[sbt.protocol.testing.TestItemDetail]):sbt.protocol.testing.TestItemEvent", "kind" : "def"}, {"label" : "withResult", "tail" : "(result: TestResult): TestItemEvent", "member" : "sbt.protocol.testing.TestItemEvent.withResult", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#withResult(result:sbt.protocol.testing.TestResult):sbt.protocol.testing.TestItemEvent", "kind" : "def"}, {"label" : "withResult", "tail" : "(result: Option[TestResult]): TestItemEvent", "member" : "sbt.protocol.testing.TestItemEvent.withResult", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#withResult(result:Option[sbt.protocol.testing.TestResult]):sbt.protocol.testing.TestItemEvent", "kind" : "def"}, {"label" : "copy", "tail" : "(result: Option[TestResult], detail: Vector[TestItemDetail]): TestItemEvent", "member" : "sbt.protocol.testing.TestItemEvent.copy", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#copy(result:Option[sbt.protocol.testing.TestResult],detail:Vector[sbt.protocol.testing.TestItemDetail]):sbt.protocol.testing.TestItemEvent", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.testing.TestItemEvent.toString", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.testing.TestItemEvent.hashCode", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.testing.TestItemEvent.equals", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "detail", "tail" : ": Vector[TestItemDetail]", "member" : "sbt.protocol.testing.TestItemEvent.detail", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#detail:Vector[sbt.protocol.testing.TestItemDetail]", "kind" : "val"}, {"label" : "result", "tail" : ": Option[TestResult]", "member" : "sbt.protocol.testing.TestItemEvent.result", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#result:Option[sbt.protocol.testing.TestResult]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestItemEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestItemEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(result: TestResult, detail: Vector[TestItemDetail]): TestItemEvent", "member" : "sbt.protocol.testing.TestItemEvent.apply", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#apply(result:sbt.protocol.testing.TestResult,detail:Vector[sbt.protocol.testing.TestItemDetail]):sbt.protocol.testing.TestItemEvent", "kind" : "def"}, {"label" : "apply", "tail" : "(result: Option[TestResult], detail: Vector[TestItemDetail]): TestItemEvent", "member" : "sbt.protocol.testing.TestItemEvent.apply", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#apply(result:Option[sbt.protocol.testing.TestResult],detail:Vector[sbt.protocol.testing.TestItemDetail]):sbt.protocol.testing.TestItemEvent", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestItemEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/testing\/TestItemEvent.html", "kind" : "class"}, {"name" : "sbt.protocol.testing.TestMessage", "shortDescription" : "Events for testing", "object" : "sbt\/protocol\/testing\/TestMessage$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.testing.TestMessage.toString", "link" : "sbt\/protocol\/testing\/TestMessage.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.testing.TestMessage.hashCode", "link" : "sbt\/protocol\/testing\/TestMessage.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.testing.TestMessage.equals", "link" : "sbt\/protocol\/testing\/TestMessage.html#equals(o:Any):Boolean", "kind" : "def"}, {"member" : "sbt.protocol.testing.TestMessage#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestMessage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestMessage.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestMessage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestMessage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestMessage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestMessage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestMessage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestMessage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestMessage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestMessage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestMessage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestMessage.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestMessage.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestMessage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestMessage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestMessage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestMessage$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestMessage$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestMessage$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestMessage$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestMessage$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestMessage$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestMessage$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestMessage$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestMessage$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestMessage$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestMessage$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestMessage$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/TestMessage$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestMessage$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/TestMessage$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/TestMessage$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestMessage$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestMessage$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestMessage$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/testing\/TestMessage.html", "kind" : "class"}, {"name" : "sbt.protocol.testing.TestResult", "shortDescription" : "Testing result", "object" : "sbt\/protocol\/testing\/TestResult$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/TestResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/TestResult.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/TestResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Error", "tail" : "", "member" : "sbt.protocol.testing.TestResult.Error", "link" : "sbt\/protocol\/testing\/TestResult$.html#Error", "kind" : "object"}, {"label" : "Failed", "tail" : "", "member" : "sbt.protocol.testing.TestResult.Failed", "link" : "sbt\/protocol\/testing\/TestResult$.html#Failed", "kind" : "object"}, {"label" : "Passed", "tail" : "", "member" : "sbt.protocol.testing.TestResult.Passed", "link" : "sbt\/protocol\/testing\/TestResult$.html#Passed", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestResult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/TestResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/TestResult$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/TestResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/testing\/TestResult.html", "kind" : "class"}, {"name" : "sbt.protocol.testing.TestStringEvent", "shortDescription" : "", "object" : "sbt\/protocol\/testing\/TestStringEvent$.html", "members_class" : [{"label" : "withValue", "tail" : "(value: String): TestStringEvent", "member" : "sbt.protocol.testing.TestStringEvent.withValue", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#withValue(value:String):sbt.protocol.testing.TestStringEvent", "kind" : "def"}, {"label" : "copy", "tail" : "(value: String): TestStringEvent", "member" : "sbt.protocol.testing.TestStringEvent.copy", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#copy(value:String):sbt.protocol.testing.TestStringEvent", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.protocol.testing.TestStringEvent.toString", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.protocol.testing.TestStringEvent.hashCode", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.protocol.testing.TestStringEvent.equals", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "value", "tail" : ": String", "member" : "sbt.protocol.testing.TestStringEvent.value", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#value:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestStringEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestStringEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(value: String): TestStringEvent", "member" : "sbt.protocol.testing.TestStringEvent.apply", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#apply(value:String):sbt.protocol.testing.TestStringEvent", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/TestStringEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/protocol\/testing\/TestStringEvent.html", "kind" : "class"}], "sbt.internal.parser" : [{"name" : "sbt.internal.parser.ParsedSbtFileExpressions", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "settingsTrees", "tail" : "(): Seq[(String, scala.tools.nsc.Global.Tree)]", "member" : "sbt.internal.parser.ParsedSbtFileExpressions.settingsTrees", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#settingsTrees:Seq[(String,scala.tools.nsc.Global#Tree)]", "kind" : "abstract def"}, {"label" : "settings", "tail" : "(): Seq[(String, LineRange)]", "member" : "sbt.internal.parser.ParsedSbtFileExpressions.settings", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#settings:Seq[(String,sbt.internal.util.LineRange)]", "kind" : "abstract def"}, {"label" : "imports", "tail" : "(): Seq[(String, Int)]", "member" : "sbt.internal.parser.ParsedSbtFileExpressions.imports", "link" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html#imports:Seq[(String,Int)]", "kind" : "abstract def"}], "shortDescription" : "This method solely exists to add scaladoc to members in SbtParser whichare defined using pattern matching.", "trait" : "sbt\/internal\/parser\/ParsedSbtFileExpressions.html", "kind" : "trait"}], "sbt.protocol.testing.codec" : [{"name" : "sbt.protocol.testing.codec.EndTestGroupErrorEventFormats", "members_trait" : [{"label" : "EndTestGroupErrorEventFormat", "tail" : ": JsonFormat[EndTestGroupErrorEvent]", "member" : "sbt.protocol.testing.codec.EndTestGroupErrorEventFormats.EndTestGroupErrorEventFormat", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#EndTestGroupErrorEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.EndTestGroupErrorEvent]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/testing\/codec\/EndTestGroupErrorEventFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.testing.codec.EndTestGroupEventFormats", "members_trait" : [{"label" : "EndTestGroupEventFormat", "tail" : ": JsonFormat[EndTestGroupEvent]", "member" : "sbt.protocol.testing.codec.EndTestGroupEventFormats.EndTestGroupEventFormat", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#EndTestGroupEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.EndTestGroupEvent]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/testing\/codec\/EndTestGroupEventFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.testing.codec.JsonProtocol", "members_trait" : [{"label" : "StackTraceElementFormat", "tail" : "", "member" : "sjsonnew.ThrowableFormats.StackTraceElementFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#StackTraceElementFormatextendsJsonFormat[StackTraceElement]", "kind" : "final class"}, {"label" : "ThrowableFormat", "tail" : "", "member" : "sjsonnew.ThrowableFormats.ThrowableFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#ThrowableFormatextendsJsonFormat[Throwable]", "kind" : "final class"}, {"label" : "OptionalFormat", "tail" : "", "member" : "sjsonnew.JavaExtraFormats.OptionalFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#OptionalFormat[A]extendsJsonFormat[java.util.Optional[A]]", "kind" : "final class"}, {"label" : "OptionFormat", "tail" : "", "member" : "sjsonnew.StandardFormats.OptionFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#OptionFormat[A]extendsJsonFormat[Option[A]]", "kind" : "final class"}, {"label" : "SymbolJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.SymbolJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#SymbolJsonFormat", "kind" : "implicit object"}, {"label" : "StringJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.StringJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#StringJsonFormat", "kind" : "implicit object"}, {"label" : "CharJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.CharJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#CharJsonFormat", "kind" : "implicit object"}, {"label" : "BooleanJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.BooleanJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#BooleanJsonFormat", "kind" : "implicit object"}, {"label" : "UnitJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.UnitJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#UnitJsonFormat", "kind" : "implicit object"}, {"label" : "BigIntJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.BigIntJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#BigIntJsonFormat", "kind" : "implicit object"}, {"label" : "BigDecimalJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.BigDecimalJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#BigDecimalJsonFormat", "kind" : "implicit object"}, {"label" : "ShortJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.ShortJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#ShortJsonFormat", "kind" : "implicit object"}, {"label" : "ByteJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.ByteJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#ByteJsonFormat", "kind" : "implicit object"}, {"label" : "DoubleJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.DoubleJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#DoubleJsonFormat", "kind" : "implicit object"}, {"label" : "FloatJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.FloatJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#FloatJsonFormat", "kind" : "implicit object"}, {"label" : "LongJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.LongJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#LongJsonFormat", "kind" : "implicit object"}, {"label" : "IntJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.IntJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#IntJsonFormat", "kind" : "implicit object"}, {"label" : "TestMessageFormat", "tail" : ": JsonFormat[TestMessage]", "member" : "sbt.protocol.testing.codec.TestMessageFormats.TestMessageFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#TestMessageFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestMessage]", "kind" : "implicit lazy val"}, {"label" : "TestItemEventFormat", "tail" : ": JsonFormat[TestItemEvent]", "member" : "sbt.protocol.testing.codec.TestItemEventFormats.TestItemEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#TestItemEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestItemEvent]", "kind" : "implicit lazy val"}, {"label" : "TestItemDetailFormat", "tail" : ": JsonFormat[TestItemDetail]", "member" : "sbt.protocol.testing.codec.TestItemDetailFormats.TestItemDetailFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#TestItemDetailFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestItemDetail]", "kind" : "implicit lazy val"}, {"label" : "StatusFormat", "tail" : ": JsonFormat[Status]", "member" : "sbt.internal.testing.StatusFormats.StatusFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#StatusFormat:sjsonnew.JsonFormat[sbt.testing.Status]", "kind" : "implicit lazy val"}, {"label" : "EndTestGroupErrorEventFormat", "tail" : ": JsonFormat[EndTestGroupErrorEvent]", "member" : "sbt.protocol.testing.codec.EndTestGroupErrorEventFormats.EndTestGroupErrorEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#EndTestGroupErrorEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.EndTestGroupErrorEvent]", "kind" : "implicit lazy val"}, {"label" : "EndTestGroupEventFormat", "tail" : ": JsonFormat[EndTestGroupEvent]", "member" : "sbt.protocol.testing.codec.EndTestGroupEventFormats.EndTestGroupEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#EndTestGroupEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.EndTestGroupEvent]", "kind" : "implicit lazy val"}, {"label" : "StartTestGroupEventFormat", "tail" : ": JsonFormat[StartTestGroupEvent]", "member" : "sbt.protocol.testing.codec.StartTestGroupEventFormats.StartTestGroupEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#StartTestGroupEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.StartTestGroupEvent]", "kind" : "implicit lazy val"}, {"label" : "TestCompleteEventFormat", "tail" : ": JsonFormat[TestCompleteEvent]", "member" : "sbt.protocol.testing.codec.TestCompleteEventFormats.TestCompleteEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#TestCompleteEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestCompleteEvent]", "kind" : "implicit lazy val"}, {"label" : "TestResultFormat", "tail" : ": JsonFormat[TestResult]", "member" : "sbt.protocol.testing.codec.TestResultFormats.TestResultFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#TestResultFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestResult]", "kind" : "implicit lazy val"}, {"label" : "TestInitEventFormat", "tail" : ": JsonFormat[TestInitEvent]", "member" : "sbt.protocol.testing.codec.TestInitEventFormats.TestInitEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#TestInitEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestInitEvent]", "kind" : "implicit lazy val"}, {"label" : "TestStringEventFormat", "tail" : ": JsonFormat[TestStringEvent]", "member" : "sbt.protocol.testing.codec.TestStringEventFormats.TestStringEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#TestStringEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestStringEvent]", "kind" : "implicit lazy val"}, {"label" : "stackTraceElementFormat", "tail" : ": JF[StackTraceElement]", "member" : "sjsonnew.ThrowableFormats.stackTraceElementFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#stackTraceElementFormat:ThrowableFormats.this.JF[StackTraceElement]", "kind" : "implicit lazy val"}, {"label" : "throwableFormat", "tail" : ": JF[Throwable]", "member" : "sjsonnew.ThrowableFormats.throwableFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#throwableFormat:ThrowableFormats.this.JF[Throwable]", "kind" : "implicit lazy val"}, {"label" : "caseClassArray22", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], A22: JF[A22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray22", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21],implicitA22:CaseClassFormats.this.JF[A22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass22", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21, key22: K22)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], A22: JF[A22], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19], K20: K[K20], K21: K[K21], K22: K[K22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass22", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass22[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,K22,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21,key22:K22)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21],implicitA22:CaseClassFormats.this.JF[A22],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19],implicitK20:CaseClassFormats.this.K[K20],implicitK21:CaseClassFormats.this.K[K21],implicitK22:CaseClassFormats.this.K[K22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19], arg19: JF[A20], arg20: JF[A21], arg21: JF[A22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$738:CaseClassFormats.this.JF[A1],implicitevidence$739:CaseClassFormats.this.JF[A2],implicitevidence$740:CaseClassFormats.this.JF[A3],implicitevidence$741:CaseClassFormats.this.JF[A4],implicitevidence$742:CaseClassFormats.this.JF[A5],implicitevidence$743:CaseClassFormats.this.JF[A6],implicitevidence$744:CaseClassFormats.this.JF[A7],implicitevidence$745:CaseClassFormats.this.JF[A8],implicitevidence$746:CaseClassFormats.this.JF[A9],implicitevidence$747:CaseClassFormats.this.JF[A10],implicitevidence$748:CaseClassFormats.this.JF[A11],implicitevidence$749:CaseClassFormats.this.JF[A12],implicitevidence$750:CaseClassFormats.this.JF[A13],implicitevidence$751:CaseClassFormats.this.JF[A14],implicitevidence$752:CaseClassFormats.this.JF[A15],implicitevidence$753:CaseClassFormats.this.JF[A16],implicitevidence$754:CaseClassFormats.this.JF[A17],implicitevidence$755:CaseClassFormats.this.JF[A18],implicitevidence$756:CaseClassFormats.this.JF[A19],implicitevidence$757:CaseClassFormats.this.JF[A20],implicitevidence$758:CaseClassFormats.this.JF[A21],implicitevidence$759:CaseClassFormats.this.JF[A22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21, key22: K22)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: K[K20], arg20: K[K21], arg21: K[K22], arg22: JF[A1], arg23: JF[A2], arg24: JF[A3], arg25: JF[A4], arg26: JF[A5], arg27: JF[A6], arg28: JF[A7], arg29: JF[A8], arg30: JF[A9], arg31: JF[A10], arg32: JF[A11], arg33: JF[A12], arg34: JF[A13], arg35: JF[A14], arg36: JF[A15], arg37: JF[A16], arg38: JF[A17], arg39: JF[A18], arg40: JF[A19], arg41: JF[A20], arg42: JF[A21], arg43: JF[A22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,K22,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21,key22:K22)(implicitevidence$694:CaseClassFormats.this.K[K1],implicitevidence$695:CaseClassFormats.this.K[K2],implicitevidence$696:CaseClassFormats.this.K[K3],implicitevidence$697:CaseClassFormats.this.K[K4],implicitevidence$698:CaseClassFormats.this.K[K5],implicitevidence$699:CaseClassFormats.this.K[K6],implicitevidence$700:CaseClassFormats.this.K[K7],implicitevidence$701:CaseClassFormats.this.K[K8],implicitevidence$702:CaseClassFormats.this.K[K9],implicitevidence$703:CaseClassFormats.this.K[K10],implicitevidence$704:CaseClassFormats.this.K[K11],implicitevidence$705:CaseClassFormats.this.K[K12],implicitevidence$706:CaseClassFormats.this.K[K13],implicitevidence$707:CaseClassFormats.this.K[K14],implicitevidence$708:CaseClassFormats.this.K[K15],implicitevidence$709:CaseClassFormats.this.K[K16],implicitevidence$710:CaseClassFormats.this.K[K17],implicitevidence$711:CaseClassFormats.this.K[K18],implicitevidence$712:CaseClassFormats.this.K[K19],implicitevidence$713:CaseClassFormats.this.K[K20],implicitevidence$714:CaseClassFormats.this.K[K21],implicitevidence$715:CaseClassFormats.this.K[K22],implicitevidence$716:CaseClassFormats.this.JF[A1],implicitevidence$717:CaseClassFormats.this.JF[A2],implicitevidence$718:CaseClassFormats.this.JF[A3],implicitevidence$719:CaseClassFormats.this.JF[A4],implicitevidence$720:CaseClassFormats.this.JF[A5],implicitevidence$721:CaseClassFormats.this.JF[A6],implicitevidence$722:CaseClassFormats.this.JF[A7],implicitevidence$723:CaseClassFormats.this.JF[A8],implicitevidence$724:CaseClassFormats.this.JF[A9],implicitevidence$725:CaseClassFormats.this.JF[A10],implicitevidence$726:CaseClassFormats.this.JF[A11],implicitevidence$727:CaseClassFormats.this.JF[A12],implicitevidence$728:CaseClassFormats.this.JF[A13],implicitevidence$729:CaseClassFormats.this.JF[A14],implicitevidence$730:CaseClassFormats.this.JF[A15],implicitevidence$731:CaseClassFormats.this.JF[A16],implicitevidence$732:CaseClassFormats.this.JF[A17],implicitevidence$733:CaseClassFormats.this.JF[A18],implicitevidence$734:CaseClassFormats.this.JF[A19],implicitevidence$735:CaseClassFormats.this.JF[A20],implicitevidence$736:CaseClassFormats.this.JF[A21],implicitevidence$737:CaseClassFormats.this.JF[A22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray21", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray21", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass21", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19], K20: K[K20], K21: K[K21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass21", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass21[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19],implicitK20:CaseClassFormats.this.K[K20],implicitK21:CaseClassFormats.this.K[K21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19], arg19: JF[A20], arg20: JF[A21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$673:CaseClassFormats.this.JF[A1],implicitevidence$674:CaseClassFormats.this.JF[A2],implicitevidence$675:CaseClassFormats.this.JF[A3],implicitevidence$676:CaseClassFormats.this.JF[A4],implicitevidence$677:CaseClassFormats.this.JF[A5],implicitevidence$678:CaseClassFormats.this.JF[A6],implicitevidence$679:CaseClassFormats.this.JF[A7],implicitevidence$680:CaseClassFormats.this.JF[A8],implicitevidence$681:CaseClassFormats.this.JF[A9],implicitevidence$682:CaseClassFormats.this.JF[A10],implicitevidence$683:CaseClassFormats.this.JF[A11],implicitevidence$684:CaseClassFormats.this.JF[A12],implicitevidence$685:CaseClassFormats.this.JF[A13],implicitevidence$686:CaseClassFormats.this.JF[A14],implicitevidence$687:CaseClassFormats.this.JF[A15],implicitevidence$688:CaseClassFormats.this.JF[A16],implicitevidence$689:CaseClassFormats.this.JF[A17],implicitevidence$690:CaseClassFormats.this.JF[A18],implicitevidence$691:CaseClassFormats.this.JF[A19],implicitevidence$692:CaseClassFormats.this.JF[A20],implicitevidence$693:CaseClassFormats.this.JF[A21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: K[K20], arg20: K[K21], arg21: JF[A1], arg22: JF[A2], arg23: JF[A3], arg24: JF[A4], arg25: JF[A5], arg26: JF[A6], arg27: JF[A7], arg28: JF[A8], arg29: JF[A9], arg30: JF[A10], arg31: JF[A11], arg32: JF[A12], arg33: JF[A13], arg34: JF[A14], arg35: JF[A15], arg36: JF[A16], arg37: JF[A17], arg38: JF[A18], arg39: JF[A19], arg40: JF[A20], arg41: JF[A21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21)(implicitevidence$631:CaseClassFormats.this.K[K1],implicitevidence$632:CaseClassFormats.this.K[K2],implicitevidence$633:CaseClassFormats.this.K[K3],implicitevidence$634:CaseClassFormats.this.K[K4],implicitevidence$635:CaseClassFormats.this.K[K5],implicitevidence$636:CaseClassFormats.this.K[K6],implicitevidence$637:CaseClassFormats.this.K[K7],implicitevidence$638:CaseClassFormats.this.K[K8],implicitevidence$639:CaseClassFormats.this.K[K9],implicitevidence$640:CaseClassFormats.this.K[K10],implicitevidence$641:CaseClassFormats.this.K[K11],implicitevidence$642:CaseClassFormats.this.K[K12],implicitevidence$643:CaseClassFormats.this.K[K13],implicitevidence$644:CaseClassFormats.this.K[K14],implicitevidence$645:CaseClassFormats.this.K[K15],implicitevidence$646:CaseClassFormats.this.K[K16],implicitevidence$647:CaseClassFormats.this.K[K17],implicitevidence$648:CaseClassFormats.this.K[K18],implicitevidence$649:CaseClassFormats.this.K[K19],implicitevidence$650:CaseClassFormats.this.K[K20],implicitevidence$651:CaseClassFormats.this.K[K21],implicitevidence$652:CaseClassFormats.this.JF[A1],implicitevidence$653:CaseClassFormats.this.JF[A2],implicitevidence$654:CaseClassFormats.this.JF[A3],implicitevidence$655:CaseClassFormats.this.JF[A4],implicitevidence$656:CaseClassFormats.this.JF[A5],implicitevidence$657:CaseClassFormats.this.JF[A6],implicitevidence$658:CaseClassFormats.this.JF[A7],implicitevidence$659:CaseClassFormats.this.JF[A8],implicitevidence$660:CaseClassFormats.this.JF[A9],implicitevidence$661:CaseClassFormats.this.JF[A10],implicitevidence$662:CaseClassFormats.this.JF[A11],implicitevidence$663:CaseClassFormats.this.JF[A12],implicitevidence$664:CaseClassFormats.this.JF[A13],implicitevidence$665:CaseClassFormats.this.JF[A14],implicitevidence$666:CaseClassFormats.this.JF[A15],implicitevidence$667:CaseClassFormats.this.JF[A16],implicitevidence$668:CaseClassFormats.this.JF[A17],implicitevidence$669:CaseClassFormats.this.JF[A18],implicitevidence$670:CaseClassFormats.this.JF[A19],implicitevidence$671:CaseClassFormats.this.JF[A20],implicitevidence$672:CaseClassFormats.this.JF[A21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray20", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray20", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass20", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19], K20: K[K20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass20", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass20[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19],implicitK20:CaseClassFormats.this.K[K20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19], arg19: JF[A20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$611:CaseClassFormats.this.JF[A1],implicitevidence$612:CaseClassFormats.this.JF[A2],implicitevidence$613:CaseClassFormats.this.JF[A3],implicitevidence$614:CaseClassFormats.this.JF[A4],implicitevidence$615:CaseClassFormats.this.JF[A5],implicitevidence$616:CaseClassFormats.this.JF[A6],implicitevidence$617:CaseClassFormats.this.JF[A7],implicitevidence$618:CaseClassFormats.this.JF[A8],implicitevidence$619:CaseClassFormats.this.JF[A9],implicitevidence$620:CaseClassFormats.this.JF[A10],implicitevidence$621:CaseClassFormats.this.JF[A11],implicitevidence$622:CaseClassFormats.this.JF[A12],implicitevidence$623:CaseClassFormats.this.JF[A13],implicitevidence$624:CaseClassFormats.this.JF[A14],implicitevidence$625:CaseClassFormats.this.JF[A15],implicitevidence$626:CaseClassFormats.this.JF[A16],implicitevidence$627:CaseClassFormats.this.JF[A17],implicitevidence$628:CaseClassFormats.this.JF[A18],implicitevidence$629:CaseClassFormats.this.JF[A19],implicitevidence$630:CaseClassFormats.this.JF[A20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: K[K20], arg20: JF[A1], arg21: JF[A2], arg22: JF[A3], arg23: JF[A4], arg24: JF[A5], arg25: JF[A6], arg26: JF[A7], arg27: JF[A8], arg28: JF[A9], arg29: JF[A10], arg30: JF[A11], arg31: JF[A12], arg32: JF[A13], arg33: JF[A14], arg34: JF[A15], arg35: JF[A16], arg36: JF[A17], arg37: JF[A18], arg38: JF[A19], arg39: JF[A20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20)(implicitevidence$571:CaseClassFormats.this.K[K1],implicitevidence$572:CaseClassFormats.this.K[K2],implicitevidence$573:CaseClassFormats.this.K[K3],implicitevidence$574:CaseClassFormats.this.K[K4],implicitevidence$575:CaseClassFormats.this.K[K5],implicitevidence$576:CaseClassFormats.this.K[K6],implicitevidence$577:CaseClassFormats.this.K[K7],implicitevidence$578:CaseClassFormats.this.K[K8],implicitevidence$579:CaseClassFormats.this.K[K9],implicitevidence$580:CaseClassFormats.this.K[K10],implicitevidence$581:CaseClassFormats.this.K[K11],implicitevidence$582:CaseClassFormats.this.K[K12],implicitevidence$583:CaseClassFormats.this.K[K13],implicitevidence$584:CaseClassFormats.this.K[K14],implicitevidence$585:CaseClassFormats.this.K[K15],implicitevidence$586:CaseClassFormats.this.K[K16],implicitevidence$587:CaseClassFormats.this.K[K17],implicitevidence$588:CaseClassFormats.this.K[K18],implicitevidence$589:CaseClassFormats.this.K[K19],implicitevidence$590:CaseClassFormats.this.K[K20],implicitevidence$591:CaseClassFormats.this.JF[A1],implicitevidence$592:CaseClassFormats.this.JF[A2],implicitevidence$593:CaseClassFormats.this.JF[A3],implicitevidence$594:CaseClassFormats.this.JF[A4],implicitevidence$595:CaseClassFormats.this.JF[A5],implicitevidence$596:CaseClassFormats.this.JF[A6],implicitevidence$597:CaseClassFormats.this.JF[A7],implicitevidence$598:CaseClassFormats.this.JF[A8],implicitevidence$599:CaseClassFormats.this.JF[A9],implicitevidence$600:CaseClassFormats.this.JF[A10],implicitevidence$601:CaseClassFormats.this.JF[A11],implicitevidence$602:CaseClassFormats.this.JF[A12],implicitevidence$603:CaseClassFormats.this.JF[A13],implicitevidence$604:CaseClassFormats.this.JF[A14],implicitevidence$605:CaseClassFormats.this.JF[A15],implicitevidence$606:CaseClassFormats.this.JF[A16],implicitevidence$607:CaseClassFormats.this.JF[A17],implicitevidence$608:CaseClassFormats.this.JF[A18],implicitevidence$609:CaseClassFormats.this.JF[A19],implicitevidence$610:CaseClassFormats.this.JF[A20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray19", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray19", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass19", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass19", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass19[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$552:CaseClassFormats.this.JF[A1],implicitevidence$553:CaseClassFormats.this.JF[A2],implicitevidence$554:CaseClassFormats.this.JF[A3],implicitevidence$555:CaseClassFormats.this.JF[A4],implicitevidence$556:CaseClassFormats.this.JF[A5],implicitevidence$557:CaseClassFormats.this.JF[A6],implicitevidence$558:CaseClassFormats.this.JF[A7],implicitevidence$559:CaseClassFormats.this.JF[A8],implicitevidence$560:CaseClassFormats.this.JF[A9],implicitevidence$561:CaseClassFormats.this.JF[A10],implicitevidence$562:CaseClassFormats.this.JF[A11],implicitevidence$563:CaseClassFormats.this.JF[A12],implicitevidence$564:CaseClassFormats.this.JF[A13],implicitevidence$565:CaseClassFormats.this.JF[A14],implicitevidence$566:CaseClassFormats.this.JF[A15],implicitevidence$567:CaseClassFormats.this.JF[A16],implicitevidence$568:CaseClassFormats.this.JF[A17],implicitevidence$569:CaseClassFormats.this.JF[A18],implicitevidence$570:CaseClassFormats.this.JF[A19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: JF[A1], arg20: JF[A2], arg21: JF[A3], arg22: JF[A4], arg23: JF[A5], arg24: JF[A6], arg25: JF[A7], arg26: JF[A8], arg27: JF[A9], arg28: JF[A10], arg29: JF[A11], arg30: JF[A12], arg31: JF[A13], arg32: JF[A14], arg33: JF[A15], arg34: JF[A16], arg35: JF[A17], arg36: JF[A18], arg37: JF[A19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19)(implicitevidence$514:CaseClassFormats.this.K[K1],implicitevidence$515:CaseClassFormats.this.K[K2],implicitevidence$516:CaseClassFormats.this.K[K3],implicitevidence$517:CaseClassFormats.this.K[K4],implicitevidence$518:CaseClassFormats.this.K[K5],implicitevidence$519:CaseClassFormats.this.K[K6],implicitevidence$520:CaseClassFormats.this.K[K7],implicitevidence$521:CaseClassFormats.this.K[K8],implicitevidence$522:CaseClassFormats.this.K[K9],implicitevidence$523:CaseClassFormats.this.K[K10],implicitevidence$524:CaseClassFormats.this.K[K11],implicitevidence$525:CaseClassFormats.this.K[K12],implicitevidence$526:CaseClassFormats.this.K[K13],implicitevidence$527:CaseClassFormats.this.K[K14],implicitevidence$528:CaseClassFormats.this.K[K15],implicitevidence$529:CaseClassFormats.this.K[K16],implicitevidence$530:CaseClassFormats.this.K[K17],implicitevidence$531:CaseClassFormats.this.K[K18],implicitevidence$532:CaseClassFormats.this.K[K19],implicitevidence$533:CaseClassFormats.this.JF[A1],implicitevidence$534:CaseClassFormats.this.JF[A2],implicitevidence$535:CaseClassFormats.this.JF[A3],implicitevidence$536:CaseClassFormats.this.JF[A4],implicitevidence$537:CaseClassFormats.this.JF[A5],implicitevidence$538:CaseClassFormats.this.JF[A6],implicitevidence$539:CaseClassFormats.this.JF[A7],implicitevidence$540:CaseClassFormats.this.JF[A8],implicitevidence$541:CaseClassFormats.this.JF[A9],implicitevidence$542:CaseClassFormats.this.JF[A10],implicitevidence$543:CaseClassFormats.this.JF[A11],implicitevidence$544:CaseClassFormats.this.JF[A12],implicitevidence$545:CaseClassFormats.this.JF[A13],implicitevidence$546:CaseClassFormats.this.JF[A14],implicitevidence$547:CaseClassFormats.this.JF[A15],implicitevidence$548:CaseClassFormats.this.JF[A16],implicitevidence$549:CaseClassFormats.this.JF[A17],implicitevidence$550:CaseClassFormats.this.JF[A18],implicitevidence$551:CaseClassFormats.this.JF[A19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray18", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray18", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass18", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass18", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass18[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$496:CaseClassFormats.this.JF[A1],implicitevidence$497:CaseClassFormats.this.JF[A2],implicitevidence$498:CaseClassFormats.this.JF[A3],implicitevidence$499:CaseClassFormats.this.JF[A4],implicitevidence$500:CaseClassFormats.this.JF[A5],implicitevidence$501:CaseClassFormats.this.JF[A6],implicitevidence$502:CaseClassFormats.this.JF[A7],implicitevidence$503:CaseClassFormats.this.JF[A8],implicitevidence$504:CaseClassFormats.this.JF[A9],implicitevidence$505:CaseClassFormats.this.JF[A10],implicitevidence$506:CaseClassFormats.this.JF[A11],implicitevidence$507:CaseClassFormats.this.JF[A12],implicitevidence$508:CaseClassFormats.this.JF[A13],implicitevidence$509:CaseClassFormats.this.JF[A14],implicitevidence$510:CaseClassFormats.this.JF[A15],implicitevidence$511:CaseClassFormats.this.JF[A16],implicitevidence$512:CaseClassFormats.this.JF[A17],implicitevidence$513:CaseClassFormats.this.JF[A18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: JF[A1], arg19: JF[A2], arg20: JF[A3], arg21: JF[A4], arg22: JF[A5], arg23: JF[A6], arg24: JF[A7], arg25: JF[A8], arg26: JF[A9], arg27: JF[A10], arg28: JF[A11], arg29: JF[A12], arg30: JF[A13], arg31: JF[A14], arg32: JF[A15], arg33: JF[A16], arg34: JF[A17], arg35: JF[A18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18)(implicitevidence$460:CaseClassFormats.this.K[K1],implicitevidence$461:CaseClassFormats.this.K[K2],implicitevidence$462:CaseClassFormats.this.K[K3],implicitevidence$463:CaseClassFormats.this.K[K4],implicitevidence$464:CaseClassFormats.this.K[K5],implicitevidence$465:CaseClassFormats.this.K[K6],implicitevidence$466:CaseClassFormats.this.K[K7],implicitevidence$467:CaseClassFormats.this.K[K8],implicitevidence$468:CaseClassFormats.this.K[K9],implicitevidence$469:CaseClassFormats.this.K[K10],implicitevidence$470:CaseClassFormats.this.K[K11],implicitevidence$471:CaseClassFormats.this.K[K12],implicitevidence$472:CaseClassFormats.this.K[K13],implicitevidence$473:CaseClassFormats.this.K[K14],implicitevidence$474:CaseClassFormats.this.K[K15],implicitevidence$475:CaseClassFormats.this.K[K16],implicitevidence$476:CaseClassFormats.this.K[K17],implicitevidence$477:CaseClassFormats.this.K[K18],implicitevidence$478:CaseClassFormats.this.JF[A1],implicitevidence$479:CaseClassFormats.this.JF[A2],implicitevidence$480:CaseClassFormats.this.JF[A3],implicitevidence$481:CaseClassFormats.this.JF[A4],implicitevidence$482:CaseClassFormats.this.JF[A5],implicitevidence$483:CaseClassFormats.this.JF[A6],implicitevidence$484:CaseClassFormats.this.JF[A7],implicitevidence$485:CaseClassFormats.this.JF[A8],implicitevidence$486:CaseClassFormats.this.JF[A9],implicitevidence$487:CaseClassFormats.this.JF[A10],implicitevidence$488:CaseClassFormats.this.JF[A11],implicitevidence$489:CaseClassFormats.this.JF[A12],implicitevidence$490:CaseClassFormats.this.JF[A13],implicitevidence$491:CaseClassFormats.this.JF[A14],implicitevidence$492:CaseClassFormats.this.JF[A15],implicitevidence$493:CaseClassFormats.this.JF[A16],implicitevidence$494:CaseClassFormats.this.JF[A17],implicitevidence$495:CaseClassFormats.this.JF[A18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray17", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray17", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass17", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass17", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass17[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$443:CaseClassFormats.this.JF[A1],implicitevidence$444:CaseClassFormats.this.JF[A2],implicitevidence$445:CaseClassFormats.this.JF[A3],implicitevidence$446:CaseClassFormats.this.JF[A4],implicitevidence$447:CaseClassFormats.this.JF[A5],implicitevidence$448:CaseClassFormats.this.JF[A6],implicitevidence$449:CaseClassFormats.this.JF[A7],implicitevidence$450:CaseClassFormats.this.JF[A8],implicitevidence$451:CaseClassFormats.this.JF[A9],implicitevidence$452:CaseClassFormats.this.JF[A10],implicitevidence$453:CaseClassFormats.this.JF[A11],implicitevidence$454:CaseClassFormats.this.JF[A12],implicitevidence$455:CaseClassFormats.this.JF[A13],implicitevidence$456:CaseClassFormats.this.JF[A14],implicitevidence$457:CaseClassFormats.this.JF[A15],implicitevidence$458:CaseClassFormats.this.JF[A16],implicitevidence$459:CaseClassFormats.this.JF[A17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: JF[A1], arg18: JF[A2], arg19: JF[A3], arg20: JF[A4], arg21: JF[A5], arg22: JF[A6], arg23: JF[A7], arg24: JF[A8], arg25: JF[A9], arg26: JF[A10], arg27: JF[A11], arg28: JF[A12], arg29: JF[A13], arg30: JF[A14], arg31: JF[A15], arg32: JF[A16], arg33: JF[A17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17)(implicitevidence$409:CaseClassFormats.this.K[K1],implicitevidence$410:CaseClassFormats.this.K[K2],implicitevidence$411:CaseClassFormats.this.K[K3],implicitevidence$412:CaseClassFormats.this.K[K4],implicitevidence$413:CaseClassFormats.this.K[K5],implicitevidence$414:CaseClassFormats.this.K[K6],implicitevidence$415:CaseClassFormats.this.K[K7],implicitevidence$416:CaseClassFormats.this.K[K8],implicitevidence$417:CaseClassFormats.this.K[K9],implicitevidence$418:CaseClassFormats.this.K[K10],implicitevidence$419:CaseClassFormats.this.K[K11],implicitevidence$420:CaseClassFormats.this.K[K12],implicitevidence$421:CaseClassFormats.this.K[K13],implicitevidence$422:CaseClassFormats.this.K[K14],implicitevidence$423:CaseClassFormats.this.K[K15],implicitevidence$424:CaseClassFormats.this.K[K16],implicitevidence$425:CaseClassFormats.this.K[K17],implicitevidence$426:CaseClassFormats.this.JF[A1],implicitevidence$427:CaseClassFormats.this.JF[A2],implicitevidence$428:CaseClassFormats.this.JF[A3],implicitevidence$429:CaseClassFormats.this.JF[A4],implicitevidence$430:CaseClassFormats.this.JF[A5],implicitevidence$431:CaseClassFormats.this.JF[A6],implicitevidence$432:CaseClassFormats.this.JF[A7],implicitevidence$433:CaseClassFormats.this.JF[A8],implicitevidence$434:CaseClassFormats.this.JF[A9],implicitevidence$435:CaseClassFormats.this.JF[A10],implicitevidence$436:CaseClassFormats.this.JF[A11],implicitevidence$437:CaseClassFormats.this.JF[A12],implicitevidence$438:CaseClassFormats.this.JF[A13],implicitevidence$439:CaseClassFormats.this.JF[A14],implicitevidence$440:CaseClassFormats.this.JF[A15],implicitevidence$441:CaseClassFormats.this.JF[A16],implicitevidence$442:CaseClassFormats.this.JF[A17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray16", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray16", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass16", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass16", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass16[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$393:CaseClassFormats.this.JF[A1],implicitevidence$394:CaseClassFormats.this.JF[A2],implicitevidence$395:CaseClassFormats.this.JF[A3],implicitevidence$396:CaseClassFormats.this.JF[A4],implicitevidence$397:CaseClassFormats.this.JF[A5],implicitevidence$398:CaseClassFormats.this.JF[A6],implicitevidence$399:CaseClassFormats.this.JF[A7],implicitevidence$400:CaseClassFormats.this.JF[A8],implicitevidence$401:CaseClassFormats.this.JF[A9],implicitevidence$402:CaseClassFormats.this.JF[A10],implicitevidence$403:CaseClassFormats.this.JF[A11],implicitevidence$404:CaseClassFormats.this.JF[A12],implicitevidence$405:CaseClassFormats.this.JF[A13],implicitevidence$406:CaseClassFormats.this.JF[A14],implicitevidence$407:CaseClassFormats.this.JF[A15],implicitevidence$408:CaseClassFormats.this.JF[A16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: JF[A1], arg17: JF[A2], arg18: JF[A3], arg19: JF[A4], arg20: JF[A5], arg21: JF[A6], arg22: JF[A7], arg23: JF[A8], arg24: JF[A9], arg25: JF[A10], arg26: JF[A11], arg27: JF[A12], arg28: JF[A13], arg29: JF[A14], arg30: JF[A15], arg31: JF[A16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16)(implicitevidence$361:CaseClassFormats.this.K[K1],implicitevidence$362:CaseClassFormats.this.K[K2],implicitevidence$363:CaseClassFormats.this.K[K3],implicitevidence$364:CaseClassFormats.this.K[K4],implicitevidence$365:CaseClassFormats.this.K[K5],implicitevidence$366:CaseClassFormats.this.K[K6],implicitevidence$367:CaseClassFormats.this.K[K7],implicitevidence$368:CaseClassFormats.this.K[K8],implicitevidence$369:CaseClassFormats.this.K[K9],implicitevidence$370:CaseClassFormats.this.K[K10],implicitevidence$371:CaseClassFormats.this.K[K11],implicitevidence$372:CaseClassFormats.this.K[K12],implicitevidence$373:CaseClassFormats.this.K[K13],implicitevidence$374:CaseClassFormats.this.K[K14],implicitevidence$375:CaseClassFormats.this.K[K15],implicitevidence$376:CaseClassFormats.this.K[K16],implicitevidence$377:CaseClassFormats.this.JF[A1],implicitevidence$378:CaseClassFormats.this.JF[A2],implicitevidence$379:CaseClassFormats.this.JF[A3],implicitevidence$380:CaseClassFormats.this.JF[A4],implicitevidence$381:CaseClassFormats.this.JF[A5],implicitevidence$382:CaseClassFormats.this.JF[A6],implicitevidence$383:CaseClassFormats.this.JF[A7],implicitevidence$384:CaseClassFormats.this.JF[A8],implicitevidence$385:CaseClassFormats.this.JF[A9],implicitevidence$386:CaseClassFormats.this.JF[A10],implicitevidence$387:CaseClassFormats.this.JF[A11],implicitevidence$388:CaseClassFormats.this.JF[A12],implicitevidence$389:CaseClassFormats.this.JF[A13],implicitevidence$390:CaseClassFormats.this.JF[A14],implicitevidence$391:CaseClassFormats.this.JF[A15],implicitevidence$392:CaseClassFormats.this.JF[A16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray15", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray15", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass15", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass15", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass15[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$346:CaseClassFormats.this.JF[A1],implicitevidence$347:CaseClassFormats.this.JF[A2],implicitevidence$348:CaseClassFormats.this.JF[A3],implicitevidence$349:CaseClassFormats.this.JF[A4],implicitevidence$350:CaseClassFormats.this.JF[A5],implicitevidence$351:CaseClassFormats.this.JF[A6],implicitevidence$352:CaseClassFormats.this.JF[A7],implicitevidence$353:CaseClassFormats.this.JF[A8],implicitevidence$354:CaseClassFormats.this.JF[A9],implicitevidence$355:CaseClassFormats.this.JF[A10],implicitevidence$356:CaseClassFormats.this.JF[A11],implicitevidence$357:CaseClassFormats.this.JF[A12],implicitevidence$358:CaseClassFormats.this.JF[A13],implicitevidence$359:CaseClassFormats.this.JF[A14],implicitevidence$360:CaseClassFormats.this.JF[A15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: JF[A1], arg16: JF[A2], arg17: JF[A3], arg18: JF[A4], arg19: JF[A5], arg20: JF[A6], arg21: JF[A7], arg22: JF[A8], arg23: JF[A9], arg24: JF[A10], arg25: JF[A11], arg26: JF[A12], arg27: JF[A13], arg28: JF[A14], arg29: JF[A15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15)(implicitevidence$316:CaseClassFormats.this.K[K1],implicitevidence$317:CaseClassFormats.this.K[K2],implicitevidence$318:CaseClassFormats.this.K[K3],implicitevidence$319:CaseClassFormats.this.K[K4],implicitevidence$320:CaseClassFormats.this.K[K5],implicitevidence$321:CaseClassFormats.this.K[K6],implicitevidence$322:CaseClassFormats.this.K[K7],implicitevidence$323:CaseClassFormats.this.K[K8],implicitevidence$324:CaseClassFormats.this.K[K9],implicitevidence$325:CaseClassFormats.this.K[K10],implicitevidence$326:CaseClassFormats.this.K[K11],implicitevidence$327:CaseClassFormats.this.K[K12],implicitevidence$328:CaseClassFormats.this.K[K13],implicitevidence$329:CaseClassFormats.this.K[K14],implicitevidence$330:CaseClassFormats.this.K[K15],implicitevidence$331:CaseClassFormats.this.JF[A1],implicitevidence$332:CaseClassFormats.this.JF[A2],implicitevidence$333:CaseClassFormats.this.JF[A3],implicitevidence$334:CaseClassFormats.this.JF[A4],implicitevidence$335:CaseClassFormats.this.JF[A5],implicitevidence$336:CaseClassFormats.this.JF[A6],implicitevidence$337:CaseClassFormats.this.JF[A7],implicitevidence$338:CaseClassFormats.this.JF[A8],implicitevidence$339:CaseClassFormats.this.JF[A9],implicitevidence$340:CaseClassFormats.this.JF[A10],implicitevidence$341:CaseClassFormats.this.JF[A11],implicitevidence$342:CaseClassFormats.this.JF[A12],implicitevidence$343:CaseClassFormats.this.JF[A13],implicitevidence$344:CaseClassFormats.this.JF[A14],implicitevidence$345:CaseClassFormats.this.JF[A15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray14", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray14", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass14", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass14", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass14[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$302:CaseClassFormats.this.JF[A1],implicitevidence$303:CaseClassFormats.this.JF[A2],implicitevidence$304:CaseClassFormats.this.JF[A3],implicitevidence$305:CaseClassFormats.this.JF[A4],implicitevidence$306:CaseClassFormats.this.JF[A5],implicitevidence$307:CaseClassFormats.this.JF[A6],implicitevidence$308:CaseClassFormats.this.JF[A7],implicitevidence$309:CaseClassFormats.this.JF[A8],implicitevidence$310:CaseClassFormats.this.JF[A9],implicitevidence$311:CaseClassFormats.this.JF[A10],implicitevidence$312:CaseClassFormats.this.JF[A11],implicitevidence$313:CaseClassFormats.this.JF[A12],implicitevidence$314:CaseClassFormats.this.JF[A13],implicitevidence$315:CaseClassFormats.this.JF[A14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: JF[A1], arg15: JF[A2], arg16: JF[A3], arg17: JF[A4], arg18: JF[A5], arg19: JF[A6], arg20: JF[A7], arg21: JF[A8], arg22: JF[A9], arg23: JF[A10], arg24: JF[A11], arg25: JF[A12], arg26: JF[A13], arg27: JF[A14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14)(implicitevidence$274:CaseClassFormats.this.K[K1],implicitevidence$275:CaseClassFormats.this.K[K2],implicitevidence$276:CaseClassFormats.this.K[K3],implicitevidence$277:CaseClassFormats.this.K[K4],implicitevidence$278:CaseClassFormats.this.K[K5],implicitevidence$279:CaseClassFormats.this.K[K6],implicitevidence$280:CaseClassFormats.this.K[K7],implicitevidence$281:CaseClassFormats.this.K[K8],implicitevidence$282:CaseClassFormats.this.K[K9],implicitevidence$283:CaseClassFormats.this.K[K10],implicitevidence$284:CaseClassFormats.this.K[K11],implicitevidence$285:CaseClassFormats.this.K[K12],implicitevidence$286:CaseClassFormats.this.K[K13],implicitevidence$287:CaseClassFormats.this.K[K14],implicitevidence$288:CaseClassFormats.this.JF[A1],implicitevidence$289:CaseClassFormats.this.JF[A2],implicitevidence$290:CaseClassFormats.this.JF[A3],implicitevidence$291:CaseClassFormats.this.JF[A4],implicitevidence$292:CaseClassFormats.this.JF[A5],implicitevidence$293:CaseClassFormats.this.JF[A6],implicitevidence$294:CaseClassFormats.this.JF[A7],implicitevidence$295:CaseClassFormats.this.JF[A8],implicitevidence$296:CaseClassFormats.this.JF[A9],implicitevidence$297:CaseClassFormats.this.JF[A10],implicitevidence$298:CaseClassFormats.this.JF[A11],implicitevidence$299:CaseClassFormats.this.JF[A12],implicitevidence$300:CaseClassFormats.this.JF[A13],implicitevidence$301:CaseClassFormats.this.JF[A14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray13", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray13", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass13", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass13", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass13[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$261:CaseClassFormats.this.JF[A1],implicitevidence$262:CaseClassFormats.this.JF[A2],implicitevidence$263:CaseClassFormats.this.JF[A3],implicitevidence$264:CaseClassFormats.this.JF[A4],implicitevidence$265:CaseClassFormats.this.JF[A5],implicitevidence$266:CaseClassFormats.this.JF[A6],implicitevidence$267:CaseClassFormats.this.JF[A7],implicitevidence$268:CaseClassFormats.this.JF[A8],implicitevidence$269:CaseClassFormats.this.JF[A9],implicitevidence$270:CaseClassFormats.this.JF[A10],implicitevidence$271:CaseClassFormats.this.JF[A11],implicitevidence$272:CaseClassFormats.this.JF[A12],implicitevidence$273:CaseClassFormats.this.JF[A13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: JF[A1], arg14: JF[A2], arg15: JF[A3], arg16: JF[A4], arg17: JF[A5], arg18: JF[A6], arg19: JF[A7], arg20: JF[A8], arg21: JF[A9], arg22: JF[A10], arg23: JF[A11], arg24: JF[A12], arg25: JF[A13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13)(implicitevidence$235:CaseClassFormats.this.K[K1],implicitevidence$236:CaseClassFormats.this.K[K2],implicitevidence$237:CaseClassFormats.this.K[K3],implicitevidence$238:CaseClassFormats.this.K[K4],implicitevidence$239:CaseClassFormats.this.K[K5],implicitevidence$240:CaseClassFormats.this.K[K6],implicitevidence$241:CaseClassFormats.this.K[K7],implicitevidence$242:CaseClassFormats.this.K[K8],implicitevidence$243:CaseClassFormats.this.K[K9],implicitevidence$244:CaseClassFormats.this.K[K10],implicitevidence$245:CaseClassFormats.this.K[K11],implicitevidence$246:CaseClassFormats.this.K[K12],implicitevidence$247:CaseClassFormats.this.K[K13],implicitevidence$248:CaseClassFormats.this.JF[A1],implicitevidence$249:CaseClassFormats.this.JF[A2],implicitevidence$250:CaseClassFormats.this.JF[A3],implicitevidence$251:CaseClassFormats.this.JF[A4],implicitevidence$252:CaseClassFormats.this.JF[A5],implicitevidence$253:CaseClassFormats.this.JF[A6],implicitevidence$254:CaseClassFormats.this.JF[A7],implicitevidence$255:CaseClassFormats.this.JF[A8],implicitevidence$256:CaseClassFormats.this.JF[A9],implicitevidence$257:CaseClassFormats.this.JF[A10],implicitevidence$258:CaseClassFormats.this.JF[A11],implicitevidence$259:CaseClassFormats.this.JF[A12],implicitevidence$260:CaseClassFormats.this.JF[A13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray12", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray12", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass12", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass12", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass12[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$223:CaseClassFormats.this.JF[A1],implicitevidence$224:CaseClassFormats.this.JF[A2],implicitevidence$225:CaseClassFormats.this.JF[A3],implicitevidence$226:CaseClassFormats.this.JF[A4],implicitevidence$227:CaseClassFormats.this.JF[A5],implicitevidence$228:CaseClassFormats.this.JF[A6],implicitevidence$229:CaseClassFormats.this.JF[A7],implicitevidence$230:CaseClassFormats.this.JF[A8],implicitevidence$231:CaseClassFormats.this.JF[A9],implicitevidence$232:CaseClassFormats.this.JF[A10],implicitevidence$233:CaseClassFormats.this.JF[A11],implicitevidence$234:CaseClassFormats.this.JF[A12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: JF[A1], arg13: JF[A2], arg14: JF[A3], arg15: JF[A4], arg16: JF[A5], arg17: JF[A6], arg18: JF[A7], arg19: JF[A8], arg20: JF[A9], arg21: JF[A10], arg22: JF[A11], arg23: JF[A12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12)(implicitevidence$199:CaseClassFormats.this.K[K1],implicitevidence$200:CaseClassFormats.this.K[K2],implicitevidence$201:CaseClassFormats.this.K[K3],implicitevidence$202:CaseClassFormats.this.K[K4],implicitevidence$203:CaseClassFormats.this.K[K5],implicitevidence$204:CaseClassFormats.this.K[K6],implicitevidence$205:CaseClassFormats.this.K[K7],implicitevidence$206:CaseClassFormats.this.K[K8],implicitevidence$207:CaseClassFormats.this.K[K9],implicitevidence$208:CaseClassFormats.this.K[K10],implicitevidence$209:CaseClassFormats.this.K[K11],implicitevidence$210:CaseClassFormats.this.K[K12],implicitevidence$211:CaseClassFormats.this.JF[A1],implicitevidence$212:CaseClassFormats.this.JF[A2],implicitevidence$213:CaseClassFormats.this.JF[A3],implicitevidence$214:CaseClassFormats.this.JF[A4],implicitevidence$215:CaseClassFormats.this.JF[A5],implicitevidence$216:CaseClassFormats.this.JF[A6],implicitevidence$217:CaseClassFormats.this.JF[A7],implicitevidence$218:CaseClassFormats.this.JF[A8],implicitevidence$219:CaseClassFormats.this.JF[A9],implicitevidence$220:CaseClassFormats.this.JF[A10],implicitevidence$221:CaseClassFormats.this.JF[A11],implicitevidence$222:CaseClassFormats.this.JF[A12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray11", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray11", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass11", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass11", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass11[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$188:CaseClassFormats.this.JF[A1],implicitevidence$189:CaseClassFormats.this.JF[A2],implicitevidence$190:CaseClassFormats.this.JF[A3],implicitevidence$191:CaseClassFormats.this.JF[A4],implicitevidence$192:CaseClassFormats.this.JF[A5],implicitevidence$193:CaseClassFormats.this.JF[A6],implicitevidence$194:CaseClassFormats.this.JF[A7],implicitevidence$195:CaseClassFormats.this.JF[A8],implicitevidence$196:CaseClassFormats.this.JF[A9],implicitevidence$197:CaseClassFormats.this.JF[A10],implicitevidence$198:CaseClassFormats.this.JF[A11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: JF[A1], arg12: JF[A2], arg13: JF[A3], arg14: JF[A4], arg15: JF[A5], arg16: JF[A6], arg17: JF[A7], arg18: JF[A8], arg19: JF[A9], arg20: JF[A10], arg21: JF[A11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11)(implicitevidence$166:CaseClassFormats.this.K[K1],implicitevidence$167:CaseClassFormats.this.K[K2],implicitevidence$168:CaseClassFormats.this.K[K3],implicitevidence$169:CaseClassFormats.this.K[K4],implicitevidence$170:CaseClassFormats.this.K[K5],implicitevidence$171:CaseClassFormats.this.K[K6],implicitevidence$172:CaseClassFormats.this.K[K7],implicitevidence$173:CaseClassFormats.this.K[K8],implicitevidence$174:CaseClassFormats.this.K[K9],implicitevidence$175:CaseClassFormats.this.K[K10],implicitevidence$176:CaseClassFormats.this.K[K11],implicitevidence$177:CaseClassFormats.this.JF[A1],implicitevidence$178:CaseClassFormats.this.JF[A2],implicitevidence$179:CaseClassFormats.this.JF[A3],implicitevidence$180:CaseClassFormats.this.JF[A4],implicitevidence$181:CaseClassFormats.this.JF[A5],implicitevidence$182:CaseClassFormats.this.JF[A6],implicitevidence$183:CaseClassFormats.this.JF[A7],implicitevidence$184:CaseClassFormats.this.JF[A8],implicitevidence$185:CaseClassFormats.this.JF[A9],implicitevidence$186:CaseClassFormats.this.JF[A10],implicitevidence$187:CaseClassFormats.this.JF[A11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray10", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray10", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass10", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass10", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass10[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$156:CaseClassFormats.this.JF[A1],implicitevidence$157:CaseClassFormats.this.JF[A2],implicitevidence$158:CaseClassFormats.this.JF[A3],implicitevidence$159:CaseClassFormats.this.JF[A4],implicitevidence$160:CaseClassFormats.this.JF[A5],implicitevidence$161:CaseClassFormats.this.JF[A6],implicitevidence$162:CaseClassFormats.this.JF[A7],implicitevidence$163:CaseClassFormats.this.JF[A8],implicitevidence$164:CaseClassFormats.this.JF[A9],implicitevidence$165:CaseClassFormats.this.JF[A10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: JF[A1], arg11: JF[A2], arg12: JF[A3], arg13: JF[A4], arg14: JF[A5], arg15: JF[A6], arg16: JF[A7], arg17: JF[A8], arg18: JF[A9], arg19: JF[A10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10)(implicitevidence$136:CaseClassFormats.this.K[K1],implicitevidence$137:CaseClassFormats.this.K[K2],implicitevidence$138:CaseClassFormats.this.K[K3],implicitevidence$139:CaseClassFormats.this.K[K4],implicitevidence$140:CaseClassFormats.this.K[K5],implicitevidence$141:CaseClassFormats.this.K[K6],implicitevidence$142:CaseClassFormats.this.K[K7],implicitevidence$143:CaseClassFormats.this.K[K8],implicitevidence$144:CaseClassFormats.this.K[K9],implicitevidence$145:CaseClassFormats.this.K[K10],implicitevidence$146:CaseClassFormats.this.JF[A1],implicitevidence$147:CaseClassFormats.this.JF[A2],implicitevidence$148:CaseClassFormats.this.JF[A3],implicitevidence$149:CaseClassFormats.this.JF[A4],implicitevidence$150:CaseClassFormats.this.JF[A5],implicitevidence$151:CaseClassFormats.this.JF[A6],implicitevidence$152:CaseClassFormats.this.JF[A7],implicitevidence$153:CaseClassFormats.this.JF[A8],implicitevidence$154:CaseClassFormats.this.JF[A9],implicitevidence$155:CaseClassFormats.this.JF[A10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray9", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray9", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray9[A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass9", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass9", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass9[K1,K2,K3,K4,K5,K6,K7,K8,K9,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$127:CaseClassFormats.this.JF[A1],implicitevidence$128:CaseClassFormats.this.JF[A2],implicitevidence$129:CaseClassFormats.this.JF[A3],implicitevidence$130:CaseClassFormats.this.JF[A4],implicitevidence$131:CaseClassFormats.this.JF[A5],implicitevidence$132:CaseClassFormats.this.JF[A6],implicitevidence$133:CaseClassFormats.this.JF[A7],implicitevidence$134:CaseClassFormats.this.JF[A8],implicitevidence$135:CaseClassFormats.this.JF[A9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: JF[A1], arg10: JF[A2], arg11: JF[A3], arg12: JF[A4], arg13: JF[A5], arg14: JF[A6], arg15: JF[A7], arg16: JF[A8], arg17: JF[A9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9)(implicitevidence$109:CaseClassFormats.this.K[K1],implicitevidence$110:CaseClassFormats.this.K[K2],implicitevidence$111:CaseClassFormats.this.K[K3],implicitevidence$112:CaseClassFormats.this.K[K4],implicitevidence$113:CaseClassFormats.this.K[K5],implicitevidence$114:CaseClassFormats.this.K[K6],implicitevidence$115:CaseClassFormats.this.K[K7],implicitevidence$116:CaseClassFormats.this.K[K8],implicitevidence$117:CaseClassFormats.this.K[K9],implicitevidence$118:CaseClassFormats.this.JF[A1],implicitevidence$119:CaseClassFormats.this.JF[A2],implicitevidence$120:CaseClassFormats.this.JF[A3],implicitevidence$121:CaseClassFormats.this.JF[A4],implicitevidence$122:CaseClassFormats.this.JF[A5],implicitevidence$123:CaseClassFormats.this.JF[A6],implicitevidence$124:CaseClassFormats.this.JF[A7],implicitevidence$125:CaseClassFormats.this.JF[A8],implicitevidence$126:CaseClassFormats.this.JF[A9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray8", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray8", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray8[A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass8", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass8", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass8[K1,K2,K3,K4,K5,K6,K7,K8,A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$101:CaseClassFormats.this.JF[A1],implicitevidence$102:CaseClassFormats.this.JF[A2],implicitevidence$103:CaseClassFormats.this.JF[A3],implicitevidence$104:CaseClassFormats.this.JF[A4],implicitevidence$105:CaseClassFormats.this.JF[A5],implicitevidence$106:CaseClassFormats.this.JF[A6],implicitevidence$107:CaseClassFormats.this.JF[A7],implicitevidence$108:CaseClassFormats.this.JF[A8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: JF[A1], arg9: JF[A2], arg10: JF[A3], arg11: JF[A4], arg12: JF[A5], arg13: JF[A6], arg14: JF[A7], arg15: JF[A8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8)(implicitevidence$85:CaseClassFormats.this.K[K1],implicitevidence$86:CaseClassFormats.this.K[K2],implicitevidence$87:CaseClassFormats.this.K[K3],implicitevidence$88:CaseClassFormats.this.K[K4],implicitevidence$89:CaseClassFormats.this.K[K5],implicitevidence$90:CaseClassFormats.this.K[K6],implicitevidence$91:CaseClassFormats.this.K[K7],implicitevidence$92:CaseClassFormats.this.K[K8],implicitevidence$93:CaseClassFormats.this.JF[A1],implicitevidence$94:CaseClassFormats.this.JF[A2],implicitevidence$95:CaseClassFormats.this.JF[A3],implicitevidence$96:CaseClassFormats.this.JF[A4],implicitevidence$97:CaseClassFormats.this.JF[A5],implicitevidence$98:CaseClassFormats.this.JF[A6],implicitevidence$99:CaseClassFormats.this.JF[A7],implicitevidence$100:CaseClassFormats.this.JF[A8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray7", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray7", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray7[A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass7", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass7", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass7[K1,K2,K3,K4,K5,K6,K7,A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$78:CaseClassFormats.this.JF[A1],implicitevidence$79:CaseClassFormats.this.JF[A2],implicitevidence$80:CaseClassFormats.this.JF[A3],implicitevidence$81:CaseClassFormats.this.JF[A4],implicitevidence$82:CaseClassFormats.this.JF[A5],implicitevidence$83:CaseClassFormats.this.JF[A6],implicitevidence$84:CaseClassFormats.this.JF[A7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: JF[A1], arg8: JF[A2], arg9: JF[A3], arg10: JF[A4], arg11: JF[A5], arg12: JF[A6], arg13: JF[A7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,K7,A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7)(implicitevidence$64:CaseClassFormats.this.K[K1],implicitevidence$65:CaseClassFormats.this.K[K2],implicitevidence$66:CaseClassFormats.this.K[K3],implicitevidence$67:CaseClassFormats.this.K[K4],implicitevidence$68:CaseClassFormats.this.K[K5],implicitevidence$69:CaseClassFormats.this.K[K6],implicitevidence$70:CaseClassFormats.this.K[K7],implicitevidence$71:CaseClassFormats.this.JF[A1],implicitevidence$72:CaseClassFormats.this.JF[A2],implicitevidence$73:CaseClassFormats.this.JF[A3],implicitevidence$74:CaseClassFormats.this.JF[A4],implicitevidence$75:CaseClassFormats.this.JF[A5],implicitevidence$76:CaseClassFormats.this.JF[A6],implicitevidence$77:CaseClassFormats.this.JF[A7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray6", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray6", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray6[A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass6", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass6", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass6[K1,K2,K3,K4,K5,K6,A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$58:CaseClassFormats.this.JF[A1],implicitevidence$59:CaseClassFormats.this.JF[A2],implicitevidence$60:CaseClassFormats.this.JF[A3],implicitevidence$61:CaseClassFormats.this.JF[A4],implicitevidence$62:CaseClassFormats.this.JF[A5],implicitevidence$63:CaseClassFormats.this.JF[A6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: JF[A1], arg7: JF[A2], arg8: JF[A3], arg9: JF[A4], arg10: JF[A5], arg11: JF[A6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,K6,A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6)(implicitevidence$46:CaseClassFormats.this.K[K1],implicitevidence$47:CaseClassFormats.this.K[K2],implicitevidence$48:CaseClassFormats.this.K[K3],implicitevidence$49:CaseClassFormats.this.K[K4],implicitevidence$50:CaseClassFormats.this.K[K5],implicitevidence$51:CaseClassFormats.this.K[K6],implicitevidence$52:CaseClassFormats.this.JF[A1],implicitevidence$53:CaseClassFormats.this.JF[A2],implicitevidence$54:CaseClassFormats.this.JF[A3],implicitevidence$55:CaseClassFormats.this.JF[A4],implicitevidence$56:CaseClassFormats.this.JF[A5],implicitevidence$57:CaseClassFormats.this.JF[A6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray5", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray5", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray5[A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass5", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass5", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass5[K1,K2,K3,K4,K5,A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$41:CaseClassFormats.this.JF[A1],implicitevidence$42:CaseClassFormats.this.JF[A2],implicitevidence$43:CaseClassFormats.this.JF[A3],implicitevidence$44:CaseClassFormats.this.JF[A4],implicitevidence$45:CaseClassFormats.this.JF[A5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: JF[A1], arg6: JF[A2], arg7: JF[A3], arg8: JF[A4], arg9: JF[A5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,K5,A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5)(implicitevidence$31:CaseClassFormats.this.K[K1],implicitevidence$32:CaseClassFormats.this.K[K2],implicitevidence$33:CaseClassFormats.this.K[K3],implicitevidence$34:CaseClassFormats.this.K[K4],implicitevidence$35:CaseClassFormats.this.K[K5],implicitevidence$36:CaseClassFormats.this.JF[A1],implicitevidence$37:CaseClassFormats.this.JF[A2],implicitevidence$38:CaseClassFormats.this.JF[A3],implicitevidence$39:CaseClassFormats.this.JF[A4],implicitevidence$40:CaseClassFormats.this.JF[A5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray4", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray4", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray4[A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass4", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(key1: K1, key2: K2, key3: K3, key4: K4)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass4", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass4[K1,K2,K3,K4,A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(key1:K1,key2:K2,key3:K3,key4:K4)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(implicitevidence$27:CaseClassFormats.this.JF[A1],implicitevidence$28:CaseClassFormats.this.JF[A2],implicitevidence$29:CaseClassFormats.this.JF[A3],implicitevidence$30:CaseClassFormats.this.JF[A4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(key1: K1, key2: K2, key3: K3, key4: K4)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: JF[A1], arg5: JF[A2], arg6: JF[A3], arg7: JF[A4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,K4,A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(key1:K1,key2:K2,key3:K3,key4:K4)(implicitevidence$19:CaseClassFormats.this.K[K1],implicitevidence$20:CaseClassFormats.this.K[K2],implicitevidence$21:CaseClassFormats.this.K[K3],implicitevidence$22:CaseClassFormats.this.K[K4],implicitevidence$23:CaseClassFormats.this.JF[A1],implicitevidence$24:CaseClassFormats.this.JF[A2],implicitevidence$25:CaseClassFormats.this.JF[A3],implicitevidence$26:CaseClassFormats.this.JF[A4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray3", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(A1: JF[A1], A2: JF[A2], A3: JF[A3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray3", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray3[A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass3", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(key1: K1, key2: K2, key3: K3)(A1: JF[A1], A2: JF[A2], A3: JF[A3], K1: K[K1], K2: K[K2], K3: K[K3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass3", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass3[K1,K2,K3,A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(key1:K1,key2:K2,key3:K3)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(implicitevidence$16:CaseClassFormats.this.JF[A1],implicitevidence$17:CaseClassFormats.this.JF[A2],implicitevidence$18:CaseClassFormats.this.JF[A3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(key1: K1, key2: K2, key3: K3)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: JF[A1], arg4: JF[A2], arg5: JF[A3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,K3,A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(key1:K1,key2:K2,key3:K3)(implicitevidence$10:CaseClassFormats.this.K[K1],implicitevidence$11:CaseClassFormats.this.K[K2],implicitevidence$12:CaseClassFormats.this.K[K3],implicitevidence$13:CaseClassFormats.this.JF[A1],implicitevidence$14:CaseClassFormats.this.JF[A2],implicitevidence$15:CaseClassFormats.this.JF[A3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray2", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(A1: JF[A1], A2: JF[A2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray2", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray2[A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass2", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(key1: K1, key2: K2)(A1: JF[A1], A2: JF[A2], K1: K[K1], K2: K[K2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass2", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass2[K1,K2,A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(key1:K1,key2:K2)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(arg0: JF[A1], arg1: JF[A2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(implicitevidence$8:CaseClassFormats.this.JF[A1],implicitevidence$9:CaseClassFormats.this.JF[A2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(key1: K1, key2: K2)(arg0: K[K1], arg1: K[K2], arg2: JF[A1], arg3: JF[A2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,K2,A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(key1:K1,key2:K2)(implicitevidence$4:CaseClassFormats.this.K[K1],implicitevidence$5:CaseClassFormats.this.K[K2],implicitevidence$6:CaseClassFormats.this.JF[A1],implicitevidence$7:CaseClassFormats.this.JF[A2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray1", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(A1: JF[A1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray1", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray1[A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(implicitA1:CaseClassFormats.this.JF[A1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass1", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(key1: K1)(A1: JF[A1], K1: K[K1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass1", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass1[K1,A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(key1:K1)(implicitA1:CaseClassFormats.this.JF[A1],implicitK1:CaseClassFormats.this.K[K1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(arg0: JF[A1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClassArray[A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(implicitevidence$3:CaseClassFormats.this.JF[A1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(key1: K1)(arg0: K[K1], arg1: JF[A1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#caseClass[K1,A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(key1:K1)(implicitevidence$1:CaseClassFormats.this.K[K1],implicitevidence$2:CaseClassFormats.this.JF[A1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "implicitHashWriter", "tail" : "(jsonWriter: JsonWriter[A]): HashWriter[A]", "member" : "sjsonnew.ImplicitHashWriters.implicitHashWriter", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#implicitHashWriter[A](implicitjsonWriter:sjsonnew.JsonWriter[A]):sjsonnew.HashWriter[A]", "kind" : "implicit def"}, {"label" : "localDateTimeStringIso", "tail" : ": IsoString[LocalDateTime]", "member" : "sjsonnew.CalendarFormats.localDateTimeStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#localDateTimeStringIso:sjsonnew.IsoString[java.time.LocalDateTime]", "kind" : "implicit val"}, {"label" : "localDateStringIso", "tail" : ": IsoString[LocalDate]", "member" : "sjsonnew.CalendarFormats.localDateStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#localDateStringIso:sjsonnew.IsoString[java.time.LocalDate]", "kind" : "implicit val"}, {"label" : "zonedDateTimeStringIso", "tail" : ": IsoString[ZonedDateTime]", "member" : "sjsonnew.CalendarFormats.zonedDateTimeStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#zonedDateTimeStringIso:sjsonnew.IsoString[java.time.ZonedDateTime]", "kind" : "implicit val"}, {"label" : "calendarStringIso", "tail" : ": IsoString[Calendar]", "member" : "sjsonnew.CalendarFormats.calendarStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#calendarStringIso:sjsonnew.IsoString[java.util.Calendar]", "kind" : "implicit val"}, {"label" : "instantStringIso", "tail" : ": IsoString[Instant]", "member" : "sjsonnew.CalendarFormats.instantStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#instantStringIso:sjsonnew.IsoString[java.time.Instant]", "kind" : "implicit val"}, {"label" : "offsetDateTimeStringIso", "tail" : ": IsoString[OffsetDateTime]", "member" : "sjsonnew.CalendarFormats.offsetDateTimeStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#offsetDateTimeStringIso:sjsonnew.IsoString[java.time.OffsetDateTime]", "kind" : "implicit val"}, {"label" : "optionalFormat", "tail" : "(arg0: JF[A]): JF[Optional[A]]", "member" : "sjsonnew.JavaExtraFormats.optionalFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#optionalFormat[A](implicitevidence$1:JavaExtraFormats.this.JF[A]):JavaExtraFormats.this.JF[java.util.Optional[A]]", "kind" : "implicit def"}, {"label" : "fileStringIso", "tail" : ": IsoString[File]", "member" : "sjsonnew.JavaExtraFormats.fileStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#fileStringIso:sjsonnew.IsoString[java.io.File]", "kind" : "implicit val"}, {"label" : "urlStringIso", "tail" : ": IsoString[URL]", "member" : "sjsonnew.JavaExtraFormats.urlStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#urlStringIso:sjsonnew.IsoString[java.net.URL]", "kind" : "implicit val"}, {"label" : "uriStringIso", "tail" : ": IsoString[URI]", "member" : "sjsonnew.JavaExtraFormats.uriStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#uriStringIso:sjsonnew.IsoString[java.net.URI]", "kind" : "implicit val"}, {"label" : "uuidStringIso", "tail" : ": IsoString[UUID]", "member" : "sjsonnew.JavaExtraFormats.uuidStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#uuidStringIso:sjsonnew.IsoString[java.util.UUID]", "kind" : "implicit val"}, {"label" : "javaBigDecimalFormat", "tail" : ": JF[BigDecimal]", "member" : "sjsonnew.JavaExtraFormats.javaBigDecimalFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#javaBigDecimalFormat:JavaExtraFormats.this.JF[java.math.BigDecimal]", "kind" : "implicit val"}, {"label" : "javaBigIntegerFormat", "tail" : ": JF[BigInteger]", "member" : "sjsonnew.JavaExtraFormats.javaBigIntegerFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#javaBigIntegerFormat:JavaExtraFormats.this.JF[java.math.BigInteger]", "kind" : "implicit val"}, {"label" : "JDoubleJsonKeyFormat", "tail" : ": JsonKeyFormat[Double]", "member" : "sjsonnew.JavaPrimitiveFormats.JDoubleJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JDoubleJsonKeyFormat:sjsonnew.JsonKeyFormat[Double]", "kind" : "implicit val"}, {"label" : "JFloatJsonKeyFormat", "tail" : ": JsonKeyFormat[Float]", "member" : "sjsonnew.JavaPrimitiveFormats.JFloatJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JFloatJsonKeyFormat:sjsonnew.JsonKeyFormat[Float]", "kind" : "implicit val"}, {"label" : "JLongJsonKeyFormat", "tail" : ": JsonKeyFormat[Long]", "member" : "sjsonnew.JavaPrimitiveFormats.JLongJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JLongJsonKeyFormat:sjsonnew.JsonKeyFormat[Long]", "kind" : "implicit val"}, {"label" : "JIntegerJsonKeyFormat", "tail" : ": JsonKeyFormat[Integer]", "member" : "sjsonnew.JavaPrimitiveFormats.JIntegerJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JIntegerJsonKeyFormat:sjsonnew.JsonKeyFormat[Integer]", "kind" : "implicit val"}, {"label" : "JCharacterJsonKeyFormat", "tail" : ": JsonKeyFormat[Character]", "member" : "sjsonnew.JavaPrimitiveFormats.JCharacterJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JCharacterJsonKeyFormat:sjsonnew.JsonKeyFormat[Character]", "kind" : "implicit val"}, {"label" : "JShortJsonKeyFormat", "tail" : ": JsonKeyFormat[Short]", "member" : "sjsonnew.JavaPrimitiveFormats.JShortJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JShortJsonKeyFormat:sjsonnew.JsonKeyFormat[Short]", "kind" : "implicit val"}, {"label" : "JByteJsonKeyFormat", "tail" : ": JsonKeyFormat[Byte]", "member" : "sjsonnew.JavaPrimitiveFormats.JByteJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JByteJsonKeyFormat:sjsonnew.JsonKeyFormat[Byte]", "kind" : "implicit val"}, {"label" : "JBooleanJsonKeyFormat", "tail" : ": JsonKeyFormat[Boolean]", "member" : "sjsonnew.JavaPrimitiveFormats.JBooleanJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JBooleanJsonKeyFormat:sjsonnew.JsonKeyFormat[Boolean]", "kind" : "implicit val"}, {"label" : "JCharacterJsonFormat", "tail" : ": JsonFormat[Character]", "member" : "sjsonnew.JavaPrimitiveFormats.JCharacterJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JCharacterJsonFormat:sjsonnew.JsonFormat[Character]", "kind" : "implicit lazy val"}, {"label" : "JBooleanJsonFormat", "tail" : ": JsonFormat[Boolean]", "member" : "sjsonnew.JavaPrimitiveFormats.JBooleanJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JBooleanJsonFormat:sjsonnew.JsonFormat[Boolean]", "kind" : "implicit lazy val"}, {"label" : "JShortJsonFormat", "tail" : ": JsonFormat[Short]", "member" : "sjsonnew.JavaPrimitiveFormats.JShortJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JShortJsonFormat:sjsonnew.JsonFormat[Short]", "kind" : "implicit lazy val"}, {"label" : "JByteJsonFormat", "tail" : ": JsonFormat[Byte]", "member" : "sjsonnew.JavaPrimitiveFormats.JByteJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JByteJsonFormat:sjsonnew.JsonFormat[Byte]", "kind" : "implicit lazy val"}, {"label" : "JDoubleJsonFormat", "tail" : ": JsonFormat[Double]", "member" : "sjsonnew.JavaPrimitiveFormats.JDoubleJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JDoubleJsonFormat:sjsonnew.JsonFormat[Double]", "kind" : "implicit lazy val"}, {"label" : "JFloatJsonFormat", "tail" : ": JsonFormat[Float]", "member" : "sjsonnew.JavaPrimitiveFormats.JFloatJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JFloatJsonFormat:sjsonnew.JsonFormat[Float]", "kind" : "implicit lazy val"}, {"label" : "JLongJsonFormat", "tail" : ": JsonFormat[Long]", "member" : "sjsonnew.JavaPrimitiveFormats.JLongJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JLongJsonFormat:sjsonnew.JsonFormat[Long]", "kind" : "implicit lazy val"}, {"label" : "JIntegerJsonFormat", "tail" : ": JsonFormat[Integer]", "member" : "sjsonnew.JavaPrimitiveFormats.JIntegerJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#JIntegerJsonFormat:sjsonnew.JsonFormat[Integer]", "kind" : "implicit lazy val"}, {"label" : "isoStringKeyFormat", "tail" : "(z: IsoString[A]): JsonKeyFormat[A]", "member" : "sjsonnew.IsoFormats.isoStringKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#isoStringKeyFormat[A](implicitz:sjsonnew.IsoString[A]):sjsonnew.JsonKeyFormat[A]", "kind" : "implicit def"}, {"label" : "isoStringFormat", "tail" : "(arg0: IsoString[A]): JsonFormat[A]", "member" : "sjsonnew.IsoFormats.isoStringFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#isoStringFormat[A](implicitevidence$2:sjsonnew.IsoString[A]):sjsonnew.JsonFormat[A]", "kind" : "implicit def"}, {"label" : "isolistFormat", "tail" : "(arg0: IsoLList[A]): JsonFormat[A]", "member" : "sjsonnew.IsoFormats.isolistFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#isolistFormat[A](implicitevidence$1:sjsonnew.IsoLList[A]):sjsonnew.JsonFormat[A]", "kind" : "implicit def"}, {"label" : "flatUnionFormat22", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21], arg42: JF[A22], arg43: Manifest[A22]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat22", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat22[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](typeFieldName:String)(implicitevidence$969:FlatUnionFormats.this.JF[A1],implicitevidence$970:Manifest[A1],implicitevidence$971:FlatUnionFormats.this.JF[A2],implicitevidence$972:Manifest[A2],implicitevidence$973:FlatUnionFormats.this.JF[A3],implicitevidence$974:Manifest[A3],implicitevidence$975:FlatUnionFormats.this.JF[A4],implicitevidence$976:Manifest[A4],implicitevidence$977:FlatUnionFormats.this.JF[A5],implicitevidence$978:Manifest[A5],implicitevidence$979:FlatUnionFormats.this.JF[A6],implicitevidence$980:Manifest[A6],implicitevidence$981:FlatUnionFormats.this.JF[A7],implicitevidence$982:Manifest[A7],implicitevidence$983:FlatUnionFormats.this.JF[A8],implicitevidence$984:Manifest[A8],implicitevidence$985:FlatUnionFormats.this.JF[A9],implicitevidence$986:Manifest[A9],implicitevidence$987:FlatUnionFormats.this.JF[A10],implicitevidence$988:Manifest[A10],implicitevidence$989:FlatUnionFormats.this.JF[A11],implicitevidence$990:Manifest[A11],implicitevidence$991:FlatUnionFormats.this.JF[A12],implicitevidence$992:Manifest[A12],implicitevidence$993:FlatUnionFormats.this.JF[A13],implicitevidence$994:Manifest[A13],implicitevidence$995:FlatUnionFormats.this.JF[A14],implicitevidence$996:Manifest[A14],implicitevidence$997:FlatUnionFormats.this.JF[A15],implicitevidence$998:Manifest[A15],implicitevidence$999:FlatUnionFormats.this.JF[A16],implicitevidence$1000:Manifest[A16],implicitevidence$1001:FlatUnionFormats.this.JF[A17],implicitevidence$1002:Manifest[A17],implicitevidence$1003:FlatUnionFormats.this.JF[A18],implicitevidence$1004:Manifest[A18],implicitevidence$1005:FlatUnionFormats.this.JF[A19],implicitevidence$1006:Manifest[A19],implicitevidence$1007:FlatUnionFormats.this.JF[A20],implicitevidence$1008:Manifest[A20],implicitevidence$1009:FlatUnionFormats.this.JF[A21],implicitevidence$1010:Manifest[A21],implicitevidence$1011:FlatUnionFormats.this.JF[A22],implicitevidence$1012:Manifest[A22]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat21", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat21", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat21[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](typeFieldName:String)(implicitevidence$927:FlatUnionFormats.this.JF[A1],implicitevidence$928:Manifest[A1],implicitevidence$929:FlatUnionFormats.this.JF[A2],implicitevidence$930:Manifest[A2],implicitevidence$931:FlatUnionFormats.this.JF[A3],implicitevidence$932:Manifest[A3],implicitevidence$933:FlatUnionFormats.this.JF[A4],implicitevidence$934:Manifest[A4],implicitevidence$935:FlatUnionFormats.this.JF[A5],implicitevidence$936:Manifest[A5],implicitevidence$937:FlatUnionFormats.this.JF[A6],implicitevidence$938:Manifest[A6],implicitevidence$939:FlatUnionFormats.this.JF[A7],implicitevidence$940:Manifest[A7],implicitevidence$941:FlatUnionFormats.this.JF[A8],implicitevidence$942:Manifest[A8],implicitevidence$943:FlatUnionFormats.this.JF[A9],implicitevidence$944:Manifest[A9],implicitevidence$945:FlatUnionFormats.this.JF[A10],implicitevidence$946:Manifest[A10],implicitevidence$947:FlatUnionFormats.this.JF[A11],implicitevidence$948:Manifest[A11],implicitevidence$949:FlatUnionFormats.this.JF[A12],implicitevidence$950:Manifest[A12],implicitevidence$951:FlatUnionFormats.this.JF[A13],implicitevidence$952:Manifest[A13],implicitevidence$953:FlatUnionFormats.this.JF[A14],implicitevidence$954:Manifest[A14],implicitevidence$955:FlatUnionFormats.this.JF[A15],implicitevidence$956:Manifest[A15],implicitevidence$957:FlatUnionFormats.this.JF[A16],implicitevidence$958:Manifest[A16],implicitevidence$959:FlatUnionFormats.this.JF[A17],implicitevidence$960:Manifest[A17],implicitevidence$961:FlatUnionFormats.this.JF[A18],implicitevidence$962:Manifest[A18],implicitevidence$963:FlatUnionFormats.this.JF[A19],implicitevidence$964:Manifest[A19],implicitevidence$965:FlatUnionFormats.this.JF[A20],implicitevidence$966:Manifest[A20],implicitevidence$967:FlatUnionFormats.this.JF[A21],implicitevidence$968:Manifest[A21]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat20", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat20", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat20[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](typeFieldName:String)(implicitevidence$887:FlatUnionFormats.this.JF[A1],implicitevidence$888:Manifest[A1],implicitevidence$889:FlatUnionFormats.this.JF[A2],implicitevidence$890:Manifest[A2],implicitevidence$891:FlatUnionFormats.this.JF[A3],implicitevidence$892:Manifest[A3],implicitevidence$893:FlatUnionFormats.this.JF[A4],implicitevidence$894:Manifest[A4],implicitevidence$895:FlatUnionFormats.this.JF[A5],implicitevidence$896:Manifest[A5],implicitevidence$897:FlatUnionFormats.this.JF[A6],implicitevidence$898:Manifest[A6],implicitevidence$899:FlatUnionFormats.this.JF[A7],implicitevidence$900:Manifest[A7],implicitevidence$901:FlatUnionFormats.this.JF[A8],implicitevidence$902:Manifest[A8],implicitevidence$903:FlatUnionFormats.this.JF[A9],implicitevidence$904:Manifest[A9],implicitevidence$905:FlatUnionFormats.this.JF[A10],implicitevidence$906:Manifest[A10],implicitevidence$907:FlatUnionFormats.this.JF[A11],implicitevidence$908:Manifest[A11],implicitevidence$909:FlatUnionFormats.this.JF[A12],implicitevidence$910:Manifest[A12],implicitevidence$911:FlatUnionFormats.this.JF[A13],implicitevidence$912:Manifest[A13],implicitevidence$913:FlatUnionFormats.this.JF[A14],implicitevidence$914:Manifest[A14],implicitevidence$915:FlatUnionFormats.this.JF[A15],implicitevidence$916:Manifest[A15],implicitevidence$917:FlatUnionFormats.this.JF[A16],implicitevidence$918:Manifest[A16],implicitevidence$919:FlatUnionFormats.this.JF[A17],implicitevidence$920:Manifest[A17],implicitevidence$921:FlatUnionFormats.this.JF[A18],implicitevidence$922:Manifest[A18],implicitevidence$923:FlatUnionFormats.this.JF[A19],implicitevidence$924:Manifest[A19],implicitevidence$925:FlatUnionFormats.this.JF[A20],implicitevidence$926:Manifest[A20]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat19", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat19", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat19[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](typeFieldName:String)(implicitevidence$849:FlatUnionFormats.this.JF[A1],implicitevidence$850:Manifest[A1],implicitevidence$851:FlatUnionFormats.this.JF[A2],implicitevidence$852:Manifest[A2],implicitevidence$853:FlatUnionFormats.this.JF[A3],implicitevidence$854:Manifest[A3],implicitevidence$855:FlatUnionFormats.this.JF[A4],implicitevidence$856:Manifest[A4],implicitevidence$857:FlatUnionFormats.this.JF[A5],implicitevidence$858:Manifest[A5],implicitevidence$859:FlatUnionFormats.this.JF[A6],implicitevidence$860:Manifest[A6],implicitevidence$861:FlatUnionFormats.this.JF[A7],implicitevidence$862:Manifest[A7],implicitevidence$863:FlatUnionFormats.this.JF[A8],implicitevidence$864:Manifest[A8],implicitevidence$865:FlatUnionFormats.this.JF[A9],implicitevidence$866:Manifest[A9],implicitevidence$867:FlatUnionFormats.this.JF[A10],implicitevidence$868:Manifest[A10],implicitevidence$869:FlatUnionFormats.this.JF[A11],implicitevidence$870:Manifest[A11],implicitevidence$871:FlatUnionFormats.this.JF[A12],implicitevidence$872:Manifest[A12],implicitevidence$873:FlatUnionFormats.this.JF[A13],implicitevidence$874:Manifest[A13],implicitevidence$875:FlatUnionFormats.this.JF[A14],implicitevidence$876:Manifest[A14],implicitevidence$877:FlatUnionFormats.this.JF[A15],implicitevidence$878:Manifest[A15],implicitevidence$879:FlatUnionFormats.this.JF[A16],implicitevidence$880:Manifest[A16],implicitevidence$881:FlatUnionFormats.this.JF[A17],implicitevidence$882:Manifest[A17],implicitevidence$883:FlatUnionFormats.this.JF[A18],implicitevidence$884:Manifest[A18],implicitevidence$885:FlatUnionFormats.this.JF[A19],implicitevidence$886:Manifest[A19]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat18", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat18", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat18[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](typeFieldName:String)(implicitevidence$813:FlatUnionFormats.this.JF[A1],implicitevidence$814:Manifest[A1],implicitevidence$815:FlatUnionFormats.this.JF[A2],implicitevidence$816:Manifest[A2],implicitevidence$817:FlatUnionFormats.this.JF[A3],implicitevidence$818:Manifest[A3],implicitevidence$819:FlatUnionFormats.this.JF[A4],implicitevidence$820:Manifest[A4],implicitevidence$821:FlatUnionFormats.this.JF[A5],implicitevidence$822:Manifest[A5],implicitevidence$823:FlatUnionFormats.this.JF[A6],implicitevidence$824:Manifest[A6],implicitevidence$825:FlatUnionFormats.this.JF[A7],implicitevidence$826:Manifest[A7],implicitevidence$827:FlatUnionFormats.this.JF[A8],implicitevidence$828:Manifest[A8],implicitevidence$829:FlatUnionFormats.this.JF[A9],implicitevidence$830:Manifest[A9],implicitevidence$831:FlatUnionFormats.this.JF[A10],implicitevidence$832:Manifest[A10],implicitevidence$833:FlatUnionFormats.this.JF[A11],implicitevidence$834:Manifest[A11],implicitevidence$835:FlatUnionFormats.this.JF[A12],implicitevidence$836:Manifest[A12],implicitevidence$837:FlatUnionFormats.this.JF[A13],implicitevidence$838:Manifest[A13],implicitevidence$839:FlatUnionFormats.this.JF[A14],implicitevidence$840:Manifest[A14],implicitevidence$841:FlatUnionFormats.this.JF[A15],implicitevidence$842:Manifest[A15],implicitevidence$843:FlatUnionFormats.this.JF[A16],implicitevidence$844:Manifest[A16],implicitevidence$845:FlatUnionFormats.this.JF[A17],implicitevidence$846:Manifest[A17],implicitevidence$847:FlatUnionFormats.this.JF[A18],implicitevidence$848:Manifest[A18]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat17", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat17", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat17[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](typeFieldName:String)(implicitevidence$779:FlatUnionFormats.this.JF[A1],implicitevidence$780:Manifest[A1],implicitevidence$781:FlatUnionFormats.this.JF[A2],implicitevidence$782:Manifest[A2],implicitevidence$783:FlatUnionFormats.this.JF[A3],implicitevidence$784:Manifest[A3],implicitevidence$785:FlatUnionFormats.this.JF[A4],implicitevidence$786:Manifest[A4],implicitevidence$787:FlatUnionFormats.this.JF[A5],implicitevidence$788:Manifest[A5],implicitevidence$789:FlatUnionFormats.this.JF[A6],implicitevidence$790:Manifest[A6],implicitevidence$791:FlatUnionFormats.this.JF[A7],implicitevidence$792:Manifest[A7],implicitevidence$793:FlatUnionFormats.this.JF[A8],implicitevidence$794:Manifest[A8],implicitevidence$795:FlatUnionFormats.this.JF[A9],implicitevidence$796:Manifest[A9],implicitevidence$797:FlatUnionFormats.this.JF[A10],implicitevidence$798:Manifest[A10],implicitevidence$799:FlatUnionFormats.this.JF[A11],implicitevidence$800:Manifest[A11],implicitevidence$801:FlatUnionFormats.this.JF[A12],implicitevidence$802:Manifest[A12],implicitevidence$803:FlatUnionFormats.this.JF[A13],implicitevidence$804:Manifest[A13],implicitevidence$805:FlatUnionFormats.this.JF[A14],implicitevidence$806:Manifest[A14],implicitevidence$807:FlatUnionFormats.this.JF[A15],implicitevidence$808:Manifest[A15],implicitevidence$809:FlatUnionFormats.this.JF[A16],implicitevidence$810:Manifest[A16],implicitevidence$811:FlatUnionFormats.this.JF[A17],implicitevidence$812:Manifest[A17]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat16", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat16", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat16[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](typeFieldName:String)(implicitevidence$747:FlatUnionFormats.this.JF[A1],implicitevidence$748:Manifest[A1],implicitevidence$749:FlatUnionFormats.this.JF[A2],implicitevidence$750:Manifest[A2],implicitevidence$751:FlatUnionFormats.this.JF[A3],implicitevidence$752:Manifest[A3],implicitevidence$753:FlatUnionFormats.this.JF[A4],implicitevidence$754:Manifest[A4],implicitevidence$755:FlatUnionFormats.this.JF[A5],implicitevidence$756:Manifest[A5],implicitevidence$757:FlatUnionFormats.this.JF[A6],implicitevidence$758:Manifest[A6],implicitevidence$759:FlatUnionFormats.this.JF[A7],implicitevidence$760:Manifest[A7],implicitevidence$761:FlatUnionFormats.this.JF[A8],implicitevidence$762:Manifest[A8],implicitevidence$763:FlatUnionFormats.this.JF[A9],implicitevidence$764:Manifest[A9],implicitevidence$765:FlatUnionFormats.this.JF[A10],implicitevidence$766:Manifest[A10],implicitevidence$767:FlatUnionFormats.this.JF[A11],implicitevidence$768:Manifest[A11],implicitevidence$769:FlatUnionFormats.this.JF[A12],implicitevidence$770:Manifest[A12],implicitevidence$771:FlatUnionFormats.this.JF[A13],implicitevidence$772:Manifest[A13],implicitevidence$773:FlatUnionFormats.this.JF[A14],implicitevidence$774:Manifest[A14],implicitevidence$775:FlatUnionFormats.this.JF[A15],implicitevidence$776:Manifest[A15],implicitevidence$777:FlatUnionFormats.this.JF[A16],implicitevidence$778:Manifest[A16]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat15", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat15", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat15[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](typeFieldName:String)(implicitevidence$717:FlatUnionFormats.this.JF[A1],implicitevidence$718:Manifest[A1],implicitevidence$719:FlatUnionFormats.this.JF[A2],implicitevidence$720:Manifest[A2],implicitevidence$721:FlatUnionFormats.this.JF[A3],implicitevidence$722:Manifest[A3],implicitevidence$723:FlatUnionFormats.this.JF[A4],implicitevidence$724:Manifest[A4],implicitevidence$725:FlatUnionFormats.this.JF[A5],implicitevidence$726:Manifest[A5],implicitevidence$727:FlatUnionFormats.this.JF[A6],implicitevidence$728:Manifest[A6],implicitevidence$729:FlatUnionFormats.this.JF[A7],implicitevidence$730:Manifest[A7],implicitevidence$731:FlatUnionFormats.this.JF[A8],implicitevidence$732:Manifest[A8],implicitevidence$733:FlatUnionFormats.this.JF[A9],implicitevidence$734:Manifest[A9],implicitevidence$735:FlatUnionFormats.this.JF[A10],implicitevidence$736:Manifest[A10],implicitevidence$737:FlatUnionFormats.this.JF[A11],implicitevidence$738:Manifest[A11],implicitevidence$739:FlatUnionFormats.this.JF[A12],implicitevidence$740:Manifest[A12],implicitevidence$741:FlatUnionFormats.this.JF[A13],implicitevidence$742:Manifest[A13],implicitevidence$743:FlatUnionFormats.this.JF[A14],implicitevidence$744:Manifest[A14],implicitevidence$745:FlatUnionFormats.this.JF[A15],implicitevidence$746:Manifest[A15]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat14", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat14", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat14[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](typeFieldName:String)(implicitevidence$689:FlatUnionFormats.this.JF[A1],implicitevidence$690:Manifest[A1],implicitevidence$691:FlatUnionFormats.this.JF[A2],implicitevidence$692:Manifest[A2],implicitevidence$693:FlatUnionFormats.this.JF[A3],implicitevidence$694:Manifest[A3],implicitevidence$695:FlatUnionFormats.this.JF[A4],implicitevidence$696:Manifest[A4],implicitevidence$697:FlatUnionFormats.this.JF[A5],implicitevidence$698:Manifest[A5],implicitevidence$699:FlatUnionFormats.this.JF[A6],implicitevidence$700:Manifest[A6],implicitevidence$701:FlatUnionFormats.this.JF[A7],implicitevidence$702:Manifest[A7],implicitevidence$703:FlatUnionFormats.this.JF[A8],implicitevidence$704:Manifest[A8],implicitevidence$705:FlatUnionFormats.this.JF[A9],implicitevidence$706:Manifest[A9],implicitevidence$707:FlatUnionFormats.this.JF[A10],implicitevidence$708:Manifest[A10],implicitevidence$709:FlatUnionFormats.this.JF[A11],implicitevidence$710:Manifest[A11],implicitevidence$711:FlatUnionFormats.this.JF[A12],implicitevidence$712:Manifest[A12],implicitevidence$713:FlatUnionFormats.this.JF[A13],implicitevidence$714:Manifest[A13],implicitevidence$715:FlatUnionFormats.this.JF[A14],implicitevidence$716:Manifest[A14]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat13", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat13", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat13[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](typeFieldName:String)(implicitevidence$663:FlatUnionFormats.this.JF[A1],implicitevidence$664:Manifest[A1],implicitevidence$665:FlatUnionFormats.this.JF[A2],implicitevidence$666:Manifest[A2],implicitevidence$667:FlatUnionFormats.this.JF[A3],implicitevidence$668:Manifest[A3],implicitevidence$669:FlatUnionFormats.this.JF[A4],implicitevidence$670:Manifest[A4],implicitevidence$671:FlatUnionFormats.this.JF[A5],implicitevidence$672:Manifest[A5],implicitevidence$673:FlatUnionFormats.this.JF[A6],implicitevidence$674:Manifest[A6],implicitevidence$675:FlatUnionFormats.this.JF[A7],implicitevidence$676:Manifest[A7],implicitevidence$677:FlatUnionFormats.this.JF[A8],implicitevidence$678:Manifest[A8],implicitevidence$679:FlatUnionFormats.this.JF[A9],implicitevidence$680:Manifest[A9],implicitevidence$681:FlatUnionFormats.this.JF[A10],implicitevidence$682:Manifest[A10],implicitevidence$683:FlatUnionFormats.this.JF[A11],implicitevidence$684:Manifest[A11],implicitevidence$685:FlatUnionFormats.this.JF[A12],implicitevidence$686:Manifest[A12],implicitevidence$687:FlatUnionFormats.this.JF[A13],implicitevidence$688:Manifest[A13]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat12", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat12", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat12[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](typeFieldName:String)(implicitevidence$639:FlatUnionFormats.this.JF[A1],implicitevidence$640:Manifest[A1],implicitevidence$641:FlatUnionFormats.this.JF[A2],implicitevidence$642:Manifest[A2],implicitevidence$643:FlatUnionFormats.this.JF[A3],implicitevidence$644:Manifest[A3],implicitevidence$645:FlatUnionFormats.this.JF[A4],implicitevidence$646:Manifest[A4],implicitevidence$647:FlatUnionFormats.this.JF[A5],implicitevidence$648:Manifest[A5],implicitevidence$649:FlatUnionFormats.this.JF[A6],implicitevidence$650:Manifest[A6],implicitevidence$651:FlatUnionFormats.this.JF[A7],implicitevidence$652:Manifest[A7],implicitevidence$653:FlatUnionFormats.this.JF[A8],implicitevidence$654:Manifest[A8],implicitevidence$655:FlatUnionFormats.this.JF[A9],implicitevidence$656:Manifest[A9],implicitevidence$657:FlatUnionFormats.this.JF[A10],implicitevidence$658:Manifest[A10],implicitevidence$659:FlatUnionFormats.this.JF[A11],implicitevidence$660:Manifest[A11],implicitevidence$661:FlatUnionFormats.this.JF[A12],implicitevidence$662:Manifest[A12]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat11", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat11", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat11[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](typeFieldName:String)(implicitevidence$617:FlatUnionFormats.this.JF[A1],implicitevidence$618:Manifest[A1],implicitevidence$619:FlatUnionFormats.this.JF[A2],implicitevidence$620:Manifest[A2],implicitevidence$621:FlatUnionFormats.this.JF[A3],implicitevidence$622:Manifest[A3],implicitevidence$623:FlatUnionFormats.this.JF[A4],implicitevidence$624:Manifest[A4],implicitevidence$625:FlatUnionFormats.this.JF[A5],implicitevidence$626:Manifest[A5],implicitevidence$627:FlatUnionFormats.this.JF[A6],implicitevidence$628:Manifest[A6],implicitevidence$629:FlatUnionFormats.this.JF[A7],implicitevidence$630:Manifest[A7],implicitevidence$631:FlatUnionFormats.this.JF[A8],implicitevidence$632:Manifest[A8],implicitevidence$633:FlatUnionFormats.this.JF[A9],implicitevidence$634:Manifest[A9],implicitevidence$635:FlatUnionFormats.this.JF[A10],implicitevidence$636:Manifest[A10],implicitevidence$637:FlatUnionFormats.this.JF[A11],implicitevidence$638:Manifest[A11]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat10", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat10", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat10[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](typeFieldName:String)(implicitevidence$597:FlatUnionFormats.this.JF[A1],implicitevidence$598:Manifest[A1],implicitevidence$599:FlatUnionFormats.this.JF[A2],implicitevidence$600:Manifest[A2],implicitevidence$601:FlatUnionFormats.this.JF[A3],implicitevidence$602:Manifest[A3],implicitevidence$603:FlatUnionFormats.this.JF[A4],implicitevidence$604:Manifest[A4],implicitevidence$605:FlatUnionFormats.this.JF[A5],implicitevidence$606:Manifest[A5],implicitevidence$607:FlatUnionFormats.this.JF[A6],implicitevidence$608:Manifest[A6],implicitevidence$609:FlatUnionFormats.this.JF[A7],implicitevidence$610:Manifest[A7],implicitevidence$611:FlatUnionFormats.this.JF[A8],implicitevidence$612:Manifest[A8],implicitevidence$613:FlatUnionFormats.this.JF[A9],implicitevidence$614:Manifest[A9],implicitevidence$615:FlatUnionFormats.this.JF[A10],implicitevidence$616:Manifest[A10]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat9", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat9", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat9[U,A1,A2,A3,A4,A5,A6,A7,A8,A9](typeFieldName:String)(implicitevidence$579:FlatUnionFormats.this.JF[A1],implicitevidence$580:Manifest[A1],implicitevidence$581:FlatUnionFormats.this.JF[A2],implicitevidence$582:Manifest[A2],implicitevidence$583:FlatUnionFormats.this.JF[A3],implicitevidence$584:Manifest[A3],implicitevidence$585:FlatUnionFormats.this.JF[A4],implicitevidence$586:Manifest[A4],implicitevidence$587:FlatUnionFormats.this.JF[A5],implicitevidence$588:Manifest[A5],implicitevidence$589:FlatUnionFormats.this.JF[A6],implicitevidence$590:Manifest[A6],implicitevidence$591:FlatUnionFormats.this.JF[A7],implicitevidence$592:Manifest[A7],implicitevidence$593:FlatUnionFormats.this.JF[A8],implicitevidence$594:Manifest[A8],implicitevidence$595:FlatUnionFormats.this.JF[A9],implicitevidence$596:Manifest[A9]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat8", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat8", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat8[U,A1,A2,A3,A4,A5,A6,A7,A8](typeFieldName:String)(implicitevidence$563:FlatUnionFormats.this.JF[A1],implicitevidence$564:Manifest[A1],implicitevidence$565:FlatUnionFormats.this.JF[A2],implicitevidence$566:Manifest[A2],implicitevidence$567:FlatUnionFormats.this.JF[A3],implicitevidence$568:Manifest[A3],implicitevidence$569:FlatUnionFormats.this.JF[A4],implicitevidence$570:Manifest[A4],implicitevidence$571:FlatUnionFormats.this.JF[A5],implicitevidence$572:Manifest[A5],implicitevidence$573:FlatUnionFormats.this.JF[A6],implicitevidence$574:Manifest[A6],implicitevidence$575:FlatUnionFormats.this.JF[A7],implicitevidence$576:Manifest[A7],implicitevidence$577:FlatUnionFormats.this.JF[A8],implicitevidence$578:Manifest[A8]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat7", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat7", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat7[U,A1,A2,A3,A4,A5,A6,A7](typeFieldName:String)(implicitevidence$549:FlatUnionFormats.this.JF[A1],implicitevidence$550:Manifest[A1],implicitevidence$551:FlatUnionFormats.this.JF[A2],implicitevidence$552:Manifest[A2],implicitevidence$553:FlatUnionFormats.this.JF[A3],implicitevidence$554:Manifest[A3],implicitevidence$555:FlatUnionFormats.this.JF[A4],implicitevidence$556:Manifest[A4],implicitevidence$557:FlatUnionFormats.this.JF[A5],implicitevidence$558:Manifest[A5],implicitevidence$559:FlatUnionFormats.this.JF[A6],implicitevidence$560:Manifest[A6],implicitevidence$561:FlatUnionFormats.this.JF[A7],implicitevidence$562:Manifest[A7]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat6", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat6", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat6[U,A1,A2,A3,A4,A5,A6](typeFieldName:String)(implicitevidence$537:FlatUnionFormats.this.JF[A1],implicitevidence$538:Manifest[A1],implicitevidence$539:FlatUnionFormats.this.JF[A2],implicitevidence$540:Manifest[A2],implicitevidence$541:FlatUnionFormats.this.JF[A3],implicitevidence$542:Manifest[A3],implicitevidence$543:FlatUnionFormats.this.JF[A4],implicitevidence$544:Manifest[A4],implicitevidence$545:FlatUnionFormats.this.JF[A5],implicitevidence$546:Manifest[A5],implicitevidence$547:FlatUnionFormats.this.JF[A6],implicitevidence$548:Manifest[A6]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat5", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat5", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat5[U,A1,A2,A3,A4,A5](typeFieldName:String)(implicitevidence$527:FlatUnionFormats.this.JF[A1],implicitevidence$528:Manifest[A1],implicitevidence$529:FlatUnionFormats.this.JF[A2],implicitevidence$530:Manifest[A2],implicitevidence$531:FlatUnionFormats.this.JF[A3],implicitevidence$532:Manifest[A3],implicitevidence$533:FlatUnionFormats.this.JF[A4],implicitevidence$534:Manifest[A4],implicitevidence$535:FlatUnionFormats.this.JF[A5],implicitevidence$536:Manifest[A5]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat4", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat4", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat4[U,A1,A2,A3,A4](typeFieldName:String)(implicitevidence$519:FlatUnionFormats.this.JF[A1],implicitevidence$520:Manifest[A1],implicitevidence$521:FlatUnionFormats.this.JF[A2],implicitevidence$522:Manifest[A2],implicitevidence$523:FlatUnionFormats.this.JF[A3],implicitevidence$524:Manifest[A3],implicitevidence$525:FlatUnionFormats.this.JF[A4],implicitevidence$526:Manifest[A4]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat3", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat3", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat3[U,A1,A2,A3](typeFieldName:String)(implicitevidence$513:FlatUnionFormats.this.JF[A1],implicitevidence$514:Manifest[A1],implicitevidence$515:FlatUnionFormats.this.JF[A2],implicitevidence$516:Manifest[A2],implicitevidence$517:FlatUnionFormats.this.JF[A3],implicitevidence$518:Manifest[A3]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat2", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat2", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat2[U,A1,A2](typeFieldName:String)(implicitevidence$509:FlatUnionFormats.this.JF[A1],implicitevidence$510:Manifest[A1],implicitevidence$511:FlatUnionFormats.this.JF[A2],implicitevidence$512:Manifest[A2]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat1", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat1", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat1[U,A1](typeFieldName:String)(implicitevidence$507:FlatUnionFormats.this.JF[A1],implicitevidence$508:Manifest[A1]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat22", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21], arg42: JF[A22], arg43: Manifest[A22]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat22", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat22[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitevidence$463:FlatUnionFormats.this.JF[A1],implicitevidence$464:Manifest[A1],implicitevidence$465:FlatUnionFormats.this.JF[A2],implicitevidence$466:Manifest[A2],implicitevidence$467:FlatUnionFormats.this.JF[A3],implicitevidence$468:Manifest[A3],implicitevidence$469:FlatUnionFormats.this.JF[A4],implicitevidence$470:Manifest[A4],implicitevidence$471:FlatUnionFormats.this.JF[A5],implicitevidence$472:Manifest[A5],implicitevidence$473:FlatUnionFormats.this.JF[A6],implicitevidence$474:Manifest[A6],implicitevidence$475:FlatUnionFormats.this.JF[A7],implicitevidence$476:Manifest[A7],implicitevidence$477:FlatUnionFormats.this.JF[A8],implicitevidence$478:Manifest[A8],implicitevidence$479:FlatUnionFormats.this.JF[A9],implicitevidence$480:Manifest[A9],implicitevidence$481:FlatUnionFormats.this.JF[A10],implicitevidence$482:Manifest[A10],implicitevidence$483:FlatUnionFormats.this.JF[A11],implicitevidence$484:Manifest[A11],implicitevidence$485:FlatUnionFormats.this.JF[A12],implicitevidence$486:Manifest[A12],implicitevidence$487:FlatUnionFormats.this.JF[A13],implicitevidence$488:Manifest[A13],implicitevidence$489:FlatUnionFormats.this.JF[A14],implicitevidence$490:Manifest[A14],implicitevidence$491:FlatUnionFormats.this.JF[A15],implicitevidence$492:Manifest[A15],implicitevidence$493:FlatUnionFormats.this.JF[A16],implicitevidence$494:Manifest[A16],implicitevidence$495:FlatUnionFormats.this.JF[A17],implicitevidence$496:Manifest[A17],implicitevidence$497:FlatUnionFormats.this.JF[A18],implicitevidence$498:Manifest[A18],implicitevidence$499:FlatUnionFormats.this.JF[A19],implicitevidence$500:Manifest[A19],implicitevidence$501:FlatUnionFormats.this.JF[A20],implicitevidence$502:Manifest[A20],implicitevidence$503:FlatUnionFormats.this.JF[A21],implicitevidence$504:Manifest[A21],implicitevidence$505:FlatUnionFormats.this.JF[A22],implicitevidence$506:Manifest[A22]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat21", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat21", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat21[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitevidence$421:FlatUnionFormats.this.JF[A1],implicitevidence$422:Manifest[A1],implicitevidence$423:FlatUnionFormats.this.JF[A2],implicitevidence$424:Manifest[A2],implicitevidence$425:FlatUnionFormats.this.JF[A3],implicitevidence$426:Manifest[A3],implicitevidence$427:FlatUnionFormats.this.JF[A4],implicitevidence$428:Manifest[A4],implicitevidence$429:FlatUnionFormats.this.JF[A5],implicitevidence$430:Manifest[A5],implicitevidence$431:FlatUnionFormats.this.JF[A6],implicitevidence$432:Manifest[A6],implicitevidence$433:FlatUnionFormats.this.JF[A7],implicitevidence$434:Manifest[A7],implicitevidence$435:FlatUnionFormats.this.JF[A8],implicitevidence$436:Manifest[A8],implicitevidence$437:FlatUnionFormats.this.JF[A9],implicitevidence$438:Manifest[A9],implicitevidence$439:FlatUnionFormats.this.JF[A10],implicitevidence$440:Manifest[A10],implicitevidence$441:FlatUnionFormats.this.JF[A11],implicitevidence$442:Manifest[A11],implicitevidence$443:FlatUnionFormats.this.JF[A12],implicitevidence$444:Manifest[A12],implicitevidence$445:FlatUnionFormats.this.JF[A13],implicitevidence$446:Manifest[A13],implicitevidence$447:FlatUnionFormats.this.JF[A14],implicitevidence$448:Manifest[A14],implicitevidence$449:FlatUnionFormats.this.JF[A15],implicitevidence$450:Manifest[A15],implicitevidence$451:FlatUnionFormats.this.JF[A16],implicitevidence$452:Manifest[A16],implicitevidence$453:FlatUnionFormats.this.JF[A17],implicitevidence$454:Manifest[A17],implicitevidence$455:FlatUnionFormats.this.JF[A18],implicitevidence$456:Manifest[A18],implicitevidence$457:FlatUnionFormats.this.JF[A19],implicitevidence$458:Manifest[A19],implicitevidence$459:FlatUnionFormats.this.JF[A20],implicitevidence$460:Manifest[A20],implicitevidence$461:FlatUnionFormats.this.JF[A21],implicitevidence$462:Manifest[A21]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat20", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat20", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat20[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitevidence$381:FlatUnionFormats.this.JF[A1],implicitevidence$382:Manifest[A1],implicitevidence$383:FlatUnionFormats.this.JF[A2],implicitevidence$384:Manifest[A2],implicitevidence$385:FlatUnionFormats.this.JF[A3],implicitevidence$386:Manifest[A3],implicitevidence$387:FlatUnionFormats.this.JF[A4],implicitevidence$388:Manifest[A4],implicitevidence$389:FlatUnionFormats.this.JF[A5],implicitevidence$390:Manifest[A5],implicitevidence$391:FlatUnionFormats.this.JF[A6],implicitevidence$392:Manifest[A6],implicitevidence$393:FlatUnionFormats.this.JF[A7],implicitevidence$394:Manifest[A7],implicitevidence$395:FlatUnionFormats.this.JF[A8],implicitevidence$396:Manifest[A8],implicitevidence$397:FlatUnionFormats.this.JF[A9],implicitevidence$398:Manifest[A9],implicitevidence$399:FlatUnionFormats.this.JF[A10],implicitevidence$400:Manifest[A10],implicitevidence$401:FlatUnionFormats.this.JF[A11],implicitevidence$402:Manifest[A11],implicitevidence$403:FlatUnionFormats.this.JF[A12],implicitevidence$404:Manifest[A12],implicitevidence$405:FlatUnionFormats.this.JF[A13],implicitevidence$406:Manifest[A13],implicitevidence$407:FlatUnionFormats.this.JF[A14],implicitevidence$408:Manifest[A14],implicitevidence$409:FlatUnionFormats.this.JF[A15],implicitevidence$410:Manifest[A15],implicitevidence$411:FlatUnionFormats.this.JF[A16],implicitevidence$412:Manifest[A16],implicitevidence$413:FlatUnionFormats.this.JF[A17],implicitevidence$414:Manifest[A17],implicitevidence$415:FlatUnionFormats.this.JF[A18],implicitevidence$416:Manifest[A18],implicitevidence$417:FlatUnionFormats.this.JF[A19],implicitevidence$418:Manifest[A19],implicitevidence$419:FlatUnionFormats.this.JF[A20],implicitevidence$420:Manifest[A20]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat19", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat19", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat19[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitevidence$343:FlatUnionFormats.this.JF[A1],implicitevidence$344:Manifest[A1],implicitevidence$345:FlatUnionFormats.this.JF[A2],implicitevidence$346:Manifest[A2],implicitevidence$347:FlatUnionFormats.this.JF[A3],implicitevidence$348:Manifest[A3],implicitevidence$349:FlatUnionFormats.this.JF[A4],implicitevidence$350:Manifest[A4],implicitevidence$351:FlatUnionFormats.this.JF[A5],implicitevidence$352:Manifest[A5],implicitevidence$353:FlatUnionFormats.this.JF[A6],implicitevidence$354:Manifest[A6],implicitevidence$355:FlatUnionFormats.this.JF[A7],implicitevidence$356:Manifest[A7],implicitevidence$357:FlatUnionFormats.this.JF[A8],implicitevidence$358:Manifest[A8],implicitevidence$359:FlatUnionFormats.this.JF[A9],implicitevidence$360:Manifest[A9],implicitevidence$361:FlatUnionFormats.this.JF[A10],implicitevidence$362:Manifest[A10],implicitevidence$363:FlatUnionFormats.this.JF[A11],implicitevidence$364:Manifest[A11],implicitevidence$365:FlatUnionFormats.this.JF[A12],implicitevidence$366:Manifest[A12],implicitevidence$367:FlatUnionFormats.this.JF[A13],implicitevidence$368:Manifest[A13],implicitevidence$369:FlatUnionFormats.this.JF[A14],implicitevidence$370:Manifest[A14],implicitevidence$371:FlatUnionFormats.this.JF[A15],implicitevidence$372:Manifest[A15],implicitevidence$373:FlatUnionFormats.this.JF[A16],implicitevidence$374:Manifest[A16],implicitevidence$375:FlatUnionFormats.this.JF[A17],implicitevidence$376:Manifest[A17],implicitevidence$377:FlatUnionFormats.this.JF[A18],implicitevidence$378:Manifest[A18],implicitevidence$379:FlatUnionFormats.this.JF[A19],implicitevidence$380:Manifest[A19]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat18", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat18", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat18[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitevidence$307:FlatUnionFormats.this.JF[A1],implicitevidence$308:Manifest[A1],implicitevidence$309:FlatUnionFormats.this.JF[A2],implicitevidence$310:Manifest[A2],implicitevidence$311:FlatUnionFormats.this.JF[A3],implicitevidence$312:Manifest[A3],implicitevidence$313:FlatUnionFormats.this.JF[A4],implicitevidence$314:Manifest[A4],implicitevidence$315:FlatUnionFormats.this.JF[A5],implicitevidence$316:Manifest[A5],implicitevidence$317:FlatUnionFormats.this.JF[A6],implicitevidence$318:Manifest[A6],implicitevidence$319:FlatUnionFormats.this.JF[A7],implicitevidence$320:Manifest[A7],implicitevidence$321:FlatUnionFormats.this.JF[A8],implicitevidence$322:Manifest[A8],implicitevidence$323:FlatUnionFormats.this.JF[A9],implicitevidence$324:Manifest[A9],implicitevidence$325:FlatUnionFormats.this.JF[A10],implicitevidence$326:Manifest[A10],implicitevidence$327:FlatUnionFormats.this.JF[A11],implicitevidence$328:Manifest[A11],implicitevidence$329:FlatUnionFormats.this.JF[A12],implicitevidence$330:Manifest[A12],implicitevidence$331:FlatUnionFormats.this.JF[A13],implicitevidence$332:Manifest[A13],implicitevidence$333:FlatUnionFormats.this.JF[A14],implicitevidence$334:Manifest[A14],implicitevidence$335:FlatUnionFormats.this.JF[A15],implicitevidence$336:Manifest[A15],implicitevidence$337:FlatUnionFormats.this.JF[A16],implicitevidence$338:Manifest[A16],implicitevidence$339:FlatUnionFormats.this.JF[A17],implicitevidence$340:Manifest[A17],implicitevidence$341:FlatUnionFormats.this.JF[A18],implicitevidence$342:Manifest[A18]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat17", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat17", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat17[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitevidence$273:FlatUnionFormats.this.JF[A1],implicitevidence$274:Manifest[A1],implicitevidence$275:FlatUnionFormats.this.JF[A2],implicitevidence$276:Manifest[A2],implicitevidence$277:FlatUnionFormats.this.JF[A3],implicitevidence$278:Manifest[A3],implicitevidence$279:FlatUnionFormats.this.JF[A4],implicitevidence$280:Manifest[A4],implicitevidence$281:FlatUnionFormats.this.JF[A5],implicitevidence$282:Manifest[A5],implicitevidence$283:FlatUnionFormats.this.JF[A6],implicitevidence$284:Manifest[A6],implicitevidence$285:FlatUnionFormats.this.JF[A7],implicitevidence$286:Manifest[A7],implicitevidence$287:FlatUnionFormats.this.JF[A8],implicitevidence$288:Manifest[A8],implicitevidence$289:FlatUnionFormats.this.JF[A9],implicitevidence$290:Manifest[A9],implicitevidence$291:FlatUnionFormats.this.JF[A10],implicitevidence$292:Manifest[A10],implicitevidence$293:FlatUnionFormats.this.JF[A11],implicitevidence$294:Manifest[A11],implicitevidence$295:FlatUnionFormats.this.JF[A12],implicitevidence$296:Manifest[A12],implicitevidence$297:FlatUnionFormats.this.JF[A13],implicitevidence$298:Manifest[A13],implicitevidence$299:FlatUnionFormats.this.JF[A14],implicitevidence$300:Manifest[A14],implicitevidence$301:FlatUnionFormats.this.JF[A15],implicitevidence$302:Manifest[A15],implicitevidence$303:FlatUnionFormats.this.JF[A16],implicitevidence$304:Manifest[A16],implicitevidence$305:FlatUnionFormats.this.JF[A17],implicitevidence$306:Manifest[A17]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat16", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat16", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat16[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitevidence$241:FlatUnionFormats.this.JF[A1],implicitevidence$242:Manifest[A1],implicitevidence$243:FlatUnionFormats.this.JF[A2],implicitevidence$244:Manifest[A2],implicitevidence$245:FlatUnionFormats.this.JF[A3],implicitevidence$246:Manifest[A3],implicitevidence$247:FlatUnionFormats.this.JF[A4],implicitevidence$248:Manifest[A4],implicitevidence$249:FlatUnionFormats.this.JF[A5],implicitevidence$250:Manifest[A5],implicitevidence$251:FlatUnionFormats.this.JF[A6],implicitevidence$252:Manifest[A6],implicitevidence$253:FlatUnionFormats.this.JF[A7],implicitevidence$254:Manifest[A7],implicitevidence$255:FlatUnionFormats.this.JF[A8],implicitevidence$256:Manifest[A8],implicitevidence$257:FlatUnionFormats.this.JF[A9],implicitevidence$258:Manifest[A9],implicitevidence$259:FlatUnionFormats.this.JF[A10],implicitevidence$260:Manifest[A10],implicitevidence$261:FlatUnionFormats.this.JF[A11],implicitevidence$262:Manifest[A11],implicitevidence$263:FlatUnionFormats.this.JF[A12],implicitevidence$264:Manifest[A12],implicitevidence$265:FlatUnionFormats.this.JF[A13],implicitevidence$266:Manifest[A13],implicitevidence$267:FlatUnionFormats.this.JF[A14],implicitevidence$268:Manifest[A14],implicitevidence$269:FlatUnionFormats.this.JF[A15],implicitevidence$270:Manifest[A15],implicitevidence$271:FlatUnionFormats.this.JF[A16],implicitevidence$272:Manifest[A16]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat15", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat15", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat15[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitevidence$211:FlatUnionFormats.this.JF[A1],implicitevidence$212:Manifest[A1],implicitevidence$213:FlatUnionFormats.this.JF[A2],implicitevidence$214:Manifest[A2],implicitevidence$215:FlatUnionFormats.this.JF[A3],implicitevidence$216:Manifest[A3],implicitevidence$217:FlatUnionFormats.this.JF[A4],implicitevidence$218:Manifest[A4],implicitevidence$219:FlatUnionFormats.this.JF[A5],implicitevidence$220:Manifest[A5],implicitevidence$221:FlatUnionFormats.this.JF[A6],implicitevidence$222:Manifest[A6],implicitevidence$223:FlatUnionFormats.this.JF[A7],implicitevidence$224:Manifest[A7],implicitevidence$225:FlatUnionFormats.this.JF[A8],implicitevidence$226:Manifest[A8],implicitevidence$227:FlatUnionFormats.this.JF[A9],implicitevidence$228:Manifest[A9],implicitevidence$229:FlatUnionFormats.this.JF[A10],implicitevidence$230:Manifest[A10],implicitevidence$231:FlatUnionFormats.this.JF[A11],implicitevidence$232:Manifest[A11],implicitevidence$233:FlatUnionFormats.this.JF[A12],implicitevidence$234:Manifest[A12],implicitevidence$235:FlatUnionFormats.this.JF[A13],implicitevidence$236:Manifest[A13],implicitevidence$237:FlatUnionFormats.this.JF[A14],implicitevidence$238:Manifest[A14],implicitevidence$239:FlatUnionFormats.this.JF[A15],implicitevidence$240:Manifest[A15]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat14", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat14", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat14[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitevidence$183:FlatUnionFormats.this.JF[A1],implicitevidence$184:Manifest[A1],implicitevidence$185:FlatUnionFormats.this.JF[A2],implicitevidence$186:Manifest[A2],implicitevidence$187:FlatUnionFormats.this.JF[A3],implicitevidence$188:Manifest[A3],implicitevidence$189:FlatUnionFormats.this.JF[A4],implicitevidence$190:Manifest[A4],implicitevidence$191:FlatUnionFormats.this.JF[A5],implicitevidence$192:Manifest[A5],implicitevidence$193:FlatUnionFormats.this.JF[A6],implicitevidence$194:Manifest[A6],implicitevidence$195:FlatUnionFormats.this.JF[A7],implicitevidence$196:Manifest[A7],implicitevidence$197:FlatUnionFormats.this.JF[A8],implicitevidence$198:Manifest[A8],implicitevidence$199:FlatUnionFormats.this.JF[A9],implicitevidence$200:Manifest[A9],implicitevidence$201:FlatUnionFormats.this.JF[A10],implicitevidence$202:Manifest[A10],implicitevidence$203:FlatUnionFormats.this.JF[A11],implicitevidence$204:Manifest[A11],implicitevidence$205:FlatUnionFormats.this.JF[A12],implicitevidence$206:Manifest[A12],implicitevidence$207:FlatUnionFormats.this.JF[A13],implicitevidence$208:Manifest[A13],implicitevidence$209:FlatUnionFormats.this.JF[A14],implicitevidence$210:Manifest[A14]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat13", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat13", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat13[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitevidence$157:FlatUnionFormats.this.JF[A1],implicitevidence$158:Manifest[A1],implicitevidence$159:FlatUnionFormats.this.JF[A2],implicitevidence$160:Manifest[A2],implicitevidence$161:FlatUnionFormats.this.JF[A3],implicitevidence$162:Manifest[A3],implicitevidence$163:FlatUnionFormats.this.JF[A4],implicitevidence$164:Manifest[A4],implicitevidence$165:FlatUnionFormats.this.JF[A5],implicitevidence$166:Manifest[A5],implicitevidence$167:FlatUnionFormats.this.JF[A6],implicitevidence$168:Manifest[A6],implicitevidence$169:FlatUnionFormats.this.JF[A7],implicitevidence$170:Manifest[A7],implicitevidence$171:FlatUnionFormats.this.JF[A8],implicitevidence$172:Manifest[A8],implicitevidence$173:FlatUnionFormats.this.JF[A9],implicitevidence$174:Manifest[A9],implicitevidence$175:FlatUnionFormats.this.JF[A10],implicitevidence$176:Manifest[A10],implicitevidence$177:FlatUnionFormats.this.JF[A11],implicitevidence$178:Manifest[A11],implicitevidence$179:FlatUnionFormats.this.JF[A12],implicitevidence$180:Manifest[A12],implicitevidence$181:FlatUnionFormats.this.JF[A13],implicitevidence$182:Manifest[A13]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat12", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat12", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat12[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitevidence$133:FlatUnionFormats.this.JF[A1],implicitevidence$134:Manifest[A1],implicitevidence$135:FlatUnionFormats.this.JF[A2],implicitevidence$136:Manifest[A2],implicitevidence$137:FlatUnionFormats.this.JF[A3],implicitevidence$138:Manifest[A3],implicitevidence$139:FlatUnionFormats.this.JF[A4],implicitevidence$140:Manifest[A4],implicitevidence$141:FlatUnionFormats.this.JF[A5],implicitevidence$142:Manifest[A5],implicitevidence$143:FlatUnionFormats.this.JF[A6],implicitevidence$144:Manifest[A6],implicitevidence$145:FlatUnionFormats.this.JF[A7],implicitevidence$146:Manifest[A7],implicitevidence$147:FlatUnionFormats.this.JF[A8],implicitevidence$148:Manifest[A8],implicitevidence$149:FlatUnionFormats.this.JF[A9],implicitevidence$150:Manifest[A9],implicitevidence$151:FlatUnionFormats.this.JF[A10],implicitevidence$152:Manifest[A10],implicitevidence$153:FlatUnionFormats.this.JF[A11],implicitevidence$154:Manifest[A11],implicitevidence$155:FlatUnionFormats.this.JF[A12],implicitevidence$156:Manifest[A12]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat11", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat11", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat11[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitevidence$111:FlatUnionFormats.this.JF[A1],implicitevidence$112:Manifest[A1],implicitevidence$113:FlatUnionFormats.this.JF[A2],implicitevidence$114:Manifest[A2],implicitevidence$115:FlatUnionFormats.this.JF[A3],implicitevidence$116:Manifest[A3],implicitevidence$117:FlatUnionFormats.this.JF[A4],implicitevidence$118:Manifest[A4],implicitevidence$119:FlatUnionFormats.this.JF[A5],implicitevidence$120:Manifest[A5],implicitevidence$121:FlatUnionFormats.this.JF[A6],implicitevidence$122:Manifest[A6],implicitevidence$123:FlatUnionFormats.this.JF[A7],implicitevidence$124:Manifest[A7],implicitevidence$125:FlatUnionFormats.this.JF[A8],implicitevidence$126:Manifest[A8],implicitevidence$127:FlatUnionFormats.this.JF[A9],implicitevidence$128:Manifest[A9],implicitevidence$129:FlatUnionFormats.this.JF[A10],implicitevidence$130:Manifest[A10],implicitevidence$131:FlatUnionFormats.this.JF[A11],implicitevidence$132:Manifest[A11]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat10", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat10", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat10[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitevidence$91:FlatUnionFormats.this.JF[A1],implicitevidence$92:Manifest[A1],implicitevidence$93:FlatUnionFormats.this.JF[A2],implicitevidence$94:Manifest[A2],implicitevidence$95:FlatUnionFormats.this.JF[A3],implicitevidence$96:Manifest[A3],implicitevidence$97:FlatUnionFormats.this.JF[A4],implicitevidence$98:Manifest[A4],implicitevidence$99:FlatUnionFormats.this.JF[A5],implicitevidence$100:Manifest[A5],implicitevidence$101:FlatUnionFormats.this.JF[A6],implicitevidence$102:Manifest[A6],implicitevidence$103:FlatUnionFormats.this.JF[A7],implicitevidence$104:Manifest[A7],implicitevidence$105:FlatUnionFormats.this.JF[A8],implicitevidence$106:Manifest[A8],implicitevidence$107:FlatUnionFormats.this.JF[A9],implicitevidence$108:Manifest[A9],implicitevidence$109:FlatUnionFormats.this.JF[A10],implicitevidence$110:Manifest[A10]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat9", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat9", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat9[U,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitevidence$73:FlatUnionFormats.this.JF[A1],implicitevidence$74:Manifest[A1],implicitevidence$75:FlatUnionFormats.this.JF[A2],implicitevidence$76:Manifest[A2],implicitevidence$77:FlatUnionFormats.this.JF[A3],implicitevidence$78:Manifest[A3],implicitevidence$79:FlatUnionFormats.this.JF[A4],implicitevidence$80:Manifest[A4],implicitevidence$81:FlatUnionFormats.this.JF[A5],implicitevidence$82:Manifest[A5],implicitevidence$83:FlatUnionFormats.this.JF[A6],implicitevidence$84:Manifest[A6],implicitevidence$85:FlatUnionFormats.this.JF[A7],implicitevidence$86:Manifest[A7],implicitevidence$87:FlatUnionFormats.this.JF[A8],implicitevidence$88:Manifest[A8],implicitevidence$89:FlatUnionFormats.this.JF[A9],implicitevidence$90:Manifest[A9]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat8", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat8", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat8[U,A1,A2,A3,A4,A5,A6,A7,A8](implicitevidence$57:FlatUnionFormats.this.JF[A1],implicitevidence$58:Manifest[A1],implicitevidence$59:FlatUnionFormats.this.JF[A2],implicitevidence$60:Manifest[A2],implicitevidence$61:FlatUnionFormats.this.JF[A3],implicitevidence$62:Manifest[A3],implicitevidence$63:FlatUnionFormats.this.JF[A4],implicitevidence$64:Manifest[A4],implicitevidence$65:FlatUnionFormats.this.JF[A5],implicitevidence$66:Manifest[A5],implicitevidence$67:FlatUnionFormats.this.JF[A6],implicitevidence$68:Manifest[A6],implicitevidence$69:FlatUnionFormats.this.JF[A7],implicitevidence$70:Manifest[A7],implicitevidence$71:FlatUnionFormats.this.JF[A8],implicitevidence$72:Manifest[A8]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat7", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat7", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat7[U,A1,A2,A3,A4,A5,A6,A7](implicitevidence$43:FlatUnionFormats.this.JF[A1],implicitevidence$44:Manifest[A1],implicitevidence$45:FlatUnionFormats.this.JF[A2],implicitevidence$46:Manifest[A2],implicitevidence$47:FlatUnionFormats.this.JF[A3],implicitevidence$48:Manifest[A3],implicitevidence$49:FlatUnionFormats.this.JF[A4],implicitevidence$50:Manifest[A4],implicitevidence$51:FlatUnionFormats.this.JF[A5],implicitevidence$52:Manifest[A5],implicitevidence$53:FlatUnionFormats.this.JF[A6],implicitevidence$54:Manifest[A6],implicitevidence$55:FlatUnionFormats.this.JF[A7],implicitevidence$56:Manifest[A7]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat6", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat6", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat6[U,A1,A2,A3,A4,A5,A6](implicitevidence$31:FlatUnionFormats.this.JF[A1],implicitevidence$32:Manifest[A1],implicitevidence$33:FlatUnionFormats.this.JF[A2],implicitevidence$34:Manifest[A2],implicitevidence$35:FlatUnionFormats.this.JF[A3],implicitevidence$36:Manifest[A3],implicitevidence$37:FlatUnionFormats.this.JF[A4],implicitevidence$38:Manifest[A4],implicitevidence$39:FlatUnionFormats.this.JF[A5],implicitevidence$40:Manifest[A5],implicitevidence$41:FlatUnionFormats.this.JF[A6],implicitevidence$42:Manifest[A6]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat5", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat5", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat5[U,A1,A2,A3,A4,A5](implicitevidence$21:FlatUnionFormats.this.JF[A1],implicitevidence$22:Manifest[A1],implicitevidence$23:FlatUnionFormats.this.JF[A2],implicitevidence$24:Manifest[A2],implicitevidence$25:FlatUnionFormats.this.JF[A3],implicitevidence$26:Manifest[A3],implicitevidence$27:FlatUnionFormats.this.JF[A4],implicitevidence$28:Manifest[A4],implicitevidence$29:FlatUnionFormats.this.JF[A5],implicitevidence$30:Manifest[A5]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat4", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat4", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat4[U,A1,A2,A3,A4](implicitevidence$13:FlatUnionFormats.this.JF[A1],implicitevidence$14:Manifest[A1],implicitevidence$15:FlatUnionFormats.this.JF[A2],implicitevidence$16:Manifest[A2],implicitevidence$17:FlatUnionFormats.this.JF[A3],implicitevidence$18:Manifest[A3],implicitevidence$19:FlatUnionFormats.this.JF[A4],implicitevidence$20:Manifest[A4]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat3", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat3", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat3[U,A1,A2,A3](implicitevidence$7:FlatUnionFormats.this.JF[A1],implicitevidence$8:Manifest[A1],implicitevidence$9:FlatUnionFormats.this.JF[A2],implicitevidence$10:Manifest[A2],implicitevidence$11:FlatUnionFormats.this.JF[A3],implicitevidence$12:Manifest[A3]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat2", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat2", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat2[U,A1,A2](implicitevidence$3:FlatUnionFormats.this.JF[A1],implicitevidence$4:Manifest[A1],implicitevidence$5:FlatUnionFormats.this.JF[A2],implicitevidence$6:Manifest[A2]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat1", "tail" : "(arg0: JF[A1], arg1: Manifest[A1]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat1", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#flatUnionFormat1[U,A1](implicitevidence$1:FlatUnionFormats.this.JF[A1],implicitevidence$2:Manifest[A1]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat22", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21], arg42: JF[A22], arg43: Manifest[A22]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat22", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat22[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitevidence$463:UnionFormats.this.JF[A1],implicitevidence$464:Manifest[A1],implicitevidence$465:UnionFormats.this.JF[A2],implicitevidence$466:Manifest[A2],implicitevidence$467:UnionFormats.this.JF[A3],implicitevidence$468:Manifest[A3],implicitevidence$469:UnionFormats.this.JF[A4],implicitevidence$470:Manifest[A4],implicitevidence$471:UnionFormats.this.JF[A5],implicitevidence$472:Manifest[A5],implicitevidence$473:UnionFormats.this.JF[A6],implicitevidence$474:Manifest[A6],implicitevidence$475:UnionFormats.this.JF[A7],implicitevidence$476:Manifest[A7],implicitevidence$477:UnionFormats.this.JF[A8],implicitevidence$478:Manifest[A8],implicitevidence$479:UnionFormats.this.JF[A9],implicitevidence$480:Manifest[A9],implicitevidence$481:UnionFormats.this.JF[A10],implicitevidence$482:Manifest[A10],implicitevidence$483:UnionFormats.this.JF[A11],implicitevidence$484:Manifest[A11],implicitevidence$485:UnionFormats.this.JF[A12],implicitevidence$486:Manifest[A12],implicitevidence$487:UnionFormats.this.JF[A13],implicitevidence$488:Manifest[A13],implicitevidence$489:UnionFormats.this.JF[A14],implicitevidence$490:Manifest[A14],implicitevidence$491:UnionFormats.this.JF[A15],implicitevidence$492:Manifest[A15],implicitevidence$493:UnionFormats.this.JF[A16],implicitevidence$494:Manifest[A16],implicitevidence$495:UnionFormats.this.JF[A17],implicitevidence$496:Manifest[A17],implicitevidence$497:UnionFormats.this.JF[A18],implicitevidence$498:Manifest[A18],implicitevidence$499:UnionFormats.this.JF[A19],implicitevidence$500:Manifest[A19],implicitevidence$501:UnionFormats.this.JF[A20],implicitevidence$502:Manifest[A20],implicitevidence$503:UnionFormats.this.JF[A21],implicitevidence$504:Manifest[A21],implicitevidence$505:UnionFormats.this.JF[A22],implicitevidence$506:Manifest[A22]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat21", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat21", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat21[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitevidence$421:UnionFormats.this.JF[A1],implicitevidence$422:Manifest[A1],implicitevidence$423:UnionFormats.this.JF[A2],implicitevidence$424:Manifest[A2],implicitevidence$425:UnionFormats.this.JF[A3],implicitevidence$426:Manifest[A3],implicitevidence$427:UnionFormats.this.JF[A4],implicitevidence$428:Manifest[A4],implicitevidence$429:UnionFormats.this.JF[A5],implicitevidence$430:Manifest[A5],implicitevidence$431:UnionFormats.this.JF[A6],implicitevidence$432:Manifest[A6],implicitevidence$433:UnionFormats.this.JF[A7],implicitevidence$434:Manifest[A7],implicitevidence$435:UnionFormats.this.JF[A8],implicitevidence$436:Manifest[A8],implicitevidence$437:UnionFormats.this.JF[A9],implicitevidence$438:Manifest[A9],implicitevidence$439:UnionFormats.this.JF[A10],implicitevidence$440:Manifest[A10],implicitevidence$441:UnionFormats.this.JF[A11],implicitevidence$442:Manifest[A11],implicitevidence$443:UnionFormats.this.JF[A12],implicitevidence$444:Manifest[A12],implicitevidence$445:UnionFormats.this.JF[A13],implicitevidence$446:Manifest[A13],implicitevidence$447:UnionFormats.this.JF[A14],implicitevidence$448:Manifest[A14],implicitevidence$449:UnionFormats.this.JF[A15],implicitevidence$450:Manifest[A15],implicitevidence$451:UnionFormats.this.JF[A16],implicitevidence$452:Manifest[A16],implicitevidence$453:UnionFormats.this.JF[A17],implicitevidence$454:Manifest[A17],implicitevidence$455:UnionFormats.this.JF[A18],implicitevidence$456:Manifest[A18],implicitevidence$457:UnionFormats.this.JF[A19],implicitevidence$458:Manifest[A19],implicitevidence$459:UnionFormats.this.JF[A20],implicitevidence$460:Manifest[A20],implicitevidence$461:UnionFormats.this.JF[A21],implicitevidence$462:Manifest[A21]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat20", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat20", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat20[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitevidence$381:UnionFormats.this.JF[A1],implicitevidence$382:Manifest[A1],implicitevidence$383:UnionFormats.this.JF[A2],implicitevidence$384:Manifest[A2],implicitevidence$385:UnionFormats.this.JF[A3],implicitevidence$386:Manifest[A3],implicitevidence$387:UnionFormats.this.JF[A4],implicitevidence$388:Manifest[A4],implicitevidence$389:UnionFormats.this.JF[A5],implicitevidence$390:Manifest[A5],implicitevidence$391:UnionFormats.this.JF[A6],implicitevidence$392:Manifest[A6],implicitevidence$393:UnionFormats.this.JF[A7],implicitevidence$394:Manifest[A7],implicitevidence$395:UnionFormats.this.JF[A8],implicitevidence$396:Manifest[A8],implicitevidence$397:UnionFormats.this.JF[A9],implicitevidence$398:Manifest[A9],implicitevidence$399:UnionFormats.this.JF[A10],implicitevidence$400:Manifest[A10],implicitevidence$401:UnionFormats.this.JF[A11],implicitevidence$402:Manifest[A11],implicitevidence$403:UnionFormats.this.JF[A12],implicitevidence$404:Manifest[A12],implicitevidence$405:UnionFormats.this.JF[A13],implicitevidence$406:Manifest[A13],implicitevidence$407:UnionFormats.this.JF[A14],implicitevidence$408:Manifest[A14],implicitevidence$409:UnionFormats.this.JF[A15],implicitevidence$410:Manifest[A15],implicitevidence$411:UnionFormats.this.JF[A16],implicitevidence$412:Manifest[A16],implicitevidence$413:UnionFormats.this.JF[A17],implicitevidence$414:Manifest[A17],implicitevidence$415:UnionFormats.this.JF[A18],implicitevidence$416:Manifest[A18],implicitevidence$417:UnionFormats.this.JF[A19],implicitevidence$418:Manifest[A19],implicitevidence$419:UnionFormats.this.JF[A20],implicitevidence$420:Manifest[A20]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat19", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat19", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat19[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitevidence$343:UnionFormats.this.JF[A1],implicitevidence$344:Manifest[A1],implicitevidence$345:UnionFormats.this.JF[A2],implicitevidence$346:Manifest[A2],implicitevidence$347:UnionFormats.this.JF[A3],implicitevidence$348:Manifest[A3],implicitevidence$349:UnionFormats.this.JF[A4],implicitevidence$350:Manifest[A4],implicitevidence$351:UnionFormats.this.JF[A5],implicitevidence$352:Manifest[A5],implicitevidence$353:UnionFormats.this.JF[A6],implicitevidence$354:Manifest[A6],implicitevidence$355:UnionFormats.this.JF[A7],implicitevidence$356:Manifest[A7],implicitevidence$357:UnionFormats.this.JF[A8],implicitevidence$358:Manifest[A8],implicitevidence$359:UnionFormats.this.JF[A9],implicitevidence$360:Manifest[A9],implicitevidence$361:UnionFormats.this.JF[A10],implicitevidence$362:Manifest[A10],implicitevidence$363:UnionFormats.this.JF[A11],implicitevidence$364:Manifest[A11],implicitevidence$365:UnionFormats.this.JF[A12],implicitevidence$366:Manifest[A12],implicitevidence$367:UnionFormats.this.JF[A13],implicitevidence$368:Manifest[A13],implicitevidence$369:UnionFormats.this.JF[A14],implicitevidence$370:Manifest[A14],implicitevidence$371:UnionFormats.this.JF[A15],implicitevidence$372:Manifest[A15],implicitevidence$373:UnionFormats.this.JF[A16],implicitevidence$374:Manifest[A16],implicitevidence$375:UnionFormats.this.JF[A17],implicitevidence$376:Manifest[A17],implicitevidence$377:UnionFormats.this.JF[A18],implicitevidence$378:Manifest[A18],implicitevidence$379:UnionFormats.this.JF[A19],implicitevidence$380:Manifest[A19]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat18", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat18", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat18[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitevidence$307:UnionFormats.this.JF[A1],implicitevidence$308:Manifest[A1],implicitevidence$309:UnionFormats.this.JF[A2],implicitevidence$310:Manifest[A2],implicitevidence$311:UnionFormats.this.JF[A3],implicitevidence$312:Manifest[A3],implicitevidence$313:UnionFormats.this.JF[A4],implicitevidence$314:Manifest[A4],implicitevidence$315:UnionFormats.this.JF[A5],implicitevidence$316:Manifest[A5],implicitevidence$317:UnionFormats.this.JF[A6],implicitevidence$318:Manifest[A6],implicitevidence$319:UnionFormats.this.JF[A7],implicitevidence$320:Manifest[A7],implicitevidence$321:UnionFormats.this.JF[A8],implicitevidence$322:Manifest[A8],implicitevidence$323:UnionFormats.this.JF[A9],implicitevidence$324:Manifest[A9],implicitevidence$325:UnionFormats.this.JF[A10],implicitevidence$326:Manifest[A10],implicitevidence$327:UnionFormats.this.JF[A11],implicitevidence$328:Manifest[A11],implicitevidence$329:UnionFormats.this.JF[A12],implicitevidence$330:Manifest[A12],implicitevidence$331:UnionFormats.this.JF[A13],implicitevidence$332:Manifest[A13],implicitevidence$333:UnionFormats.this.JF[A14],implicitevidence$334:Manifest[A14],implicitevidence$335:UnionFormats.this.JF[A15],implicitevidence$336:Manifest[A15],implicitevidence$337:UnionFormats.this.JF[A16],implicitevidence$338:Manifest[A16],implicitevidence$339:UnionFormats.this.JF[A17],implicitevidence$340:Manifest[A17],implicitevidence$341:UnionFormats.this.JF[A18],implicitevidence$342:Manifest[A18]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat17", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat17", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat17[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitevidence$273:UnionFormats.this.JF[A1],implicitevidence$274:Manifest[A1],implicitevidence$275:UnionFormats.this.JF[A2],implicitevidence$276:Manifest[A2],implicitevidence$277:UnionFormats.this.JF[A3],implicitevidence$278:Manifest[A3],implicitevidence$279:UnionFormats.this.JF[A4],implicitevidence$280:Manifest[A4],implicitevidence$281:UnionFormats.this.JF[A5],implicitevidence$282:Manifest[A5],implicitevidence$283:UnionFormats.this.JF[A6],implicitevidence$284:Manifest[A6],implicitevidence$285:UnionFormats.this.JF[A7],implicitevidence$286:Manifest[A7],implicitevidence$287:UnionFormats.this.JF[A8],implicitevidence$288:Manifest[A8],implicitevidence$289:UnionFormats.this.JF[A9],implicitevidence$290:Manifest[A9],implicitevidence$291:UnionFormats.this.JF[A10],implicitevidence$292:Manifest[A10],implicitevidence$293:UnionFormats.this.JF[A11],implicitevidence$294:Manifest[A11],implicitevidence$295:UnionFormats.this.JF[A12],implicitevidence$296:Manifest[A12],implicitevidence$297:UnionFormats.this.JF[A13],implicitevidence$298:Manifest[A13],implicitevidence$299:UnionFormats.this.JF[A14],implicitevidence$300:Manifest[A14],implicitevidence$301:UnionFormats.this.JF[A15],implicitevidence$302:Manifest[A15],implicitevidence$303:UnionFormats.this.JF[A16],implicitevidence$304:Manifest[A16],implicitevidence$305:UnionFormats.this.JF[A17],implicitevidence$306:Manifest[A17]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat16", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat16", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat16[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitevidence$241:UnionFormats.this.JF[A1],implicitevidence$242:Manifest[A1],implicitevidence$243:UnionFormats.this.JF[A2],implicitevidence$244:Manifest[A2],implicitevidence$245:UnionFormats.this.JF[A3],implicitevidence$246:Manifest[A3],implicitevidence$247:UnionFormats.this.JF[A4],implicitevidence$248:Manifest[A4],implicitevidence$249:UnionFormats.this.JF[A5],implicitevidence$250:Manifest[A5],implicitevidence$251:UnionFormats.this.JF[A6],implicitevidence$252:Manifest[A6],implicitevidence$253:UnionFormats.this.JF[A7],implicitevidence$254:Manifest[A7],implicitevidence$255:UnionFormats.this.JF[A8],implicitevidence$256:Manifest[A8],implicitevidence$257:UnionFormats.this.JF[A9],implicitevidence$258:Manifest[A9],implicitevidence$259:UnionFormats.this.JF[A10],implicitevidence$260:Manifest[A10],implicitevidence$261:UnionFormats.this.JF[A11],implicitevidence$262:Manifest[A11],implicitevidence$263:UnionFormats.this.JF[A12],implicitevidence$264:Manifest[A12],implicitevidence$265:UnionFormats.this.JF[A13],implicitevidence$266:Manifest[A13],implicitevidence$267:UnionFormats.this.JF[A14],implicitevidence$268:Manifest[A14],implicitevidence$269:UnionFormats.this.JF[A15],implicitevidence$270:Manifest[A15],implicitevidence$271:UnionFormats.this.JF[A16],implicitevidence$272:Manifest[A16]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat15", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat15", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat15[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitevidence$211:UnionFormats.this.JF[A1],implicitevidence$212:Manifest[A1],implicitevidence$213:UnionFormats.this.JF[A2],implicitevidence$214:Manifest[A2],implicitevidence$215:UnionFormats.this.JF[A3],implicitevidence$216:Manifest[A3],implicitevidence$217:UnionFormats.this.JF[A4],implicitevidence$218:Manifest[A4],implicitevidence$219:UnionFormats.this.JF[A5],implicitevidence$220:Manifest[A5],implicitevidence$221:UnionFormats.this.JF[A6],implicitevidence$222:Manifest[A6],implicitevidence$223:UnionFormats.this.JF[A7],implicitevidence$224:Manifest[A7],implicitevidence$225:UnionFormats.this.JF[A8],implicitevidence$226:Manifest[A8],implicitevidence$227:UnionFormats.this.JF[A9],implicitevidence$228:Manifest[A9],implicitevidence$229:UnionFormats.this.JF[A10],implicitevidence$230:Manifest[A10],implicitevidence$231:UnionFormats.this.JF[A11],implicitevidence$232:Manifest[A11],implicitevidence$233:UnionFormats.this.JF[A12],implicitevidence$234:Manifest[A12],implicitevidence$235:UnionFormats.this.JF[A13],implicitevidence$236:Manifest[A13],implicitevidence$237:UnionFormats.this.JF[A14],implicitevidence$238:Manifest[A14],implicitevidence$239:UnionFormats.this.JF[A15],implicitevidence$240:Manifest[A15]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat14", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat14", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat14[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitevidence$183:UnionFormats.this.JF[A1],implicitevidence$184:Manifest[A1],implicitevidence$185:UnionFormats.this.JF[A2],implicitevidence$186:Manifest[A2],implicitevidence$187:UnionFormats.this.JF[A3],implicitevidence$188:Manifest[A3],implicitevidence$189:UnionFormats.this.JF[A4],implicitevidence$190:Manifest[A4],implicitevidence$191:UnionFormats.this.JF[A5],implicitevidence$192:Manifest[A5],implicitevidence$193:UnionFormats.this.JF[A6],implicitevidence$194:Manifest[A6],implicitevidence$195:UnionFormats.this.JF[A7],implicitevidence$196:Manifest[A7],implicitevidence$197:UnionFormats.this.JF[A8],implicitevidence$198:Manifest[A8],implicitevidence$199:UnionFormats.this.JF[A9],implicitevidence$200:Manifest[A9],implicitevidence$201:UnionFormats.this.JF[A10],implicitevidence$202:Manifest[A10],implicitevidence$203:UnionFormats.this.JF[A11],implicitevidence$204:Manifest[A11],implicitevidence$205:UnionFormats.this.JF[A12],implicitevidence$206:Manifest[A12],implicitevidence$207:UnionFormats.this.JF[A13],implicitevidence$208:Manifest[A13],implicitevidence$209:UnionFormats.this.JF[A14],implicitevidence$210:Manifest[A14]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat13", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat13", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat13[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitevidence$157:UnionFormats.this.JF[A1],implicitevidence$158:Manifest[A1],implicitevidence$159:UnionFormats.this.JF[A2],implicitevidence$160:Manifest[A2],implicitevidence$161:UnionFormats.this.JF[A3],implicitevidence$162:Manifest[A3],implicitevidence$163:UnionFormats.this.JF[A4],implicitevidence$164:Manifest[A4],implicitevidence$165:UnionFormats.this.JF[A5],implicitevidence$166:Manifest[A5],implicitevidence$167:UnionFormats.this.JF[A6],implicitevidence$168:Manifest[A6],implicitevidence$169:UnionFormats.this.JF[A7],implicitevidence$170:Manifest[A7],implicitevidence$171:UnionFormats.this.JF[A8],implicitevidence$172:Manifest[A8],implicitevidence$173:UnionFormats.this.JF[A9],implicitevidence$174:Manifest[A9],implicitevidence$175:UnionFormats.this.JF[A10],implicitevidence$176:Manifest[A10],implicitevidence$177:UnionFormats.this.JF[A11],implicitevidence$178:Manifest[A11],implicitevidence$179:UnionFormats.this.JF[A12],implicitevidence$180:Manifest[A12],implicitevidence$181:UnionFormats.this.JF[A13],implicitevidence$182:Manifest[A13]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat12", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat12", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat12[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitevidence$133:UnionFormats.this.JF[A1],implicitevidence$134:Manifest[A1],implicitevidence$135:UnionFormats.this.JF[A2],implicitevidence$136:Manifest[A2],implicitevidence$137:UnionFormats.this.JF[A3],implicitevidence$138:Manifest[A3],implicitevidence$139:UnionFormats.this.JF[A4],implicitevidence$140:Manifest[A4],implicitevidence$141:UnionFormats.this.JF[A5],implicitevidence$142:Manifest[A5],implicitevidence$143:UnionFormats.this.JF[A6],implicitevidence$144:Manifest[A6],implicitevidence$145:UnionFormats.this.JF[A7],implicitevidence$146:Manifest[A7],implicitevidence$147:UnionFormats.this.JF[A8],implicitevidence$148:Manifest[A8],implicitevidence$149:UnionFormats.this.JF[A9],implicitevidence$150:Manifest[A9],implicitevidence$151:UnionFormats.this.JF[A10],implicitevidence$152:Manifest[A10],implicitevidence$153:UnionFormats.this.JF[A11],implicitevidence$154:Manifest[A11],implicitevidence$155:UnionFormats.this.JF[A12],implicitevidence$156:Manifest[A12]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat11", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat11", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat11[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitevidence$111:UnionFormats.this.JF[A1],implicitevidence$112:Manifest[A1],implicitevidence$113:UnionFormats.this.JF[A2],implicitevidence$114:Manifest[A2],implicitevidence$115:UnionFormats.this.JF[A3],implicitevidence$116:Manifest[A3],implicitevidence$117:UnionFormats.this.JF[A4],implicitevidence$118:Manifest[A4],implicitevidence$119:UnionFormats.this.JF[A5],implicitevidence$120:Manifest[A5],implicitevidence$121:UnionFormats.this.JF[A6],implicitevidence$122:Manifest[A6],implicitevidence$123:UnionFormats.this.JF[A7],implicitevidence$124:Manifest[A7],implicitevidence$125:UnionFormats.this.JF[A8],implicitevidence$126:Manifest[A8],implicitevidence$127:UnionFormats.this.JF[A9],implicitevidence$128:Manifest[A9],implicitevidence$129:UnionFormats.this.JF[A10],implicitevidence$130:Manifest[A10],implicitevidence$131:UnionFormats.this.JF[A11],implicitevidence$132:Manifest[A11]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat10", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat10", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat10[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitevidence$91:UnionFormats.this.JF[A1],implicitevidence$92:Manifest[A1],implicitevidence$93:UnionFormats.this.JF[A2],implicitevidence$94:Manifest[A2],implicitevidence$95:UnionFormats.this.JF[A3],implicitevidence$96:Manifest[A3],implicitevidence$97:UnionFormats.this.JF[A4],implicitevidence$98:Manifest[A4],implicitevidence$99:UnionFormats.this.JF[A5],implicitevidence$100:Manifest[A5],implicitevidence$101:UnionFormats.this.JF[A6],implicitevidence$102:Manifest[A6],implicitevidence$103:UnionFormats.this.JF[A7],implicitevidence$104:Manifest[A7],implicitevidence$105:UnionFormats.this.JF[A8],implicitevidence$106:Manifest[A8],implicitevidence$107:UnionFormats.this.JF[A9],implicitevidence$108:Manifest[A9],implicitevidence$109:UnionFormats.this.JF[A10],implicitevidence$110:Manifest[A10]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat9", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat9", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat9[U,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitevidence$73:UnionFormats.this.JF[A1],implicitevidence$74:Manifest[A1],implicitevidence$75:UnionFormats.this.JF[A2],implicitevidence$76:Manifest[A2],implicitevidence$77:UnionFormats.this.JF[A3],implicitevidence$78:Manifest[A3],implicitevidence$79:UnionFormats.this.JF[A4],implicitevidence$80:Manifest[A4],implicitevidence$81:UnionFormats.this.JF[A5],implicitevidence$82:Manifest[A5],implicitevidence$83:UnionFormats.this.JF[A6],implicitevidence$84:Manifest[A6],implicitevidence$85:UnionFormats.this.JF[A7],implicitevidence$86:Manifest[A7],implicitevidence$87:UnionFormats.this.JF[A8],implicitevidence$88:Manifest[A8],implicitevidence$89:UnionFormats.this.JF[A9],implicitevidence$90:Manifest[A9]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat8", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat8", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat8[U,A1,A2,A3,A4,A5,A6,A7,A8](implicitevidence$57:UnionFormats.this.JF[A1],implicitevidence$58:Manifest[A1],implicitevidence$59:UnionFormats.this.JF[A2],implicitevidence$60:Manifest[A2],implicitevidence$61:UnionFormats.this.JF[A3],implicitevidence$62:Manifest[A3],implicitevidence$63:UnionFormats.this.JF[A4],implicitevidence$64:Manifest[A4],implicitevidence$65:UnionFormats.this.JF[A5],implicitevidence$66:Manifest[A5],implicitevidence$67:UnionFormats.this.JF[A6],implicitevidence$68:Manifest[A6],implicitevidence$69:UnionFormats.this.JF[A7],implicitevidence$70:Manifest[A7],implicitevidence$71:UnionFormats.this.JF[A8],implicitevidence$72:Manifest[A8]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat7", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat7", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat7[U,A1,A2,A3,A4,A5,A6,A7](implicitevidence$43:UnionFormats.this.JF[A1],implicitevidence$44:Manifest[A1],implicitevidence$45:UnionFormats.this.JF[A2],implicitevidence$46:Manifest[A2],implicitevidence$47:UnionFormats.this.JF[A3],implicitevidence$48:Manifest[A3],implicitevidence$49:UnionFormats.this.JF[A4],implicitevidence$50:Manifest[A4],implicitevidence$51:UnionFormats.this.JF[A5],implicitevidence$52:Manifest[A5],implicitevidence$53:UnionFormats.this.JF[A6],implicitevidence$54:Manifest[A6],implicitevidence$55:UnionFormats.this.JF[A7],implicitevidence$56:Manifest[A7]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat6", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat6", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat6[U,A1,A2,A3,A4,A5,A6](implicitevidence$31:UnionFormats.this.JF[A1],implicitevidence$32:Manifest[A1],implicitevidence$33:UnionFormats.this.JF[A2],implicitevidence$34:Manifest[A2],implicitevidence$35:UnionFormats.this.JF[A3],implicitevidence$36:Manifest[A3],implicitevidence$37:UnionFormats.this.JF[A4],implicitevidence$38:Manifest[A4],implicitevidence$39:UnionFormats.this.JF[A5],implicitevidence$40:Manifest[A5],implicitevidence$41:UnionFormats.this.JF[A6],implicitevidence$42:Manifest[A6]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat5", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat5", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat5[U,A1,A2,A3,A4,A5](implicitevidence$21:UnionFormats.this.JF[A1],implicitevidence$22:Manifest[A1],implicitevidence$23:UnionFormats.this.JF[A2],implicitevidence$24:Manifest[A2],implicitevidence$25:UnionFormats.this.JF[A3],implicitevidence$26:Manifest[A3],implicitevidence$27:UnionFormats.this.JF[A4],implicitevidence$28:Manifest[A4],implicitevidence$29:UnionFormats.this.JF[A5],implicitevidence$30:Manifest[A5]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat4", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat4", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat4[U,A1,A2,A3,A4](implicitevidence$13:UnionFormats.this.JF[A1],implicitevidence$14:Manifest[A1],implicitevidence$15:UnionFormats.this.JF[A2],implicitevidence$16:Manifest[A2],implicitevidence$17:UnionFormats.this.JF[A3],implicitevidence$18:Manifest[A3],implicitevidence$19:UnionFormats.this.JF[A4],implicitevidence$20:Manifest[A4]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat3", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat3", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat3[U,A1,A2,A3](implicitevidence$7:UnionFormats.this.JF[A1],implicitevidence$8:Manifest[A1],implicitevidence$9:UnionFormats.this.JF[A2],implicitevidence$10:Manifest[A2],implicitevidence$11:UnionFormats.this.JF[A3],implicitevidence$12:Manifest[A3]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat2", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat2", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat2[U,A1,A2](implicitevidence$3:UnionFormats.this.JF[A1],implicitevidence$4:Manifest[A1],implicitevidence$5:UnionFormats.this.JF[A2],implicitevidence$6:Manifest[A2]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat1", "tail" : "(arg0: JF[A1], arg1: Manifest[A1]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat1", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#unionFormat1[U,A1](implicitevidence$1:UnionFormats.this.JF[A1],implicitevidence$2:Manifest[A1]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "contramapKeyWriter", "tail" : "(f: (B) ⇒ A)(ev: JsonKeyWriter[A]): JsonKeyWriter[B]", "member" : "sjsonnew.AdditionalFormats.contramapKeyWriter", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#contramapKeyWriter[A,B](f:B=>A)(implicitev:sjsonnew.JsonKeyWriter[A]):sjsonnew.JsonKeyWriter[B]", "kind" : "def"}, {"label" : "mapKeyReader", "tail" : "(f: (A) ⇒ B)(ev: JsonKeyReader[A]): JsonKeyReader[B]", "member" : "sjsonnew.AdditionalFormats.mapKeyReader", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#mapKeyReader[A,B](f:A=>B)(implicitev:sjsonnew.JsonKeyReader[A]):sjsonnew.JsonKeyReader[B]", "kind" : "def"}, {"label" : "contramapWriter", "tail" : "(f: (B) ⇒ A)(ev: JsonWriter[A]): JsonWriter[B]", "member" : "sjsonnew.AdditionalFormats.contramapWriter", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#contramapWriter[A,B](f:B=>A)(implicitev:sjsonnew.JsonWriter[A]):sjsonnew.JsonWriter[B]", "kind" : "def"}, {"label" : "mapReader", "tail" : "(f: (A) ⇒ B)(ev: JsonReader[A]): JsonReader[B]", "member" : "sjsonnew.AdditionalFormats.mapReader", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#mapReader[A,B](f:A=>B)(implicitev:sjsonnew.JsonReader[A]):sjsonnew.JsonReader[B]", "kind" : "def"}, {"label" : "projectFormat", "tail" : "(f1: (T) ⇒ U, f2: (U) ⇒ T)(fu: JsonFormat[U]): JsonFormat[T]", "member" : "sjsonnew.AdditionalFormats.projectFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#projectFormat[T,U](f1:T=>U,f2:U=>T)(implicitfu:sjsonnew.JsonFormat[U]):sjsonnew.JsonFormat[T]", "kind" : "def"}, {"label" : "asSingleton", "tail" : "(a: A): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.asSingleton", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#asSingleton[A](a:A):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "safeReader", "tail" : "(arg0: JsonReader[A]): JsonReader[Either[Exception, A]]", "member" : "sjsonnew.AdditionalFormats.safeReader", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#safeReader[A](implicitevidence$1:sjsonnew.JsonReader[A]):sjsonnew.JsonReader[Either[Exception,A]]", "kind" : "def"}, {"label" : "lazyFormat", "tail" : "(format: ⇒ JsonFormat[A]): JsonFormat[A] { lazy val delegate: sjsonnew.JsonFormat[A] }", "member" : "sjsonnew.AdditionalFormats.lazyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#lazyFormat[A](format:=>sjsonnew.JsonFormat[A]):sjsonnew.JsonFormat[A]{lazyvaldelegate:sjsonnew.JsonFormat[A]}", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(reader: RootJsonReader[A]): RootJsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#liftFormat[A<:AnyRef](reader:sjsonnew.RootJsonReader[A]):sjsonnew.RootJsonFormat[A]", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(reader: JsonReader[A]): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#liftFormat[A<:AnyRef](reader:sjsonnew.JsonReader[A]):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(writer: RootJsonWriter[A]): RootJsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#liftFormat[A](writer:sjsonnew.RootJsonWriter[A]):sjsonnew.RootJsonFormat[A]", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(writer: JsonWriter[A]): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#liftFormat[A](writer:sjsonnew.JsonWriter[A]):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "rootFormat", "tail" : "(format: JsonFormat[A]): RootJsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.rootFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#rootFormat[A](format:sjsonnew.JsonFormat[A]):sjsonnew.RootJsonFormat[A]", "kind" : "def"}, {"label" : "rootJsonFormat", "tail" : "(reader: RootJsonReader[T], writer: RootJsonWriter[T]): RootJsonFormat[T]", "member" : "sjsonnew.AdditionalFormats.rootJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#rootJsonFormat[T](reader:sjsonnew.RootJsonReader[T],writer:sjsonnew.RootJsonWriter[T]):sjsonnew.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(reader: JsonReader[A], writer: JsonWriter[A]): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.jsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#jsonFormat[A](reader:sjsonnew.JsonReader[A],writer:sjsonnew.JsonWriter[A]):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "viaSeq", "tail" : "(f: (Seq[A]) ⇒ I)(arg0: JsonFormat[A]): RootJsonFormat[I]", "member" : "sjsonnew.CollectionFormats.viaSeq", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#viaSeq[I<:Iterable[A],A](f:scala.collection.immutable.Seq[A]=>I)(implicitevidence$17:sjsonnew.JsonFormat[A]):sjsonnew.RootJsonFormat[I]", "kind" : "def"}, {"label" : "setFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "sjsonnew.CollectionFormats.setFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#setFormat[T](implicitevidence$16:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.Set[T]]", "kind" : "implicit def"}, {"label" : "linearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "sjsonnew.CollectionFormats.linearSeqFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#linearSeqFormat[T](implicitevidence$15:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "indexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "sjsonnew.CollectionFormats.indexedSeqFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#indexedSeqFormat[T](implicitevidence$14:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "seqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "sjsonnew.CollectionFormats.seqFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#seqFormat[T](implicitevidence$13:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[Seq[T]]", "kind" : "implicit def"}, {"label" : "iterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "sjsonnew.CollectionFormats.iterableFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#iterableFormat[T](implicitevidence$12:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[Iterable[T]]", "kind" : "implicit def"}, {"label" : "vectorFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Vector[T]]", "member" : "sjsonnew.CollectionFormats.vectorFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#vectorFormat[T](implicitevidence$11:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[Vector[T]]", "kind" : "implicit def"}, {"label" : "immSetFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "sjsonnew.CollectionFormats.immSetFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#immSetFormat[T](implicitevidence$10:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.Set[T]]", "kind" : "implicit def"}, {"label" : "immLinearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "sjsonnew.CollectionFormats.immLinearSeqFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#immLinearSeqFormat[T](implicitevidence$9:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "immIndexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "sjsonnew.CollectionFormats.immIndexedSeqFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#immIndexedSeqFormat[T](implicitevidence$8:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "immSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "sjsonnew.CollectionFormats.immSeqFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#immSeqFormat[T](implicitevidence$7:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.Seq[T]]", "kind" : "implicit def"}, {"label" : "immIterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "sjsonnew.CollectionFormats.immIterableFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#immIterableFormat[T](implicitevidence$6:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.Iterable[T]]", "kind" : "implicit def"}, {"label" : "mapFormat", "tail" : "(arg0: JsonKeyFormat[K], arg1: JsonFormat[V]): RootJsonFormat[Map[K, V]]", "member" : "sjsonnew.CollectionFormats.mapFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#mapFormat[K,V](implicitevidence$4:sjsonnew.JsonKeyFormat[K],implicitevidence$5:sjsonnew.JsonFormat[V]):sjsonnew.RootJsonFormat[Map[K,V]]", "kind" : "implicit def"}, {"label" : "arrayFormat", "tail" : "(arg0: JsonFormat[A], arg1: ClassTag[A]): RootJsonFormat[Array[A]]", "member" : "sjsonnew.CollectionFormats.arrayFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#arrayFormat[A](implicitevidence$2:sjsonnew.JsonFormat[A],implicitevidence$3:scala.reflect.ClassTag[A]):sjsonnew.RootJsonFormat[Array[A]]", "kind" : "implicit def"}, {"label" : "listFormat", "tail" : "(arg0: JsonFormat[A]): RootJsonFormat[List[A]]", "member" : "sjsonnew.CollectionFormats.listFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#listFormat[A](implicitevidence$1:sjsonnew.JsonFormat[A]):sjsonnew.RootJsonFormat[List[A]]", "kind" : "implicit def"}, {"label" : "tuple22Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], A22: JF[A22]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]", "member" : "sjsonnew.TupleFormats.tuple22Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple22Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19],implicitA20:TupleFormats.this.JF[A20],implicitA21:TupleFormats.this.JF[A21],implicitA22:TupleFormats.this.JF[A22]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]", "kind" : "implicit def"}, {"label" : "tuple21Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "sjsonnew.TupleFormats.tuple21Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple21Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19],implicitA20:TupleFormats.this.JF[A20],implicitA21:TupleFormats.this.JF[A21]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tuple20Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "sjsonnew.TupleFormats.tuple20Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple20Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19],implicitA20:TupleFormats.this.JF[A20]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tuple19Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "sjsonnew.TupleFormats.tuple19Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple19Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tuple18Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "sjsonnew.TupleFormats.tuple18Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple18Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tuple17Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "sjsonnew.TupleFormats.tuple17Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple17Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tuple16Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "sjsonnew.TupleFormats.tuple16Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple16Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tuple15Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "sjsonnew.TupleFormats.tuple15Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple15Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tuple14Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "sjsonnew.TupleFormats.tuple14Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple14Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tuple13Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "sjsonnew.TupleFormats.tuple13Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple13Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tuple12Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "sjsonnew.TupleFormats.tuple12Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple12Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tuple11Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "sjsonnew.TupleFormats.tuple11Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple11Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tuple10Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "sjsonnew.TupleFormats.tuple10Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple10Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tuple9Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "sjsonnew.TupleFormats.tuple9Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple9Format[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tuple8Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8]): JF[(A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "sjsonnew.TupleFormats.tuple8Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple8Format[A1,A2,A3,A4,A5,A6,A7,A8](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tuple7Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7]): JF[(A1, A2, A3, A4, A5, A6, A7)]", "member" : "sjsonnew.TupleFormats.tuple7Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple7Format[A1,A2,A3,A4,A5,A6,A7](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tuple6Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6]): JF[(A1, A2, A3, A4, A5, A6)]", "member" : "sjsonnew.TupleFormats.tuple6Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple6Format[A1,A2,A3,A4,A5,A6](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tuple5Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5]): JF[(A1, A2, A3, A4, A5)]", "member" : "sjsonnew.TupleFormats.tuple5Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple5Format[A1,A2,A3,A4,A5](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5]):TupleFormats.this.JF[(A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tuple4Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4]): JF[(A1, A2, A3, A4)]", "member" : "sjsonnew.TupleFormats.tuple4Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple4Format[A1,A2,A3,A4](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4]):TupleFormats.this.JF[(A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tuple3Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3]): JF[(A1, A2, A3)]", "member" : "sjsonnew.TupleFormats.tuple3Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple3Format[A1,A2,A3](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3]):TupleFormats.this.JF[(A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tuple2Format", "tail" : "(A1: JF[A1], A2: JF[A2]): JF[(A1, A2)]", "member" : "sjsonnew.TupleFormats.tuple2Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple2Format[A1,A2](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2]):TupleFormats.this.JF[(A1,A2)]", "kind" : "implicit def"}, {"label" : "tuple1Format", "tail" : "(A1: JF[A1]): JF[(A1)]", "member" : "sjsonnew.TupleFormats.tuple1Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#tuple1Format[A1](implicitA1:TupleFormats.this.JF[A1]):TupleFormats.this.JF[(A1,)]", "kind" : "implicit def"}, {"label" : "eitherFormat", "tail" : "(arg0: JF[A], arg1: JF[B]): JF[Either[A, B]] { ... \/* 2 definitions in type refinement *\/ }", "member" : "sjsonnew.StandardFormats.eitherFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#eitherFormat[A,B](implicitevidence$3:StandardFormats.this.JF[A],implicitevidence$4:StandardFormats.this.JF[B]):StandardFormats.this.JF[Either[A,B]]{lazyvalleftFormat:StandardFormats.this.JF[A];lazyvalrightFormat:StandardFormats.this.JF[B]}", "kind" : "implicit def"}, {"label" : "optionFormat", "tail" : "(arg0: JF[A]): JF[Option[A]]", "member" : "sjsonnew.StandardFormats.optionFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#optionFormat[A](implicitevidence$1:StandardFormats.this.JF[A]):StandardFormats.this.JF[Option[A]]", "kind" : "implicit def"}, {"label" : "BigIntJsonKeyFormat", "tail" : ": JsonKeyFormat[BigInt]", "member" : "sjsonnew.PrimitiveFormats.BigIntJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#BigIntJsonKeyFormat:sjsonnew.JsonKeyFormat[BigInt]", "kind" : "implicit val"}, {"label" : "BigDecimalJsonKeyFormat", "tail" : ": JsonKeyFormat[BigDecimal]", "member" : "sjsonnew.PrimitiveFormats.BigDecimalJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#BigDecimalJsonKeyFormat:sjsonnew.JsonKeyFormat[BigDecimal]", "kind" : "implicit val"}, {"label" : "DoubleJsonKeyFormat", "tail" : ": JsonKeyFormat[Double]", "member" : "sjsonnew.PrimitiveFormats.DoubleJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#DoubleJsonKeyFormat:sjsonnew.JsonKeyFormat[Double]", "kind" : "implicit val"}, {"label" : "FloatJsonKeyFormat", "tail" : ": JsonKeyFormat[Float]", "member" : "sjsonnew.PrimitiveFormats.FloatJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#FloatJsonKeyFormat:sjsonnew.JsonKeyFormat[Float]", "kind" : "implicit val"}, {"label" : "LongJsonKeyFormat", "tail" : ": JsonKeyFormat[Long]", "member" : "sjsonnew.PrimitiveFormats.LongJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#LongJsonKeyFormat:sjsonnew.JsonKeyFormat[Long]", "kind" : "implicit val"}, {"label" : "IntJsonKeyFormat", "tail" : ": JsonKeyFormat[Int]", "member" : "sjsonnew.PrimitiveFormats.IntJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#IntJsonKeyFormat:sjsonnew.JsonKeyFormat[Int]", "kind" : "implicit val"}, {"label" : "CharJsonKeyFormat", "tail" : ": JsonKeyFormat[Char]", "member" : "sjsonnew.PrimitiveFormats.CharJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#CharJsonKeyFormat:sjsonnew.JsonKeyFormat[Char]", "kind" : "implicit val"}, {"label" : "ShortJsonKeyFormat", "tail" : ": JsonKeyFormat[Short]", "member" : "sjsonnew.PrimitiveFormats.ShortJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#ShortJsonKeyFormat:sjsonnew.JsonKeyFormat[Short]", "kind" : "implicit val"}, {"label" : "ByteJsonKeyFormat", "tail" : ": JsonKeyFormat[Byte]", "member" : "sjsonnew.PrimitiveFormats.ByteJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#ByteJsonKeyFormat:sjsonnew.JsonKeyFormat[Byte]", "kind" : "implicit val"}, {"label" : "BooleanJsonKeyFormat", "tail" : ": JsonKeyFormat[Boolean]", "member" : "sjsonnew.PrimitiveFormats.BooleanJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#BooleanJsonKeyFormat:sjsonnew.JsonKeyFormat[Boolean]", "kind" : "implicit val"}, {"label" : "UnitJsonKeyFormat", "tail" : ": JsonKeyFormat[Unit]", "member" : "sjsonnew.PrimitiveFormats.UnitJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#UnitJsonKeyFormat:sjsonnew.JsonKeyFormat[Unit]", "kind" : "implicit val"}, {"label" : "SymbolJsonKeyFormat", "tail" : ": JsonKeyFormat[Symbol]", "member" : "sjsonnew.PrimitiveFormats.SymbolJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#SymbolJsonKeyFormat:sjsonnew.JsonKeyFormat[Symbol]", "kind" : "implicit val"}, {"label" : "StringJsonKeyFormat", "tail" : ": JsonKeyFormat[String]", "member" : "sjsonnew.PrimitiveFormats.StringJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#StringJsonKeyFormat:sjsonnew.JsonKeyFormat[String]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html", "members_object" : [{"label" : "StackTraceElementFormat", "tail" : "", "member" : "sjsonnew.ThrowableFormats.StackTraceElementFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#StackTraceElementFormatextendsJsonFormat[StackTraceElement]", "kind" : "final class"}, {"label" : "ThrowableFormat", "tail" : "", "member" : "sjsonnew.ThrowableFormats.ThrowableFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#ThrowableFormatextendsJsonFormat[Throwable]", "kind" : "final class"}, {"label" : "OptionalFormat", "tail" : "", "member" : "sjsonnew.JavaExtraFormats.OptionalFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#OptionalFormat[A]extendsJsonFormat[java.util.Optional[A]]", "kind" : "final class"}, {"label" : "OptionFormat", "tail" : "", "member" : "sjsonnew.StandardFormats.OptionFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#OptionFormat[A]extendsJsonFormat[Option[A]]", "kind" : "final class"}, {"label" : "SymbolJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.SymbolJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#SymbolJsonFormat", "kind" : "implicit object"}, {"label" : "StringJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.StringJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#StringJsonFormat", "kind" : "implicit object"}, {"label" : "CharJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.CharJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#CharJsonFormat", "kind" : "implicit object"}, {"label" : "BooleanJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.BooleanJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#BooleanJsonFormat", "kind" : "implicit object"}, {"label" : "UnitJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.UnitJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#UnitJsonFormat", "kind" : "implicit object"}, {"label" : "BigIntJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.BigIntJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#BigIntJsonFormat", "kind" : "implicit object"}, {"label" : "BigDecimalJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.BigDecimalJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#BigDecimalJsonFormat", "kind" : "implicit object"}, {"label" : "ShortJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.ShortJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#ShortJsonFormat", "kind" : "implicit object"}, {"label" : "ByteJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.ByteJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#ByteJsonFormat", "kind" : "implicit object"}, {"label" : "DoubleJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.DoubleJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#DoubleJsonFormat", "kind" : "implicit object"}, {"label" : "FloatJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.FloatJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#FloatJsonFormat", "kind" : "implicit object"}, {"label" : "LongJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.LongJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#LongJsonFormat", "kind" : "implicit object"}, {"label" : "IntJsonFormat", "tail" : "", "member" : "sjsonnew.PrimitiveFormats.IntJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#IntJsonFormat", "kind" : "implicit object"}, {"label" : "TestMessageFormat", "tail" : ": JsonFormat[TestMessage]", "member" : "sbt.protocol.testing.codec.TestMessageFormats.TestMessageFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#TestMessageFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestMessage]", "kind" : "implicit lazy val"}, {"label" : "TestItemEventFormat", "tail" : ": JsonFormat[TestItemEvent]", "member" : "sbt.protocol.testing.codec.TestItemEventFormats.TestItemEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#TestItemEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestItemEvent]", "kind" : "implicit lazy val"}, {"label" : "TestItemDetailFormat", "tail" : ": JsonFormat[TestItemDetail]", "member" : "sbt.protocol.testing.codec.TestItemDetailFormats.TestItemDetailFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#TestItemDetailFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestItemDetail]", "kind" : "implicit lazy val"}, {"label" : "StatusFormat", "tail" : ": JsonFormat[Status]", "member" : "sbt.internal.testing.StatusFormats.StatusFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#StatusFormat:sjsonnew.JsonFormat[sbt.testing.Status]", "kind" : "implicit lazy val"}, {"label" : "EndTestGroupErrorEventFormat", "tail" : ": JsonFormat[EndTestGroupErrorEvent]", "member" : "sbt.protocol.testing.codec.EndTestGroupErrorEventFormats.EndTestGroupErrorEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#EndTestGroupErrorEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.EndTestGroupErrorEvent]", "kind" : "implicit lazy val"}, {"label" : "EndTestGroupEventFormat", "tail" : ": JsonFormat[EndTestGroupEvent]", "member" : "sbt.protocol.testing.codec.EndTestGroupEventFormats.EndTestGroupEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#EndTestGroupEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.EndTestGroupEvent]", "kind" : "implicit lazy val"}, {"label" : "StartTestGroupEventFormat", "tail" : ": JsonFormat[StartTestGroupEvent]", "member" : "sbt.protocol.testing.codec.StartTestGroupEventFormats.StartTestGroupEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#StartTestGroupEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.StartTestGroupEvent]", "kind" : "implicit lazy val"}, {"label" : "TestCompleteEventFormat", "tail" : ": JsonFormat[TestCompleteEvent]", "member" : "sbt.protocol.testing.codec.TestCompleteEventFormats.TestCompleteEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#TestCompleteEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestCompleteEvent]", "kind" : "implicit lazy val"}, {"label" : "TestResultFormat", "tail" : ": JsonFormat[TestResult]", "member" : "sbt.protocol.testing.codec.TestResultFormats.TestResultFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#TestResultFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestResult]", "kind" : "implicit lazy val"}, {"label" : "TestInitEventFormat", "tail" : ": JsonFormat[TestInitEvent]", "member" : "sbt.protocol.testing.codec.TestInitEventFormats.TestInitEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#TestInitEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestInitEvent]", "kind" : "implicit lazy val"}, {"label" : "TestStringEventFormat", "tail" : ": JsonFormat[TestStringEvent]", "member" : "sbt.protocol.testing.codec.TestStringEventFormats.TestStringEventFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#TestStringEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestStringEvent]", "kind" : "implicit lazy val"}, {"label" : "stackTraceElementFormat", "tail" : ": JF[StackTraceElement]", "member" : "sjsonnew.ThrowableFormats.stackTraceElementFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#stackTraceElementFormat:ThrowableFormats.this.JF[StackTraceElement]", "kind" : "implicit lazy val"}, {"label" : "throwableFormat", "tail" : ": JF[Throwable]", "member" : "sjsonnew.ThrowableFormats.throwableFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#throwableFormat:ThrowableFormats.this.JF[Throwable]", "kind" : "implicit lazy val"}, {"label" : "caseClassArray22", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], A22: JF[A22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray22", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray22[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21],implicitA22:CaseClassFormats.this.JF[A22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass22", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21, key22: K22)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], A22: JF[A22], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19], K20: K[K20], K21: K[K21], K22: K[K22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass22", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass22[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,K22,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21,key22:K22)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21],implicitA22:CaseClassFormats.this.JF[A22],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19],implicitK20:CaseClassFormats.this.K[K20],implicitK21:CaseClassFormats.this.K[K21],implicitK22:CaseClassFormats.this.K[K22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19], arg19: JF[A20], arg20: JF[A21], arg21: JF[A22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$738:CaseClassFormats.this.JF[A1],implicitevidence$739:CaseClassFormats.this.JF[A2],implicitevidence$740:CaseClassFormats.this.JF[A3],implicitevidence$741:CaseClassFormats.this.JF[A4],implicitevidence$742:CaseClassFormats.this.JF[A5],implicitevidence$743:CaseClassFormats.this.JF[A6],implicitevidence$744:CaseClassFormats.this.JF[A7],implicitevidence$745:CaseClassFormats.this.JF[A8],implicitevidence$746:CaseClassFormats.this.JF[A9],implicitevidence$747:CaseClassFormats.this.JF[A10],implicitevidence$748:CaseClassFormats.this.JF[A11],implicitevidence$749:CaseClassFormats.this.JF[A12],implicitevidence$750:CaseClassFormats.this.JF[A13],implicitevidence$751:CaseClassFormats.this.JF[A14],implicitevidence$752:CaseClassFormats.this.JF[A15],implicitevidence$753:CaseClassFormats.this.JF[A16],implicitevidence$754:CaseClassFormats.this.JF[A17],implicitevidence$755:CaseClassFormats.this.JF[A18],implicitevidence$756:CaseClassFormats.this.JF[A19],implicitevidence$757:CaseClassFormats.this.JF[A20],implicitevidence$758:CaseClassFormats.this.JF[A21],implicitevidence$759:CaseClassFormats.this.JF[A22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21, key22: K22)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: K[K20], arg20: K[K21], arg21: K[K22], arg22: JF[A1], arg23: JF[A2], arg24: JF[A3], arg25: JF[A4], arg26: JF[A5], arg27: JF[A6], arg28: JF[A7], arg29: JF[A8], arg30: JF[A9], arg31: JF[A10], arg32: JF[A11], arg33: JF[A12], arg34: JF[A13], arg35: JF[A14], arg36: JF[A15], arg37: JF[A16], arg38: JF[A17], arg39: JF[A18], arg40: JF[A19], arg41: JF[A20], arg42: JF[A21], arg43: JF[A22]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,K22,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21,key22:K22)(implicitevidence$694:CaseClassFormats.this.K[K1],implicitevidence$695:CaseClassFormats.this.K[K2],implicitevidence$696:CaseClassFormats.this.K[K3],implicitevidence$697:CaseClassFormats.this.K[K4],implicitevidence$698:CaseClassFormats.this.K[K5],implicitevidence$699:CaseClassFormats.this.K[K6],implicitevidence$700:CaseClassFormats.this.K[K7],implicitevidence$701:CaseClassFormats.this.K[K8],implicitevidence$702:CaseClassFormats.this.K[K9],implicitevidence$703:CaseClassFormats.this.K[K10],implicitevidence$704:CaseClassFormats.this.K[K11],implicitevidence$705:CaseClassFormats.this.K[K12],implicitevidence$706:CaseClassFormats.this.K[K13],implicitevidence$707:CaseClassFormats.this.K[K14],implicitevidence$708:CaseClassFormats.this.K[K15],implicitevidence$709:CaseClassFormats.this.K[K16],implicitevidence$710:CaseClassFormats.this.K[K17],implicitevidence$711:CaseClassFormats.this.K[K18],implicitevidence$712:CaseClassFormats.this.K[K19],implicitevidence$713:CaseClassFormats.this.K[K20],implicitevidence$714:CaseClassFormats.this.K[K21],implicitevidence$715:CaseClassFormats.this.K[K22],implicitevidence$716:CaseClassFormats.this.JF[A1],implicitevidence$717:CaseClassFormats.this.JF[A2],implicitevidence$718:CaseClassFormats.this.JF[A3],implicitevidence$719:CaseClassFormats.this.JF[A4],implicitevidence$720:CaseClassFormats.this.JF[A5],implicitevidence$721:CaseClassFormats.this.JF[A6],implicitevidence$722:CaseClassFormats.this.JF[A7],implicitevidence$723:CaseClassFormats.this.JF[A8],implicitevidence$724:CaseClassFormats.this.JF[A9],implicitevidence$725:CaseClassFormats.this.JF[A10],implicitevidence$726:CaseClassFormats.this.JF[A11],implicitevidence$727:CaseClassFormats.this.JF[A12],implicitevidence$728:CaseClassFormats.this.JF[A13],implicitevidence$729:CaseClassFormats.this.JF[A14],implicitevidence$730:CaseClassFormats.this.JF[A15],implicitevidence$731:CaseClassFormats.this.JF[A16],implicitevidence$732:CaseClassFormats.this.JF[A17],implicitevidence$733:CaseClassFormats.this.JF[A18],implicitevidence$734:CaseClassFormats.this.JF[A19],implicitevidence$735:CaseClassFormats.this.JF[A20],implicitevidence$736:CaseClassFormats.this.JF[A21],implicitevidence$737:CaseClassFormats.this.JF[A22]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray21", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray21", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray21[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass21", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19], K20: K[K20], K21: K[K21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass21", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass21[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitA21:CaseClassFormats.this.JF[A21],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19],implicitK20:CaseClassFormats.this.K[K20],implicitK21:CaseClassFormats.this.K[K21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19], arg19: JF[A20], arg20: JF[A21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$673:CaseClassFormats.this.JF[A1],implicitevidence$674:CaseClassFormats.this.JF[A2],implicitevidence$675:CaseClassFormats.this.JF[A3],implicitevidence$676:CaseClassFormats.this.JF[A4],implicitevidence$677:CaseClassFormats.this.JF[A5],implicitevidence$678:CaseClassFormats.this.JF[A6],implicitevidence$679:CaseClassFormats.this.JF[A7],implicitevidence$680:CaseClassFormats.this.JF[A8],implicitevidence$681:CaseClassFormats.this.JF[A9],implicitevidence$682:CaseClassFormats.this.JF[A10],implicitevidence$683:CaseClassFormats.this.JF[A11],implicitevidence$684:CaseClassFormats.this.JF[A12],implicitevidence$685:CaseClassFormats.this.JF[A13],implicitevidence$686:CaseClassFormats.this.JF[A14],implicitevidence$687:CaseClassFormats.this.JF[A15],implicitevidence$688:CaseClassFormats.this.JF[A16],implicitevidence$689:CaseClassFormats.this.JF[A17],implicitevidence$690:CaseClassFormats.this.JF[A18],implicitevidence$691:CaseClassFormats.this.JF[A19],implicitevidence$692:CaseClassFormats.this.JF[A20],implicitevidence$693:CaseClassFormats.this.JF[A21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20, key21: K21)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: K[K20], arg20: K[K21], arg21: JF[A1], arg22: JF[A2], arg23: JF[A3], arg24: JF[A4], arg25: JF[A5], arg26: JF[A6], arg27: JF[A7], arg28: JF[A8], arg29: JF[A9], arg30: JF[A10], arg31: JF[A11], arg32: JF[A12], arg33: JF[A13], arg34: JF[A14], arg35: JF[A15], arg36: JF[A16], arg37: JF[A17], arg38: JF[A18], arg39: JF[A19], arg40: JF[A20], arg41: JF[A21]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,K21,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20,key21:K21)(implicitevidence$631:CaseClassFormats.this.K[K1],implicitevidence$632:CaseClassFormats.this.K[K2],implicitevidence$633:CaseClassFormats.this.K[K3],implicitevidence$634:CaseClassFormats.this.K[K4],implicitevidence$635:CaseClassFormats.this.K[K5],implicitevidence$636:CaseClassFormats.this.K[K6],implicitevidence$637:CaseClassFormats.this.K[K7],implicitevidence$638:CaseClassFormats.this.K[K8],implicitevidence$639:CaseClassFormats.this.K[K9],implicitevidence$640:CaseClassFormats.this.K[K10],implicitevidence$641:CaseClassFormats.this.K[K11],implicitevidence$642:CaseClassFormats.this.K[K12],implicitevidence$643:CaseClassFormats.this.K[K13],implicitevidence$644:CaseClassFormats.this.K[K14],implicitevidence$645:CaseClassFormats.this.K[K15],implicitevidence$646:CaseClassFormats.this.K[K16],implicitevidence$647:CaseClassFormats.this.K[K17],implicitevidence$648:CaseClassFormats.this.K[K18],implicitevidence$649:CaseClassFormats.this.K[K19],implicitevidence$650:CaseClassFormats.this.K[K20],implicitevidence$651:CaseClassFormats.this.K[K21],implicitevidence$652:CaseClassFormats.this.JF[A1],implicitevidence$653:CaseClassFormats.this.JF[A2],implicitevidence$654:CaseClassFormats.this.JF[A3],implicitevidence$655:CaseClassFormats.this.JF[A4],implicitevidence$656:CaseClassFormats.this.JF[A5],implicitevidence$657:CaseClassFormats.this.JF[A6],implicitevidence$658:CaseClassFormats.this.JF[A7],implicitevidence$659:CaseClassFormats.this.JF[A8],implicitevidence$660:CaseClassFormats.this.JF[A9],implicitevidence$661:CaseClassFormats.this.JF[A10],implicitevidence$662:CaseClassFormats.this.JF[A11],implicitevidence$663:CaseClassFormats.this.JF[A12],implicitevidence$664:CaseClassFormats.this.JF[A13],implicitevidence$665:CaseClassFormats.this.JF[A14],implicitevidence$666:CaseClassFormats.this.JF[A15],implicitevidence$667:CaseClassFormats.this.JF[A16],implicitevidence$668:CaseClassFormats.this.JF[A17],implicitevidence$669:CaseClassFormats.this.JF[A18],implicitevidence$670:CaseClassFormats.this.JF[A19],implicitevidence$671:CaseClassFormats.this.JF[A20],implicitevidence$672:CaseClassFormats.this.JF[A21]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray20", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray20", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray20[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass20", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19], K20: K[K20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass20", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass20[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitA20:CaseClassFormats.this.JF[A20],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19],implicitK20:CaseClassFormats.this.K[K20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19], arg19: JF[A20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$611:CaseClassFormats.this.JF[A1],implicitevidence$612:CaseClassFormats.this.JF[A2],implicitevidence$613:CaseClassFormats.this.JF[A3],implicitevidence$614:CaseClassFormats.this.JF[A4],implicitevidence$615:CaseClassFormats.this.JF[A5],implicitevidence$616:CaseClassFormats.this.JF[A6],implicitevidence$617:CaseClassFormats.this.JF[A7],implicitevidence$618:CaseClassFormats.this.JF[A8],implicitevidence$619:CaseClassFormats.this.JF[A9],implicitevidence$620:CaseClassFormats.this.JF[A10],implicitevidence$621:CaseClassFormats.this.JF[A11],implicitevidence$622:CaseClassFormats.this.JF[A12],implicitevidence$623:CaseClassFormats.this.JF[A13],implicitevidence$624:CaseClassFormats.this.JF[A14],implicitevidence$625:CaseClassFormats.this.JF[A15],implicitevidence$626:CaseClassFormats.this.JF[A16],implicitevidence$627:CaseClassFormats.this.JF[A17],implicitevidence$628:CaseClassFormats.this.JF[A18],implicitevidence$629:CaseClassFormats.this.JF[A19],implicitevidence$630:CaseClassFormats.this.JF[A20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19, key20: K20)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: K[K20], arg20: JF[A1], arg21: JF[A2], arg22: JF[A3], arg23: JF[A4], arg24: JF[A5], arg25: JF[A6], arg26: JF[A7], arg27: JF[A8], arg28: JF[A9], arg29: JF[A10], arg30: JF[A11], arg31: JF[A12], arg32: JF[A13], arg33: JF[A14], arg34: JF[A15], arg35: JF[A16], arg36: JF[A17], arg37: JF[A18], arg38: JF[A19], arg39: JF[A20]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,K20,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19,key20:K20)(implicitevidence$571:CaseClassFormats.this.K[K1],implicitevidence$572:CaseClassFormats.this.K[K2],implicitevidence$573:CaseClassFormats.this.K[K3],implicitevidence$574:CaseClassFormats.this.K[K4],implicitevidence$575:CaseClassFormats.this.K[K5],implicitevidence$576:CaseClassFormats.this.K[K6],implicitevidence$577:CaseClassFormats.this.K[K7],implicitevidence$578:CaseClassFormats.this.K[K8],implicitevidence$579:CaseClassFormats.this.K[K9],implicitevidence$580:CaseClassFormats.this.K[K10],implicitevidence$581:CaseClassFormats.this.K[K11],implicitevidence$582:CaseClassFormats.this.K[K12],implicitevidence$583:CaseClassFormats.this.K[K13],implicitevidence$584:CaseClassFormats.this.K[K14],implicitevidence$585:CaseClassFormats.this.K[K15],implicitevidence$586:CaseClassFormats.this.K[K16],implicitevidence$587:CaseClassFormats.this.K[K17],implicitevidence$588:CaseClassFormats.this.K[K18],implicitevidence$589:CaseClassFormats.this.K[K19],implicitevidence$590:CaseClassFormats.this.K[K20],implicitevidence$591:CaseClassFormats.this.JF[A1],implicitevidence$592:CaseClassFormats.this.JF[A2],implicitevidence$593:CaseClassFormats.this.JF[A3],implicitevidence$594:CaseClassFormats.this.JF[A4],implicitevidence$595:CaseClassFormats.this.JF[A5],implicitevidence$596:CaseClassFormats.this.JF[A6],implicitevidence$597:CaseClassFormats.this.JF[A7],implicitevidence$598:CaseClassFormats.this.JF[A8],implicitevidence$599:CaseClassFormats.this.JF[A9],implicitevidence$600:CaseClassFormats.this.JF[A10],implicitevidence$601:CaseClassFormats.this.JF[A11],implicitevidence$602:CaseClassFormats.this.JF[A12],implicitevidence$603:CaseClassFormats.this.JF[A13],implicitevidence$604:CaseClassFormats.this.JF[A14],implicitevidence$605:CaseClassFormats.this.JF[A15],implicitevidence$606:CaseClassFormats.this.JF[A16],implicitevidence$607:CaseClassFormats.this.JF[A17],implicitevidence$608:CaseClassFormats.this.JF[A18],implicitevidence$609:CaseClassFormats.this.JF[A19],implicitevidence$610:CaseClassFormats.this.JF[A20]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray19", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray19", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray19[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass19", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18], K19: K[K19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass19", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass19[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitA19:CaseClassFormats.this.JF[A19],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18],implicitK19:CaseClassFormats.this.K[K19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18], arg18: JF[A19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$552:CaseClassFormats.this.JF[A1],implicitevidence$553:CaseClassFormats.this.JF[A2],implicitevidence$554:CaseClassFormats.this.JF[A3],implicitevidence$555:CaseClassFormats.this.JF[A4],implicitevidence$556:CaseClassFormats.this.JF[A5],implicitevidence$557:CaseClassFormats.this.JF[A6],implicitevidence$558:CaseClassFormats.this.JF[A7],implicitevidence$559:CaseClassFormats.this.JF[A8],implicitevidence$560:CaseClassFormats.this.JF[A9],implicitevidence$561:CaseClassFormats.this.JF[A10],implicitevidence$562:CaseClassFormats.this.JF[A11],implicitevidence$563:CaseClassFormats.this.JF[A12],implicitevidence$564:CaseClassFormats.this.JF[A13],implicitevidence$565:CaseClassFormats.this.JF[A14],implicitevidence$566:CaseClassFormats.this.JF[A15],implicitevidence$567:CaseClassFormats.this.JF[A16],implicitevidence$568:CaseClassFormats.this.JF[A17],implicitevidence$569:CaseClassFormats.this.JF[A18],implicitevidence$570:CaseClassFormats.this.JF[A19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18, key19: K19)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: K[K19], arg19: JF[A1], arg20: JF[A2], arg21: JF[A3], arg22: JF[A4], arg23: JF[A5], arg24: JF[A6], arg25: JF[A7], arg26: JF[A8], arg27: JF[A9], arg28: JF[A10], arg29: JF[A11], arg30: JF[A12], arg31: JF[A13], arg32: JF[A14], arg33: JF[A15], arg34: JF[A16], arg35: JF[A17], arg36: JF[A18], arg37: JF[A19]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,K19,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18,key19:K19)(implicitevidence$514:CaseClassFormats.this.K[K1],implicitevidence$515:CaseClassFormats.this.K[K2],implicitevidence$516:CaseClassFormats.this.K[K3],implicitevidence$517:CaseClassFormats.this.K[K4],implicitevidence$518:CaseClassFormats.this.K[K5],implicitevidence$519:CaseClassFormats.this.K[K6],implicitevidence$520:CaseClassFormats.this.K[K7],implicitevidence$521:CaseClassFormats.this.K[K8],implicitevidence$522:CaseClassFormats.this.K[K9],implicitevidence$523:CaseClassFormats.this.K[K10],implicitevidence$524:CaseClassFormats.this.K[K11],implicitevidence$525:CaseClassFormats.this.K[K12],implicitevidence$526:CaseClassFormats.this.K[K13],implicitevidence$527:CaseClassFormats.this.K[K14],implicitevidence$528:CaseClassFormats.this.K[K15],implicitevidence$529:CaseClassFormats.this.K[K16],implicitevidence$530:CaseClassFormats.this.K[K17],implicitevidence$531:CaseClassFormats.this.K[K18],implicitevidence$532:CaseClassFormats.this.K[K19],implicitevidence$533:CaseClassFormats.this.JF[A1],implicitevidence$534:CaseClassFormats.this.JF[A2],implicitevidence$535:CaseClassFormats.this.JF[A3],implicitevidence$536:CaseClassFormats.this.JF[A4],implicitevidence$537:CaseClassFormats.this.JF[A5],implicitevidence$538:CaseClassFormats.this.JF[A6],implicitevidence$539:CaseClassFormats.this.JF[A7],implicitevidence$540:CaseClassFormats.this.JF[A8],implicitevidence$541:CaseClassFormats.this.JF[A9],implicitevidence$542:CaseClassFormats.this.JF[A10],implicitevidence$543:CaseClassFormats.this.JF[A11],implicitevidence$544:CaseClassFormats.this.JF[A12],implicitevidence$545:CaseClassFormats.this.JF[A13],implicitevidence$546:CaseClassFormats.this.JF[A14],implicitevidence$547:CaseClassFormats.this.JF[A15],implicitevidence$548:CaseClassFormats.this.JF[A16],implicitevidence$549:CaseClassFormats.this.JF[A17],implicitevidence$550:CaseClassFormats.this.JF[A18],implicitevidence$551:CaseClassFormats.this.JF[A19]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray18", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray18", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray18[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass18", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17], K18: K[K18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass18", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass18[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitA18:CaseClassFormats.this.JF[A18],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17],implicitK18:CaseClassFormats.this.K[K18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17], arg17: JF[A18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$496:CaseClassFormats.this.JF[A1],implicitevidence$497:CaseClassFormats.this.JF[A2],implicitevidence$498:CaseClassFormats.this.JF[A3],implicitevidence$499:CaseClassFormats.this.JF[A4],implicitevidence$500:CaseClassFormats.this.JF[A5],implicitevidence$501:CaseClassFormats.this.JF[A6],implicitevidence$502:CaseClassFormats.this.JF[A7],implicitevidence$503:CaseClassFormats.this.JF[A8],implicitevidence$504:CaseClassFormats.this.JF[A9],implicitevidence$505:CaseClassFormats.this.JF[A10],implicitevidence$506:CaseClassFormats.this.JF[A11],implicitevidence$507:CaseClassFormats.this.JF[A12],implicitevidence$508:CaseClassFormats.this.JF[A13],implicitevidence$509:CaseClassFormats.this.JF[A14],implicitevidence$510:CaseClassFormats.this.JF[A15],implicitevidence$511:CaseClassFormats.this.JF[A16],implicitevidence$512:CaseClassFormats.this.JF[A17],implicitevidence$513:CaseClassFormats.this.JF[A18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17, key18: K18)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: K[K18], arg18: JF[A1], arg19: JF[A2], arg20: JF[A3], arg21: JF[A4], arg22: JF[A5], arg23: JF[A6], arg24: JF[A7], arg25: JF[A8], arg26: JF[A9], arg27: JF[A10], arg28: JF[A11], arg29: JF[A12], arg30: JF[A13], arg31: JF[A14], arg32: JF[A15], arg33: JF[A16], arg34: JF[A17], arg35: JF[A18]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,K18,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17,key18:K18)(implicitevidence$460:CaseClassFormats.this.K[K1],implicitevidence$461:CaseClassFormats.this.K[K2],implicitevidence$462:CaseClassFormats.this.K[K3],implicitevidence$463:CaseClassFormats.this.K[K4],implicitevidence$464:CaseClassFormats.this.K[K5],implicitevidence$465:CaseClassFormats.this.K[K6],implicitevidence$466:CaseClassFormats.this.K[K7],implicitevidence$467:CaseClassFormats.this.K[K8],implicitevidence$468:CaseClassFormats.this.K[K9],implicitevidence$469:CaseClassFormats.this.K[K10],implicitevidence$470:CaseClassFormats.this.K[K11],implicitevidence$471:CaseClassFormats.this.K[K12],implicitevidence$472:CaseClassFormats.this.K[K13],implicitevidence$473:CaseClassFormats.this.K[K14],implicitevidence$474:CaseClassFormats.this.K[K15],implicitevidence$475:CaseClassFormats.this.K[K16],implicitevidence$476:CaseClassFormats.this.K[K17],implicitevidence$477:CaseClassFormats.this.K[K18],implicitevidence$478:CaseClassFormats.this.JF[A1],implicitevidence$479:CaseClassFormats.this.JF[A2],implicitevidence$480:CaseClassFormats.this.JF[A3],implicitevidence$481:CaseClassFormats.this.JF[A4],implicitevidence$482:CaseClassFormats.this.JF[A5],implicitevidence$483:CaseClassFormats.this.JF[A6],implicitevidence$484:CaseClassFormats.this.JF[A7],implicitevidence$485:CaseClassFormats.this.JF[A8],implicitevidence$486:CaseClassFormats.this.JF[A9],implicitevidence$487:CaseClassFormats.this.JF[A10],implicitevidence$488:CaseClassFormats.this.JF[A11],implicitevidence$489:CaseClassFormats.this.JF[A12],implicitevidence$490:CaseClassFormats.this.JF[A13],implicitevidence$491:CaseClassFormats.this.JF[A14],implicitevidence$492:CaseClassFormats.this.JF[A15],implicitevidence$493:CaseClassFormats.this.JF[A16],implicitevidence$494:CaseClassFormats.this.JF[A17],implicitevidence$495:CaseClassFormats.this.JF[A18]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray17", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray17", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray17[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass17", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16], K17: K[K17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass17", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass17[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitA17:CaseClassFormats.this.JF[A17],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16],implicitK17:CaseClassFormats.this.K[K17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16], arg16: JF[A17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$443:CaseClassFormats.this.JF[A1],implicitevidence$444:CaseClassFormats.this.JF[A2],implicitevidence$445:CaseClassFormats.this.JF[A3],implicitevidence$446:CaseClassFormats.this.JF[A4],implicitevidence$447:CaseClassFormats.this.JF[A5],implicitevidence$448:CaseClassFormats.this.JF[A6],implicitevidence$449:CaseClassFormats.this.JF[A7],implicitevidence$450:CaseClassFormats.this.JF[A8],implicitevidence$451:CaseClassFormats.this.JF[A9],implicitevidence$452:CaseClassFormats.this.JF[A10],implicitevidence$453:CaseClassFormats.this.JF[A11],implicitevidence$454:CaseClassFormats.this.JF[A12],implicitevidence$455:CaseClassFormats.this.JF[A13],implicitevidence$456:CaseClassFormats.this.JF[A14],implicitevidence$457:CaseClassFormats.this.JF[A15],implicitevidence$458:CaseClassFormats.this.JF[A16],implicitevidence$459:CaseClassFormats.this.JF[A17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16, key17: K17)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: K[K17], arg17: JF[A1], arg18: JF[A2], arg19: JF[A3], arg20: JF[A4], arg21: JF[A5], arg22: JF[A6], arg23: JF[A7], arg24: JF[A8], arg25: JF[A9], arg26: JF[A10], arg27: JF[A11], arg28: JF[A12], arg29: JF[A13], arg30: JF[A14], arg31: JF[A15], arg32: JF[A16], arg33: JF[A17]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,K17,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16,key17:K17)(implicitevidence$409:CaseClassFormats.this.K[K1],implicitevidence$410:CaseClassFormats.this.K[K2],implicitevidence$411:CaseClassFormats.this.K[K3],implicitevidence$412:CaseClassFormats.this.K[K4],implicitevidence$413:CaseClassFormats.this.K[K5],implicitevidence$414:CaseClassFormats.this.K[K6],implicitevidence$415:CaseClassFormats.this.K[K7],implicitevidence$416:CaseClassFormats.this.K[K8],implicitevidence$417:CaseClassFormats.this.K[K9],implicitevidence$418:CaseClassFormats.this.K[K10],implicitevidence$419:CaseClassFormats.this.K[K11],implicitevidence$420:CaseClassFormats.this.K[K12],implicitevidence$421:CaseClassFormats.this.K[K13],implicitevidence$422:CaseClassFormats.this.K[K14],implicitevidence$423:CaseClassFormats.this.K[K15],implicitevidence$424:CaseClassFormats.this.K[K16],implicitevidence$425:CaseClassFormats.this.K[K17],implicitevidence$426:CaseClassFormats.this.JF[A1],implicitevidence$427:CaseClassFormats.this.JF[A2],implicitevidence$428:CaseClassFormats.this.JF[A3],implicitevidence$429:CaseClassFormats.this.JF[A4],implicitevidence$430:CaseClassFormats.this.JF[A5],implicitevidence$431:CaseClassFormats.this.JF[A6],implicitevidence$432:CaseClassFormats.this.JF[A7],implicitevidence$433:CaseClassFormats.this.JF[A8],implicitevidence$434:CaseClassFormats.this.JF[A9],implicitevidence$435:CaseClassFormats.this.JF[A10],implicitevidence$436:CaseClassFormats.this.JF[A11],implicitevidence$437:CaseClassFormats.this.JF[A12],implicitevidence$438:CaseClassFormats.this.JF[A13],implicitevidence$439:CaseClassFormats.this.JF[A14],implicitevidence$440:CaseClassFormats.this.JF[A15],implicitevidence$441:CaseClassFormats.this.JF[A16],implicitevidence$442:CaseClassFormats.this.JF[A17]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray16", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray16", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray16[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass16", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15], K16: K[K16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass16", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass16[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitA16:CaseClassFormats.this.JF[A16],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15],implicitK16:CaseClassFormats.this.K[K16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15], arg15: JF[A16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$393:CaseClassFormats.this.JF[A1],implicitevidence$394:CaseClassFormats.this.JF[A2],implicitevidence$395:CaseClassFormats.this.JF[A3],implicitevidence$396:CaseClassFormats.this.JF[A4],implicitevidence$397:CaseClassFormats.this.JF[A5],implicitevidence$398:CaseClassFormats.this.JF[A6],implicitevidence$399:CaseClassFormats.this.JF[A7],implicitevidence$400:CaseClassFormats.this.JF[A8],implicitevidence$401:CaseClassFormats.this.JF[A9],implicitevidence$402:CaseClassFormats.this.JF[A10],implicitevidence$403:CaseClassFormats.this.JF[A11],implicitevidence$404:CaseClassFormats.this.JF[A12],implicitevidence$405:CaseClassFormats.this.JF[A13],implicitevidence$406:CaseClassFormats.this.JF[A14],implicitevidence$407:CaseClassFormats.this.JF[A15],implicitevidence$408:CaseClassFormats.this.JF[A16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15, key16: K16)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: K[K16], arg16: JF[A1], arg17: JF[A2], arg18: JF[A3], arg19: JF[A4], arg20: JF[A5], arg21: JF[A6], arg22: JF[A7], arg23: JF[A8], arg24: JF[A9], arg25: JF[A10], arg26: JF[A11], arg27: JF[A12], arg28: JF[A13], arg29: JF[A14], arg30: JF[A15], arg31: JF[A16]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,K16,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15,key16:K16)(implicitevidence$361:CaseClassFormats.this.K[K1],implicitevidence$362:CaseClassFormats.this.K[K2],implicitevidence$363:CaseClassFormats.this.K[K3],implicitevidence$364:CaseClassFormats.this.K[K4],implicitevidence$365:CaseClassFormats.this.K[K5],implicitevidence$366:CaseClassFormats.this.K[K6],implicitevidence$367:CaseClassFormats.this.K[K7],implicitevidence$368:CaseClassFormats.this.K[K8],implicitevidence$369:CaseClassFormats.this.K[K9],implicitevidence$370:CaseClassFormats.this.K[K10],implicitevidence$371:CaseClassFormats.this.K[K11],implicitevidence$372:CaseClassFormats.this.K[K12],implicitevidence$373:CaseClassFormats.this.K[K13],implicitevidence$374:CaseClassFormats.this.K[K14],implicitevidence$375:CaseClassFormats.this.K[K15],implicitevidence$376:CaseClassFormats.this.K[K16],implicitevidence$377:CaseClassFormats.this.JF[A1],implicitevidence$378:CaseClassFormats.this.JF[A2],implicitevidence$379:CaseClassFormats.this.JF[A3],implicitevidence$380:CaseClassFormats.this.JF[A4],implicitevidence$381:CaseClassFormats.this.JF[A5],implicitevidence$382:CaseClassFormats.this.JF[A6],implicitevidence$383:CaseClassFormats.this.JF[A7],implicitevidence$384:CaseClassFormats.this.JF[A8],implicitevidence$385:CaseClassFormats.this.JF[A9],implicitevidence$386:CaseClassFormats.this.JF[A10],implicitevidence$387:CaseClassFormats.this.JF[A11],implicitevidence$388:CaseClassFormats.this.JF[A12],implicitevidence$389:CaseClassFormats.this.JF[A13],implicitevidence$390:CaseClassFormats.this.JF[A14],implicitevidence$391:CaseClassFormats.this.JF[A15],implicitevidence$392:CaseClassFormats.this.JF[A16]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray15", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray15", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray15[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass15", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14], K15: K[K15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass15", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass15[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitA15:CaseClassFormats.this.JF[A15],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14],implicitK15:CaseClassFormats.this.K[K15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14], arg14: JF[A15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$346:CaseClassFormats.this.JF[A1],implicitevidence$347:CaseClassFormats.this.JF[A2],implicitevidence$348:CaseClassFormats.this.JF[A3],implicitevidence$349:CaseClassFormats.this.JF[A4],implicitevidence$350:CaseClassFormats.this.JF[A5],implicitevidence$351:CaseClassFormats.this.JF[A6],implicitevidence$352:CaseClassFormats.this.JF[A7],implicitevidence$353:CaseClassFormats.this.JF[A8],implicitevidence$354:CaseClassFormats.this.JF[A9],implicitevidence$355:CaseClassFormats.this.JF[A10],implicitevidence$356:CaseClassFormats.this.JF[A11],implicitevidence$357:CaseClassFormats.this.JF[A12],implicitevidence$358:CaseClassFormats.this.JF[A13],implicitevidence$359:CaseClassFormats.this.JF[A14],implicitevidence$360:CaseClassFormats.this.JF[A15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14, key15: K15)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: K[K15], arg15: JF[A1], arg16: JF[A2], arg17: JF[A3], arg18: JF[A4], arg19: JF[A5], arg20: JF[A6], arg21: JF[A7], arg22: JF[A8], arg23: JF[A9], arg24: JF[A10], arg25: JF[A11], arg26: JF[A12], arg27: JF[A13], arg28: JF[A14], arg29: JF[A15]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,K15,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14,key15:K15)(implicitevidence$316:CaseClassFormats.this.K[K1],implicitevidence$317:CaseClassFormats.this.K[K2],implicitevidence$318:CaseClassFormats.this.K[K3],implicitevidence$319:CaseClassFormats.this.K[K4],implicitevidence$320:CaseClassFormats.this.K[K5],implicitevidence$321:CaseClassFormats.this.K[K6],implicitevidence$322:CaseClassFormats.this.K[K7],implicitevidence$323:CaseClassFormats.this.K[K8],implicitevidence$324:CaseClassFormats.this.K[K9],implicitevidence$325:CaseClassFormats.this.K[K10],implicitevidence$326:CaseClassFormats.this.K[K11],implicitevidence$327:CaseClassFormats.this.K[K12],implicitevidence$328:CaseClassFormats.this.K[K13],implicitevidence$329:CaseClassFormats.this.K[K14],implicitevidence$330:CaseClassFormats.this.K[K15],implicitevidence$331:CaseClassFormats.this.JF[A1],implicitevidence$332:CaseClassFormats.this.JF[A2],implicitevidence$333:CaseClassFormats.this.JF[A3],implicitevidence$334:CaseClassFormats.this.JF[A4],implicitevidence$335:CaseClassFormats.this.JF[A5],implicitevidence$336:CaseClassFormats.this.JF[A6],implicitevidence$337:CaseClassFormats.this.JF[A7],implicitevidence$338:CaseClassFormats.this.JF[A8],implicitevidence$339:CaseClassFormats.this.JF[A9],implicitevidence$340:CaseClassFormats.this.JF[A10],implicitevidence$341:CaseClassFormats.this.JF[A11],implicitevidence$342:CaseClassFormats.this.JF[A12],implicitevidence$343:CaseClassFormats.this.JF[A13],implicitevidence$344:CaseClassFormats.this.JF[A14],implicitevidence$345:CaseClassFormats.this.JF[A15]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray14", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray14", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray14[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass14", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13], K14: K[K14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass14", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass14[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitA14:CaseClassFormats.this.JF[A14],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13],implicitK14:CaseClassFormats.this.K[K14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13], arg13: JF[A14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$302:CaseClassFormats.this.JF[A1],implicitevidence$303:CaseClassFormats.this.JF[A2],implicitevidence$304:CaseClassFormats.this.JF[A3],implicitevidence$305:CaseClassFormats.this.JF[A4],implicitevidence$306:CaseClassFormats.this.JF[A5],implicitevidence$307:CaseClassFormats.this.JF[A6],implicitevidence$308:CaseClassFormats.this.JF[A7],implicitevidence$309:CaseClassFormats.this.JF[A8],implicitevidence$310:CaseClassFormats.this.JF[A9],implicitevidence$311:CaseClassFormats.this.JF[A10],implicitevidence$312:CaseClassFormats.this.JF[A11],implicitevidence$313:CaseClassFormats.this.JF[A12],implicitevidence$314:CaseClassFormats.this.JF[A13],implicitevidence$315:CaseClassFormats.this.JF[A14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13, key14: K14)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: K[K14], arg14: JF[A1], arg15: JF[A2], arg16: JF[A3], arg17: JF[A4], arg18: JF[A5], arg19: JF[A6], arg20: JF[A7], arg21: JF[A8], arg22: JF[A9], arg23: JF[A10], arg24: JF[A11], arg25: JF[A12], arg26: JF[A13], arg27: JF[A14]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,K14,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13,key14:K14)(implicitevidence$274:CaseClassFormats.this.K[K1],implicitevidence$275:CaseClassFormats.this.K[K2],implicitevidence$276:CaseClassFormats.this.K[K3],implicitevidence$277:CaseClassFormats.this.K[K4],implicitevidence$278:CaseClassFormats.this.K[K5],implicitevidence$279:CaseClassFormats.this.K[K6],implicitevidence$280:CaseClassFormats.this.K[K7],implicitevidence$281:CaseClassFormats.this.K[K8],implicitevidence$282:CaseClassFormats.this.K[K9],implicitevidence$283:CaseClassFormats.this.K[K10],implicitevidence$284:CaseClassFormats.this.K[K11],implicitevidence$285:CaseClassFormats.this.K[K12],implicitevidence$286:CaseClassFormats.this.K[K13],implicitevidence$287:CaseClassFormats.this.K[K14],implicitevidence$288:CaseClassFormats.this.JF[A1],implicitevidence$289:CaseClassFormats.this.JF[A2],implicitevidence$290:CaseClassFormats.this.JF[A3],implicitevidence$291:CaseClassFormats.this.JF[A4],implicitevidence$292:CaseClassFormats.this.JF[A5],implicitevidence$293:CaseClassFormats.this.JF[A6],implicitevidence$294:CaseClassFormats.this.JF[A7],implicitevidence$295:CaseClassFormats.this.JF[A8],implicitevidence$296:CaseClassFormats.this.JF[A9],implicitevidence$297:CaseClassFormats.this.JF[A10],implicitevidence$298:CaseClassFormats.this.JF[A11],implicitevidence$299:CaseClassFormats.this.JF[A12],implicitevidence$300:CaseClassFormats.this.JF[A13],implicitevidence$301:CaseClassFormats.this.JF[A14]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray13", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray13", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray13[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass13", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12], K13: K[K13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass13", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass13[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitA13:CaseClassFormats.this.JF[A13],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12],implicitK13:CaseClassFormats.this.K[K13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12], arg12: JF[A13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$261:CaseClassFormats.this.JF[A1],implicitevidence$262:CaseClassFormats.this.JF[A2],implicitevidence$263:CaseClassFormats.this.JF[A3],implicitevidence$264:CaseClassFormats.this.JF[A4],implicitevidence$265:CaseClassFormats.this.JF[A5],implicitevidence$266:CaseClassFormats.this.JF[A6],implicitevidence$267:CaseClassFormats.this.JF[A7],implicitevidence$268:CaseClassFormats.this.JF[A8],implicitevidence$269:CaseClassFormats.this.JF[A9],implicitevidence$270:CaseClassFormats.this.JF[A10],implicitevidence$271:CaseClassFormats.this.JF[A11],implicitevidence$272:CaseClassFormats.this.JF[A12],implicitevidence$273:CaseClassFormats.this.JF[A13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12, key13: K13)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: K[K13], arg13: JF[A1], arg14: JF[A2], arg15: JF[A3], arg16: JF[A4], arg17: JF[A5], arg18: JF[A6], arg19: JF[A7], arg20: JF[A8], arg21: JF[A9], arg22: JF[A10], arg23: JF[A11], arg24: JF[A12], arg25: JF[A13]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,K13,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12,key13:K13)(implicitevidence$235:CaseClassFormats.this.K[K1],implicitevidence$236:CaseClassFormats.this.K[K2],implicitevidence$237:CaseClassFormats.this.K[K3],implicitevidence$238:CaseClassFormats.this.K[K4],implicitevidence$239:CaseClassFormats.this.K[K5],implicitevidence$240:CaseClassFormats.this.K[K6],implicitevidence$241:CaseClassFormats.this.K[K7],implicitevidence$242:CaseClassFormats.this.K[K8],implicitevidence$243:CaseClassFormats.this.K[K9],implicitevidence$244:CaseClassFormats.this.K[K10],implicitevidence$245:CaseClassFormats.this.K[K11],implicitevidence$246:CaseClassFormats.this.K[K12],implicitevidence$247:CaseClassFormats.this.K[K13],implicitevidence$248:CaseClassFormats.this.JF[A1],implicitevidence$249:CaseClassFormats.this.JF[A2],implicitevidence$250:CaseClassFormats.this.JF[A3],implicitevidence$251:CaseClassFormats.this.JF[A4],implicitevidence$252:CaseClassFormats.this.JF[A5],implicitevidence$253:CaseClassFormats.this.JF[A6],implicitevidence$254:CaseClassFormats.this.JF[A7],implicitevidence$255:CaseClassFormats.this.JF[A8],implicitevidence$256:CaseClassFormats.this.JF[A9],implicitevidence$257:CaseClassFormats.this.JF[A10],implicitevidence$258:CaseClassFormats.this.JF[A11],implicitevidence$259:CaseClassFormats.this.JF[A12],implicitevidence$260:CaseClassFormats.this.JF[A13]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray12", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray12", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray12[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass12", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11], K12: K[K12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass12", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass12[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitA12:CaseClassFormats.this.JF[A12],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11],implicitK12:CaseClassFormats.this.K[K12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11], arg11: JF[A12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$223:CaseClassFormats.this.JF[A1],implicitevidence$224:CaseClassFormats.this.JF[A2],implicitevidence$225:CaseClassFormats.this.JF[A3],implicitevidence$226:CaseClassFormats.this.JF[A4],implicitevidence$227:CaseClassFormats.this.JF[A5],implicitevidence$228:CaseClassFormats.this.JF[A6],implicitevidence$229:CaseClassFormats.this.JF[A7],implicitevidence$230:CaseClassFormats.this.JF[A8],implicitevidence$231:CaseClassFormats.this.JF[A9],implicitevidence$232:CaseClassFormats.this.JF[A10],implicitevidence$233:CaseClassFormats.this.JF[A11],implicitevidence$234:CaseClassFormats.this.JF[A12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11, key12: K12)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: K[K12], arg12: JF[A1], arg13: JF[A2], arg14: JF[A3], arg15: JF[A4], arg16: JF[A5], arg17: JF[A6], arg18: JF[A7], arg19: JF[A8], arg20: JF[A9], arg21: JF[A10], arg22: JF[A11], arg23: JF[A12]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,K12,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11,key12:K12)(implicitevidence$199:CaseClassFormats.this.K[K1],implicitevidence$200:CaseClassFormats.this.K[K2],implicitevidence$201:CaseClassFormats.this.K[K3],implicitevidence$202:CaseClassFormats.this.K[K4],implicitevidence$203:CaseClassFormats.this.K[K5],implicitevidence$204:CaseClassFormats.this.K[K6],implicitevidence$205:CaseClassFormats.this.K[K7],implicitevidence$206:CaseClassFormats.this.K[K8],implicitevidence$207:CaseClassFormats.this.K[K9],implicitevidence$208:CaseClassFormats.this.K[K10],implicitevidence$209:CaseClassFormats.this.K[K11],implicitevidence$210:CaseClassFormats.this.K[K12],implicitevidence$211:CaseClassFormats.this.JF[A1],implicitevidence$212:CaseClassFormats.this.JF[A2],implicitevidence$213:CaseClassFormats.this.JF[A3],implicitevidence$214:CaseClassFormats.this.JF[A4],implicitevidence$215:CaseClassFormats.this.JF[A5],implicitevidence$216:CaseClassFormats.this.JF[A6],implicitevidence$217:CaseClassFormats.this.JF[A7],implicitevidence$218:CaseClassFormats.this.JF[A8],implicitevidence$219:CaseClassFormats.this.JF[A9],implicitevidence$220:CaseClassFormats.this.JF[A10],implicitevidence$221:CaseClassFormats.this.JF[A11],implicitevidence$222:CaseClassFormats.this.JF[A12]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray11", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray11", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray11[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass11", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10], K11: K[K11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass11", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass11[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitA11:CaseClassFormats.this.JF[A11],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10],implicitK11:CaseClassFormats.this.K[K11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10], arg10: JF[A11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$188:CaseClassFormats.this.JF[A1],implicitevidence$189:CaseClassFormats.this.JF[A2],implicitevidence$190:CaseClassFormats.this.JF[A3],implicitevidence$191:CaseClassFormats.this.JF[A4],implicitevidence$192:CaseClassFormats.this.JF[A5],implicitevidence$193:CaseClassFormats.this.JF[A6],implicitevidence$194:CaseClassFormats.this.JF[A7],implicitevidence$195:CaseClassFormats.this.JF[A8],implicitevidence$196:CaseClassFormats.this.JF[A9],implicitevidence$197:CaseClassFormats.this.JF[A10],implicitevidence$198:CaseClassFormats.this.JF[A11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10, key11: K11)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: K[K11], arg11: JF[A1], arg12: JF[A2], arg13: JF[A3], arg14: JF[A4], arg15: JF[A5], arg16: JF[A6], arg17: JF[A7], arg18: JF[A8], arg19: JF[A9], arg20: JF[A10], arg21: JF[A11]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,K11,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10,key11:K11)(implicitevidence$166:CaseClassFormats.this.K[K1],implicitevidence$167:CaseClassFormats.this.K[K2],implicitevidence$168:CaseClassFormats.this.K[K3],implicitevidence$169:CaseClassFormats.this.K[K4],implicitevidence$170:CaseClassFormats.this.K[K5],implicitevidence$171:CaseClassFormats.this.K[K6],implicitevidence$172:CaseClassFormats.this.K[K7],implicitevidence$173:CaseClassFormats.this.K[K8],implicitevidence$174:CaseClassFormats.this.K[K9],implicitevidence$175:CaseClassFormats.this.K[K10],implicitevidence$176:CaseClassFormats.this.K[K11],implicitevidence$177:CaseClassFormats.this.JF[A1],implicitevidence$178:CaseClassFormats.this.JF[A2],implicitevidence$179:CaseClassFormats.this.JF[A3],implicitevidence$180:CaseClassFormats.this.JF[A4],implicitevidence$181:CaseClassFormats.this.JF[A5],implicitevidence$182:CaseClassFormats.this.JF[A6],implicitevidence$183:CaseClassFormats.this.JF[A7],implicitevidence$184:CaseClassFormats.this.JF[A8],implicitevidence$185:CaseClassFormats.this.JF[A9],implicitevidence$186:CaseClassFormats.this.JF[A10],implicitevidence$187:CaseClassFormats.this.JF[A11]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray10", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray10", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray10[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass10", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9], K10: K[K10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass10", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass10[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitA10:CaseClassFormats.this.JF[A10],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9],implicitK10:CaseClassFormats.this.K[K10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9], arg9: JF[A10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$156:CaseClassFormats.this.JF[A1],implicitevidence$157:CaseClassFormats.this.JF[A2],implicitevidence$158:CaseClassFormats.this.JF[A3],implicitevidence$159:CaseClassFormats.this.JF[A4],implicitevidence$160:CaseClassFormats.this.JF[A5],implicitevidence$161:CaseClassFormats.this.JF[A6],implicitevidence$162:CaseClassFormats.this.JF[A7],implicitevidence$163:CaseClassFormats.this.JF[A8],implicitevidence$164:CaseClassFormats.this.JF[A9],implicitevidence$165:CaseClassFormats.this.JF[A10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9, key10: K10)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: K[K10], arg10: JF[A1], arg11: JF[A2], arg12: JF[A3], arg13: JF[A4], arg14: JF[A5], arg15: JF[A6], arg16: JF[A7], arg17: JF[A8], arg18: JF[A9], arg19: JF[A10]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,K10,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9,key10:K10)(implicitevidence$136:CaseClassFormats.this.K[K1],implicitevidence$137:CaseClassFormats.this.K[K2],implicitevidence$138:CaseClassFormats.this.K[K3],implicitevidence$139:CaseClassFormats.this.K[K4],implicitevidence$140:CaseClassFormats.this.K[K5],implicitevidence$141:CaseClassFormats.this.K[K6],implicitevidence$142:CaseClassFormats.this.K[K7],implicitevidence$143:CaseClassFormats.this.K[K8],implicitevidence$144:CaseClassFormats.this.K[K9],implicitevidence$145:CaseClassFormats.this.K[K10],implicitevidence$146:CaseClassFormats.this.JF[A1],implicitevidence$147:CaseClassFormats.this.JF[A2],implicitevidence$148:CaseClassFormats.this.JF[A3],implicitevidence$149:CaseClassFormats.this.JF[A4],implicitevidence$150:CaseClassFormats.this.JF[A5],implicitevidence$151:CaseClassFormats.this.JF[A6],implicitevidence$152:CaseClassFormats.this.JF[A7],implicitevidence$153:CaseClassFormats.this.JF[A8],implicitevidence$154:CaseClassFormats.this.JF[A9],implicitevidence$155:CaseClassFormats.this.JF[A10]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray9", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray9", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray9[A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass9", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8], K9: K[K9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass9", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass9[K1,K2,K3,K4,K5,K6,K7,K8,K9,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitA9:CaseClassFormats.this.JF[A9],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8],implicitK9:CaseClassFormats.this.K[K9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8], arg8: JF[A9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$127:CaseClassFormats.this.JF[A1],implicitevidence$128:CaseClassFormats.this.JF[A2],implicitevidence$129:CaseClassFormats.this.JF[A3],implicitevidence$130:CaseClassFormats.this.JF[A4],implicitevidence$131:CaseClassFormats.this.JF[A5],implicitevidence$132:CaseClassFormats.this.JF[A6],implicitevidence$133:CaseClassFormats.this.JF[A7],implicitevidence$134:CaseClassFormats.this.JF[A8],implicitevidence$135:CaseClassFormats.this.JF[A9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8, key9: K9)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: K[K9], arg9: JF[A1], arg10: JF[A2], arg11: JF[A3], arg12: JF[A4], arg13: JF[A5], arg14: JF[A6], arg15: JF[A7], arg16: JF[A8], arg17: JF[A9]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,K9,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8,key9:K9)(implicitevidence$109:CaseClassFormats.this.K[K1],implicitevidence$110:CaseClassFormats.this.K[K2],implicitevidence$111:CaseClassFormats.this.K[K3],implicitevidence$112:CaseClassFormats.this.K[K4],implicitevidence$113:CaseClassFormats.this.K[K5],implicitevidence$114:CaseClassFormats.this.K[K6],implicitevidence$115:CaseClassFormats.this.K[K7],implicitevidence$116:CaseClassFormats.this.K[K8],implicitevidence$117:CaseClassFormats.this.K[K9],implicitevidence$118:CaseClassFormats.this.JF[A1],implicitevidence$119:CaseClassFormats.this.JF[A2],implicitevidence$120:CaseClassFormats.this.JF[A3],implicitevidence$121:CaseClassFormats.this.JF[A4],implicitevidence$122:CaseClassFormats.this.JF[A5],implicitevidence$123:CaseClassFormats.this.JF[A6],implicitevidence$124:CaseClassFormats.this.JF[A7],implicitevidence$125:CaseClassFormats.this.JF[A8],implicitevidence$126:CaseClassFormats.this.JF[A9]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray8", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray8", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray8[A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass8", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7], K8: K[K8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass8", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass8[K1,K2,K3,K4,K5,K6,K7,K8,A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitA8:CaseClassFormats.this.JF[A8],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7],implicitK8:CaseClassFormats.this.K[K8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7], arg7: JF[A8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$101:CaseClassFormats.this.JF[A1],implicitevidence$102:CaseClassFormats.this.JF[A2],implicitevidence$103:CaseClassFormats.this.JF[A3],implicitevidence$104:CaseClassFormats.this.JF[A4],implicitevidence$105:CaseClassFormats.this.JF[A5],implicitevidence$106:CaseClassFormats.this.JF[A6],implicitevidence$107:CaseClassFormats.this.JF[A7],implicitevidence$108:CaseClassFormats.this.JF[A8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7, key8: K8)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: K[K8], arg8: JF[A1], arg9: JF[A2], arg10: JF[A3], arg11: JF[A4], arg12: JF[A5], arg13: JF[A6], arg14: JF[A7], arg15: JF[A8]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,K8,A1,A2,A3,A4,A5,A6,A7,A8,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7,A8)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7,key8:K8)(implicitevidence$85:CaseClassFormats.this.K[K1],implicitevidence$86:CaseClassFormats.this.K[K2],implicitevidence$87:CaseClassFormats.this.K[K3],implicitevidence$88:CaseClassFormats.this.K[K4],implicitevidence$89:CaseClassFormats.this.K[K5],implicitevidence$90:CaseClassFormats.this.K[K6],implicitevidence$91:CaseClassFormats.this.K[K7],implicitevidence$92:CaseClassFormats.this.K[K8],implicitevidence$93:CaseClassFormats.this.JF[A1],implicitevidence$94:CaseClassFormats.this.JF[A2],implicitevidence$95:CaseClassFormats.this.JF[A3],implicitevidence$96:CaseClassFormats.this.JF[A4],implicitevidence$97:CaseClassFormats.this.JF[A5],implicitevidence$98:CaseClassFormats.this.JF[A6],implicitevidence$99:CaseClassFormats.this.JF[A7],implicitevidence$100:CaseClassFormats.this.JF[A8]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray7", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray7", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray7[A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass7", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6], K7: K[K7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass7", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass7[K1,K2,K3,K4,K5,K6,K7,A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitA7:CaseClassFormats.this.JF[A7],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6],implicitK7:CaseClassFormats.this.K[K7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6], arg6: JF[A7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$78:CaseClassFormats.this.JF[A1],implicitevidence$79:CaseClassFormats.this.JF[A2],implicitevidence$80:CaseClassFormats.this.JF[A3],implicitevidence$81:CaseClassFormats.this.JF[A4],implicitevidence$82:CaseClassFormats.this.JF[A5],implicitevidence$83:CaseClassFormats.this.JF[A6],implicitevidence$84:CaseClassFormats.this.JF[A7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6, A7) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6, key7: K7)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: K[K7], arg7: JF[A1], arg8: JF[A2], arg9: JF[A3], arg10: JF[A4], arg11: JF[A5], arg12: JF[A6], arg13: JF[A7]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,K7,A1,A2,A3,A4,A5,A6,A7,Z](applyFunc:(A1,A2,A3,A4,A5,A6,A7)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6,A7)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6,key7:K7)(implicitevidence$64:CaseClassFormats.this.K[K1],implicitevidence$65:CaseClassFormats.this.K[K2],implicitevidence$66:CaseClassFormats.this.K[K3],implicitevidence$67:CaseClassFormats.this.K[K4],implicitevidence$68:CaseClassFormats.this.K[K5],implicitevidence$69:CaseClassFormats.this.K[K6],implicitevidence$70:CaseClassFormats.this.K[K7],implicitevidence$71:CaseClassFormats.this.JF[A1],implicitevidence$72:CaseClassFormats.this.JF[A2],implicitevidence$73:CaseClassFormats.this.JF[A3],implicitevidence$74:CaseClassFormats.this.JF[A4],implicitevidence$75:CaseClassFormats.this.JF[A5],implicitevidence$76:CaseClassFormats.this.JF[A6],implicitevidence$77:CaseClassFormats.this.JF[A7]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray6", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray6", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray6[A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass6", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5], K6: K[K6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass6", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass6[K1,K2,K3,K4,K5,K6,A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitA6:CaseClassFormats.this.JF[A6],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5],implicitK6:CaseClassFormats.this.K[K6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5], arg5: JF[A6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$58:CaseClassFormats.this.JF[A1],implicitevidence$59:CaseClassFormats.this.JF[A2],implicitevidence$60:CaseClassFormats.this.JF[A3],implicitevidence$61:CaseClassFormats.this.JF[A4],implicitevidence$62:CaseClassFormats.this.JF[A5],implicitevidence$63:CaseClassFormats.this.JF[A6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5, A6) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5, key6: K6)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: K[K6], arg6: JF[A1], arg7: JF[A2], arg8: JF[A3], arg9: JF[A4], arg10: JF[A5], arg11: JF[A6]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,K6,A1,A2,A3,A4,A5,A6,Z](applyFunc:(A1,A2,A3,A4,A5,A6)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5,A6)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5,key6:K6)(implicitevidence$46:CaseClassFormats.this.K[K1],implicitevidence$47:CaseClassFormats.this.K[K2],implicitevidence$48:CaseClassFormats.this.K[K3],implicitevidence$49:CaseClassFormats.this.K[K4],implicitevidence$50:CaseClassFormats.this.K[K5],implicitevidence$51:CaseClassFormats.this.K[K6],implicitevidence$52:CaseClassFormats.this.JF[A1],implicitevidence$53:CaseClassFormats.this.JF[A2],implicitevidence$54:CaseClassFormats.this.JF[A3],implicitevidence$55:CaseClassFormats.this.JF[A4],implicitevidence$56:CaseClassFormats.this.JF[A5],implicitevidence$57:CaseClassFormats.this.JF[A6]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray5", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray5", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray5[A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass5", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4], K5: K[K5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass5", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass5[K1,K2,K3,K4,K5,A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitA5:CaseClassFormats.this.JF[A5],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4],implicitK5:CaseClassFormats.this.K[K5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4], arg4: JF[A5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$41:CaseClassFormats.this.JF[A1],implicitevidence$42:CaseClassFormats.this.JF[A2],implicitevidence$43:CaseClassFormats.this.JF[A3],implicitevidence$44:CaseClassFormats.this.JF[A4],implicitevidence$45:CaseClassFormats.this.JF[A5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4, A5) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4, A5)])(key1: K1, key2: K2, key3: K3, key4: K4, key5: K5)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: K[K5], arg5: JF[A1], arg6: JF[A2], arg7: JF[A3], arg8: JF[A4], arg9: JF[A5]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,K5,A1,A2,A3,A4,A5,Z](applyFunc:(A1,A2,A3,A4,A5)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4,A5)])(key1:K1,key2:K2,key3:K3,key4:K4,key5:K5)(implicitevidence$31:CaseClassFormats.this.K[K1],implicitevidence$32:CaseClassFormats.this.K[K2],implicitevidence$33:CaseClassFormats.this.K[K3],implicitevidence$34:CaseClassFormats.this.K[K4],implicitevidence$35:CaseClassFormats.this.K[K5],implicitevidence$36:CaseClassFormats.this.JF[A1],implicitevidence$37:CaseClassFormats.this.JF[A2],implicitevidence$38:CaseClassFormats.this.JF[A3],implicitevidence$39:CaseClassFormats.this.JF[A4],implicitevidence$40:CaseClassFormats.this.JF[A5]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray4", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray4", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray4[A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass4", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(key1: K1, key2: K2, key3: K3, key4: K4)(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], K1: K[K1], K2: K[K2], K3: K[K3], K4: K[K4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass4", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass4[K1,K2,K3,K4,A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(key1:K1,key2:K2,key3:K3,key4:K4)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitA4:CaseClassFormats.this.JF[A4],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3],implicitK4:CaseClassFormats.this.K[K4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3], arg3: JF[A4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(implicitevidence$27:CaseClassFormats.this.JF[A1],implicitevidence$28:CaseClassFormats.this.JF[A2],implicitevidence$29:CaseClassFormats.this.JF[A3],implicitevidence$30:CaseClassFormats.this.JF[A4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3, A4) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3, A4)])(key1: K1, key2: K2, key3: K3, key4: K4)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: K[K4], arg4: JF[A1], arg5: JF[A2], arg6: JF[A3], arg7: JF[A4]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,K4,A1,A2,A3,A4,Z](applyFunc:(A1,A2,A3,A4)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3,A4)])(key1:K1,key2:K2,key3:K3,key4:K4)(implicitevidence$19:CaseClassFormats.this.K[K1],implicitevidence$20:CaseClassFormats.this.K[K2],implicitevidence$21:CaseClassFormats.this.K[K3],implicitevidence$22:CaseClassFormats.this.K[K4],implicitevidence$23:CaseClassFormats.this.JF[A1],implicitevidence$24:CaseClassFormats.this.JF[A2],implicitevidence$25:CaseClassFormats.this.JF[A3],implicitevidence$26:CaseClassFormats.this.JF[A4]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray3", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(A1: JF[A1], A2: JF[A2], A3: JF[A3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray3", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray3[A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass3", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(key1: K1, key2: K2, key3: K3)(A1: JF[A1], A2: JF[A2], A3: JF[A3], K1: K[K1], K2: K[K2], K3: K[K3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass3", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass3[K1,K2,K3,A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(key1:K1,key2:K2,key3:K3)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitA3:CaseClassFormats.this.JF[A3],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2],implicitK3:CaseClassFormats.this.K[K3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(arg0: JF[A1], arg1: JF[A2], arg2: JF[A3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(implicitevidence$16:CaseClassFormats.this.JF[A1],implicitevidence$17:CaseClassFormats.this.JF[A2],implicitevidence$18:CaseClassFormats.this.JF[A3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2, A3) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2, A3)])(key1: K1, key2: K2, key3: K3)(arg0: K[K1], arg1: K[K2], arg2: K[K3], arg3: JF[A1], arg4: JF[A2], arg5: JF[A3]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,K3,A1,A2,A3,Z](applyFunc:(A1,A2,A3)=>Z,unapplyFunc:Z=>Option[(A1,A2,A3)])(key1:K1,key2:K2,key3:K3)(implicitevidence$10:CaseClassFormats.this.K[K1],implicitevidence$11:CaseClassFormats.this.K[K2],implicitevidence$12:CaseClassFormats.this.K[K3],implicitevidence$13:CaseClassFormats.this.JF[A1],implicitevidence$14:CaseClassFormats.this.JF[A2],implicitevidence$15:CaseClassFormats.this.JF[A3]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray2", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(A1: JF[A1], A2: JF[A2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray2", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray2[A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass2", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(key1: K1, key2: K2)(A1: JF[A1], A2: JF[A2], K1: K[K1], K2: K[K2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass2", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass2[K1,K2,A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(key1:K1,key2:K2)(implicitA1:CaseClassFormats.this.JF[A1],implicitA2:CaseClassFormats.this.JF[A2],implicitK1:CaseClassFormats.this.K[K1],implicitK2:CaseClassFormats.this.K[K2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(arg0: JF[A1], arg1: JF[A2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(implicitevidence$8:CaseClassFormats.this.JF[A1],implicitevidence$9:CaseClassFormats.this.JF[A2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1, A2) ⇒ Z, unapplyFunc: (Z) ⇒ Option[(A1, A2)])(key1: K1, key2: K2)(arg0: K[K1], arg1: K[K2], arg2: JF[A1], arg3: JF[A2]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,K2,A1,A2,Z](applyFunc:(A1,A2)=>Z,unapplyFunc:Z=>Option[(A1,A2)])(key1:K1,key2:K2)(implicitevidence$4:CaseClassFormats.this.K[K1],implicitevidence$5:CaseClassFormats.this.K[K2],implicitevidence$6:CaseClassFormats.this.JF[A1],implicitevidence$7:CaseClassFormats.this.JF[A2]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray1", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(A1: JF[A1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray1", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray1[A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(implicitA1:CaseClassFormats.this.JF[A1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass1", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(key1: K1)(A1: JF[A1], K1: K[K1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass1", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass1[K1,A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(key1:K1)(implicitA1:CaseClassFormats.this.JF[A1],implicitK1:CaseClassFormats.this.K[K1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClassArray", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(arg0: JF[A1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClassArray", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClassArray[A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(implicitevidence$3:CaseClassFormats.this.JF[A1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "caseClass", "tail" : "(applyFunc: (A1) ⇒ Z, unapplyFunc: (Z) ⇒ Option[A1])(key1: K1)(arg0: K[K1], arg1: JF[A1]): JF[Z]", "member" : "sjsonnew.CaseClassFormats.caseClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#caseClass[K1,A1,Z](applyFunc:A1=>Z,unapplyFunc:Z=>Option[A1])(key1:K1)(implicitevidence$1:CaseClassFormats.this.K[K1],implicitevidence$2:CaseClassFormats.this.JF[A1]):CaseClassFormats.this.JF[Z]", "kind" : "def"}, {"label" : "implicitHashWriter", "tail" : "(jsonWriter: JsonWriter[A]): HashWriter[A]", "member" : "sjsonnew.ImplicitHashWriters.implicitHashWriter", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#implicitHashWriter[A](implicitjsonWriter:sjsonnew.JsonWriter[A]):sjsonnew.HashWriter[A]", "kind" : "implicit def"}, {"label" : "localDateTimeStringIso", "tail" : ": IsoString[LocalDateTime]", "member" : "sjsonnew.CalendarFormats.localDateTimeStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#localDateTimeStringIso:sjsonnew.IsoString[java.time.LocalDateTime]", "kind" : "implicit val"}, {"label" : "localDateStringIso", "tail" : ": IsoString[LocalDate]", "member" : "sjsonnew.CalendarFormats.localDateStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#localDateStringIso:sjsonnew.IsoString[java.time.LocalDate]", "kind" : "implicit val"}, {"label" : "zonedDateTimeStringIso", "tail" : ": IsoString[ZonedDateTime]", "member" : "sjsonnew.CalendarFormats.zonedDateTimeStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#zonedDateTimeStringIso:sjsonnew.IsoString[java.time.ZonedDateTime]", "kind" : "implicit val"}, {"label" : "calendarStringIso", "tail" : ": IsoString[Calendar]", "member" : "sjsonnew.CalendarFormats.calendarStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#calendarStringIso:sjsonnew.IsoString[java.util.Calendar]", "kind" : "implicit val"}, {"label" : "instantStringIso", "tail" : ": IsoString[Instant]", "member" : "sjsonnew.CalendarFormats.instantStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#instantStringIso:sjsonnew.IsoString[java.time.Instant]", "kind" : "implicit val"}, {"label" : "offsetDateTimeStringIso", "tail" : ": IsoString[OffsetDateTime]", "member" : "sjsonnew.CalendarFormats.offsetDateTimeStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#offsetDateTimeStringIso:sjsonnew.IsoString[java.time.OffsetDateTime]", "kind" : "implicit val"}, {"label" : "optionalFormat", "tail" : "(arg0: JF[A]): JF[Optional[A]]", "member" : "sjsonnew.JavaExtraFormats.optionalFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#optionalFormat[A](implicitevidence$1:JavaExtraFormats.this.JF[A]):JavaExtraFormats.this.JF[java.util.Optional[A]]", "kind" : "implicit def"}, {"label" : "fileStringIso", "tail" : ": IsoString[File]", "member" : "sjsonnew.JavaExtraFormats.fileStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#fileStringIso:sjsonnew.IsoString[java.io.File]", "kind" : "implicit val"}, {"label" : "urlStringIso", "tail" : ": IsoString[URL]", "member" : "sjsonnew.JavaExtraFormats.urlStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#urlStringIso:sjsonnew.IsoString[java.net.URL]", "kind" : "implicit val"}, {"label" : "uriStringIso", "tail" : ": IsoString[URI]", "member" : "sjsonnew.JavaExtraFormats.uriStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#uriStringIso:sjsonnew.IsoString[java.net.URI]", "kind" : "implicit val"}, {"label" : "uuidStringIso", "tail" : ": IsoString[UUID]", "member" : "sjsonnew.JavaExtraFormats.uuidStringIso", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#uuidStringIso:sjsonnew.IsoString[java.util.UUID]", "kind" : "implicit val"}, {"label" : "javaBigDecimalFormat", "tail" : ": JF[BigDecimal]", "member" : "sjsonnew.JavaExtraFormats.javaBigDecimalFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#javaBigDecimalFormat:JavaExtraFormats.this.JF[java.math.BigDecimal]", "kind" : "implicit val"}, {"label" : "javaBigIntegerFormat", "tail" : ": JF[BigInteger]", "member" : "sjsonnew.JavaExtraFormats.javaBigIntegerFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#javaBigIntegerFormat:JavaExtraFormats.this.JF[java.math.BigInteger]", "kind" : "implicit val"}, {"label" : "JDoubleJsonKeyFormat", "tail" : ": JsonKeyFormat[Double]", "member" : "sjsonnew.JavaPrimitiveFormats.JDoubleJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JDoubleJsonKeyFormat:sjsonnew.JsonKeyFormat[Double]", "kind" : "implicit val"}, {"label" : "JFloatJsonKeyFormat", "tail" : ": JsonKeyFormat[Float]", "member" : "sjsonnew.JavaPrimitiveFormats.JFloatJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JFloatJsonKeyFormat:sjsonnew.JsonKeyFormat[Float]", "kind" : "implicit val"}, {"label" : "JLongJsonKeyFormat", "tail" : ": JsonKeyFormat[Long]", "member" : "sjsonnew.JavaPrimitiveFormats.JLongJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JLongJsonKeyFormat:sjsonnew.JsonKeyFormat[Long]", "kind" : "implicit val"}, {"label" : "JIntegerJsonKeyFormat", "tail" : ": JsonKeyFormat[Integer]", "member" : "sjsonnew.JavaPrimitiveFormats.JIntegerJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JIntegerJsonKeyFormat:sjsonnew.JsonKeyFormat[Integer]", "kind" : "implicit val"}, {"label" : "JCharacterJsonKeyFormat", "tail" : ": JsonKeyFormat[Character]", "member" : "sjsonnew.JavaPrimitiveFormats.JCharacterJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JCharacterJsonKeyFormat:sjsonnew.JsonKeyFormat[Character]", "kind" : "implicit val"}, {"label" : "JShortJsonKeyFormat", "tail" : ": JsonKeyFormat[Short]", "member" : "sjsonnew.JavaPrimitiveFormats.JShortJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JShortJsonKeyFormat:sjsonnew.JsonKeyFormat[Short]", "kind" : "implicit val"}, {"label" : "JByteJsonKeyFormat", "tail" : ": JsonKeyFormat[Byte]", "member" : "sjsonnew.JavaPrimitiveFormats.JByteJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JByteJsonKeyFormat:sjsonnew.JsonKeyFormat[Byte]", "kind" : "implicit val"}, {"label" : "JBooleanJsonKeyFormat", "tail" : ": JsonKeyFormat[Boolean]", "member" : "sjsonnew.JavaPrimitiveFormats.JBooleanJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JBooleanJsonKeyFormat:sjsonnew.JsonKeyFormat[Boolean]", "kind" : "implicit val"}, {"label" : "JCharacterJsonFormat", "tail" : ": JsonFormat[Character]", "member" : "sjsonnew.JavaPrimitiveFormats.JCharacterJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JCharacterJsonFormat:sjsonnew.JsonFormat[Character]", "kind" : "implicit lazy val"}, {"label" : "JBooleanJsonFormat", "tail" : ": JsonFormat[Boolean]", "member" : "sjsonnew.JavaPrimitiveFormats.JBooleanJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JBooleanJsonFormat:sjsonnew.JsonFormat[Boolean]", "kind" : "implicit lazy val"}, {"label" : "JShortJsonFormat", "tail" : ": JsonFormat[Short]", "member" : "sjsonnew.JavaPrimitiveFormats.JShortJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JShortJsonFormat:sjsonnew.JsonFormat[Short]", "kind" : "implicit lazy val"}, {"label" : "JByteJsonFormat", "tail" : ": JsonFormat[Byte]", "member" : "sjsonnew.JavaPrimitiveFormats.JByteJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JByteJsonFormat:sjsonnew.JsonFormat[Byte]", "kind" : "implicit lazy val"}, {"label" : "JDoubleJsonFormat", "tail" : ": JsonFormat[Double]", "member" : "sjsonnew.JavaPrimitiveFormats.JDoubleJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JDoubleJsonFormat:sjsonnew.JsonFormat[Double]", "kind" : "implicit lazy val"}, {"label" : "JFloatJsonFormat", "tail" : ": JsonFormat[Float]", "member" : "sjsonnew.JavaPrimitiveFormats.JFloatJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JFloatJsonFormat:sjsonnew.JsonFormat[Float]", "kind" : "implicit lazy val"}, {"label" : "JLongJsonFormat", "tail" : ": JsonFormat[Long]", "member" : "sjsonnew.JavaPrimitiveFormats.JLongJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JLongJsonFormat:sjsonnew.JsonFormat[Long]", "kind" : "implicit lazy val"}, {"label" : "JIntegerJsonFormat", "tail" : ": JsonFormat[Integer]", "member" : "sjsonnew.JavaPrimitiveFormats.JIntegerJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#JIntegerJsonFormat:sjsonnew.JsonFormat[Integer]", "kind" : "implicit lazy val"}, {"label" : "isoStringKeyFormat", "tail" : "(z: IsoString[A]): JsonKeyFormat[A]", "member" : "sjsonnew.IsoFormats.isoStringKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#isoStringKeyFormat[A](implicitz:sjsonnew.IsoString[A]):sjsonnew.JsonKeyFormat[A]", "kind" : "implicit def"}, {"label" : "isoStringFormat", "tail" : "(arg0: IsoString[A]): JsonFormat[A]", "member" : "sjsonnew.IsoFormats.isoStringFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#isoStringFormat[A](implicitevidence$2:sjsonnew.IsoString[A]):sjsonnew.JsonFormat[A]", "kind" : "implicit def"}, {"label" : "isolistFormat", "tail" : "(arg0: IsoLList[A]): JsonFormat[A]", "member" : "sjsonnew.IsoFormats.isolistFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#isolistFormat[A](implicitevidence$1:sjsonnew.IsoLList[A]):sjsonnew.JsonFormat[A]", "kind" : "implicit def"}, {"label" : "flatUnionFormat22", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21], arg42: JF[A22], arg43: Manifest[A22]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat22", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat22[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](typeFieldName:String)(implicitevidence$969:FlatUnionFormats.this.JF[A1],implicitevidence$970:Manifest[A1],implicitevidence$971:FlatUnionFormats.this.JF[A2],implicitevidence$972:Manifest[A2],implicitevidence$973:FlatUnionFormats.this.JF[A3],implicitevidence$974:Manifest[A3],implicitevidence$975:FlatUnionFormats.this.JF[A4],implicitevidence$976:Manifest[A4],implicitevidence$977:FlatUnionFormats.this.JF[A5],implicitevidence$978:Manifest[A5],implicitevidence$979:FlatUnionFormats.this.JF[A6],implicitevidence$980:Manifest[A6],implicitevidence$981:FlatUnionFormats.this.JF[A7],implicitevidence$982:Manifest[A7],implicitevidence$983:FlatUnionFormats.this.JF[A8],implicitevidence$984:Manifest[A8],implicitevidence$985:FlatUnionFormats.this.JF[A9],implicitevidence$986:Manifest[A9],implicitevidence$987:FlatUnionFormats.this.JF[A10],implicitevidence$988:Manifest[A10],implicitevidence$989:FlatUnionFormats.this.JF[A11],implicitevidence$990:Manifest[A11],implicitevidence$991:FlatUnionFormats.this.JF[A12],implicitevidence$992:Manifest[A12],implicitevidence$993:FlatUnionFormats.this.JF[A13],implicitevidence$994:Manifest[A13],implicitevidence$995:FlatUnionFormats.this.JF[A14],implicitevidence$996:Manifest[A14],implicitevidence$997:FlatUnionFormats.this.JF[A15],implicitevidence$998:Manifest[A15],implicitevidence$999:FlatUnionFormats.this.JF[A16],implicitevidence$1000:Manifest[A16],implicitevidence$1001:FlatUnionFormats.this.JF[A17],implicitevidence$1002:Manifest[A17],implicitevidence$1003:FlatUnionFormats.this.JF[A18],implicitevidence$1004:Manifest[A18],implicitevidence$1005:FlatUnionFormats.this.JF[A19],implicitevidence$1006:Manifest[A19],implicitevidence$1007:FlatUnionFormats.this.JF[A20],implicitevidence$1008:Manifest[A20],implicitevidence$1009:FlatUnionFormats.this.JF[A21],implicitevidence$1010:Manifest[A21],implicitevidence$1011:FlatUnionFormats.this.JF[A22],implicitevidence$1012:Manifest[A22]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat21", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat21", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat21[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](typeFieldName:String)(implicitevidence$927:FlatUnionFormats.this.JF[A1],implicitevidence$928:Manifest[A1],implicitevidence$929:FlatUnionFormats.this.JF[A2],implicitevidence$930:Manifest[A2],implicitevidence$931:FlatUnionFormats.this.JF[A3],implicitevidence$932:Manifest[A3],implicitevidence$933:FlatUnionFormats.this.JF[A4],implicitevidence$934:Manifest[A4],implicitevidence$935:FlatUnionFormats.this.JF[A5],implicitevidence$936:Manifest[A5],implicitevidence$937:FlatUnionFormats.this.JF[A6],implicitevidence$938:Manifest[A6],implicitevidence$939:FlatUnionFormats.this.JF[A7],implicitevidence$940:Manifest[A7],implicitevidence$941:FlatUnionFormats.this.JF[A8],implicitevidence$942:Manifest[A8],implicitevidence$943:FlatUnionFormats.this.JF[A9],implicitevidence$944:Manifest[A9],implicitevidence$945:FlatUnionFormats.this.JF[A10],implicitevidence$946:Manifest[A10],implicitevidence$947:FlatUnionFormats.this.JF[A11],implicitevidence$948:Manifest[A11],implicitevidence$949:FlatUnionFormats.this.JF[A12],implicitevidence$950:Manifest[A12],implicitevidence$951:FlatUnionFormats.this.JF[A13],implicitevidence$952:Manifest[A13],implicitevidence$953:FlatUnionFormats.this.JF[A14],implicitevidence$954:Manifest[A14],implicitevidence$955:FlatUnionFormats.this.JF[A15],implicitevidence$956:Manifest[A15],implicitevidence$957:FlatUnionFormats.this.JF[A16],implicitevidence$958:Manifest[A16],implicitevidence$959:FlatUnionFormats.this.JF[A17],implicitevidence$960:Manifest[A17],implicitevidence$961:FlatUnionFormats.this.JF[A18],implicitevidence$962:Manifest[A18],implicitevidence$963:FlatUnionFormats.this.JF[A19],implicitevidence$964:Manifest[A19],implicitevidence$965:FlatUnionFormats.this.JF[A20],implicitevidence$966:Manifest[A20],implicitevidence$967:FlatUnionFormats.this.JF[A21],implicitevidence$968:Manifest[A21]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat20", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat20", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat20[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](typeFieldName:String)(implicitevidence$887:FlatUnionFormats.this.JF[A1],implicitevidence$888:Manifest[A1],implicitevidence$889:FlatUnionFormats.this.JF[A2],implicitevidence$890:Manifest[A2],implicitevidence$891:FlatUnionFormats.this.JF[A3],implicitevidence$892:Manifest[A3],implicitevidence$893:FlatUnionFormats.this.JF[A4],implicitevidence$894:Manifest[A4],implicitevidence$895:FlatUnionFormats.this.JF[A5],implicitevidence$896:Manifest[A5],implicitevidence$897:FlatUnionFormats.this.JF[A6],implicitevidence$898:Manifest[A6],implicitevidence$899:FlatUnionFormats.this.JF[A7],implicitevidence$900:Manifest[A7],implicitevidence$901:FlatUnionFormats.this.JF[A8],implicitevidence$902:Manifest[A8],implicitevidence$903:FlatUnionFormats.this.JF[A9],implicitevidence$904:Manifest[A9],implicitevidence$905:FlatUnionFormats.this.JF[A10],implicitevidence$906:Manifest[A10],implicitevidence$907:FlatUnionFormats.this.JF[A11],implicitevidence$908:Manifest[A11],implicitevidence$909:FlatUnionFormats.this.JF[A12],implicitevidence$910:Manifest[A12],implicitevidence$911:FlatUnionFormats.this.JF[A13],implicitevidence$912:Manifest[A13],implicitevidence$913:FlatUnionFormats.this.JF[A14],implicitevidence$914:Manifest[A14],implicitevidence$915:FlatUnionFormats.this.JF[A15],implicitevidence$916:Manifest[A15],implicitevidence$917:FlatUnionFormats.this.JF[A16],implicitevidence$918:Manifest[A16],implicitevidence$919:FlatUnionFormats.this.JF[A17],implicitevidence$920:Manifest[A17],implicitevidence$921:FlatUnionFormats.this.JF[A18],implicitevidence$922:Manifest[A18],implicitevidence$923:FlatUnionFormats.this.JF[A19],implicitevidence$924:Manifest[A19],implicitevidence$925:FlatUnionFormats.this.JF[A20],implicitevidence$926:Manifest[A20]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat19", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat19", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat19[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](typeFieldName:String)(implicitevidence$849:FlatUnionFormats.this.JF[A1],implicitevidence$850:Manifest[A1],implicitevidence$851:FlatUnionFormats.this.JF[A2],implicitevidence$852:Manifest[A2],implicitevidence$853:FlatUnionFormats.this.JF[A3],implicitevidence$854:Manifest[A3],implicitevidence$855:FlatUnionFormats.this.JF[A4],implicitevidence$856:Manifest[A4],implicitevidence$857:FlatUnionFormats.this.JF[A5],implicitevidence$858:Manifest[A5],implicitevidence$859:FlatUnionFormats.this.JF[A6],implicitevidence$860:Manifest[A6],implicitevidence$861:FlatUnionFormats.this.JF[A7],implicitevidence$862:Manifest[A7],implicitevidence$863:FlatUnionFormats.this.JF[A8],implicitevidence$864:Manifest[A8],implicitevidence$865:FlatUnionFormats.this.JF[A9],implicitevidence$866:Manifest[A9],implicitevidence$867:FlatUnionFormats.this.JF[A10],implicitevidence$868:Manifest[A10],implicitevidence$869:FlatUnionFormats.this.JF[A11],implicitevidence$870:Manifest[A11],implicitevidence$871:FlatUnionFormats.this.JF[A12],implicitevidence$872:Manifest[A12],implicitevidence$873:FlatUnionFormats.this.JF[A13],implicitevidence$874:Manifest[A13],implicitevidence$875:FlatUnionFormats.this.JF[A14],implicitevidence$876:Manifest[A14],implicitevidence$877:FlatUnionFormats.this.JF[A15],implicitevidence$878:Manifest[A15],implicitevidence$879:FlatUnionFormats.this.JF[A16],implicitevidence$880:Manifest[A16],implicitevidence$881:FlatUnionFormats.this.JF[A17],implicitevidence$882:Manifest[A17],implicitevidence$883:FlatUnionFormats.this.JF[A18],implicitevidence$884:Manifest[A18],implicitevidence$885:FlatUnionFormats.this.JF[A19],implicitevidence$886:Manifest[A19]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat18", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat18", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat18[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](typeFieldName:String)(implicitevidence$813:FlatUnionFormats.this.JF[A1],implicitevidence$814:Manifest[A1],implicitevidence$815:FlatUnionFormats.this.JF[A2],implicitevidence$816:Manifest[A2],implicitevidence$817:FlatUnionFormats.this.JF[A3],implicitevidence$818:Manifest[A3],implicitevidence$819:FlatUnionFormats.this.JF[A4],implicitevidence$820:Manifest[A4],implicitevidence$821:FlatUnionFormats.this.JF[A5],implicitevidence$822:Manifest[A5],implicitevidence$823:FlatUnionFormats.this.JF[A6],implicitevidence$824:Manifest[A6],implicitevidence$825:FlatUnionFormats.this.JF[A7],implicitevidence$826:Manifest[A7],implicitevidence$827:FlatUnionFormats.this.JF[A8],implicitevidence$828:Manifest[A8],implicitevidence$829:FlatUnionFormats.this.JF[A9],implicitevidence$830:Manifest[A9],implicitevidence$831:FlatUnionFormats.this.JF[A10],implicitevidence$832:Manifest[A10],implicitevidence$833:FlatUnionFormats.this.JF[A11],implicitevidence$834:Manifest[A11],implicitevidence$835:FlatUnionFormats.this.JF[A12],implicitevidence$836:Manifest[A12],implicitevidence$837:FlatUnionFormats.this.JF[A13],implicitevidence$838:Manifest[A13],implicitevidence$839:FlatUnionFormats.this.JF[A14],implicitevidence$840:Manifest[A14],implicitevidence$841:FlatUnionFormats.this.JF[A15],implicitevidence$842:Manifest[A15],implicitevidence$843:FlatUnionFormats.this.JF[A16],implicitevidence$844:Manifest[A16],implicitevidence$845:FlatUnionFormats.this.JF[A17],implicitevidence$846:Manifest[A17],implicitevidence$847:FlatUnionFormats.this.JF[A18],implicitevidence$848:Manifest[A18]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat17", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat17", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat17[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](typeFieldName:String)(implicitevidence$779:FlatUnionFormats.this.JF[A1],implicitevidence$780:Manifest[A1],implicitevidence$781:FlatUnionFormats.this.JF[A2],implicitevidence$782:Manifest[A2],implicitevidence$783:FlatUnionFormats.this.JF[A3],implicitevidence$784:Manifest[A3],implicitevidence$785:FlatUnionFormats.this.JF[A4],implicitevidence$786:Manifest[A4],implicitevidence$787:FlatUnionFormats.this.JF[A5],implicitevidence$788:Manifest[A5],implicitevidence$789:FlatUnionFormats.this.JF[A6],implicitevidence$790:Manifest[A6],implicitevidence$791:FlatUnionFormats.this.JF[A7],implicitevidence$792:Manifest[A7],implicitevidence$793:FlatUnionFormats.this.JF[A8],implicitevidence$794:Manifest[A8],implicitevidence$795:FlatUnionFormats.this.JF[A9],implicitevidence$796:Manifest[A9],implicitevidence$797:FlatUnionFormats.this.JF[A10],implicitevidence$798:Manifest[A10],implicitevidence$799:FlatUnionFormats.this.JF[A11],implicitevidence$800:Manifest[A11],implicitevidence$801:FlatUnionFormats.this.JF[A12],implicitevidence$802:Manifest[A12],implicitevidence$803:FlatUnionFormats.this.JF[A13],implicitevidence$804:Manifest[A13],implicitevidence$805:FlatUnionFormats.this.JF[A14],implicitevidence$806:Manifest[A14],implicitevidence$807:FlatUnionFormats.this.JF[A15],implicitevidence$808:Manifest[A15],implicitevidence$809:FlatUnionFormats.this.JF[A16],implicitevidence$810:Manifest[A16],implicitevidence$811:FlatUnionFormats.this.JF[A17],implicitevidence$812:Manifest[A17]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat16", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat16", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat16[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](typeFieldName:String)(implicitevidence$747:FlatUnionFormats.this.JF[A1],implicitevidence$748:Manifest[A1],implicitevidence$749:FlatUnionFormats.this.JF[A2],implicitevidence$750:Manifest[A2],implicitevidence$751:FlatUnionFormats.this.JF[A3],implicitevidence$752:Manifest[A3],implicitevidence$753:FlatUnionFormats.this.JF[A4],implicitevidence$754:Manifest[A4],implicitevidence$755:FlatUnionFormats.this.JF[A5],implicitevidence$756:Manifest[A5],implicitevidence$757:FlatUnionFormats.this.JF[A6],implicitevidence$758:Manifest[A6],implicitevidence$759:FlatUnionFormats.this.JF[A7],implicitevidence$760:Manifest[A7],implicitevidence$761:FlatUnionFormats.this.JF[A8],implicitevidence$762:Manifest[A8],implicitevidence$763:FlatUnionFormats.this.JF[A9],implicitevidence$764:Manifest[A9],implicitevidence$765:FlatUnionFormats.this.JF[A10],implicitevidence$766:Manifest[A10],implicitevidence$767:FlatUnionFormats.this.JF[A11],implicitevidence$768:Manifest[A11],implicitevidence$769:FlatUnionFormats.this.JF[A12],implicitevidence$770:Manifest[A12],implicitevidence$771:FlatUnionFormats.this.JF[A13],implicitevidence$772:Manifest[A13],implicitevidence$773:FlatUnionFormats.this.JF[A14],implicitevidence$774:Manifest[A14],implicitevidence$775:FlatUnionFormats.this.JF[A15],implicitevidence$776:Manifest[A15],implicitevidence$777:FlatUnionFormats.this.JF[A16],implicitevidence$778:Manifest[A16]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat15", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat15", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat15[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](typeFieldName:String)(implicitevidence$717:FlatUnionFormats.this.JF[A1],implicitevidence$718:Manifest[A1],implicitevidence$719:FlatUnionFormats.this.JF[A2],implicitevidence$720:Manifest[A2],implicitevidence$721:FlatUnionFormats.this.JF[A3],implicitevidence$722:Manifest[A3],implicitevidence$723:FlatUnionFormats.this.JF[A4],implicitevidence$724:Manifest[A4],implicitevidence$725:FlatUnionFormats.this.JF[A5],implicitevidence$726:Manifest[A5],implicitevidence$727:FlatUnionFormats.this.JF[A6],implicitevidence$728:Manifest[A6],implicitevidence$729:FlatUnionFormats.this.JF[A7],implicitevidence$730:Manifest[A7],implicitevidence$731:FlatUnionFormats.this.JF[A8],implicitevidence$732:Manifest[A8],implicitevidence$733:FlatUnionFormats.this.JF[A9],implicitevidence$734:Manifest[A9],implicitevidence$735:FlatUnionFormats.this.JF[A10],implicitevidence$736:Manifest[A10],implicitevidence$737:FlatUnionFormats.this.JF[A11],implicitevidence$738:Manifest[A11],implicitevidence$739:FlatUnionFormats.this.JF[A12],implicitevidence$740:Manifest[A12],implicitevidence$741:FlatUnionFormats.this.JF[A13],implicitevidence$742:Manifest[A13],implicitevidence$743:FlatUnionFormats.this.JF[A14],implicitevidence$744:Manifest[A14],implicitevidence$745:FlatUnionFormats.this.JF[A15],implicitevidence$746:Manifest[A15]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat14", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat14", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat14[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](typeFieldName:String)(implicitevidence$689:FlatUnionFormats.this.JF[A1],implicitevidence$690:Manifest[A1],implicitevidence$691:FlatUnionFormats.this.JF[A2],implicitevidence$692:Manifest[A2],implicitevidence$693:FlatUnionFormats.this.JF[A3],implicitevidence$694:Manifest[A3],implicitevidence$695:FlatUnionFormats.this.JF[A4],implicitevidence$696:Manifest[A4],implicitevidence$697:FlatUnionFormats.this.JF[A5],implicitevidence$698:Manifest[A5],implicitevidence$699:FlatUnionFormats.this.JF[A6],implicitevidence$700:Manifest[A6],implicitevidence$701:FlatUnionFormats.this.JF[A7],implicitevidence$702:Manifest[A7],implicitevidence$703:FlatUnionFormats.this.JF[A8],implicitevidence$704:Manifest[A8],implicitevidence$705:FlatUnionFormats.this.JF[A9],implicitevidence$706:Manifest[A9],implicitevidence$707:FlatUnionFormats.this.JF[A10],implicitevidence$708:Manifest[A10],implicitevidence$709:FlatUnionFormats.this.JF[A11],implicitevidence$710:Manifest[A11],implicitevidence$711:FlatUnionFormats.this.JF[A12],implicitevidence$712:Manifest[A12],implicitevidence$713:FlatUnionFormats.this.JF[A13],implicitevidence$714:Manifest[A13],implicitevidence$715:FlatUnionFormats.this.JF[A14],implicitevidence$716:Manifest[A14]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat13", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat13", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat13[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](typeFieldName:String)(implicitevidence$663:FlatUnionFormats.this.JF[A1],implicitevidence$664:Manifest[A1],implicitevidence$665:FlatUnionFormats.this.JF[A2],implicitevidence$666:Manifest[A2],implicitevidence$667:FlatUnionFormats.this.JF[A3],implicitevidence$668:Manifest[A3],implicitevidence$669:FlatUnionFormats.this.JF[A4],implicitevidence$670:Manifest[A4],implicitevidence$671:FlatUnionFormats.this.JF[A5],implicitevidence$672:Manifest[A5],implicitevidence$673:FlatUnionFormats.this.JF[A6],implicitevidence$674:Manifest[A6],implicitevidence$675:FlatUnionFormats.this.JF[A7],implicitevidence$676:Manifest[A7],implicitevidence$677:FlatUnionFormats.this.JF[A8],implicitevidence$678:Manifest[A8],implicitevidence$679:FlatUnionFormats.this.JF[A9],implicitevidence$680:Manifest[A9],implicitevidence$681:FlatUnionFormats.this.JF[A10],implicitevidence$682:Manifest[A10],implicitevidence$683:FlatUnionFormats.this.JF[A11],implicitevidence$684:Manifest[A11],implicitevidence$685:FlatUnionFormats.this.JF[A12],implicitevidence$686:Manifest[A12],implicitevidence$687:FlatUnionFormats.this.JF[A13],implicitevidence$688:Manifest[A13]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat12", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat12", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat12[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](typeFieldName:String)(implicitevidence$639:FlatUnionFormats.this.JF[A1],implicitevidence$640:Manifest[A1],implicitevidence$641:FlatUnionFormats.this.JF[A2],implicitevidence$642:Manifest[A2],implicitevidence$643:FlatUnionFormats.this.JF[A3],implicitevidence$644:Manifest[A3],implicitevidence$645:FlatUnionFormats.this.JF[A4],implicitevidence$646:Manifest[A4],implicitevidence$647:FlatUnionFormats.this.JF[A5],implicitevidence$648:Manifest[A5],implicitevidence$649:FlatUnionFormats.this.JF[A6],implicitevidence$650:Manifest[A6],implicitevidence$651:FlatUnionFormats.this.JF[A7],implicitevidence$652:Manifest[A7],implicitevidence$653:FlatUnionFormats.this.JF[A8],implicitevidence$654:Manifest[A8],implicitevidence$655:FlatUnionFormats.this.JF[A9],implicitevidence$656:Manifest[A9],implicitevidence$657:FlatUnionFormats.this.JF[A10],implicitevidence$658:Manifest[A10],implicitevidence$659:FlatUnionFormats.this.JF[A11],implicitevidence$660:Manifest[A11],implicitevidence$661:FlatUnionFormats.this.JF[A12],implicitevidence$662:Manifest[A12]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat11", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat11", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat11[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](typeFieldName:String)(implicitevidence$617:FlatUnionFormats.this.JF[A1],implicitevidence$618:Manifest[A1],implicitevidence$619:FlatUnionFormats.this.JF[A2],implicitevidence$620:Manifest[A2],implicitevidence$621:FlatUnionFormats.this.JF[A3],implicitevidence$622:Manifest[A3],implicitevidence$623:FlatUnionFormats.this.JF[A4],implicitevidence$624:Manifest[A4],implicitevidence$625:FlatUnionFormats.this.JF[A5],implicitevidence$626:Manifest[A5],implicitevidence$627:FlatUnionFormats.this.JF[A6],implicitevidence$628:Manifest[A6],implicitevidence$629:FlatUnionFormats.this.JF[A7],implicitevidence$630:Manifest[A7],implicitevidence$631:FlatUnionFormats.this.JF[A8],implicitevidence$632:Manifest[A8],implicitevidence$633:FlatUnionFormats.this.JF[A9],implicitevidence$634:Manifest[A9],implicitevidence$635:FlatUnionFormats.this.JF[A10],implicitevidence$636:Manifest[A10],implicitevidence$637:FlatUnionFormats.this.JF[A11],implicitevidence$638:Manifest[A11]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat10", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat10", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat10[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](typeFieldName:String)(implicitevidence$597:FlatUnionFormats.this.JF[A1],implicitevidence$598:Manifest[A1],implicitevidence$599:FlatUnionFormats.this.JF[A2],implicitevidence$600:Manifest[A2],implicitevidence$601:FlatUnionFormats.this.JF[A3],implicitevidence$602:Manifest[A3],implicitevidence$603:FlatUnionFormats.this.JF[A4],implicitevidence$604:Manifest[A4],implicitevidence$605:FlatUnionFormats.this.JF[A5],implicitevidence$606:Manifest[A5],implicitevidence$607:FlatUnionFormats.this.JF[A6],implicitevidence$608:Manifest[A6],implicitevidence$609:FlatUnionFormats.this.JF[A7],implicitevidence$610:Manifest[A7],implicitevidence$611:FlatUnionFormats.this.JF[A8],implicitevidence$612:Manifest[A8],implicitevidence$613:FlatUnionFormats.this.JF[A9],implicitevidence$614:Manifest[A9],implicitevidence$615:FlatUnionFormats.this.JF[A10],implicitevidence$616:Manifest[A10]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat9", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat9", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat9[U,A1,A2,A3,A4,A5,A6,A7,A8,A9](typeFieldName:String)(implicitevidence$579:FlatUnionFormats.this.JF[A1],implicitevidence$580:Manifest[A1],implicitevidence$581:FlatUnionFormats.this.JF[A2],implicitevidence$582:Manifest[A2],implicitevidence$583:FlatUnionFormats.this.JF[A3],implicitevidence$584:Manifest[A3],implicitevidence$585:FlatUnionFormats.this.JF[A4],implicitevidence$586:Manifest[A4],implicitevidence$587:FlatUnionFormats.this.JF[A5],implicitevidence$588:Manifest[A5],implicitevidence$589:FlatUnionFormats.this.JF[A6],implicitevidence$590:Manifest[A6],implicitevidence$591:FlatUnionFormats.this.JF[A7],implicitevidence$592:Manifest[A7],implicitevidence$593:FlatUnionFormats.this.JF[A8],implicitevidence$594:Manifest[A8],implicitevidence$595:FlatUnionFormats.this.JF[A9],implicitevidence$596:Manifest[A9]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat8", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat8", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat8[U,A1,A2,A3,A4,A5,A6,A7,A8](typeFieldName:String)(implicitevidence$563:FlatUnionFormats.this.JF[A1],implicitevidence$564:Manifest[A1],implicitevidence$565:FlatUnionFormats.this.JF[A2],implicitevidence$566:Manifest[A2],implicitevidence$567:FlatUnionFormats.this.JF[A3],implicitevidence$568:Manifest[A3],implicitevidence$569:FlatUnionFormats.this.JF[A4],implicitevidence$570:Manifest[A4],implicitevidence$571:FlatUnionFormats.this.JF[A5],implicitevidence$572:Manifest[A5],implicitevidence$573:FlatUnionFormats.this.JF[A6],implicitevidence$574:Manifest[A6],implicitevidence$575:FlatUnionFormats.this.JF[A7],implicitevidence$576:Manifest[A7],implicitevidence$577:FlatUnionFormats.this.JF[A8],implicitevidence$578:Manifest[A8]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat7", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat7", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat7[U,A1,A2,A3,A4,A5,A6,A7](typeFieldName:String)(implicitevidence$549:FlatUnionFormats.this.JF[A1],implicitevidence$550:Manifest[A1],implicitevidence$551:FlatUnionFormats.this.JF[A2],implicitevidence$552:Manifest[A2],implicitevidence$553:FlatUnionFormats.this.JF[A3],implicitevidence$554:Manifest[A3],implicitevidence$555:FlatUnionFormats.this.JF[A4],implicitevidence$556:Manifest[A4],implicitevidence$557:FlatUnionFormats.this.JF[A5],implicitevidence$558:Manifest[A5],implicitevidence$559:FlatUnionFormats.this.JF[A6],implicitevidence$560:Manifest[A6],implicitevidence$561:FlatUnionFormats.this.JF[A7],implicitevidence$562:Manifest[A7]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat6", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat6", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat6[U,A1,A2,A3,A4,A5,A6](typeFieldName:String)(implicitevidence$537:FlatUnionFormats.this.JF[A1],implicitevidence$538:Manifest[A1],implicitevidence$539:FlatUnionFormats.this.JF[A2],implicitevidence$540:Manifest[A2],implicitevidence$541:FlatUnionFormats.this.JF[A3],implicitevidence$542:Manifest[A3],implicitevidence$543:FlatUnionFormats.this.JF[A4],implicitevidence$544:Manifest[A4],implicitevidence$545:FlatUnionFormats.this.JF[A5],implicitevidence$546:Manifest[A5],implicitevidence$547:FlatUnionFormats.this.JF[A6],implicitevidence$548:Manifest[A6]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat5", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat5", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat5[U,A1,A2,A3,A4,A5](typeFieldName:String)(implicitevidence$527:FlatUnionFormats.this.JF[A1],implicitevidence$528:Manifest[A1],implicitevidence$529:FlatUnionFormats.this.JF[A2],implicitevidence$530:Manifest[A2],implicitevidence$531:FlatUnionFormats.this.JF[A3],implicitevidence$532:Manifest[A3],implicitevidence$533:FlatUnionFormats.this.JF[A4],implicitevidence$534:Manifest[A4],implicitevidence$535:FlatUnionFormats.this.JF[A5],implicitevidence$536:Manifest[A5]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat4", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat4", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat4[U,A1,A2,A3,A4](typeFieldName:String)(implicitevidence$519:FlatUnionFormats.this.JF[A1],implicitevidence$520:Manifest[A1],implicitevidence$521:FlatUnionFormats.this.JF[A2],implicitevidence$522:Manifest[A2],implicitevidence$523:FlatUnionFormats.this.JF[A3],implicitevidence$524:Manifest[A3],implicitevidence$525:FlatUnionFormats.this.JF[A4],implicitevidence$526:Manifest[A4]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat3", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat3", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat3[U,A1,A2,A3](typeFieldName:String)(implicitevidence$513:FlatUnionFormats.this.JF[A1],implicitevidence$514:Manifest[A1],implicitevidence$515:FlatUnionFormats.this.JF[A2],implicitevidence$516:Manifest[A2],implicitevidence$517:FlatUnionFormats.this.JF[A3],implicitevidence$518:Manifest[A3]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat2", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat2", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat2[U,A1,A2](typeFieldName:String)(implicitevidence$509:FlatUnionFormats.this.JF[A1],implicitevidence$510:Manifest[A1],implicitevidence$511:FlatUnionFormats.this.JF[A2],implicitevidence$512:Manifest[A2]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat1", "tail" : "(typeFieldName: String)(arg0: JF[A1], arg1: Manifest[A1]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat1", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat1[U,A1](typeFieldName:String)(implicitevidence$507:FlatUnionFormats.this.JF[A1],implicitevidence$508:Manifest[A1]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat22", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21], arg42: JF[A22], arg43: Manifest[A22]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat22", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat22[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitevidence$463:FlatUnionFormats.this.JF[A1],implicitevidence$464:Manifest[A1],implicitevidence$465:FlatUnionFormats.this.JF[A2],implicitevidence$466:Manifest[A2],implicitevidence$467:FlatUnionFormats.this.JF[A3],implicitevidence$468:Manifest[A3],implicitevidence$469:FlatUnionFormats.this.JF[A4],implicitevidence$470:Manifest[A4],implicitevidence$471:FlatUnionFormats.this.JF[A5],implicitevidence$472:Manifest[A5],implicitevidence$473:FlatUnionFormats.this.JF[A6],implicitevidence$474:Manifest[A6],implicitevidence$475:FlatUnionFormats.this.JF[A7],implicitevidence$476:Manifest[A7],implicitevidence$477:FlatUnionFormats.this.JF[A8],implicitevidence$478:Manifest[A8],implicitevidence$479:FlatUnionFormats.this.JF[A9],implicitevidence$480:Manifest[A9],implicitevidence$481:FlatUnionFormats.this.JF[A10],implicitevidence$482:Manifest[A10],implicitevidence$483:FlatUnionFormats.this.JF[A11],implicitevidence$484:Manifest[A11],implicitevidence$485:FlatUnionFormats.this.JF[A12],implicitevidence$486:Manifest[A12],implicitevidence$487:FlatUnionFormats.this.JF[A13],implicitevidence$488:Manifest[A13],implicitevidence$489:FlatUnionFormats.this.JF[A14],implicitevidence$490:Manifest[A14],implicitevidence$491:FlatUnionFormats.this.JF[A15],implicitevidence$492:Manifest[A15],implicitevidence$493:FlatUnionFormats.this.JF[A16],implicitevidence$494:Manifest[A16],implicitevidence$495:FlatUnionFormats.this.JF[A17],implicitevidence$496:Manifest[A17],implicitevidence$497:FlatUnionFormats.this.JF[A18],implicitevidence$498:Manifest[A18],implicitevidence$499:FlatUnionFormats.this.JF[A19],implicitevidence$500:Manifest[A19],implicitevidence$501:FlatUnionFormats.this.JF[A20],implicitevidence$502:Manifest[A20],implicitevidence$503:FlatUnionFormats.this.JF[A21],implicitevidence$504:Manifest[A21],implicitevidence$505:FlatUnionFormats.this.JF[A22],implicitevidence$506:Manifest[A22]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat21", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat21", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat21[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitevidence$421:FlatUnionFormats.this.JF[A1],implicitevidence$422:Manifest[A1],implicitevidence$423:FlatUnionFormats.this.JF[A2],implicitevidence$424:Manifest[A2],implicitevidence$425:FlatUnionFormats.this.JF[A3],implicitevidence$426:Manifest[A3],implicitevidence$427:FlatUnionFormats.this.JF[A4],implicitevidence$428:Manifest[A4],implicitevidence$429:FlatUnionFormats.this.JF[A5],implicitevidence$430:Manifest[A5],implicitevidence$431:FlatUnionFormats.this.JF[A6],implicitevidence$432:Manifest[A6],implicitevidence$433:FlatUnionFormats.this.JF[A7],implicitevidence$434:Manifest[A7],implicitevidence$435:FlatUnionFormats.this.JF[A8],implicitevidence$436:Manifest[A8],implicitevidence$437:FlatUnionFormats.this.JF[A9],implicitevidence$438:Manifest[A9],implicitevidence$439:FlatUnionFormats.this.JF[A10],implicitevidence$440:Manifest[A10],implicitevidence$441:FlatUnionFormats.this.JF[A11],implicitevidence$442:Manifest[A11],implicitevidence$443:FlatUnionFormats.this.JF[A12],implicitevidence$444:Manifest[A12],implicitevidence$445:FlatUnionFormats.this.JF[A13],implicitevidence$446:Manifest[A13],implicitevidence$447:FlatUnionFormats.this.JF[A14],implicitevidence$448:Manifest[A14],implicitevidence$449:FlatUnionFormats.this.JF[A15],implicitevidence$450:Manifest[A15],implicitevidence$451:FlatUnionFormats.this.JF[A16],implicitevidence$452:Manifest[A16],implicitevidence$453:FlatUnionFormats.this.JF[A17],implicitevidence$454:Manifest[A17],implicitevidence$455:FlatUnionFormats.this.JF[A18],implicitevidence$456:Manifest[A18],implicitevidence$457:FlatUnionFormats.this.JF[A19],implicitevidence$458:Manifest[A19],implicitevidence$459:FlatUnionFormats.this.JF[A20],implicitevidence$460:Manifest[A20],implicitevidence$461:FlatUnionFormats.this.JF[A21],implicitevidence$462:Manifest[A21]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat20", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat20", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat20[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitevidence$381:FlatUnionFormats.this.JF[A1],implicitevidence$382:Manifest[A1],implicitevidence$383:FlatUnionFormats.this.JF[A2],implicitevidence$384:Manifest[A2],implicitevidence$385:FlatUnionFormats.this.JF[A3],implicitevidence$386:Manifest[A3],implicitevidence$387:FlatUnionFormats.this.JF[A4],implicitevidence$388:Manifest[A4],implicitevidence$389:FlatUnionFormats.this.JF[A5],implicitevidence$390:Manifest[A5],implicitevidence$391:FlatUnionFormats.this.JF[A6],implicitevidence$392:Manifest[A6],implicitevidence$393:FlatUnionFormats.this.JF[A7],implicitevidence$394:Manifest[A7],implicitevidence$395:FlatUnionFormats.this.JF[A8],implicitevidence$396:Manifest[A8],implicitevidence$397:FlatUnionFormats.this.JF[A9],implicitevidence$398:Manifest[A9],implicitevidence$399:FlatUnionFormats.this.JF[A10],implicitevidence$400:Manifest[A10],implicitevidence$401:FlatUnionFormats.this.JF[A11],implicitevidence$402:Manifest[A11],implicitevidence$403:FlatUnionFormats.this.JF[A12],implicitevidence$404:Manifest[A12],implicitevidence$405:FlatUnionFormats.this.JF[A13],implicitevidence$406:Manifest[A13],implicitevidence$407:FlatUnionFormats.this.JF[A14],implicitevidence$408:Manifest[A14],implicitevidence$409:FlatUnionFormats.this.JF[A15],implicitevidence$410:Manifest[A15],implicitevidence$411:FlatUnionFormats.this.JF[A16],implicitevidence$412:Manifest[A16],implicitevidence$413:FlatUnionFormats.this.JF[A17],implicitevidence$414:Manifest[A17],implicitevidence$415:FlatUnionFormats.this.JF[A18],implicitevidence$416:Manifest[A18],implicitevidence$417:FlatUnionFormats.this.JF[A19],implicitevidence$418:Manifest[A19],implicitevidence$419:FlatUnionFormats.this.JF[A20],implicitevidence$420:Manifest[A20]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat19", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat19", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat19[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitevidence$343:FlatUnionFormats.this.JF[A1],implicitevidence$344:Manifest[A1],implicitevidence$345:FlatUnionFormats.this.JF[A2],implicitevidence$346:Manifest[A2],implicitevidence$347:FlatUnionFormats.this.JF[A3],implicitevidence$348:Manifest[A3],implicitevidence$349:FlatUnionFormats.this.JF[A4],implicitevidence$350:Manifest[A4],implicitevidence$351:FlatUnionFormats.this.JF[A5],implicitevidence$352:Manifest[A5],implicitevidence$353:FlatUnionFormats.this.JF[A6],implicitevidence$354:Manifest[A6],implicitevidence$355:FlatUnionFormats.this.JF[A7],implicitevidence$356:Manifest[A7],implicitevidence$357:FlatUnionFormats.this.JF[A8],implicitevidence$358:Manifest[A8],implicitevidence$359:FlatUnionFormats.this.JF[A9],implicitevidence$360:Manifest[A9],implicitevidence$361:FlatUnionFormats.this.JF[A10],implicitevidence$362:Manifest[A10],implicitevidence$363:FlatUnionFormats.this.JF[A11],implicitevidence$364:Manifest[A11],implicitevidence$365:FlatUnionFormats.this.JF[A12],implicitevidence$366:Manifest[A12],implicitevidence$367:FlatUnionFormats.this.JF[A13],implicitevidence$368:Manifest[A13],implicitevidence$369:FlatUnionFormats.this.JF[A14],implicitevidence$370:Manifest[A14],implicitevidence$371:FlatUnionFormats.this.JF[A15],implicitevidence$372:Manifest[A15],implicitevidence$373:FlatUnionFormats.this.JF[A16],implicitevidence$374:Manifest[A16],implicitevidence$375:FlatUnionFormats.this.JF[A17],implicitevidence$376:Manifest[A17],implicitevidence$377:FlatUnionFormats.this.JF[A18],implicitevidence$378:Manifest[A18],implicitevidence$379:FlatUnionFormats.this.JF[A19],implicitevidence$380:Manifest[A19]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat18", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat18", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat18[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitevidence$307:FlatUnionFormats.this.JF[A1],implicitevidence$308:Manifest[A1],implicitevidence$309:FlatUnionFormats.this.JF[A2],implicitevidence$310:Manifest[A2],implicitevidence$311:FlatUnionFormats.this.JF[A3],implicitevidence$312:Manifest[A3],implicitevidence$313:FlatUnionFormats.this.JF[A4],implicitevidence$314:Manifest[A4],implicitevidence$315:FlatUnionFormats.this.JF[A5],implicitevidence$316:Manifest[A5],implicitevidence$317:FlatUnionFormats.this.JF[A6],implicitevidence$318:Manifest[A6],implicitevidence$319:FlatUnionFormats.this.JF[A7],implicitevidence$320:Manifest[A7],implicitevidence$321:FlatUnionFormats.this.JF[A8],implicitevidence$322:Manifest[A8],implicitevidence$323:FlatUnionFormats.this.JF[A9],implicitevidence$324:Manifest[A9],implicitevidence$325:FlatUnionFormats.this.JF[A10],implicitevidence$326:Manifest[A10],implicitevidence$327:FlatUnionFormats.this.JF[A11],implicitevidence$328:Manifest[A11],implicitevidence$329:FlatUnionFormats.this.JF[A12],implicitevidence$330:Manifest[A12],implicitevidence$331:FlatUnionFormats.this.JF[A13],implicitevidence$332:Manifest[A13],implicitevidence$333:FlatUnionFormats.this.JF[A14],implicitevidence$334:Manifest[A14],implicitevidence$335:FlatUnionFormats.this.JF[A15],implicitevidence$336:Manifest[A15],implicitevidence$337:FlatUnionFormats.this.JF[A16],implicitevidence$338:Manifest[A16],implicitevidence$339:FlatUnionFormats.this.JF[A17],implicitevidence$340:Manifest[A17],implicitevidence$341:FlatUnionFormats.this.JF[A18],implicitevidence$342:Manifest[A18]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat17", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat17", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat17[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitevidence$273:FlatUnionFormats.this.JF[A1],implicitevidence$274:Manifest[A1],implicitevidence$275:FlatUnionFormats.this.JF[A2],implicitevidence$276:Manifest[A2],implicitevidence$277:FlatUnionFormats.this.JF[A3],implicitevidence$278:Manifest[A3],implicitevidence$279:FlatUnionFormats.this.JF[A4],implicitevidence$280:Manifest[A4],implicitevidence$281:FlatUnionFormats.this.JF[A5],implicitevidence$282:Manifest[A5],implicitevidence$283:FlatUnionFormats.this.JF[A6],implicitevidence$284:Manifest[A6],implicitevidence$285:FlatUnionFormats.this.JF[A7],implicitevidence$286:Manifest[A7],implicitevidence$287:FlatUnionFormats.this.JF[A8],implicitevidence$288:Manifest[A8],implicitevidence$289:FlatUnionFormats.this.JF[A9],implicitevidence$290:Manifest[A9],implicitevidence$291:FlatUnionFormats.this.JF[A10],implicitevidence$292:Manifest[A10],implicitevidence$293:FlatUnionFormats.this.JF[A11],implicitevidence$294:Manifest[A11],implicitevidence$295:FlatUnionFormats.this.JF[A12],implicitevidence$296:Manifest[A12],implicitevidence$297:FlatUnionFormats.this.JF[A13],implicitevidence$298:Manifest[A13],implicitevidence$299:FlatUnionFormats.this.JF[A14],implicitevidence$300:Manifest[A14],implicitevidence$301:FlatUnionFormats.this.JF[A15],implicitevidence$302:Manifest[A15],implicitevidence$303:FlatUnionFormats.this.JF[A16],implicitevidence$304:Manifest[A16],implicitevidence$305:FlatUnionFormats.this.JF[A17],implicitevidence$306:Manifest[A17]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat16", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat16", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat16[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitevidence$241:FlatUnionFormats.this.JF[A1],implicitevidence$242:Manifest[A1],implicitevidence$243:FlatUnionFormats.this.JF[A2],implicitevidence$244:Manifest[A2],implicitevidence$245:FlatUnionFormats.this.JF[A3],implicitevidence$246:Manifest[A3],implicitevidence$247:FlatUnionFormats.this.JF[A4],implicitevidence$248:Manifest[A4],implicitevidence$249:FlatUnionFormats.this.JF[A5],implicitevidence$250:Manifest[A5],implicitevidence$251:FlatUnionFormats.this.JF[A6],implicitevidence$252:Manifest[A6],implicitevidence$253:FlatUnionFormats.this.JF[A7],implicitevidence$254:Manifest[A7],implicitevidence$255:FlatUnionFormats.this.JF[A8],implicitevidence$256:Manifest[A8],implicitevidence$257:FlatUnionFormats.this.JF[A9],implicitevidence$258:Manifest[A9],implicitevidence$259:FlatUnionFormats.this.JF[A10],implicitevidence$260:Manifest[A10],implicitevidence$261:FlatUnionFormats.this.JF[A11],implicitevidence$262:Manifest[A11],implicitevidence$263:FlatUnionFormats.this.JF[A12],implicitevidence$264:Manifest[A12],implicitevidence$265:FlatUnionFormats.this.JF[A13],implicitevidence$266:Manifest[A13],implicitevidence$267:FlatUnionFormats.this.JF[A14],implicitevidence$268:Manifest[A14],implicitevidence$269:FlatUnionFormats.this.JF[A15],implicitevidence$270:Manifest[A15],implicitevidence$271:FlatUnionFormats.this.JF[A16],implicitevidence$272:Manifest[A16]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat15", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat15", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat15[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitevidence$211:FlatUnionFormats.this.JF[A1],implicitevidence$212:Manifest[A1],implicitevidence$213:FlatUnionFormats.this.JF[A2],implicitevidence$214:Manifest[A2],implicitevidence$215:FlatUnionFormats.this.JF[A3],implicitevidence$216:Manifest[A3],implicitevidence$217:FlatUnionFormats.this.JF[A4],implicitevidence$218:Manifest[A4],implicitevidence$219:FlatUnionFormats.this.JF[A5],implicitevidence$220:Manifest[A5],implicitevidence$221:FlatUnionFormats.this.JF[A6],implicitevidence$222:Manifest[A6],implicitevidence$223:FlatUnionFormats.this.JF[A7],implicitevidence$224:Manifest[A7],implicitevidence$225:FlatUnionFormats.this.JF[A8],implicitevidence$226:Manifest[A8],implicitevidence$227:FlatUnionFormats.this.JF[A9],implicitevidence$228:Manifest[A9],implicitevidence$229:FlatUnionFormats.this.JF[A10],implicitevidence$230:Manifest[A10],implicitevidence$231:FlatUnionFormats.this.JF[A11],implicitevidence$232:Manifest[A11],implicitevidence$233:FlatUnionFormats.this.JF[A12],implicitevidence$234:Manifest[A12],implicitevidence$235:FlatUnionFormats.this.JF[A13],implicitevidence$236:Manifest[A13],implicitevidence$237:FlatUnionFormats.this.JF[A14],implicitevidence$238:Manifest[A14],implicitevidence$239:FlatUnionFormats.this.JF[A15],implicitevidence$240:Manifest[A15]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat14", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat14", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat14[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitevidence$183:FlatUnionFormats.this.JF[A1],implicitevidence$184:Manifest[A1],implicitevidence$185:FlatUnionFormats.this.JF[A2],implicitevidence$186:Manifest[A2],implicitevidence$187:FlatUnionFormats.this.JF[A3],implicitevidence$188:Manifest[A3],implicitevidence$189:FlatUnionFormats.this.JF[A4],implicitevidence$190:Manifest[A4],implicitevidence$191:FlatUnionFormats.this.JF[A5],implicitevidence$192:Manifest[A5],implicitevidence$193:FlatUnionFormats.this.JF[A6],implicitevidence$194:Manifest[A6],implicitevidence$195:FlatUnionFormats.this.JF[A7],implicitevidence$196:Manifest[A7],implicitevidence$197:FlatUnionFormats.this.JF[A8],implicitevidence$198:Manifest[A8],implicitevidence$199:FlatUnionFormats.this.JF[A9],implicitevidence$200:Manifest[A9],implicitevidence$201:FlatUnionFormats.this.JF[A10],implicitevidence$202:Manifest[A10],implicitevidence$203:FlatUnionFormats.this.JF[A11],implicitevidence$204:Manifest[A11],implicitevidence$205:FlatUnionFormats.this.JF[A12],implicitevidence$206:Manifest[A12],implicitevidence$207:FlatUnionFormats.this.JF[A13],implicitevidence$208:Manifest[A13],implicitevidence$209:FlatUnionFormats.this.JF[A14],implicitevidence$210:Manifest[A14]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat13", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat13", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat13[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitevidence$157:FlatUnionFormats.this.JF[A1],implicitevidence$158:Manifest[A1],implicitevidence$159:FlatUnionFormats.this.JF[A2],implicitevidence$160:Manifest[A2],implicitevidence$161:FlatUnionFormats.this.JF[A3],implicitevidence$162:Manifest[A3],implicitevidence$163:FlatUnionFormats.this.JF[A4],implicitevidence$164:Manifest[A4],implicitevidence$165:FlatUnionFormats.this.JF[A5],implicitevidence$166:Manifest[A5],implicitevidence$167:FlatUnionFormats.this.JF[A6],implicitevidence$168:Manifest[A6],implicitevidence$169:FlatUnionFormats.this.JF[A7],implicitevidence$170:Manifest[A7],implicitevidence$171:FlatUnionFormats.this.JF[A8],implicitevidence$172:Manifest[A8],implicitevidence$173:FlatUnionFormats.this.JF[A9],implicitevidence$174:Manifest[A9],implicitevidence$175:FlatUnionFormats.this.JF[A10],implicitevidence$176:Manifest[A10],implicitevidence$177:FlatUnionFormats.this.JF[A11],implicitevidence$178:Manifest[A11],implicitevidence$179:FlatUnionFormats.this.JF[A12],implicitevidence$180:Manifest[A12],implicitevidence$181:FlatUnionFormats.this.JF[A13],implicitevidence$182:Manifest[A13]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat12", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat12", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat12[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitevidence$133:FlatUnionFormats.this.JF[A1],implicitevidence$134:Manifest[A1],implicitevidence$135:FlatUnionFormats.this.JF[A2],implicitevidence$136:Manifest[A2],implicitevidence$137:FlatUnionFormats.this.JF[A3],implicitevidence$138:Manifest[A3],implicitevidence$139:FlatUnionFormats.this.JF[A4],implicitevidence$140:Manifest[A4],implicitevidence$141:FlatUnionFormats.this.JF[A5],implicitevidence$142:Manifest[A5],implicitevidence$143:FlatUnionFormats.this.JF[A6],implicitevidence$144:Manifest[A6],implicitevidence$145:FlatUnionFormats.this.JF[A7],implicitevidence$146:Manifest[A7],implicitevidence$147:FlatUnionFormats.this.JF[A8],implicitevidence$148:Manifest[A8],implicitevidence$149:FlatUnionFormats.this.JF[A9],implicitevidence$150:Manifest[A9],implicitevidence$151:FlatUnionFormats.this.JF[A10],implicitevidence$152:Manifest[A10],implicitevidence$153:FlatUnionFormats.this.JF[A11],implicitevidence$154:Manifest[A11],implicitevidence$155:FlatUnionFormats.this.JF[A12],implicitevidence$156:Manifest[A12]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat11", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat11", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat11[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitevidence$111:FlatUnionFormats.this.JF[A1],implicitevidence$112:Manifest[A1],implicitevidence$113:FlatUnionFormats.this.JF[A2],implicitevidence$114:Manifest[A2],implicitevidence$115:FlatUnionFormats.this.JF[A3],implicitevidence$116:Manifest[A3],implicitevidence$117:FlatUnionFormats.this.JF[A4],implicitevidence$118:Manifest[A4],implicitevidence$119:FlatUnionFormats.this.JF[A5],implicitevidence$120:Manifest[A5],implicitevidence$121:FlatUnionFormats.this.JF[A6],implicitevidence$122:Manifest[A6],implicitevidence$123:FlatUnionFormats.this.JF[A7],implicitevidence$124:Manifest[A7],implicitevidence$125:FlatUnionFormats.this.JF[A8],implicitevidence$126:Manifest[A8],implicitevidence$127:FlatUnionFormats.this.JF[A9],implicitevidence$128:Manifest[A9],implicitevidence$129:FlatUnionFormats.this.JF[A10],implicitevidence$130:Manifest[A10],implicitevidence$131:FlatUnionFormats.this.JF[A11],implicitevidence$132:Manifest[A11]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat10", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat10", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat10[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitevidence$91:FlatUnionFormats.this.JF[A1],implicitevidence$92:Manifest[A1],implicitevidence$93:FlatUnionFormats.this.JF[A2],implicitevidence$94:Manifest[A2],implicitevidence$95:FlatUnionFormats.this.JF[A3],implicitevidence$96:Manifest[A3],implicitevidence$97:FlatUnionFormats.this.JF[A4],implicitevidence$98:Manifest[A4],implicitevidence$99:FlatUnionFormats.this.JF[A5],implicitevidence$100:Manifest[A5],implicitevidence$101:FlatUnionFormats.this.JF[A6],implicitevidence$102:Manifest[A6],implicitevidence$103:FlatUnionFormats.this.JF[A7],implicitevidence$104:Manifest[A7],implicitevidence$105:FlatUnionFormats.this.JF[A8],implicitevidence$106:Manifest[A8],implicitevidence$107:FlatUnionFormats.this.JF[A9],implicitevidence$108:Manifest[A9],implicitevidence$109:FlatUnionFormats.this.JF[A10],implicitevidence$110:Manifest[A10]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat9", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat9", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat9[U,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitevidence$73:FlatUnionFormats.this.JF[A1],implicitevidence$74:Manifest[A1],implicitevidence$75:FlatUnionFormats.this.JF[A2],implicitevidence$76:Manifest[A2],implicitevidence$77:FlatUnionFormats.this.JF[A3],implicitevidence$78:Manifest[A3],implicitevidence$79:FlatUnionFormats.this.JF[A4],implicitevidence$80:Manifest[A4],implicitevidence$81:FlatUnionFormats.this.JF[A5],implicitevidence$82:Manifest[A5],implicitevidence$83:FlatUnionFormats.this.JF[A6],implicitevidence$84:Manifest[A6],implicitevidence$85:FlatUnionFormats.this.JF[A7],implicitevidence$86:Manifest[A7],implicitevidence$87:FlatUnionFormats.this.JF[A8],implicitevidence$88:Manifest[A8],implicitevidence$89:FlatUnionFormats.this.JF[A9],implicitevidence$90:Manifest[A9]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat8", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat8", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat8[U,A1,A2,A3,A4,A5,A6,A7,A8](implicitevidence$57:FlatUnionFormats.this.JF[A1],implicitevidence$58:Manifest[A1],implicitevidence$59:FlatUnionFormats.this.JF[A2],implicitevidence$60:Manifest[A2],implicitevidence$61:FlatUnionFormats.this.JF[A3],implicitevidence$62:Manifest[A3],implicitevidence$63:FlatUnionFormats.this.JF[A4],implicitevidence$64:Manifest[A4],implicitevidence$65:FlatUnionFormats.this.JF[A5],implicitevidence$66:Manifest[A5],implicitevidence$67:FlatUnionFormats.this.JF[A6],implicitevidence$68:Manifest[A6],implicitevidence$69:FlatUnionFormats.this.JF[A7],implicitevidence$70:Manifest[A7],implicitevidence$71:FlatUnionFormats.this.JF[A8],implicitevidence$72:Manifest[A8]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat7", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat7", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat7[U,A1,A2,A3,A4,A5,A6,A7](implicitevidence$43:FlatUnionFormats.this.JF[A1],implicitevidence$44:Manifest[A1],implicitevidence$45:FlatUnionFormats.this.JF[A2],implicitevidence$46:Manifest[A2],implicitevidence$47:FlatUnionFormats.this.JF[A3],implicitevidence$48:Manifest[A3],implicitevidence$49:FlatUnionFormats.this.JF[A4],implicitevidence$50:Manifest[A4],implicitevidence$51:FlatUnionFormats.this.JF[A5],implicitevidence$52:Manifest[A5],implicitevidence$53:FlatUnionFormats.this.JF[A6],implicitevidence$54:Manifest[A6],implicitevidence$55:FlatUnionFormats.this.JF[A7],implicitevidence$56:Manifest[A7]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat6", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat6", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat6[U,A1,A2,A3,A4,A5,A6](implicitevidence$31:FlatUnionFormats.this.JF[A1],implicitevidence$32:Manifest[A1],implicitevidence$33:FlatUnionFormats.this.JF[A2],implicitevidence$34:Manifest[A2],implicitevidence$35:FlatUnionFormats.this.JF[A3],implicitevidence$36:Manifest[A3],implicitevidence$37:FlatUnionFormats.this.JF[A4],implicitevidence$38:Manifest[A4],implicitevidence$39:FlatUnionFormats.this.JF[A5],implicitevidence$40:Manifest[A5],implicitevidence$41:FlatUnionFormats.this.JF[A6],implicitevidence$42:Manifest[A6]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat5", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat5", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat5[U,A1,A2,A3,A4,A5](implicitevidence$21:FlatUnionFormats.this.JF[A1],implicitevidence$22:Manifest[A1],implicitevidence$23:FlatUnionFormats.this.JF[A2],implicitevidence$24:Manifest[A2],implicitevidence$25:FlatUnionFormats.this.JF[A3],implicitevidence$26:Manifest[A3],implicitevidence$27:FlatUnionFormats.this.JF[A4],implicitevidence$28:Manifest[A4],implicitevidence$29:FlatUnionFormats.this.JF[A5],implicitevidence$30:Manifest[A5]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat4", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat4", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat4[U,A1,A2,A3,A4](implicitevidence$13:FlatUnionFormats.this.JF[A1],implicitevidence$14:Manifest[A1],implicitevidence$15:FlatUnionFormats.this.JF[A2],implicitevidence$16:Manifest[A2],implicitevidence$17:FlatUnionFormats.this.JF[A3],implicitevidence$18:Manifest[A3],implicitevidence$19:FlatUnionFormats.this.JF[A4],implicitevidence$20:Manifest[A4]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat3", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat3", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat3[U,A1,A2,A3](implicitevidence$7:FlatUnionFormats.this.JF[A1],implicitevidence$8:Manifest[A1],implicitevidence$9:FlatUnionFormats.this.JF[A2],implicitevidence$10:Manifest[A2],implicitevidence$11:FlatUnionFormats.this.JF[A3],implicitevidence$12:Manifest[A3]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat2", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat2", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat2[U,A1,A2](implicitevidence$3:FlatUnionFormats.this.JF[A1],implicitevidence$4:Manifest[A1],implicitevidence$5:FlatUnionFormats.this.JF[A2],implicitevidence$6:Manifest[A2]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "flatUnionFormat1", "tail" : "(arg0: JF[A1], arg1: Manifest[A1]): JF[U]", "member" : "sjsonnew.FlatUnionFormats.flatUnionFormat1", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#flatUnionFormat1[U,A1](implicitevidence$1:FlatUnionFormats.this.JF[A1],implicitevidence$2:Manifest[A1]):FlatUnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat22", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21], arg42: JF[A22], arg43: Manifest[A22]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat22", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat22[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitevidence$463:UnionFormats.this.JF[A1],implicitevidence$464:Manifest[A1],implicitevidence$465:UnionFormats.this.JF[A2],implicitevidence$466:Manifest[A2],implicitevidence$467:UnionFormats.this.JF[A3],implicitevidence$468:Manifest[A3],implicitevidence$469:UnionFormats.this.JF[A4],implicitevidence$470:Manifest[A4],implicitevidence$471:UnionFormats.this.JF[A5],implicitevidence$472:Manifest[A5],implicitevidence$473:UnionFormats.this.JF[A6],implicitevidence$474:Manifest[A6],implicitevidence$475:UnionFormats.this.JF[A7],implicitevidence$476:Manifest[A7],implicitevidence$477:UnionFormats.this.JF[A8],implicitevidence$478:Manifest[A8],implicitevidence$479:UnionFormats.this.JF[A9],implicitevidence$480:Manifest[A9],implicitevidence$481:UnionFormats.this.JF[A10],implicitevidence$482:Manifest[A10],implicitevidence$483:UnionFormats.this.JF[A11],implicitevidence$484:Manifest[A11],implicitevidence$485:UnionFormats.this.JF[A12],implicitevidence$486:Manifest[A12],implicitevidence$487:UnionFormats.this.JF[A13],implicitevidence$488:Manifest[A13],implicitevidence$489:UnionFormats.this.JF[A14],implicitevidence$490:Manifest[A14],implicitevidence$491:UnionFormats.this.JF[A15],implicitevidence$492:Manifest[A15],implicitevidence$493:UnionFormats.this.JF[A16],implicitevidence$494:Manifest[A16],implicitevidence$495:UnionFormats.this.JF[A17],implicitevidence$496:Manifest[A17],implicitevidence$497:UnionFormats.this.JF[A18],implicitevidence$498:Manifest[A18],implicitevidence$499:UnionFormats.this.JF[A19],implicitevidence$500:Manifest[A19],implicitevidence$501:UnionFormats.this.JF[A20],implicitevidence$502:Manifest[A20],implicitevidence$503:UnionFormats.this.JF[A21],implicitevidence$504:Manifest[A21],implicitevidence$505:UnionFormats.this.JF[A22],implicitevidence$506:Manifest[A22]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat21", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20], arg40: JF[A21], arg41: Manifest[A21]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat21", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat21[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitevidence$421:UnionFormats.this.JF[A1],implicitevidence$422:Manifest[A1],implicitevidence$423:UnionFormats.this.JF[A2],implicitevidence$424:Manifest[A2],implicitevidence$425:UnionFormats.this.JF[A3],implicitevidence$426:Manifest[A3],implicitevidence$427:UnionFormats.this.JF[A4],implicitevidence$428:Manifest[A4],implicitevidence$429:UnionFormats.this.JF[A5],implicitevidence$430:Manifest[A5],implicitevidence$431:UnionFormats.this.JF[A6],implicitevidence$432:Manifest[A6],implicitevidence$433:UnionFormats.this.JF[A7],implicitevidence$434:Manifest[A7],implicitevidence$435:UnionFormats.this.JF[A8],implicitevidence$436:Manifest[A8],implicitevidence$437:UnionFormats.this.JF[A9],implicitevidence$438:Manifest[A9],implicitevidence$439:UnionFormats.this.JF[A10],implicitevidence$440:Manifest[A10],implicitevidence$441:UnionFormats.this.JF[A11],implicitevidence$442:Manifest[A11],implicitevidence$443:UnionFormats.this.JF[A12],implicitevidence$444:Manifest[A12],implicitevidence$445:UnionFormats.this.JF[A13],implicitevidence$446:Manifest[A13],implicitevidence$447:UnionFormats.this.JF[A14],implicitevidence$448:Manifest[A14],implicitevidence$449:UnionFormats.this.JF[A15],implicitevidence$450:Manifest[A15],implicitevidence$451:UnionFormats.this.JF[A16],implicitevidence$452:Manifest[A16],implicitevidence$453:UnionFormats.this.JF[A17],implicitevidence$454:Manifest[A17],implicitevidence$455:UnionFormats.this.JF[A18],implicitevidence$456:Manifest[A18],implicitevidence$457:UnionFormats.this.JF[A19],implicitevidence$458:Manifest[A19],implicitevidence$459:UnionFormats.this.JF[A20],implicitevidence$460:Manifest[A20],implicitevidence$461:UnionFormats.this.JF[A21],implicitevidence$462:Manifest[A21]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat20", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19], arg38: JF[A20], arg39: Manifest[A20]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat20", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat20[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitevidence$381:UnionFormats.this.JF[A1],implicitevidence$382:Manifest[A1],implicitevidence$383:UnionFormats.this.JF[A2],implicitevidence$384:Manifest[A2],implicitevidence$385:UnionFormats.this.JF[A3],implicitevidence$386:Manifest[A3],implicitevidence$387:UnionFormats.this.JF[A4],implicitevidence$388:Manifest[A4],implicitevidence$389:UnionFormats.this.JF[A5],implicitevidence$390:Manifest[A5],implicitevidence$391:UnionFormats.this.JF[A6],implicitevidence$392:Manifest[A6],implicitevidence$393:UnionFormats.this.JF[A7],implicitevidence$394:Manifest[A7],implicitevidence$395:UnionFormats.this.JF[A8],implicitevidence$396:Manifest[A8],implicitevidence$397:UnionFormats.this.JF[A9],implicitevidence$398:Manifest[A9],implicitevidence$399:UnionFormats.this.JF[A10],implicitevidence$400:Manifest[A10],implicitevidence$401:UnionFormats.this.JF[A11],implicitevidence$402:Manifest[A11],implicitevidence$403:UnionFormats.this.JF[A12],implicitevidence$404:Manifest[A12],implicitevidence$405:UnionFormats.this.JF[A13],implicitevidence$406:Manifest[A13],implicitevidence$407:UnionFormats.this.JF[A14],implicitevidence$408:Manifest[A14],implicitevidence$409:UnionFormats.this.JF[A15],implicitevidence$410:Manifest[A15],implicitevidence$411:UnionFormats.this.JF[A16],implicitevidence$412:Manifest[A16],implicitevidence$413:UnionFormats.this.JF[A17],implicitevidence$414:Manifest[A17],implicitevidence$415:UnionFormats.this.JF[A18],implicitevidence$416:Manifest[A18],implicitevidence$417:UnionFormats.this.JF[A19],implicitevidence$418:Manifest[A19],implicitevidence$419:UnionFormats.this.JF[A20],implicitevidence$420:Manifest[A20]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat19", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18], arg36: JF[A19], arg37: Manifest[A19]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat19", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat19[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitevidence$343:UnionFormats.this.JF[A1],implicitevidence$344:Manifest[A1],implicitevidence$345:UnionFormats.this.JF[A2],implicitevidence$346:Manifest[A2],implicitevidence$347:UnionFormats.this.JF[A3],implicitevidence$348:Manifest[A3],implicitevidence$349:UnionFormats.this.JF[A4],implicitevidence$350:Manifest[A4],implicitevidence$351:UnionFormats.this.JF[A5],implicitevidence$352:Manifest[A5],implicitevidence$353:UnionFormats.this.JF[A6],implicitevidence$354:Manifest[A6],implicitevidence$355:UnionFormats.this.JF[A7],implicitevidence$356:Manifest[A7],implicitevidence$357:UnionFormats.this.JF[A8],implicitevidence$358:Manifest[A8],implicitevidence$359:UnionFormats.this.JF[A9],implicitevidence$360:Manifest[A9],implicitevidence$361:UnionFormats.this.JF[A10],implicitevidence$362:Manifest[A10],implicitevidence$363:UnionFormats.this.JF[A11],implicitevidence$364:Manifest[A11],implicitevidence$365:UnionFormats.this.JF[A12],implicitevidence$366:Manifest[A12],implicitevidence$367:UnionFormats.this.JF[A13],implicitevidence$368:Manifest[A13],implicitevidence$369:UnionFormats.this.JF[A14],implicitevidence$370:Manifest[A14],implicitevidence$371:UnionFormats.this.JF[A15],implicitevidence$372:Manifest[A15],implicitevidence$373:UnionFormats.this.JF[A16],implicitevidence$374:Manifest[A16],implicitevidence$375:UnionFormats.this.JF[A17],implicitevidence$376:Manifest[A17],implicitevidence$377:UnionFormats.this.JF[A18],implicitevidence$378:Manifest[A18],implicitevidence$379:UnionFormats.this.JF[A19],implicitevidence$380:Manifest[A19]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat18", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17], arg34: JF[A18], arg35: Manifest[A18]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat18", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat18[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitevidence$307:UnionFormats.this.JF[A1],implicitevidence$308:Manifest[A1],implicitevidence$309:UnionFormats.this.JF[A2],implicitevidence$310:Manifest[A2],implicitevidence$311:UnionFormats.this.JF[A3],implicitevidence$312:Manifest[A3],implicitevidence$313:UnionFormats.this.JF[A4],implicitevidence$314:Manifest[A4],implicitevidence$315:UnionFormats.this.JF[A5],implicitevidence$316:Manifest[A5],implicitevidence$317:UnionFormats.this.JF[A6],implicitevidence$318:Manifest[A6],implicitevidence$319:UnionFormats.this.JF[A7],implicitevidence$320:Manifest[A7],implicitevidence$321:UnionFormats.this.JF[A8],implicitevidence$322:Manifest[A8],implicitevidence$323:UnionFormats.this.JF[A9],implicitevidence$324:Manifest[A9],implicitevidence$325:UnionFormats.this.JF[A10],implicitevidence$326:Manifest[A10],implicitevidence$327:UnionFormats.this.JF[A11],implicitevidence$328:Manifest[A11],implicitevidence$329:UnionFormats.this.JF[A12],implicitevidence$330:Manifest[A12],implicitevidence$331:UnionFormats.this.JF[A13],implicitevidence$332:Manifest[A13],implicitevidence$333:UnionFormats.this.JF[A14],implicitevidence$334:Manifest[A14],implicitevidence$335:UnionFormats.this.JF[A15],implicitevidence$336:Manifest[A15],implicitevidence$337:UnionFormats.this.JF[A16],implicitevidence$338:Manifest[A16],implicitevidence$339:UnionFormats.this.JF[A17],implicitevidence$340:Manifest[A17],implicitevidence$341:UnionFormats.this.JF[A18],implicitevidence$342:Manifest[A18]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat17", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16], arg32: JF[A17], arg33: Manifest[A17]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat17", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat17[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitevidence$273:UnionFormats.this.JF[A1],implicitevidence$274:Manifest[A1],implicitevidence$275:UnionFormats.this.JF[A2],implicitevidence$276:Manifest[A2],implicitevidence$277:UnionFormats.this.JF[A3],implicitevidence$278:Manifest[A3],implicitevidence$279:UnionFormats.this.JF[A4],implicitevidence$280:Manifest[A4],implicitevidence$281:UnionFormats.this.JF[A5],implicitevidence$282:Manifest[A5],implicitevidence$283:UnionFormats.this.JF[A6],implicitevidence$284:Manifest[A6],implicitevidence$285:UnionFormats.this.JF[A7],implicitevidence$286:Manifest[A7],implicitevidence$287:UnionFormats.this.JF[A8],implicitevidence$288:Manifest[A8],implicitevidence$289:UnionFormats.this.JF[A9],implicitevidence$290:Manifest[A9],implicitevidence$291:UnionFormats.this.JF[A10],implicitevidence$292:Manifest[A10],implicitevidence$293:UnionFormats.this.JF[A11],implicitevidence$294:Manifest[A11],implicitevidence$295:UnionFormats.this.JF[A12],implicitevidence$296:Manifest[A12],implicitevidence$297:UnionFormats.this.JF[A13],implicitevidence$298:Manifest[A13],implicitevidence$299:UnionFormats.this.JF[A14],implicitevidence$300:Manifest[A14],implicitevidence$301:UnionFormats.this.JF[A15],implicitevidence$302:Manifest[A15],implicitevidence$303:UnionFormats.this.JF[A16],implicitevidence$304:Manifest[A16],implicitevidence$305:UnionFormats.this.JF[A17],implicitevidence$306:Manifest[A17]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat16", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15], arg30: JF[A16], arg31: Manifest[A16]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat16", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat16[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitevidence$241:UnionFormats.this.JF[A1],implicitevidence$242:Manifest[A1],implicitevidence$243:UnionFormats.this.JF[A2],implicitevidence$244:Manifest[A2],implicitevidence$245:UnionFormats.this.JF[A3],implicitevidence$246:Manifest[A3],implicitevidence$247:UnionFormats.this.JF[A4],implicitevidence$248:Manifest[A4],implicitevidence$249:UnionFormats.this.JF[A5],implicitevidence$250:Manifest[A5],implicitevidence$251:UnionFormats.this.JF[A6],implicitevidence$252:Manifest[A6],implicitevidence$253:UnionFormats.this.JF[A7],implicitevidence$254:Manifest[A7],implicitevidence$255:UnionFormats.this.JF[A8],implicitevidence$256:Manifest[A8],implicitevidence$257:UnionFormats.this.JF[A9],implicitevidence$258:Manifest[A9],implicitevidence$259:UnionFormats.this.JF[A10],implicitevidence$260:Manifest[A10],implicitevidence$261:UnionFormats.this.JF[A11],implicitevidence$262:Manifest[A11],implicitevidence$263:UnionFormats.this.JF[A12],implicitevidence$264:Manifest[A12],implicitevidence$265:UnionFormats.this.JF[A13],implicitevidence$266:Manifest[A13],implicitevidence$267:UnionFormats.this.JF[A14],implicitevidence$268:Manifest[A14],implicitevidence$269:UnionFormats.this.JF[A15],implicitevidence$270:Manifest[A15],implicitevidence$271:UnionFormats.this.JF[A16],implicitevidence$272:Manifest[A16]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat15", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14], arg28: JF[A15], arg29: Manifest[A15]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat15", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat15[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitevidence$211:UnionFormats.this.JF[A1],implicitevidence$212:Manifest[A1],implicitevidence$213:UnionFormats.this.JF[A2],implicitevidence$214:Manifest[A2],implicitevidence$215:UnionFormats.this.JF[A3],implicitevidence$216:Manifest[A3],implicitevidence$217:UnionFormats.this.JF[A4],implicitevidence$218:Manifest[A4],implicitevidence$219:UnionFormats.this.JF[A5],implicitevidence$220:Manifest[A5],implicitevidence$221:UnionFormats.this.JF[A6],implicitevidence$222:Manifest[A6],implicitevidence$223:UnionFormats.this.JF[A7],implicitevidence$224:Manifest[A7],implicitevidence$225:UnionFormats.this.JF[A8],implicitevidence$226:Manifest[A8],implicitevidence$227:UnionFormats.this.JF[A9],implicitevidence$228:Manifest[A9],implicitevidence$229:UnionFormats.this.JF[A10],implicitevidence$230:Manifest[A10],implicitevidence$231:UnionFormats.this.JF[A11],implicitevidence$232:Manifest[A11],implicitevidence$233:UnionFormats.this.JF[A12],implicitevidence$234:Manifest[A12],implicitevidence$235:UnionFormats.this.JF[A13],implicitevidence$236:Manifest[A13],implicitevidence$237:UnionFormats.this.JF[A14],implicitevidence$238:Manifest[A14],implicitevidence$239:UnionFormats.this.JF[A15],implicitevidence$240:Manifest[A15]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat14", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13], arg26: JF[A14], arg27: Manifest[A14]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat14", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat14[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitevidence$183:UnionFormats.this.JF[A1],implicitevidence$184:Manifest[A1],implicitevidence$185:UnionFormats.this.JF[A2],implicitevidence$186:Manifest[A2],implicitevidence$187:UnionFormats.this.JF[A3],implicitevidence$188:Manifest[A3],implicitevidence$189:UnionFormats.this.JF[A4],implicitevidence$190:Manifest[A4],implicitevidence$191:UnionFormats.this.JF[A5],implicitevidence$192:Manifest[A5],implicitevidence$193:UnionFormats.this.JF[A6],implicitevidence$194:Manifest[A6],implicitevidence$195:UnionFormats.this.JF[A7],implicitevidence$196:Manifest[A7],implicitevidence$197:UnionFormats.this.JF[A8],implicitevidence$198:Manifest[A8],implicitevidence$199:UnionFormats.this.JF[A9],implicitevidence$200:Manifest[A9],implicitevidence$201:UnionFormats.this.JF[A10],implicitevidence$202:Manifest[A10],implicitevidence$203:UnionFormats.this.JF[A11],implicitevidence$204:Manifest[A11],implicitevidence$205:UnionFormats.this.JF[A12],implicitevidence$206:Manifest[A12],implicitevidence$207:UnionFormats.this.JF[A13],implicitevidence$208:Manifest[A13],implicitevidence$209:UnionFormats.this.JF[A14],implicitevidence$210:Manifest[A14]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat13", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12], arg24: JF[A13], arg25: Manifest[A13]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat13", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat13[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitevidence$157:UnionFormats.this.JF[A1],implicitevidence$158:Manifest[A1],implicitevidence$159:UnionFormats.this.JF[A2],implicitevidence$160:Manifest[A2],implicitevidence$161:UnionFormats.this.JF[A3],implicitevidence$162:Manifest[A3],implicitevidence$163:UnionFormats.this.JF[A4],implicitevidence$164:Manifest[A4],implicitevidence$165:UnionFormats.this.JF[A5],implicitevidence$166:Manifest[A5],implicitevidence$167:UnionFormats.this.JF[A6],implicitevidence$168:Manifest[A6],implicitevidence$169:UnionFormats.this.JF[A7],implicitevidence$170:Manifest[A7],implicitevidence$171:UnionFormats.this.JF[A8],implicitevidence$172:Manifest[A8],implicitevidence$173:UnionFormats.this.JF[A9],implicitevidence$174:Manifest[A9],implicitevidence$175:UnionFormats.this.JF[A10],implicitevidence$176:Manifest[A10],implicitevidence$177:UnionFormats.this.JF[A11],implicitevidence$178:Manifest[A11],implicitevidence$179:UnionFormats.this.JF[A12],implicitevidence$180:Manifest[A12],implicitevidence$181:UnionFormats.this.JF[A13],implicitevidence$182:Manifest[A13]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat12", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11], arg22: JF[A12], arg23: Manifest[A12]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat12", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat12[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitevidence$133:UnionFormats.this.JF[A1],implicitevidence$134:Manifest[A1],implicitevidence$135:UnionFormats.this.JF[A2],implicitevidence$136:Manifest[A2],implicitevidence$137:UnionFormats.this.JF[A3],implicitevidence$138:Manifest[A3],implicitevidence$139:UnionFormats.this.JF[A4],implicitevidence$140:Manifest[A4],implicitevidence$141:UnionFormats.this.JF[A5],implicitevidence$142:Manifest[A5],implicitevidence$143:UnionFormats.this.JF[A6],implicitevidence$144:Manifest[A6],implicitevidence$145:UnionFormats.this.JF[A7],implicitevidence$146:Manifest[A7],implicitevidence$147:UnionFormats.this.JF[A8],implicitevidence$148:Manifest[A8],implicitevidence$149:UnionFormats.this.JF[A9],implicitevidence$150:Manifest[A9],implicitevidence$151:UnionFormats.this.JF[A10],implicitevidence$152:Manifest[A10],implicitevidence$153:UnionFormats.this.JF[A11],implicitevidence$154:Manifest[A11],implicitevidence$155:UnionFormats.this.JF[A12],implicitevidence$156:Manifest[A12]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat11", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10], arg20: JF[A11], arg21: Manifest[A11]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat11", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat11[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitevidence$111:UnionFormats.this.JF[A1],implicitevidence$112:Manifest[A1],implicitevidence$113:UnionFormats.this.JF[A2],implicitevidence$114:Manifest[A2],implicitevidence$115:UnionFormats.this.JF[A3],implicitevidence$116:Manifest[A3],implicitevidence$117:UnionFormats.this.JF[A4],implicitevidence$118:Manifest[A4],implicitevidence$119:UnionFormats.this.JF[A5],implicitevidence$120:Manifest[A5],implicitevidence$121:UnionFormats.this.JF[A6],implicitevidence$122:Manifest[A6],implicitevidence$123:UnionFormats.this.JF[A7],implicitevidence$124:Manifest[A7],implicitevidence$125:UnionFormats.this.JF[A8],implicitevidence$126:Manifest[A8],implicitevidence$127:UnionFormats.this.JF[A9],implicitevidence$128:Manifest[A9],implicitevidence$129:UnionFormats.this.JF[A10],implicitevidence$130:Manifest[A10],implicitevidence$131:UnionFormats.this.JF[A11],implicitevidence$132:Manifest[A11]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat10", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9], arg18: JF[A10], arg19: Manifest[A10]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat10", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat10[U,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitevidence$91:UnionFormats.this.JF[A1],implicitevidence$92:Manifest[A1],implicitevidence$93:UnionFormats.this.JF[A2],implicitevidence$94:Manifest[A2],implicitevidence$95:UnionFormats.this.JF[A3],implicitevidence$96:Manifest[A3],implicitevidence$97:UnionFormats.this.JF[A4],implicitevidence$98:Manifest[A4],implicitevidence$99:UnionFormats.this.JF[A5],implicitevidence$100:Manifest[A5],implicitevidence$101:UnionFormats.this.JF[A6],implicitevidence$102:Manifest[A6],implicitevidence$103:UnionFormats.this.JF[A7],implicitevidence$104:Manifest[A7],implicitevidence$105:UnionFormats.this.JF[A8],implicitevidence$106:Manifest[A8],implicitevidence$107:UnionFormats.this.JF[A9],implicitevidence$108:Manifest[A9],implicitevidence$109:UnionFormats.this.JF[A10],implicitevidence$110:Manifest[A10]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat9", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8], arg16: JF[A9], arg17: Manifest[A9]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat9", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat9[U,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitevidence$73:UnionFormats.this.JF[A1],implicitevidence$74:Manifest[A1],implicitevidence$75:UnionFormats.this.JF[A2],implicitevidence$76:Manifest[A2],implicitevidence$77:UnionFormats.this.JF[A3],implicitevidence$78:Manifest[A3],implicitevidence$79:UnionFormats.this.JF[A4],implicitevidence$80:Manifest[A4],implicitevidence$81:UnionFormats.this.JF[A5],implicitevidence$82:Manifest[A5],implicitevidence$83:UnionFormats.this.JF[A6],implicitevidence$84:Manifest[A6],implicitevidence$85:UnionFormats.this.JF[A7],implicitevidence$86:Manifest[A7],implicitevidence$87:UnionFormats.this.JF[A8],implicitevidence$88:Manifest[A8],implicitevidence$89:UnionFormats.this.JF[A9],implicitevidence$90:Manifest[A9]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat8", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7], arg14: JF[A8], arg15: Manifest[A8]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat8", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat8[U,A1,A2,A3,A4,A5,A6,A7,A8](implicitevidence$57:UnionFormats.this.JF[A1],implicitevidence$58:Manifest[A1],implicitevidence$59:UnionFormats.this.JF[A2],implicitevidence$60:Manifest[A2],implicitevidence$61:UnionFormats.this.JF[A3],implicitevidence$62:Manifest[A3],implicitevidence$63:UnionFormats.this.JF[A4],implicitevidence$64:Manifest[A4],implicitevidence$65:UnionFormats.this.JF[A5],implicitevidence$66:Manifest[A5],implicitevidence$67:UnionFormats.this.JF[A6],implicitevidence$68:Manifest[A6],implicitevidence$69:UnionFormats.this.JF[A7],implicitevidence$70:Manifest[A7],implicitevidence$71:UnionFormats.this.JF[A8],implicitevidence$72:Manifest[A8]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat7", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6], arg12: JF[A7], arg13: Manifest[A7]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat7", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat7[U,A1,A2,A3,A4,A5,A6,A7](implicitevidence$43:UnionFormats.this.JF[A1],implicitevidence$44:Manifest[A1],implicitevidence$45:UnionFormats.this.JF[A2],implicitevidence$46:Manifest[A2],implicitevidence$47:UnionFormats.this.JF[A3],implicitevidence$48:Manifest[A3],implicitevidence$49:UnionFormats.this.JF[A4],implicitevidence$50:Manifest[A4],implicitevidence$51:UnionFormats.this.JF[A5],implicitevidence$52:Manifest[A5],implicitevidence$53:UnionFormats.this.JF[A6],implicitevidence$54:Manifest[A6],implicitevidence$55:UnionFormats.this.JF[A7],implicitevidence$56:Manifest[A7]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat6", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5], arg10: JF[A6], arg11: Manifest[A6]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat6", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat6[U,A1,A2,A3,A4,A5,A6](implicitevidence$31:UnionFormats.this.JF[A1],implicitevidence$32:Manifest[A1],implicitevidence$33:UnionFormats.this.JF[A2],implicitevidence$34:Manifest[A2],implicitevidence$35:UnionFormats.this.JF[A3],implicitevidence$36:Manifest[A3],implicitevidence$37:UnionFormats.this.JF[A4],implicitevidence$38:Manifest[A4],implicitevidence$39:UnionFormats.this.JF[A5],implicitevidence$40:Manifest[A5],implicitevidence$41:UnionFormats.this.JF[A6],implicitevidence$42:Manifest[A6]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat5", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4], arg8: JF[A5], arg9: Manifest[A5]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat5", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat5[U,A1,A2,A3,A4,A5](implicitevidence$21:UnionFormats.this.JF[A1],implicitevidence$22:Manifest[A1],implicitevidence$23:UnionFormats.this.JF[A2],implicitevidence$24:Manifest[A2],implicitevidence$25:UnionFormats.this.JF[A3],implicitevidence$26:Manifest[A3],implicitevidence$27:UnionFormats.this.JF[A4],implicitevidence$28:Manifest[A4],implicitevidence$29:UnionFormats.this.JF[A5],implicitevidence$30:Manifest[A5]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat4", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3], arg6: JF[A4], arg7: Manifest[A4]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat4", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat4[U,A1,A2,A3,A4](implicitevidence$13:UnionFormats.this.JF[A1],implicitevidence$14:Manifest[A1],implicitevidence$15:UnionFormats.this.JF[A2],implicitevidence$16:Manifest[A2],implicitevidence$17:UnionFormats.this.JF[A3],implicitevidence$18:Manifest[A3],implicitevidence$19:UnionFormats.this.JF[A4],implicitevidence$20:Manifest[A4]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat3", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2], arg4: JF[A3], arg5: Manifest[A3]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat3", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat3[U,A1,A2,A3](implicitevidence$7:UnionFormats.this.JF[A1],implicitevidence$8:Manifest[A1],implicitevidence$9:UnionFormats.this.JF[A2],implicitevidence$10:Manifest[A2],implicitevidence$11:UnionFormats.this.JF[A3],implicitevidence$12:Manifest[A3]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat2", "tail" : "(arg0: JF[A1], arg1: Manifest[A1], arg2: JF[A2], arg3: Manifest[A2]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat2", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat2[U,A1,A2](implicitevidence$3:UnionFormats.this.JF[A1],implicitevidence$4:Manifest[A1],implicitevidence$5:UnionFormats.this.JF[A2],implicitevidence$6:Manifest[A2]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "unionFormat1", "tail" : "(arg0: JF[A1], arg1: Manifest[A1]): JF[U]", "member" : "sjsonnew.UnionFormats.unionFormat1", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#unionFormat1[U,A1](implicitevidence$1:UnionFormats.this.JF[A1],implicitevidence$2:Manifest[A1]):UnionFormats.this.JF[U]", "kind" : "def"}, {"label" : "contramapKeyWriter", "tail" : "(f: (B) ⇒ A)(ev: JsonKeyWriter[A]): JsonKeyWriter[B]", "member" : "sjsonnew.AdditionalFormats.contramapKeyWriter", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#contramapKeyWriter[A,B](f:B=>A)(implicitev:sjsonnew.JsonKeyWriter[A]):sjsonnew.JsonKeyWriter[B]", "kind" : "def"}, {"label" : "mapKeyReader", "tail" : "(f: (A) ⇒ B)(ev: JsonKeyReader[A]): JsonKeyReader[B]", "member" : "sjsonnew.AdditionalFormats.mapKeyReader", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#mapKeyReader[A,B](f:A=>B)(implicitev:sjsonnew.JsonKeyReader[A]):sjsonnew.JsonKeyReader[B]", "kind" : "def"}, {"label" : "contramapWriter", "tail" : "(f: (B) ⇒ A)(ev: JsonWriter[A]): JsonWriter[B]", "member" : "sjsonnew.AdditionalFormats.contramapWriter", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#contramapWriter[A,B](f:B=>A)(implicitev:sjsonnew.JsonWriter[A]):sjsonnew.JsonWriter[B]", "kind" : "def"}, {"label" : "mapReader", "tail" : "(f: (A) ⇒ B)(ev: JsonReader[A]): JsonReader[B]", "member" : "sjsonnew.AdditionalFormats.mapReader", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#mapReader[A,B](f:A=>B)(implicitev:sjsonnew.JsonReader[A]):sjsonnew.JsonReader[B]", "kind" : "def"}, {"label" : "projectFormat", "tail" : "(f1: (T) ⇒ U, f2: (U) ⇒ T)(fu: JsonFormat[U]): JsonFormat[T]", "member" : "sjsonnew.AdditionalFormats.projectFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#projectFormat[T,U](f1:T=>U,f2:U=>T)(implicitfu:sjsonnew.JsonFormat[U]):sjsonnew.JsonFormat[T]", "kind" : "def"}, {"label" : "asSingleton", "tail" : "(a: A): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.asSingleton", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#asSingleton[A](a:A):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "safeReader", "tail" : "(arg0: JsonReader[A]): JsonReader[Either[Exception, A]]", "member" : "sjsonnew.AdditionalFormats.safeReader", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#safeReader[A](implicitevidence$1:sjsonnew.JsonReader[A]):sjsonnew.JsonReader[Either[Exception,A]]", "kind" : "def"}, {"label" : "lazyFormat", "tail" : "(format: ⇒ JsonFormat[A]): JsonFormat[A] { lazy val delegate: sjsonnew.JsonFormat[A] }", "member" : "sjsonnew.AdditionalFormats.lazyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#lazyFormat[A](format:=>sjsonnew.JsonFormat[A]):sjsonnew.JsonFormat[A]{lazyvaldelegate:sjsonnew.JsonFormat[A]}", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(reader: RootJsonReader[A]): RootJsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#liftFormat[A<:AnyRef](reader:sjsonnew.RootJsonReader[A]):sjsonnew.RootJsonFormat[A]", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(reader: JsonReader[A]): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#liftFormat[A<:AnyRef](reader:sjsonnew.JsonReader[A]):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(writer: RootJsonWriter[A]): RootJsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#liftFormat[A](writer:sjsonnew.RootJsonWriter[A]):sjsonnew.RootJsonFormat[A]", "kind" : "def"}, {"label" : "liftFormat", "tail" : "(writer: JsonWriter[A]): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.liftFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#liftFormat[A](writer:sjsonnew.JsonWriter[A]):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "rootFormat", "tail" : "(format: JsonFormat[A]): RootJsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.rootFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#rootFormat[A](format:sjsonnew.JsonFormat[A]):sjsonnew.RootJsonFormat[A]", "kind" : "def"}, {"label" : "rootJsonFormat", "tail" : "(reader: RootJsonReader[T], writer: RootJsonWriter[T]): RootJsonFormat[T]", "member" : "sjsonnew.AdditionalFormats.rootJsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#rootJsonFormat[T](reader:sjsonnew.RootJsonReader[T],writer:sjsonnew.RootJsonWriter[T]):sjsonnew.RootJsonFormat[T]", "kind" : "def"}, {"label" : "jsonFormat", "tail" : "(reader: JsonReader[A], writer: JsonWriter[A]): JsonFormat[A]", "member" : "sjsonnew.AdditionalFormats.jsonFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#jsonFormat[A](reader:sjsonnew.JsonReader[A],writer:sjsonnew.JsonWriter[A]):sjsonnew.JsonFormat[A]", "kind" : "def"}, {"label" : "viaSeq", "tail" : "(f: (Seq[A]) ⇒ I)(arg0: JsonFormat[A]): RootJsonFormat[I]", "member" : "sjsonnew.CollectionFormats.viaSeq", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#viaSeq[I<:Iterable[A],A](f:scala.collection.immutable.Seq[A]=>I)(implicitevidence$17:sjsonnew.JsonFormat[A]):sjsonnew.RootJsonFormat[I]", "kind" : "def"}, {"label" : "setFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "sjsonnew.CollectionFormats.setFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#setFormat[T](implicitevidence$16:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.Set[T]]", "kind" : "implicit def"}, {"label" : "linearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "sjsonnew.CollectionFormats.linearSeqFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#linearSeqFormat[T](implicitevidence$15:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "indexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "sjsonnew.CollectionFormats.indexedSeqFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#indexedSeqFormat[T](implicitevidence$14:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "seqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "sjsonnew.CollectionFormats.seqFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#seqFormat[T](implicitevidence$13:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[Seq[T]]", "kind" : "implicit def"}, {"label" : "iterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "sjsonnew.CollectionFormats.iterableFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#iterableFormat[T](implicitevidence$12:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[Iterable[T]]", "kind" : "implicit def"}, {"label" : "vectorFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Vector[T]]", "member" : "sjsonnew.CollectionFormats.vectorFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#vectorFormat[T](implicitevidence$11:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[Vector[T]]", "kind" : "implicit def"}, {"label" : "immSetFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Set[T]]", "member" : "sjsonnew.CollectionFormats.immSetFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#immSetFormat[T](implicitevidence$10:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.Set[T]]", "kind" : "implicit def"}, {"label" : "immLinearSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[LinearSeq[T]]", "member" : "sjsonnew.CollectionFormats.immLinearSeqFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#immLinearSeqFormat[T](implicitevidence$9:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.LinearSeq[T]]", "kind" : "implicit def"}, {"label" : "immIndexedSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[IndexedSeq[T]]", "member" : "sjsonnew.CollectionFormats.immIndexedSeqFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#immIndexedSeqFormat[T](implicitevidence$8:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.IndexedSeq[T]]", "kind" : "implicit def"}, {"label" : "immSeqFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Seq[T]]", "member" : "sjsonnew.CollectionFormats.immSeqFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#immSeqFormat[T](implicitevidence$7:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.Seq[T]]", "kind" : "implicit def"}, {"label" : "immIterableFormat", "tail" : "(arg0: JsonFormat[T]): RootJsonFormat[Iterable[T]]", "member" : "sjsonnew.CollectionFormats.immIterableFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#immIterableFormat[T](implicitevidence$6:sjsonnew.JsonFormat[T]):sjsonnew.RootJsonFormat[scala.collection.immutable.Iterable[T]]", "kind" : "implicit def"}, {"label" : "mapFormat", "tail" : "(arg0: JsonKeyFormat[K], arg1: JsonFormat[V]): RootJsonFormat[Map[K, V]]", "member" : "sjsonnew.CollectionFormats.mapFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#mapFormat[K,V](implicitevidence$4:sjsonnew.JsonKeyFormat[K],implicitevidence$5:sjsonnew.JsonFormat[V]):sjsonnew.RootJsonFormat[Map[K,V]]", "kind" : "implicit def"}, {"label" : "arrayFormat", "tail" : "(arg0: JsonFormat[A], arg1: ClassTag[A]): RootJsonFormat[Array[A]]", "member" : "sjsonnew.CollectionFormats.arrayFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#arrayFormat[A](implicitevidence$2:sjsonnew.JsonFormat[A],implicitevidence$3:scala.reflect.ClassTag[A]):sjsonnew.RootJsonFormat[Array[A]]", "kind" : "implicit def"}, {"label" : "listFormat", "tail" : "(arg0: JsonFormat[A]): RootJsonFormat[List[A]]", "member" : "sjsonnew.CollectionFormats.listFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#listFormat[A](implicitevidence$1:sjsonnew.JsonFormat[A]):sjsonnew.RootJsonFormat[List[A]]", "kind" : "implicit def"}, {"label" : "tuple22Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21], A22: JF[A22]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]", "member" : "sjsonnew.TupleFormats.tuple22Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple22Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19],implicitA20:TupleFormats.this.JF[A20],implicitA21:TupleFormats.this.JF[A21],implicitA22:TupleFormats.this.JF[A22]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]", "kind" : "implicit def"}, {"label" : "tuple21Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20], A21: JF[A21]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "sjsonnew.TupleFormats.tuple21Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple21Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19],implicitA20:TupleFormats.this.JF[A20],implicitA21:TupleFormats.this.JF[A21]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit def"}, {"label" : "tuple20Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19], A20: JF[A20]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "sjsonnew.TupleFormats.tuple20Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple20Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19],implicitA20:TupleFormats.this.JF[A20]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit def"}, {"label" : "tuple19Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18], A19: JF[A19]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "sjsonnew.TupleFormats.tuple19Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple19Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18],implicitA19:TupleFormats.this.JF[A19]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit def"}, {"label" : "tuple18Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17], A18: JF[A18]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "sjsonnew.TupleFormats.tuple18Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple18Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17],implicitA18:TupleFormats.this.JF[A18]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit def"}, {"label" : "tuple17Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16], A17: JF[A17]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "sjsonnew.TupleFormats.tuple17Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple17Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16],implicitA17:TupleFormats.this.JF[A17]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit def"}, {"label" : "tuple16Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15], A16: JF[A16]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "sjsonnew.TupleFormats.tuple16Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple16Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15],implicitA16:TupleFormats.this.JF[A16]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit def"}, {"label" : "tuple15Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14], A15: JF[A15]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "sjsonnew.TupleFormats.tuple15Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple15Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14],implicitA15:TupleFormats.this.JF[A15]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit def"}, {"label" : "tuple14Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13], A14: JF[A14]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "sjsonnew.TupleFormats.tuple14Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple14Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13],implicitA14:TupleFormats.this.JF[A14]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit def"}, {"label" : "tuple13Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12], A13: JF[A13]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "sjsonnew.TupleFormats.tuple13Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple13Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12],implicitA13:TupleFormats.this.JF[A13]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit def"}, {"label" : "tuple12Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11], A12: JF[A12]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "sjsonnew.TupleFormats.tuple12Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple12Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11],implicitA12:TupleFormats.this.JF[A12]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit def"}, {"label" : "tuple11Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10], A11: JF[A11]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "sjsonnew.TupleFormats.tuple11Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple11Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10],implicitA11:TupleFormats.this.JF[A11]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit def"}, {"label" : "tuple10Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9], A10: JF[A10]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "sjsonnew.TupleFormats.tuple10Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple10Format[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9],implicitA10:TupleFormats.this.JF[A10]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit def"}, {"label" : "tuple9Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8], A9: JF[A9]): JF[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "sjsonnew.TupleFormats.tuple9Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple9Format[A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8],implicitA9:TupleFormats.this.JF[A9]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit def"}, {"label" : "tuple8Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7], A8: JF[A8]): JF[(A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "sjsonnew.TupleFormats.tuple8Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple8Format[A1,A2,A3,A4,A5,A6,A7,A8](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7],implicitA8:TupleFormats.this.JF[A8]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit def"}, {"label" : "tuple7Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6], A7: JF[A7]): JF[(A1, A2, A3, A4, A5, A6, A7)]", "member" : "sjsonnew.TupleFormats.tuple7Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple7Format[A1,A2,A3,A4,A5,A6,A7](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6],implicitA7:TupleFormats.this.JF[A7]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit def"}, {"label" : "tuple6Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5], A6: JF[A6]): JF[(A1, A2, A3, A4, A5, A6)]", "member" : "sjsonnew.TupleFormats.tuple6Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple6Format[A1,A2,A3,A4,A5,A6](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5],implicitA6:TupleFormats.this.JF[A6]):TupleFormats.this.JF[(A1,A2,A3,A4,A5,A6)]", "kind" : "implicit def"}, {"label" : "tuple5Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4], A5: JF[A5]): JF[(A1, A2, A3, A4, A5)]", "member" : "sjsonnew.TupleFormats.tuple5Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple5Format[A1,A2,A3,A4,A5](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4],implicitA5:TupleFormats.this.JF[A5]):TupleFormats.this.JF[(A1,A2,A3,A4,A5)]", "kind" : "implicit def"}, {"label" : "tuple4Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3], A4: JF[A4]): JF[(A1, A2, A3, A4)]", "member" : "sjsonnew.TupleFormats.tuple4Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple4Format[A1,A2,A3,A4](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3],implicitA4:TupleFormats.this.JF[A4]):TupleFormats.this.JF[(A1,A2,A3,A4)]", "kind" : "implicit def"}, {"label" : "tuple3Format", "tail" : "(A1: JF[A1], A2: JF[A2], A3: JF[A3]): JF[(A1, A2, A3)]", "member" : "sjsonnew.TupleFormats.tuple3Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple3Format[A1,A2,A3](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2],implicitA3:TupleFormats.this.JF[A3]):TupleFormats.this.JF[(A1,A2,A3)]", "kind" : "implicit def"}, {"label" : "tuple2Format", "tail" : "(A1: JF[A1], A2: JF[A2]): JF[(A1, A2)]", "member" : "sjsonnew.TupleFormats.tuple2Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple2Format[A1,A2](implicitA1:TupleFormats.this.JF[A1],implicitA2:TupleFormats.this.JF[A2]):TupleFormats.this.JF[(A1,A2)]", "kind" : "implicit def"}, {"label" : "tuple1Format", "tail" : "(A1: JF[A1]): JF[(A1)]", "member" : "sjsonnew.TupleFormats.tuple1Format", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#tuple1Format[A1](implicitA1:TupleFormats.this.JF[A1]):TupleFormats.this.JF[(A1,)]", "kind" : "implicit def"}, {"label" : "eitherFormat", "tail" : "(arg0: JF[A], arg1: JF[B]): JF[Either[A, B]] { ... \/* 2 definitions in type refinement *\/ }", "member" : "sjsonnew.StandardFormats.eitherFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#eitherFormat[A,B](implicitevidence$3:StandardFormats.this.JF[A],implicitevidence$4:StandardFormats.this.JF[B]):StandardFormats.this.JF[Either[A,B]]{lazyvalleftFormat:StandardFormats.this.JF[A];lazyvalrightFormat:StandardFormats.this.JF[B]}", "kind" : "implicit def"}, {"label" : "optionFormat", "tail" : "(arg0: JF[A]): JF[Option[A]]", "member" : "sjsonnew.StandardFormats.optionFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#optionFormat[A](implicitevidence$1:StandardFormats.this.JF[A]):StandardFormats.this.JF[Option[A]]", "kind" : "implicit def"}, {"label" : "BigIntJsonKeyFormat", "tail" : ": JsonKeyFormat[BigInt]", "member" : "sjsonnew.PrimitiveFormats.BigIntJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#BigIntJsonKeyFormat:sjsonnew.JsonKeyFormat[BigInt]", "kind" : "implicit val"}, {"label" : "BigDecimalJsonKeyFormat", "tail" : ": JsonKeyFormat[BigDecimal]", "member" : "sjsonnew.PrimitiveFormats.BigDecimalJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#BigDecimalJsonKeyFormat:sjsonnew.JsonKeyFormat[BigDecimal]", "kind" : "implicit val"}, {"label" : "DoubleJsonKeyFormat", "tail" : ": JsonKeyFormat[Double]", "member" : "sjsonnew.PrimitiveFormats.DoubleJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#DoubleJsonKeyFormat:sjsonnew.JsonKeyFormat[Double]", "kind" : "implicit val"}, {"label" : "FloatJsonKeyFormat", "tail" : ": JsonKeyFormat[Float]", "member" : "sjsonnew.PrimitiveFormats.FloatJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#FloatJsonKeyFormat:sjsonnew.JsonKeyFormat[Float]", "kind" : "implicit val"}, {"label" : "LongJsonKeyFormat", "tail" : ": JsonKeyFormat[Long]", "member" : "sjsonnew.PrimitiveFormats.LongJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#LongJsonKeyFormat:sjsonnew.JsonKeyFormat[Long]", "kind" : "implicit val"}, {"label" : "IntJsonKeyFormat", "tail" : ": JsonKeyFormat[Int]", "member" : "sjsonnew.PrimitiveFormats.IntJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#IntJsonKeyFormat:sjsonnew.JsonKeyFormat[Int]", "kind" : "implicit val"}, {"label" : "CharJsonKeyFormat", "tail" : ": JsonKeyFormat[Char]", "member" : "sjsonnew.PrimitiveFormats.CharJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#CharJsonKeyFormat:sjsonnew.JsonKeyFormat[Char]", "kind" : "implicit val"}, {"label" : "ShortJsonKeyFormat", "tail" : ": JsonKeyFormat[Short]", "member" : "sjsonnew.PrimitiveFormats.ShortJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#ShortJsonKeyFormat:sjsonnew.JsonKeyFormat[Short]", "kind" : "implicit val"}, {"label" : "ByteJsonKeyFormat", "tail" : ": JsonKeyFormat[Byte]", "member" : "sjsonnew.PrimitiveFormats.ByteJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#ByteJsonKeyFormat:sjsonnew.JsonKeyFormat[Byte]", "kind" : "implicit val"}, {"label" : "BooleanJsonKeyFormat", "tail" : ": JsonKeyFormat[Boolean]", "member" : "sjsonnew.PrimitiveFormats.BooleanJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#BooleanJsonKeyFormat:sjsonnew.JsonKeyFormat[Boolean]", "kind" : "implicit val"}, {"label" : "UnitJsonKeyFormat", "tail" : ": JsonKeyFormat[Unit]", "member" : "sjsonnew.PrimitiveFormats.UnitJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#UnitJsonKeyFormat:sjsonnew.JsonKeyFormat[Unit]", "kind" : "implicit val"}, {"label" : "SymbolJsonKeyFormat", "tail" : ": JsonKeyFormat[Symbol]", "member" : "sjsonnew.PrimitiveFormats.SymbolJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#SymbolJsonKeyFormat:sjsonnew.JsonKeyFormat[Symbol]", "kind" : "implicit val"}, {"label" : "StringJsonKeyFormat", "tail" : ": JsonKeyFormat[String]", "member" : "sjsonnew.PrimitiveFormats.StringJsonKeyFormat", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#StringJsonKeyFormat:sjsonnew.JsonKeyFormat[String]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/JsonProtocol$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/protocol\/testing\/codec\/JsonProtocol.html", "kind" : "trait"}, {"name" : "sbt.protocol.testing.codec.StartTestGroupEventFormats", "members_trait" : [{"label" : "StartTestGroupEventFormat", "tail" : ": JsonFormat[StartTestGroupEvent]", "member" : "sbt.protocol.testing.codec.StartTestGroupEventFormats.StartTestGroupEventFormat", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#StartTestGroupEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.StartTestGroupEvent]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/testing\/codec\/StartTestGroupEventFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.testing.codec.TestCompleteEventFormats", "members_trait" : [{"label" : "TestCompleteEventFormat", "tail" : ": JsonFormat[TestCompleteEvent]", "member" : "sbt.protocol.testing.codec.TestCompleteEventFormats.TestCompleteEventFormat", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#TestCompleteEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestCompleteEvent]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/testing\/codec\/TestCompleteEventFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.testing.codec.TestInitEventFormats", "members_trait" : [{"label" : "TestInitEventFormat", "tail" : ": JsonFormat[TestInitEvent]", "member" : "sbt.protocol.testing.codec.TestInitEventFormats.TestInitEventFormat", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#TestInitEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestInitEvent]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/testing\/codec\/TestInitEventFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.testing.codec.TestItemDetailFormats", "members_trait" : [{"label" : "TestItemDetailFormat", "tail" : ": JsonFormat[TestItemDetail]", "member" : "sbt.protocol.testing.codec.TestItemDetailFormats.TestItemDetailFormat", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#TestItemDetailFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestItemDetail]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/testing\/codec\/TestItemDetailFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.testing.codec.TestItemEventFormats", "members_trait" : [{"label" : "TestItemEventFormat", "tail" : ": JsonFormat[TestItemEvent]", "member" : "sbt.protocol.testing.codec.TestItemEventFormats.TestItemEventFormat", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#TestItemEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestItemEvent]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/testing\/codec\/TestItemEventFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.testing.codec.TestMessageFormats", "members_trait" : [{"label" : "TestMessageFormat", "tail" : ": JsonFormat[TestMessage]", "member" : "sbt.protocol.testing.codec.TestMessageFormats.TestMessageFormat", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#TestMessageFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestMessage]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/testing\/codec\/TestMessageFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.testing.codec.TestResultFormats", "members_trait" : [{"label" : "TestResultFormat", "tail" : ": JsonFormat[TestResult]", "member" : "sbt.protocol.testing.codec.TestResultFormats.TestResultFormat", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#TestResultFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestResult]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/testing\/codec\/TestResultFormats.html", "kind" : "trait"}, {"name" : "sbt.protocol.testing.codec.TestStringEventFormats", "members_trait" : [{"label" : "TestStringEventFormat", "tail" : ": JsonFormat[TestStringEvent]", "member" : "sbt.protocol.testing.codec.TestStringEventFormats.TestStringEventFormat", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#TestStringEventFormat:sjsonnew.JsonFormat[sbt.protocol.testing.TestStringEvent]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/protocol\/testing\/codec\/TestStringEventFormats.html", "kind" : "trait"}], "sbt" : [{"name" : "sbt.Action", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Action.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Action.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Action.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Action.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Action.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Action.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Action.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Action.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Action.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Action.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Action.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Action.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Action.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Action.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Action.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Action.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Action.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Action.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Action.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Defines a task computation", "trait" : "sbt\/Action.html", "kind" : "trait"}, {"name" : "sbt.Append", "shortDescription" : "", "object" : "sbt\/Append$.html", "members_object" : [{"label" : "appendSource", "tail" : "(): Sequence[Seq[Source], Seq[File], File]", "member" : "sbt.Append.appendSource", "link" : "sbt\/Append$.html#appendSource:sbt.Append.Sequence[Seq[sbt.internal.io.Source],Seq[java.io.File],java.io.File]", "kind" : "implicit def"}, {"label" : "appendOption", "tail" : "(): Sequence[Seq[T], Option[T], Option[T]]", "member" : "sbt.Append.appendOption", "link" : "sbt\/Append$.html#appendOption[T]:sbt.Append.Sequence[Seq[T],Option[T],Option[T]]", "kind" : "implicit def"}, {"label" : "appendMap", "tail" : "(): Sequence[Map[A, B], Map[X, Y], (X, Y)]", "member" : "sbt.Append.appendMap", "link" : "sbt\/Append$.html#appendMap[A,B,X<:A,Y<:B]:sbt.Append.Sequence[Map[A,B],Map[X,Y],(X,Y)]", "kind" : "implicit def"}, {"label" : "appendSet", "tail" : "(): Sequence[Set[T], Set[V], V]", "member" : "sbt.Append.appendSet", "link" : "sbt\/Append$.html#appendSet[T,V<:T]:sbt.Append.Sequence[Set[T],Set[V],V]", "kind" : "implicit def"}, {"label" : "appendClasspath", "tail" : "(): Sequence[Classpath, Seq[File], File]", "member" : "sbt.Append.appendClasspath", "link" : "sbt\/Append$.html#appendClasspath:sbt.Append.Sequence[sbt.Def.Classpath,Seq[java.io.File],java.io.File]", "kind" : "implicit def"}, {"label" : "appendDouble", "tail" : "(): Value[Double, Double]", "member" : "sbt.Append.appendDouble", "link" : "sbt\/Append$.html#appendDouble:sbt.Append.Value[Double,Double]", "kind" : "implicit def"}, {"label" : "appendLong", "tail" : "(): Value[Long, Long]", "member" : "sbt.Append.appendLong", "link" : "sbt\/Append$.html#appendLong:sbt.Append.Value[Long,Long]", "kind" : "implicit def"}, {"label" : "appendInt", "tail" : "(): Value[Int, Int]", "member" : "sbt.Append.appendInt", "link" : "sbt\/Append$.html#appendInt:sbt.Append.Value[Int,Int]", "kind" : "implicit def"}, {"label" : "appendString", "tail" : "(): Value[String, String]", "member" : "sbt.Append.appendString", "link" : "sbt\/Append$.html#appendString:sbt.Append.Value[String,String]", "kind" : "implicit def"}, {"label" : "appendVectorImplicit", "tail" : "(ev: (V) ⇒ T): Sequence[Vector[T], Seq[V], V]", "member" : "sbt.Append.appendVectorImplicit", "link" : "sbt\/Append$.html#appendVectorImplicit[T,V](implicitev:V=>T):sbt.Append.Sequence[Vector[T],Seq[V],V]", "kind" : "implicit def"}, {"label" : "appendListImplicit", "tail" : "(ev: (V) ⇒ T): Sequence[List[T], List[V], V]", "member" : "sbt.Append.appendListImplicit", "link" : "sbt\/Append$.html#appendListImplicit[T,V](implicitev:V=>T):sbt.Append.Sequence[List[T],List[V],V]", "kind" : "implicit def"}, {"label" : "appendList", "tail" : "(): Sequence[List[T], List[V], V]", "member" : "sbt.Append.appendList", "link" : "sbt\/Append$.html#appendList[T,V<:T]:sbt.Append.Sequence[List[T],List[V],V]", "kind" : "implicit def"}, {"label" : "appendTaskKeySeq", "tail" : "(): Value[Seq[Task[T]], TaskKey[V]]", "member" : "sbt.Append.appendTaskKeySeq", "link" : "sbt\/Append$.html#appendTaskKeySeq[T,V<:T]:sbt.Append.Value[Seq[sbt.Task[T]],sbt.TaskKey[V]]", "kind" : "implicit def"}, {"label" : "appendTaskValueSeq", "tail" : "(): Value[Seq[Task[T]], Def.Initialize[Task[V]]]", "member" : "sbt.Append.appendTaskValueSeq", "link" : "sbt\/Append$.html#appendTaskValueSeq[T,V<:T]:sbt.Append.Value[Seq[sbt.Task[T]],sbt.Def.Initialize[sbt.Task[V]]]", "kind" : "implicit def"}, {"label" : "appendSeqImplicit", "tail" : "(ev: (V) ⇒ T): Sequence[Seq[T], Seq[V], V]", "member" : "sbt.Append.appendSeqImplicit", "link" : "sbt\/Append$.html#appendSeqImplicit[T,V](implicitev:V=>T):sbt.Append.Sequence[Seq[T],Seq[V],V]", "kind" : "implicit def"}, {"label" : "appendSeq", "tail" : "(): Sequence[Seq[T], Seq[V], V]", "member" : "sbt.Append.appendSeq", "link" : "sbt\/Append$.html#appendSeq[T,V<:T]:sbt.Append.Sequence[Seq[T],Seq[V],V]", "kind" : "implicit def"}, {"label" : "Sequence", "tail" : "", "member" : "sbt.Append.Sequence", "link" : "sbt\/Append$.html#Sequence[A,-B,T]extendsAppend.Value[A,T]withAppend.Values[A,B]", "kind" : "trait"}, {"label" : "Values", "tail" : "", "member" : "sbt.Append.Values", "link" : "sbt\/Append$.html#Values[A,-B]extendsAnyRef", "kind" : "trait"}, {"label" : "Value", "tail" : "", "member" : "sbt.Append.Value", "link" : "sbt\/Append$.html#Value[A,B]extendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Append$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Append$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Append$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Append$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Append$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Append$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Append$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Append$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Append$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Append$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Append$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Append$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Append$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Append$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Append$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Append$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Append$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Append$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Append$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.ApplicationID", "shortDescription" : "", "object" : "sbt\/ApplicationID$.html", "members_object" : [{"label" : "apply", "tail" : "(delegate: xsbti.ApplicationID): ApplicationID", "member" : "sbt.ApplicationID.apply", "link" : "sbt\/ApplicationID$.html#apply(delegate:xsbti.ApplicationID):sbt.ApplicationID", "kind" : "def"}, {"label" : "apply", "tail" : "(delegate: xsbti.ApplicationID, newVersion: String): ApplicationID", "member" : "sbt.ApplicationID.apply", "link" : "sbt\/ApplicationID$.html#apply(delegate:xsbti.ApplicationID,newVersion:String):sbt.ApplicationID", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ApplicationID$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ApplicationID$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ApplicationID$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ApplicationID$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ApplicationID$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ApplicationID$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ApplicationID$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ApplicationID$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ApplicationID$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ApplicationID$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ApplicationID$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ApplicationID$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ApplicationID$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ApplicationID$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ApplicationID$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ApplicationID$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ApplicationID$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ApplicationID$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ApplicationID$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "crossVersioned", "tail" : "(): Boolean", "member" : "sbt.ApplicationID.crossVersioned", "link" : "sbt\/ApplicationID.html#crossVersioned():Boolean", "kind" : "def"}, {"label" : "classpathExtra", "tail" : "(): Array[File]", "member" : "sbt.ApplicationID.classpathExtra", "link" : "sbt\/ApplicationID.html#classpathExtra():Array[java.io.File]", "kind" : "def"}, {"label" : "mainComponents", "tail" : "(): Array[String]", "member" : "sbt.ApplicationID.mainComponents", "link" : "sbt\/ApplicationID.html#mainComponents():Array[String]", "kind" : "def"}, {"member" : "sbt.ApplicationID#<init>", "error" : "unsupported entity"}, {"label" : "extra", "tail" : ": Seq[File]", "member" : "sbt.ApplicationID.extra", "link" : "sbt\/ApplicationID.html#extra:Seq[java.io.File]", "kind" : "val"}, {"label" : "crossVersionedValue", "tail" : ": CrossValue", "member" : "sbt.ApplicationID.crossVersionedValue", "link" : "sbt\/ApplicationID.html#crossVersionedValue:xsbti.CrossValue", "kind" : "val"}, {"label" : "components", "tail" : ": Seq[String]", "member" : "sbt.ApplicationID.components", "link" : "sbt\/ApplicationID.html#components:Seq[String]", "kind" : "val"}, {"label" : "mainClass", "tail" : ": String", "member" : "sbt.ApplicationID.mainClass", "link" : "sbt\/ApplicationID.html#mainClass:String", "kind" : "val"}, {"label" : "version", "tail" : ": String", "member" : "sbt.ApplicationID.version", "link" : "sbt\/ApplicationID.html#version:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "sbt.ApplicationID.name", "link" : "sbt\/ApplicationID.html#name:String", "kind" : "val"}, {"label" : "groupID", "tail" : ": String", "member" : "sbt.ApplicationID.groupID", "link" : "sbt\/ApplicationID.html#groupID:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ApplicationID.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ApplicationID.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ApplicationID.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ApplicationID.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ApplicationID.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ApplicationID.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ApplicationID.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ApplicationID.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ApplicationID.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ApplicationID.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ApplicationID.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ApplicationID.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ApplicationID.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ApplicationID.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ApplicationID.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ApplicationID.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/ApplicationID.html", "kind" : "case class"}, {"name" : "sbt.AutoPlugin", "shortDescription" : "An AutoPlugin defines a group of settings and the conditions where the settings are automatically added to a build (called \"activation\").", "members_class" : [{"label" : "derivedProjects", "tail" : "(proj: ProjectDefinition[_]): Seq[Project]", "member" : "sbt.AutoPlugin.derivedProjects", "link" : "sbt\/AutoPlugin.html#derivedProjects(proj:sbt.ProjectDefinition[_]):Seq[sbt.Project]", "kind" : "def"}, {"label" : "extraProjects", "tail" : "(): Seq[Project]", "member" : "sbt.AutoPlugin.extraProjects", "link" : "sbt\/AutoPlugin.html#extraProjects:Seq[sbt.Project]", "kind" : "def"}, {"label" : "globalSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.AutoPlugin.globalSettings", "link" : "sbt\/AutoPlugin.html#globalSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "buildSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.AutoPlugin.buildSettings", "link" : "sbt\/AutoPlugin.html#buildSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "projectSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.AutoPlugin.projectSettings", "link" : "sbt\/AutoPlugin.html#projectSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "projectConfigurations", "tail" : "(): Seq[Configuration]", "member" : "sbt.AutoPlugin.projectConfigurations", "link" : "sbt\/AutoPlugin.html#projectConfigurations:Seq[sbt.librarymanagement.Configuration]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.AutoPlugin.toString", "link" : "sbt\/AutoPlugin.html#toString():String", "kind" : "def"}, {"label" : "label", "tail" : ": String", "member" : "sbt.AutoPlugin.label", "link" : "sbt\/AutoPlugin.html#label:String", "kind" : "val"}, {"label" : "requires", "tail" : "(): Plugins", "member" : "sbt.AutoPlugin.requires", "link" : "sbt\/AutoPlugin.html#requires:sbt.Plugins", "kind" : "def"}, {"label" : "trigger", "tail" : "(): PluginTrigger", "member" : "sbt.AutoPlugin.trigger", "link" : "sbt\/AutoPlugin.html#trigger:sbt.PluginTrigger", "kind" : "def"}, {"member" : "sbt.AutoPlugin#<init>", "error" : "unsupported entity"}, {"label" : "noTrigger", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.noTrigger", "link" : "sbt\/AutoPlugin.html#noTrigger:sbt.PluginTrigger", "kind" : "def"}, {"label" : "allRequirements", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.allRequirements", "link" : "sbt\/AutoPlugin.html#allRequirements:sbt.PluginTrigger", "kind" : "def"}, {"label" : "empty", "tail" : "(): Plugins", "member" : "sbt.PluginsFunctions.empty", "link" : "sbt\/AutoPlugin.html#empty:sbt.Plugins", "kind" : "def"}, {"label" : "&&", "tail" : "(o: Basic): Plugins", "member" : "sbt.Plugins.Basic.&&", "link" : "sbt\/AutoPlugin.html#&&(o:sbt.Plugins.Basic):sbt.Plugins", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/AutoPlugin.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/AutoPlugin.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/AutoPlugin.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/AutoPlugin.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/AutoPlugin.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/AutoPlugin.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/AutoPlugin.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/AutoPlugin.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/AutoPlugin.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/AutoPlugin.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/AutoPlugin.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/AutoPlugin.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/AutoPlugin.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/AutoPlugin.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/AutoPlugin.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/AutoPlugin.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/AutoPlugin.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/AutoPlugin.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/AutoPlugin.html", "kind" : "class"}, {"name" : "sbt.AutoPluginException", "shortDescription" : "An error that occurs when auto-plugins aren't configured properly.", "object" : "sbt\/AutoPluginException$.html", "members_class" : [{"label" : "withPrefix", "tail" : "(p: String): AutoPluginException", "member" : "sbt.AutoPluginException.withPrefix", "link" : "sbt\/AutoPluginException.html#withPrefix(p:String):sbt.AutoPluginException", "kind" : "def"}, {"label" : "origin", "tail" : ": Option[LogicException]", "member" : "sbt.AutoPluginException.origin", "link" : "sbt\/AutoPluginException.html#origin:Option[sbt.internal.util.logic.Logic.LogicException]", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "sbt.AutoPluginException.message", "link" : "sbt\/AutoPluginException.html#message:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "sbt\/AutoPluginException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "sbt\/AutoPluginException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "sbt\/AutoPluginException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "sbt\/AutoPluginException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "sbt\/AutoPluginException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/AutoPluginException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/AutoPluginException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/AutoPluginException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "sbt\/AutoPluginException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "sbt\/AutoPluginException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "sbt\/AutoPluginException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "sbt\/AutoPluginException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "sbt\/AutoPluginException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/AutoPluginException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/AutoPluginException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/AutoPluginException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/AutoPluginException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/AutoPluginException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/AutoPluginException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/AutoPluginException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/AutoPluginException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/AutoPluginException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/AutoPluginException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/AutoPluginException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/AutoPluginException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/AutoPluginException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/AutoPluginException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/AutoPluginException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/AutoPluginException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/AutoPluginException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/AutoPluginException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(origin: LogicException): AutoPluginException", "member" : "sbt.AutoPluginException.apply", "link" : "sbt\/AutoPluginException$.html#apply(origin:sbt.internal.util.logic.Logic.LogicException):sbt.AutoPluginException", "kind" : "def"}, {"label" : "apply", "tail" : "(msg: String): AutoPluginException", "member" : "sbt.AutoPluginException.apply", "link" : "sbt\/AutoPluginException$.html#apply(msg:String):sbt.AutoPluginException", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/AutoPluginException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/AutoPluginException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/AutoPluginException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/AutoPluginException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/AutoPluginException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/AutoPluginException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/AutoPluginException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/AutoPluginException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/AutoPluginException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/AutoPluginException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/AutoPluginException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/AutoPluginException$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/AutoPluginException$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/AutoPluginException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/AutoPluginException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/AutoPluginException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/AutoPluginException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/AutoPluginException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/AutoPluginException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/AutoPluginException.html", "kind" : "class"}, {"name" : "sbt.BackgroundJobService", "shortDescription" : "", "object" : "sbt\/BackgroundJobService$.html", "members_class" : [{"label" : "waitForTry", "tail" : "(job: JobHandle): Try[Unit]", "member" : "sbt.BackgroundJobService.waitForTry", "link" : "sbt\/BackgroundJobService.html#waitForTry(job:sbt.JobHandle):scala.util.Try[Unit]", "kind" : "def"}, {"member" : "sbt.BackgroundJobService#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/BackgroundJobService.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/BackgroundJobService.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/BackgroundJobService.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/BackgroundJobService.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/BackgroundJobService.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/BackgroundJobService.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/BackgroundJobService.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BackgroundJobService.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BackgroundJobService.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BackgroundJobService.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/BackgroundJobService.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/BackgroundJobService.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/BackgroundJobService.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/BackgroundJobService.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/BackgroundJobService.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/BackgroundJobService.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/BackgroundJobService.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/BackgroundJobService.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/BackgroundJobService.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "copyClasspath", "tail" : "(products: Classpath, full: Classpath, workingDirectory: File): Classpath", "member" : "sbt.BackgroundJobService.copyClasspath", "link" : "sbt\/BackgroundJobService.html#copyClasspath(products:sbt.Def.Classpath,full:sbt.Def.Classpath,workingDirectory:java.io.File):sbt.Def.Classpath", "kind" : "abstract def"}, {"label" : "waitFor", "tail" : "(job: JobHandle): Unit", "member" : "sbt.BackgroundJobService.waitFor", "link" : "sbt\/BackgroundJobService.html#waitFor(job:sbt.JobHandle):Unit", "kind" : "abstract def"}, {"label" : "stop", "tail" : "(job: JobHandle): Unit", "member" : "sbt.BackgroundJobService.stop", "link" : "sbt\/BackgroundJobService.html#stop(job:sbt.JobHandle):Unit", "kind" : "abstract def"}, {"label" : "jobs", "tail" : "(): Vector[JobHandle]", "member" : "sbt.BackgroundJobService.jobs", "link" : "sbt\/BackgroundJobService.html#jobs:Vector[sbt.JobHandle]", "kind" : "abstract def"}, {"label" : "shutdown", "tail" : "(): Unit", "member" : "sbt.BackgroundJobService.shutdown", "link" : "sbt\/BackgroundJobService.html#shutdown():Unit", "kind" : "abstract def"}, {"label" : "close", "tail" : "(): Unit", "member" : "sbt.BackgroundJobService.close", "link" : "sbt\/BackgroundJobService.html#close():Unit", "kind" : "abstract def"}, {"label" : "runInBackground", "tail" : "(spawningTask: Def.ScopedKey[_], state: State)(start: (Logger, File) ⇒ Unit): JobHandle", "member" : "sbt.BackgroundJobService.runInBackground", "link" : "sbt\/BackgroundJobService.html#runInBackground(spawningTask:sbt.Def.ScopedKey[_],state:sbt.State)(start:(sbt.util.Logger,java.io.File)=>Unit):sbt.JobHandle", "kind" : "abstract def"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/BackgroundJobService$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/BackgroundJobService$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/BackgroundJobService$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/BackgroundJobService$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/BackgroundJobService$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/BackgroundJobService$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/BackgroundJobService$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BackgroundJobService$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BackgroundJobService$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BackgroundJobService$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/BackgroundJobService$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/BackgroundJobService$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/BackgroundJobService$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/BackgroundJobService$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/BackgroundJobService$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/BackgroundJobService$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/BackgroundJobService$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/BackgroundJobService$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/BackgroundJobService$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/BackgroundJobService.html", "kind" : "class"}, {"name" : "sbt.BasicCommands", "shortDescription" : "", "object" : "sbt\/BasicCommands$.html", "members_object" : [{"label" : "CommandAliasKey", "tail" : ": AttributeKey[(String, String)]", "member" : "sbt.BasicCommands.CommandAliasKey", "link" : "sbt\/BasicCommands$.html#CommandAliasKey:sbt.internal.util.AttributeKey[(String,String)]", "kind" : "val"}, {"label" : "delegateToAlias", "tail" : "(name: String, orElse: Parser[() ⇒ State])(state: State): Parser[() ⇒ State]", "member" : "sbt.BasicCommands.delegateToAlias", "link" : "sbt\/BasicCommands$.html#delegateToAlias(name:String,orElse:sbt.internal.util.complete.Parser[()=>sbt.State])(state:sbt.State):sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "aliasBody", "tail" : "(name: String, value: String)(state: State): Parser[() ⇒ State]", "member" : "sbt.BasicCommands.aliasBody", "link" : "sbt\/BasicCommands$.html#aliasBody(name:String,value:String)(state:sbt.State):sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "newAlias", "tail" : "(name: String, value: String): Command", "member" : "sbt.BasicCommands.newAlias", "link" : "sbt\/BasicCommands$.html#newAlias(name:String,value:String):sbt.Command", "kind" : "def"}, {"label" : "aliases", "tail" : "(s: State, pred: (String, String) ⇒ Boolean): Seq[(String, String)]", "member" : "sbt.BasicCommands.aliases", "link" : "sbt\/BasicCommands$.html#aliases(s:sbt.State,pred:(String,String)=>Boolean):Seq[(String,String)]", "kind" : "def"}, {"label" : "allAliases", "tail" : "(s: State): Seq[(String, String)]", "member" : "sbt.BasicCommands.allAliases", "link" : "sbt\/BasicCommands$.html#allAliases(s:sbt.State):Seq[(String,String)]", "kind" : "def"}, {"label" : "aliasNames", "tail" : "(s: State): Seq[String]", "member" : "sbt.BasicCommands.aliasNames", "link" : "sbt\/BasicCommands$.html#aliasNames(s:sbt.State):Seq[String]", "kind" : "def"}, {"label" : "printAliases", "tail" : "(as: Seq[(String, String)]): Unit", "member" : "sbt.BasicCommands.printAliases", "link" : "sbt\/BasicCommands$.html#printAliases(as:Seq[(String,String)]):Unit", "kind" : "def"}, {"label" : "printAliases", "tail" : "(s: State): Unit", "member" : "sbt.BasicCommands.printAliases", "link" : "sbt\/BasicCommands$.html#printAliases(s:sbt.State):Unit", "kind" : "def"}, {"label" : "printAlias", "tail" : "(s: State, name: String): Unit", "member" : "sbt.BasicCommands.printAlias", "link" : "sbt\/BasicCommands$.html#printAlias(s:sbt.State,name:String):Unit", "kind" : "def"}, {"label" : "getAlias", "tail" : "(c: Command): Option[(String, String)]", "member" : "sbt.BasicCommands.getAlias", "link" : "sbt\/BasicCommands$.html#getAlias(c:sbt.Command):Option[(String,String)]", "kind" : "def"}, {"label" : "isNamed", "tail" : "(name: String, alias: Option[(String, String)]): Boolean", "member" : "sbt.BasicCommands.isNamed", "link" : "sbt\/BasicCommands$.html#isNamed(name:String,alias:Option[(String,String)]):Boolean", "kind" : "def"}, {"label" : "isAliasNamed", "tail" : "(name: String, c: Command): Boolean", "member" : "sbt.BasicCommands.isAliasNamed", "link" : "sbt\/BasicCommands$.html#isAliasNamed(name:String,c:sbt.Command):Boolean", "kind" : "def"}, {"label" : "removeTagged", "tail" : "(as: Seq[Command], tag: AttributeKey[_]): Seq[Command]", "member" : "sbt.BasicCommands.removeTagged", "link" : "sbt\/BasicCommands$.html#removeTagged(as:Seq[sbt.Command],tag:sbt.internal.util.AttributeKey[_]):Seq[sbt.Command]", "kind" : "def"}, {"label" : "removeTagged", "tail" : "(s: State, tag: AttributeKey[_]): State", "member" : "sbt.BasicCommands.removeTagged", "link" : "sbt\/BasicCommands$.html#removeTagged(s:sbt.State,tag:sbt.internal.util.AttributeKey[_]):sbt.State", "kind" : "def"}, {"label" : "removeAlias", "tail" : "(s: State, name: String): State", "member" : "sbt.BasicCommands.removeAlias", "link" : "sbt\/BasicCommands$.html#removeAlias(s:sbt.State,name:String):sbt.State", "kind" : "def"}, {"label" : "removeAliases", "tail" : "(s: State): State", "member" : "sbt.BasicCommands.removeAliases", "link" : "sbt\/BasicCommands$.html#removeAliases(s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "addAlias", "tail" : "(s: State, name: String, value: String): State", "member" : "sbt.BasicCommands.addAlias", "link" : "sbt\/BasicCommands$.html#addAlias(s:sbt.State,name:String,value:String):sbt.State", "kind" : "def"}, {"label" : "runAlias", "tail" : "(s: State, args: Option[(String, Option[Option[String]])]): State", "member" : "sbt.BasicCommands.runAlias", "link" : "sbt\/BasicCommands$.html#runAlias(s:sbt.State,args:Option[(String,Option[Option[String]])]):sbt.State", "kind" : "def"}, {"label" : "alias", "tail" : "(): Command", "member" : "sbt.BasicCommands.alias", "link" : "sbt\/BasicCommands$.html#alias:sbt.Command", "kind" : "def"}, {"label" : "doRead", "tail" : "(s: State)(arg: Either[Int, Seq[File]]): State", "member" : "sbt.BasicCommands.doRead", "link" : "sbt\/BasicCommands$.html#doRead(s:sbt.State)(arg:Either[Int,Seq[java.io.File]]):sbt.State", "kind" : "def"}, {"label" : "readParser", "tail" : "(s: State): Parser[Either[Int, Seq[File]]]", "member" : "sbt.BasicCommands.readParser", "link" : "sbt\/BasicCommands$.html#readParser(s:sbt.State):sbt.internal.util.complete.Parser[Either[Int,Seq[java.io.File]]]", "kind" : "def"}, {"label" : "read", "tail" : "(): Command", "member" : "sbt.BasicCommands.read", "link" : "sbt\/BasicCommands$.html#read:sbt.Command", "kind" : "def"}, {"label" : "runClient", "tail" : "(s0: State, inputArg: Seq[String]): State", "member" : "sbt.BasicCommands.runClient", "link" : "sbt\/BasicCommands$.html#runClient(s0:sbt.State,inputArg:Seq[String]):sbt.State", "kind" : "def"}, {"label" : "clientParser", "tail" : "(): Parser[Seq[String]]", "member" : "sbt.BasicCommands.clientParser", "link" : "sbt\/BasicCommands$.html#clientParser:sbt.internal.util.complete.Parser[Seq[String]]", "kind" : "def"}, {"label" : "client", "tail" : "(): Command", "member" : "sbt.BasicCommands.client", "link" : "sbt\/BasicCommands$.html#client:sbt.Command", "kind" : "def"}, {"label" : "oldshell", "tail" : "(): Command", "member" : "sbt.BasicCommands.oldshell", "link" : "sbt\/BasicCommands$.html#oldshell:sbt.Command", "kind" : "def"}, {"label" : "historyParser", "tail" : "(s: State): Parser[() ⇒ State]", "member" : "sbt.BasicCommands.historyParser", "link" : "sbt\/BasicCommands$.html#historyParser(s:sbt.State):sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "history", "tail" : "(): Command", "member" : "sbt.BasicCommands.history", "link" : "sbt\/BasicCommands$.html#history:sbt.Command", "kind" : "def"}, {"label" : "continuous", "tail" : "(): Command", "member" : "sbt.BasicCommands.continuous", "link" : "sbt\/BasicCommands$.html#continuous:sbt.Command", "kind" : "def"}, {"label" : "exit", "tail" : "(): Command", "member" : "sbt.BasicCommands.exit", "link" : "sbt\/BasicCommands$.html#exit:sbt.Command", "kind" : "def"}, {"label" : "callParser", "tail" : "(): Parser[(Seq[String], Seq[String])]", "member" : "sbt.BasicCommands.callParser", "link" : "sbt\/BasicCommands$.html#callParser:sbt.internal.util.complete.Parser[(Seq[String],Seq[String])]", "kind" : "def"}, {"label" : "call", "tail" : "(): Command", "member" : "sbt.BasicCommands.call", "link" : "sbt\/BasicCommands$.html#call:sbt.Command", "kind" : "def"}, {"label" : "rebootParser", "tail" : "(s: State): Parser[Boolean]", "member" : "sbt.BasicCommands.rebootParser", "link" : "sbt\/BasicCommands$.html#rebootParser(s:sbt.State):sbt.internal.util.complete.Parser[Boolean]", "kind" : "def"}, {"label" : "reboot", "tail" : "(): Command", "member" : "sbt.BasicCommands.reboot", "link" : "sbt\/BasicCommands$.html#reboot:sbt.Command", "kind" : "def"}, {"label" : "popOnFailure", "tail" : "(): Command", "member" : "sbt.BasicCommands.popOnFailure", "link" : "sbt\/BasicCommands$.html#popOnFailure:sbt.Command", "kind" : "def"}, {"label" : "stashOnFailure", "tail" : "(): Command", "member" : "sbt.BasicCommands.stashOnFailure", "link" : "sbt\/BasicCommands$.html#stashOnFailure:sbt.Command", "kind" : "def"}, {"label" : "clearOnFailure", "tail" : "(): Command", "member" : "sbt.BasicCommands.clearOnFailure", "link" : "sbt\/BasicCommands$.html#clearOnFailure:sbt.Command", "kind" : "def"}, {"label" : "setOnFailure", "tail" : "(): Command", "member" : "sbt.BasicCommands.setOnFailure", "link" : "sbt\/BasicCommands$.html#setOnFailure:sbt.Command", "kind" : "def"}, {"label" : "append", "tail" : "(): Command", "member" : "sbt.BasicCommands.append", "link" : "sbt\/BasicCommands$.html#append:sbt.Command", "kind" : "def"}, {"label" : "ifLast", "tail" : "(): Command", "member" : "sbt.BasicCommands.ifLast", "link" : "sbt\/BasicCommands$.html#ifLast:sbt.Command", "kind" : "def"}, {"label" : "combinedLax", "tail" : "(s: State, any: Parser[_]): Parser[String]", "member" : "sbt.BasicCommands.combinedLax", "link" : "sbt\/BasicCommands$.html#combinedLax(s:sbt.State,any:sbt.internal.util.complete.Parser[_]):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "otherCommandParser", "tail" : ": (State) ⇒ Parser[String]", "member" : "sbt.BasicCommands.otherCommandParser", "link" : "sbt\/BasicCommands$.html#otherCommandParser:sbt.State=>sbt.internal.util.complete.Parser[String]", "kind" : "lazy val"}, {"label" : "multi", "tail" : "(): Command", "member" : "sbt.BasicCommands.multi", "link" : "sbt\/BasicCommands$.html#multi:sbt.Command", "kind" : "def"}, {"label" : "multiApplied", "tail" : "(s: State): Parser[() ⇒ State]", "member" : "sbt.BasicCommands.multiApplied", "link" : "sbt\/BasicCommands$.html#multiApplied(s:sbt.State):sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "multiParser", "tail" : "(s: State): Parser[List[String]]", "member" : "sbt.BasicCommands.multiParser", "link" : "sbt\/BasicCommands$.html#multiParser(s:sbt.State):sbt.internal.util.complete.Parser[List[String]]", "kind" : "def"}, {"label" : "runCompletions", "tail" : "(state: State)(input: String): State", "member" : "sbt.BasicCommands.runCompletions", "link" : "sbt\/BasicCommands$.html#runCompletions(state:sbt.State)(input:String):sbt.State", "kind" : "def"}, {"label" : "completionsParser", "tail" : "(state: State): Parser[String]", "member" : "sbt.BasicCommands.completionsParser", "link" : "sbt\/BasicCommands$.html#completionsParser(state:sbt.State):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "completionsCommand", "tail" : "(): Command", "member" : "sbt.BasicCommands.completionsCommand", "link" : "sbt\/BasicCommands$.html#completionsCommand:sbt.Command", "kind" : "def"}, {"label" : "runHelp", "tail" : "(s: State, h: Help)(arg: Option[String]): State", "member" : "sbt.BasicCommands.runHelp", "link" : "sbt\/BasicCommands$.html#runHelp(s:sbt.State,h:sbt.Help)(arg:Option[String]):sbt.State", "kind" : "def"}, {"label" : "helpParser", "tail" : "(s: State): Parser[() ⇒ State]", "member" : "sbt.BasicCommands.helpParser", "link" : "sbt\/BasicCommands$.html#helpParser(s:sbt.State):sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "help", "tail" : "(): Command", "member" : "sbt.BasicCommands.help", "link" : "sbt\/BasicCommands$.html#help:sbt.Command", "kind" : "def"}, {"label" : "early", "tail" : "(): Command", "member" : "sbt.BasicCommands.early", "link" : "sbt\/BasicCommands$.html#early:sbt.Command", "kind" : "def"}, {"label" : "ignore", "tail" : "(): Command", "member" : "sbt.BasicCommands.ignore", "link" : "sbt\/BasicCommands$.html#ignore:sbt.Command", "kind" : "def"}, {"label" : "nop", "tail" : "(): Command", "member" : "sbt.BasicCommands.nop", "link" : "sbt\/BasicCommands$.html#nop:sbt.Command", "kind" : "def"}, {"label" : "allBasicCommands", "tail" : ": Seq[Command]", "member" : "sbt.BasicCommands.allBasicCommands", "link" : "sbt\/BasicCommands$.html#allBasicCommands:Seq[sbt.Command]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/BasicCommands$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/BasicCommands$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/BasicCommands$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/BasicCommands$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/BasicCommands$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/BasicCommands$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/BasicCommands$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BasicCommands$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BasicCommands$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BasicCommands$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/BasicCommands$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/BasicCommands$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/BasicCommands$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/BasicCommands$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/BasicCommands$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/BasicCommands$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/BasicCommands$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/BasicCommands$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/BasicCommands$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.BasicCommandStrings", "shortDescription" : "", "object" : "sbt\/BasicCommandStrings$.html", "members_object" : [{"label" : "continuousBriefHelp", "tail" : "(): (String, String)", "member" : "sbt.BasicCommandStrings.continuousBriefHelp", "link" : "sbt\/BasicCommandStrings$.html#continuousBriefHelp:(String,String)", "kind" : "def"}, {"label" : "continuousDetail", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.continuousDetail", "link" : "sbt\/BasicCommandStrings$.html#continuousDetail:String", "kind" : "def"}, {"label" : "ContinuousExecutePrefix", "tail" : ": String", "member" : "sbt.BasicCommandStrings.ContinuousExecutePrefix", "link" : "sbt\/BasicCommandStrings$.html#ContinuousExecutePrefix:String", "kind" : "val"}, {"label" : "IfLastDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.IfLastDetailed", "link" : "sbt\/BasicCommandStrings$.html#IfLastDetailed:String", "kind" : "def"}, {"label" : "IfLastCommon", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.IfLastCommon", "link" : "sbt\/BasicCommandStrings$.html#IfLastCommon:String", "kind" : "def"}, {"label" : "IfLast", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.IfLast", "link" : "sbt\/BasicCommandStrings$.html#IfLast:String", "kind" : "def"}, {"label" : "OnFailureDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.OnFailureDetailed", "link" : "sbt\/BasicCommandStrings$.html#OnFailureDetailed:String", "kind" : "def"}, {"label" : "OnFailure", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.OnFailure", "link" : "sbt\/BasicCommandStrings$.html#OnFailure:String", "kind" : "def"}, {"label" : "ClearOnFailure", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.ClearOnFailure", "link" : "sbt\/BasicCommandStrings$.html#ClearOnFailure:String", "kind" : "def"}, {"label" : "FailureWall", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.FailureWall", "link" : "sbt\/BasicCommandStrings$.html#FailureWall:String", "kind" : "def"}, {"label" : "Compat", "tail" : "", "member" : "sbt.BasicCommandStrings.Compat", "link" : "sbt\/BasicCommandStrings$.html#Compat", "kind" : "object"}, {"label" : "PopOnFailure", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.PopOnFailure", "link" : "sbt\/BasicCommandStrings$.html#PopOnFailure:String", "kind" : "def"}, {"label" : "StashOnFailure", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.StashOnFailure", "link" : "sbt\/BasicCommandStrings$.html#StashOnFailure:String", "kind" : "def"}, {"label" : "ClientDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.ClientDetailed", "link" : "sbt\/BasicCommandStrings$.html#ClientDetailed:String", "kind" : "def"}, {"label" : "Client", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.Client", "link" : "sbt\/BasicCommandStrings$.html#Client:String", "kind" : "def"}, {"label" : "OldShellDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.OldShellDetailed", "link" : "sbt\/BasicCommandStrings$.html#OldShellDetailed:String", "kind" : "def"}, {"label" : "OldShell", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.OldShell", "link" : "sbt\/BasicCommandStrings$.html#OldShell:String", "kind" : "def"}, {"label" : "ShellDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.ShellDetailed", "link" : "sbt\/BasicCommandStrings$.html#ShellDetailed:String", "kind" : "def"}, {"label" : "Shell", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.Shell", "link" : "sbt\/BasicCommandStrings$.html#Shell:String", "kind" : "def"}, {"label" : "AliasDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.AliasDetailed", "link" : "sbt\/BasicCommandStrings$.html#AliasDetailed:String", "kind" : "def"}, {"label" : "AliasCommand", "tail" : ": String", "member" : "sbt.BasicCommandStrings.AliasCommand", "link" : "sbt\/BasicCommandStrings$.html#AliasCommand:String", "kind" : "val"}, {"label" : "AppendLastDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.AppendLastDetailed", "link" : "sbt\/BasicCommandStrings$.html#AppendLastDetailed:String", "kind" : "def"}, {"label" : "AppendCommand", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.AppendCommand", "link" : "sbt\/BasicCommandStrings$.html#AppendCommand:String", "kind" : "def"}, {"label" : "MultiDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.MultiDetailed", "link" : "sbt\/BasicCommandStrings$.html#MultiDetailed:String", "kind" : "def"}, {"label" : "MultiBrief", "tail" : "(): (String, String)", "member" : "sbt.BasicCommandStrings.MultiBrief", "link" : "sbt\/BasicCommandStrings$.html#MultiBrief:(String,String)", "kind" : "def"}, {"label" : "Multi", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.Multi", "link" : "sbt\/BasicCommandStrings$.html#Multi:String", "kind" : "def"}, {"label" : "RebootDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.RebootDetailed", "link" : "sbt\/BasicCommandStrings$.html#RebootDetailed:String", "kind" : "def"}, {"label" : "RebootCommand", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.RebootCommand", "link" : "sbt\/BasicCommandStrings$.html#RebootCommand:String", "kind" : "def"}, {"label" : "ApplyDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.ApplyDetailed", "link" : "sbt\/BasicCommandStrings$.html#ApplyDetailed:String", "kind" : "def"}, {"label" : "ApplyCommand", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.ApplyCommand", "link" : "sbt\/BasicCommandStrings$.html#ApplyCommand:String", "kind" : "def"}, {"label" : "ReadDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.ReadDetailed", "link" : "sbt\/BasicCommandStrings$.html#ReadDetailed:String", "kind" : "def"}, {"label" : "ReadFiles", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.ReadFiles", "link" : "sbt\/BasicCommandStrings$.html#ReadFiles:String", "kind" : "def"}, {"label" : "ReadCommand", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.ReadCommand", "link" : "sbt\/BasicCommandStrings$.html#ReadCommand:String", "kind" : "def"}, {"label" : "EarlyCommandDetailed", "tail" : ": String", "member" : "sbt.BasicCommandStrings.EarlyCommandDetailed", "link" : "sbt\/BasicCommandStrings$.html#EarlyCommandDetailed:String", "kind" : "val"}, {"label" : "EarlyCommandBrief", "tail" : ": (String, String)", "member" : "sbt.BasicCommandStrings.EarlyCommandBrief", "link" : "sbt\/BasicCommandStrings$.html#EarlyCommandBrief:(String,String)", "kind" : "val"}, {"label" : "EarlyCommand", "tail" : ": String", "member" : "sbt.BasicCommandStrings.EarlyCommand", "link" : "sbt\/BasicCommandStrings$.html#EarlyCommand:String", "kind" : "val"}, {"label" : "runEarly", "tail" : "(command: String): String", "member" : "sbt.BasicCommandStrings.runEarly", "link" : "sbt\/BasicCommandStrings$.html#runEarly(command:String):String", "kind" : "def"}, {"label" : "logLevelHelp", "tail" : "(): Help", "member" : "sbt.BasicCommandStrings.logLevelHelp", "link" : "sbt\/BasicCommandStrings$.html#logLevelHelp:sbt.Help", "kind" : "def"}, {"label" : "exitBrief", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.exitBrief", "link" : "sbt\/BasicCommandStrings$.html#exitBrief:String", "kind" : "def"}, {"label" : "historyHelp", "tail" : "(): Help", "member" : "sbt.BasicCommandStrings.historyHelp", "link" : "sbt\/BasicCommandStrings$.html#historyHelp:sbt.Help", "kind" : "def"}, {"label" : "HistoryHelpBrief", "tail" : "(): (String, String)", "member" : "sbt.BasicCommandStrings.HistoryHelpBrief", "link" : "sbt\/BasicCommandStrings$.html#HistoryHelpBrief:(String,String)", "kind" : "def"}, {"label" : "templateDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.templateDetailed", "link" : "sbt\/BasicCommandStrings$.html#templateDetailed:String", "kind" : "def"}, {"label" : "templateBrief", "tail" : "(): (String, String)", "member" : "sbt.BasicCommandStrings.templateBrief", "link" : "sbt\/BasicCommandStrings$.html#templateBrief:(String,String)", "kind" : "def"}, {"label" : "CompletionsBrief", "tail" : "(): (String, String)", "member" : "sbt.BasicCommandStrings.CompletionsBrief", "link" : "sbt\/BasicCommandStrings$.html#CompletionsBrief:(String,String)", "kind" : "def"}, {"label" : "CompletionsDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.CompletionsDetailed", "link" : "sbt\/BasicCommandStrings$.html#CompletionsDetailed:String", "kind" : "def"}, {"label" : "helpDetailed", "tail" : "(): String", "member" : "sbt.BasicCommandStrings.helpDetailed", "link" : "sbt\/BasicCommandStrings$.html#helpDetailed:String", "kind" : "def"}, {"label" : "helpBrief", "tail" : "(): (String, String)", "member" : "sbt.BasicCommandStrings.helpBrief", "link" : "sbt\/BasicCommandStrings$.html#helpBrief:(String,String)", "kind" : "def"}, {"label" : "TerminateAction", "tail" : ": String", "member" : "sbt.BasicCommandStrings.TerminateAction", "link" : "sbt\/BasicCommandStrings$.html#TerminateAction:String", "kind" : "val"}, {"label" : "TemplateCommand", "tail" : ": String", "member" : "sbt.BasicCommandStrings.TemplateCommand", "link" : "sbt\/BasicCommandStrings$.html#TemplateCommand:String", "kind" : "val"}, {"label" : "Quit", "tail" : ": String", "member" : "sbt.BasicCommandStrings.Quit", "link" : "sbt\/BasicCommandStrings$.html#Quit:String", "kind" : "val"}, {"label" : "Exit", "tail" : ": String", "member" : "sbt.BasicCommandStrings.Exit", "link" : "sbt\/BasicCommandStrings$.html#Exit:String", "kind" : "val"}, {"label" : "CompletionsCommand", "tail" : ": String", "member" : "sbt.BasicCommandStrings.CompletionsCommand", "link" : "sbt\/BasicCommandStrings$.html#CompletionsCommand:String", "kind" : "val"}, {"label" : "HelpCommand", "tail" : ": String", "member" : "sbt.BasicCommandStrings.HelpCommand", "link" : "sbt\/BasicCommandStrings$.html#HelpCommand:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/BasicCommandStrings$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/BasicCommandStrings$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/BasicCommandStrings$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/BasicCommandStrings$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/BasicCommandStrings$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/BasicCommandStrings$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/BasicCommandStrings$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BasicCommandStrings$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BasicCommandStrings$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BasicCommandStrings$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/BasicCommandStrings$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/BasicCommandStrings$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/BasicCommandStrings$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/BasicCommandStrings$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/BasicCommandStrings$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/BasicCommandStrings$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/BasicCommandStrings$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/BasicCommandStrings$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/BasicCommandStrings$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.BasicKeys", "shortDescription" : "", "object" : "sbt\/BasicKeys$.html", "members_object" : [{"label" : "serverPort", "tail" : ": AttributeKey[Int]", "member" : "sbt.BasicKeys.serverPort", "link" : "sbt\/BasicKeys$.html#serverPort:sbt.internal.util.AttributeKey[Int]", "kind" : "val"}, {"label" : "watch", "tail" : ": AttributeKey[Watched]", "member" : "sbt.BasicKeys.watch", "link" : "sbt\/BasicKeys$.html#watch:sbt.internal.util.AttributeKey[sbt.Watched]", "kind" : "val"}, {"label" : "shellPrompt", "tail" : ": AttributeKey[(State) ⇒ String]", "member" : "sbt.BasicKeys.shellPrompt", "link" : "sbt\/BasicKeys$.html#shellPrompt:sbt.internal.util.AttributeKey[sbt.State=>String]", "kind" : "val"}, {"label" : "historyPath", "tail" : ": AttributeKey[Option[File]]", "member" : "sbt.BasicKeys.historyPath", "link" : "sbt\/BasicKeys$.html#historyPath:sbt.internal.util.AttributeKey[Option[java.io.File]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/BasicKeys$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/BasicKeys$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/BasicKeys$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/BasicKeys$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/BasicKeys$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/BasicKeys$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/BasicKeys$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BasicKeys$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BasicKeys$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BasicKeys$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/BasicKeys$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/BasicKeys$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/BasicKeys$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/BasicKeys$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/BasicKeys$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/BasicKeys$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/BasicKeys$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/BasicKeys$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/BasicKeys$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.BuildCommon", "members_trait" : [{"label" : "getPrevious", "tail" : "(task: TaskKey[T]): Def.Initialize[Task[Option[T]]]", "member" : "sbt.BuildCommon.getPrevious", "link" : "sbt\/BuildCommon.html#getPrevious[T](task:sbt.TaskKey[T]):sbt.Def.Initialize[sbt.Task[Option[T]]]", "kind" : "def"}, {"label" : "loadPrevious", "tail" : "(task: TaskKey[T])(f: JsonFormat[T]): Def.Initialize[Task[Option[T]]]", "member" : "sbt.BuildCommon.loadPrevious", "link" : "sbt\/BuildCommon.html#loadPrevious[T](task:sbt.TaskKey[T])(implicitf:sjsonnew.JsonFormat[T]):sbt.Def.Initialize[sbt.Task[Option[T]]]", "kind" : "def"}, {"label" : "getForParserI", "tail" : "(task: TaskKey[T])(init: Def.Initialize[(State, Option[T]) ⇒ Parser[P]]): Def.Initialize[(State) ⇒ Parser[P]]", "member" : "sbt.BuildCommon.getForParserI", "link" : "sbt\/BuildCommon.html#getForParserI[P,T](task:sbt.TaskKey[T])(init:sbt.Def.Initialize[(sbt.State,Option[T])=>sbt.internal.util.complete.Parser[P]]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[P]]", "kind" : "def"}, {"label" : "getForParser", "tail" : "(task: TaskKey[T])(init: (State, Option[T]) ⇒ Parser[P]): Def.Initialize[(State) ⇒ Parser[P]]", "member" : "sbt.BuildCommon.getForParser", "link" : "sbt\/BuildCommon.html#getForParser[P,T](task:sbt.TaskKey[T])(init:(sbt.State,Option[T])=>sbt.internal.util.complete.Parser[P]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[P]]", "kind" : "def"}, {"label" : "loadForParserI", "tail" : "(task: TaskKey[T])(init: Def.Initialize[(State, Option[T]) ⇒ Parser[P]])(format: JsonFormat[T]): Def.Initialize[(State) ⇒ Parser[P]]", "member" : "sbt.BuildCommon.loadForParserI", "link" : "sbt\/BuildCommon.html#loadForParserI[P,T](task:sbt.TaskKey[T])(init:sbt.Def.Initialize[(sbt.State,Option[T])=>sbt.internal.util.complete.Parser[P]])(implicitformat:sjsonnew.JsonFormat[T]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[P]]", "kind" : "def"}, {"label" : "loadForParser", "tail" : "(task: TaskKey[T])(f: (State, Option[T]) ⇒ Parser[P])(format: JsonFormat[T]): Def.Initialize[(State) ⇒ Parser[P]]", "member" : "sbt.BuildCommon.loadForParser", "link" : "sbt\/BuildCommon.html#loadForParser[P,T](task:sbt.TaskKey[T])(f:(sbt.State,Option[T])=>sbt.internal.util.complete.Parser[P])(implicitformat:sjsonnew.JsonFormat[T]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[P]]", "kind" : "def"}, {"label" : "loadFromContext", "tail" : "(task: TaskKey[T], context: Def.ScopedKey[_], s: State)(f: JsonFormat[T]): Option[T]", "member" : "sbt.BuildCommon.loadFromContext", "link" : "sbt\/BuildCommon.html#loadFromContext[T](task:sbt.TaskKey[T],context:sbt.Def.ScopedKey[_],s:sbt.State)(implicitf:sjsonnew.JsonFormat[T]):Option[T]", "kind" : "def"}, {"label" : "getFromContext", "tail" : "(task: TaskKey[T], context: Def.ScopedKey[_], s: State): Option[T]", "member" : "sbt.BuildCommon.getFromContext", "link" : "sbt\/BuildCommon.html#getFromContext[T](task:sbt.TaskKey[T],context:sbt.Def.ScopedKey[_],s:sbt.State):Option[T]", "kind" : "def"}, {"label" : "overrideConfigs", "tail" : "(cs: Configuration*)(configurations: Seq[Configuration]): Seq[Configuration]", "member" : "sbt.BuildCommon.overrideConfigs", "link" : "sbt\/BuildCommon.html#overrideConfigs(cs:sbt.librarymanagement.Configuration*)(configurations:Seq[sbt.librarymanagement.Configuration]):Seq[sbt.librarymanagement.Configuration]", "kind" : "def"}, {"label" : "RichFiles", "tail" : "", "member" : "sbt.BuildCommon.RichFiles", "link" : "sbt\/BuildCommon.html#RichFilesextendsAnyRef", "kind" : "final class"}, {"label" : "RichAttributed", "tail" : "", "member" : "sbt.BuildCommon.RichAttributed", "link" : "sbt\/BuildCommon.html#RichAttributedextendsAnyRef", "kind" : "final class"}, {"label" : "RichPathFinder", "tail" : "", "member" : "sbt.BuildCommon.RichPathFinder", "link" : "sbt\/BuildCommon.html#RichPathFinderextendsAnyRef", "kind" : "final class"}, {"label" : "richPathFinder", "tail" : "(s: PathFinder): RichPathFinder", "member" : "sbt.BuildCommon.richPathFinder", "link" : "sbt\/BuildCommon.html#richPathFinder(s:sbt.io.PathFinder):BuildCommon.this.RichPathFinder", "kind" : "implicit def"}, {"label" : "richFiles", "tail" : "(s: Seq[File]): RichFiles", "member" : "sbt.BuildCommon.richFiles", "link" : "sbt\/BuildCommon.html#richFiles(s:Seq[java.io.File]):BuildCommon.this.RichFiles", "kind" : "implicit def"}, {"label" : "richAttributed", "tail" : "(s: Seq[Attributed[File]]): RichAttributed", "member" : "sbt.BuildCommon.richAttributed", "link" : "sbt\/BuildCommon.html#richAttributed(s:Seq[sbt.internal.util.Attributed[java.io.File]]):BuildCommon.this.RichAttributed", "kind" : "implicit def"}, {"label" : "globFilter", "tail" : "(expression: String): NameFilter", "member" : "sbt.BuildCommon.globFilter", "link" : "sbt\/BuildCommon.html#globFilter(expression:String):sbt.io.NameFilter", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/BuildCommon.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/BuildCommon.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/BuildCommon.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/BuildCommon.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/BuildCommon.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/BuildCommon.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/BuildCommon.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildCommon.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildCommon.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildCommon.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/BuildCommon.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/BuildCommon.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/BuildCommon.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/BuildCommon.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/BuildCommon.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/BuildCommon.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/BuildCommon.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/BuildCommon.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/BuildCommon.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/BuildCommon.html", "kind" : "trait"}, {"name" : "sbt.BuildExtra", "members_trait" : [{"label" : "RichFiles", "tail" : "", "member" : "sbt.BuildCommon.RichFiles", "link" : "sbt\/BuildCommon.html#RichFilesextendsAnyRef", "kind" : "final class"}, {"label" : "RichAttributed", "tail" : "", "member" : "sbt.BuildCommon.RichAttributed", "link" : "sbt\/BuildCommon.html#RichAttributedextendsAnyRef", "kind" : "final class"}, {"label" : "RichPathFinder", "tail" : "", "member" : "sbt.BuildCommon.RichPathFinder", "link" : "sbt\/BuildCommon.html#RichPathFinderextendsAnyRef", "kind" : "final class"}, {"label" : "filterKeys", "tail" : "(ss: Seq[Def.Setting[_]], transitive: Boolean)(f: (Def.ScopedKey[_]) ⇒ Boolean): Seq[Def.Setting[_]]", "member" : "sbt.BuildExtra.filterKeys", "link" : "sbt\/BuildExtra.html#filterKeys(ss:Seq[sbt.Def.Setting[_]],transitive:Boolean)(f:sbt.Def.ScopedKey[_]=>Boolean):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "noTestCompletion", "tail" : "(config: Configuration): Def.Setting[_]", "member" : "sbt.BuildExtra.noTestCompletion", "link" : "sbt\/BuildExtra.html#noTestCompletion(config:sbt.librarymanagement.Configuration):sbt.Def.Setting[_]", "kind" : "def"}, {"label" : "initScope", "tail" : "(s: Scope, i: Def.Initialize[T]): Def.Initialize[T]", "member" : "sbt.BuildExtra.initScope", "link" : "sbt\/BuildExtra.html#initScope[T](s:sbt.Scope,i:sbt.Def.Initialize[T]):sbt.Def.Initialize[T]", "kind" : "def"}, {"label" : "initScoped", "tail" : "(sk: Def.ScopedKey[_], i: Def.Initialize[T]): Def.Initialize[T]", "member" : "sbt.BuildExtra.initScoped", "link" : "sbt\/BuildExtra.html#initScoped[T](sk:sbt.Def.ScopedKey[_],i:sbt.Def.Initialize[T]):sbt.Def.Initialize[T]", "kind" : "def"}, {"label" : "fullRunTask", "tail" : "(scoped: TaskKey[Unit], config: Configuration, mainClass: String, arguments: String*): Vector[Def.Setting[_]]", "member" : "sbt.BuildExtra.fullRunTask", "link" : "sbt\/BuildExtra.html#fullRunTask(scoped:sbt.TaskKey[Unit],config:sbt.librarymanagement.Configuration,mainClass:String,arguments:String*):Vector[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "fullRunInputTask", "tail" : "(scoped: InputKey[Unit], config: Configuration, mainClass: String, baseArguments: String*): Vector[Def.Setting[_]]", "member" : "sbt.BuildExtra.fullRunInputTask", "link" : "sbt\/BuildExtra.html#fullRunInputTask(scoped:sbt.InputKey[Unit],config:sbt.librarymanagement.Configuration,mainClass:String,baseArguments:String*):Vector[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "runTask", "tail" : "(config: Configuration, mainClass: String, arguments: String*): Def.Initialize[Task[Unit]]", "member" : "sbt.BuildExtra.runTask", "link" : "sbt\/BuildExtra.html#runTask(config:sbt.librarymanagement.Configuration,mainClass:String,arguments:String*):sbt.Def.Initialize[sbt.Task[Unit]]", "kind" : "def"}, {"label" : "runInputTask", "tail" : "(config: Configuration, mainClass: String, baseArguments: String*): Def.Initialize[InputTask[Unit]]", "member" : "sbt.BuildExtra.runInputTask", "link" : "sbt\/BuildExtra.html#runInputTask(config:sbt.librarymanagement.Configuration,mainClass:String,baseArguments:String*):sbt.Def.Initialize[sbt.InputTask[Unit]]", "kind" : "def"}, {"label" : "externalPom", "tail" : "(file: Def.Initialize[File], iScala: Def.Initialize[Option[ScalaModuleInfo]]): Def.Setting[Task[ModuleSettings]]", "member" : "sbt.BuildExtra.externalPom", "link" : "sbt\/BuildExtra.html#externalPom(file:sbt.Def.Initialize[java.io.File],iScala:sbt.Def.Initialize[Option[sbt.librarymanagement.ScalaModuleInfo]]):sbt.Def.Setting[sbt.Task[sbt.librarymanagement.ModuleSettings]]", "kind" : "def"}, {"label" : "externalIvyFile", "tail" : "(file: Def.Initialize[File], iScala: Def.Initialize[Option[ScalaModuleInfo]]): Def.Setting[Task[ModuleSettings]]", "member" : "sbt.BuildExtra.externalIvyFile", "link" : "sbt\/BuildExtra.html#externalIvyFile(file:sbt.Def.Initialize[java.io.File],iScala:sbt.Def.Initialize[Option[sbt.librarymanagement.ScalaModuleInfo]]):sbt.Def.Setting[sbt.Task[sbt.librarymanagement.ModuleSettings]]", "kind" : "def"}, {"label" : "externalIvySettingsURI", "tail" : "(uri: Def.Initialize[URI], addMultiResolver: Boolean): Def.Setting[Task[IvyConfiguration]]", "member" : "sbt.BuildExtra.externalIvySettingsURI", "link" : "sbt\/BuildExtra.html#externalIvySettingsURI(uri:sbt.Def.Initialize[java.net.URI],addMultiResolver:Boolean):sbt.Def.Setting[sbt.Task[sbt.librarymanagement.ivy.IvyConfiguration]]", "kind" : "def"}, {"label" : "externalIvySettingsURL", "tail" : "(url: URL, addMultiResolver: Boolean): Def.Setting[Task[IvyConfiguration]]", "member" : "sbt.BuildExtra.externalIvySettingsURL", "link" : "sbt\/BuildExtra.html#externalIvySettingsURL(url:java.net.URL,addMultiResolver:Boolean):sbt.Def.Setting[sbt.Task[sbt.librarymanagement.ivy.IvyConfiguration]]", "kind" : "def"}, {"label" : "externalIvySettings", "tail" : "(file: Def.Initialize[File], addMultiResolver: Boolean): Def.Setting[Task[IvyConfiguration]]", "member" : "sbt.BuildExtra.externalIvySettings", "link" : "sbt\/BuildExtra.html#externalIvySettings(file:sbt.Def.Initialize[java.io.File],addMultiResolver:Boolean):sbt.Def.Setting[sbt.Task[sbt.librarymanagement.ivy.IvyConfiguration]]", "kind" : "def"}, {"label" : "addArtifact", "tail" : "(artifact: Def.Initialize[Artifact], taskDef: Def.Initialize[Task[File]]): Def.SettingsDefinition", "member" : "sbt.BuildExtra.addArtifact", "link" : "sbt\/BuildExtra.html#addArtifact(artifact:sbt.Def.Initialize[sbt.librarymanagement.Artifact],taskDef:sbt.Def.Initialize[sbt.Task[java.io.File]]):sbt.Def.SettingsDefinition", "kind" : "def"}, {"label" : "addArtifact", "tail" : "(a: Artifact, taskDef: TaskKey[File]): Def.SettingsDefinition", "member" : "sbt.BuildExtra.addArtifact", "link" : "sbt\/BuildExtra.html#addArtifact(a:sbt.librarymanagement.Artifact,taskDef:sbt.TaskKey[java.io.File]):sbt.Def.SettingsDefinition", "kind" : "def"}, {"label" : "addCompilerPlugin", "tail" : "(dependency: ModuleID): Def.Setting[Seq[ModuleID]]", "member" : "sbt.BuildExtra.addCompilerPlugin", "link" : "sbt\/BuildExtra.html#addCompilerPlugin(dependency:sbt.librarymanagement.ModuleID):sbt.Def.Setting[Seq[sbt.librarymanagement.ModuleID]]", "kind" : "def"}, {"label" : "compilerPlugin", "tail" : "(dependency: ModuleID): ModuleID", "member" : "sbt.BuildExtra.compilerPlugin", "link" : "sbt\/BuildExtra.html#compilerPlugin(dependency:sbt.librarymanagement.ModuleID):sbt.librarymanagement.ModuleID", "kind" : "def"}, {"label" : "addSbtPlugin", "tail" : "(dependency: ModuleID): Def.Setting[Seq[ModuleID]]", "member" : "sbt.BuildExtra.addSbtPlugin", "link" : "sbt\/BuildExtra.html#addSbtPlugin(dependency:sbt.librarymanagement.ModuleID):sbt.Def.Setting[Seq[sbt.librarymanagement.ModuleID]]", "kind" : "def"}, {"label" : "addSbtPlugin", "tail" : "(dependency: ModuleID, sbtVersion: String): Def.Setting[Seq[ModuleID]]", "member" : "sbt.BuildExtra.addSbtPlugin", "link" : "sbt\/BuildExtra.html#addSbtPlugin(dependency:sbt.librarymanagement.ModuleID,sbtVersion:String):sbt.Def.Setting[Seq[sbt.librarymanagement.ModuleID]]", "kind" : "def"}, {"label" : "addSbtPlugin", "tail" : "(dependency: ModuleID, sbtVersion: String, scalaVersion: String): Def.Setting[Seq[ModuleID]]", "member" : "sbt.BuildExtra.addSbtPlugin", "link" : "sbt\/BuildExtra.html#addSbtPlugin(dependency:sbt.librarymanagement.ModuleID,sbtVersion:String,scalaVersion:String):sbt.Def.Setting[Seq[sbt.librarymanagement.ModuleID]]", "kind" : "def"}, {"label" : "addMavenResolverPlugin", "tail" : "(): Def.Setting[Seq[ModuleID]]", "member" : "sbt.BuildExtra.addMavenResolverPlugin", "link" : "sbt\/BuildExtra.html#addMavenResolverPlugin:sbt.Def.Setting[Seq[sbt.librarymanagement.ModuleID]]", "kind" : "def"}, {"label" : "addCommandAlias", "tail" : "(name: String, value: String): Seq[Def.Setting[(State) ⇒ State]]", "member" : "sbt.BuildExtra.addCommandAlias", "link" : "sbt\/BuildExtra.html#addCommandAlias(name:String,value:String):Seq[sbt.Def.Setting[sbt.State=>sbt.State]]", "kind" : "def"}, {"label" : "toTaskSequential", "tail" : "(d: Def.type): TaskSequential", "member" : "sbt.DefExtra.toTaskSequential", "link" : "sbt\/BuildExtra.html#toTaskSequential(d:sbt.Def.type):sbt.internal.TaskSequential", "kind" : "implicit def"}, {"label" : "getPrevious", "tail" : "(task: TaskKey[T]): Def.Initialize[Task[Option[T]]]", "member" : "sbt.BuildCommon.getPrevious", "link" : "sbt\/BuildExtra.html#getPrevious[T](task:sbt.TaskKey[T]):sbt.Def.Initialize[sbt.Task[Option[T]]]", "kind" : "def"}, {"label" : "loadPrevious", "tail" : "(task: TaskKey[T])(f: JsonFormat[T]): Def.Initialize[Task[Option[T]]]", "member" : "sbt.BuildCommon.loadPrevious", "link" : "sbt\/BuildExtra.html#loadPrevious[T](task:sbt.TaskKey[T])(implicitf:sjsonnew.JsonFormat[T]):sbt.Def.Initialize[sbt.Task[Option[T]]]", "kind" : "def"}, {"label" : "getForParserI", "tail" : "(task: TaskKey[T])(init: Def.Initialize[(State, Option[T]) ⇒ Parser[P]]): Def.Initialize[(State) ⇒ Parser[P]]", "member" : "sbt.BuildCommon.getForParserI", "link" : "sbt\/BuildExtra.html#getForParserI[P,T](task:sbt.TaskKey[T])(init:sbt.Def.Initialize[(sbt.State,Option[T])=>sbt.internal.util.complete.Parser[P]]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[P]]", "kind" : "def"}, {"label" : "getForParser", "tail" : "(task: TaskKey[T])(init: (State, Option[T]) ⇒ Parser[P]): Def.Initialize[(State) ⇒ Parser[P]]", "member" : "sbt.BuildCommon.getForParser", "link" : "sbt\/BuildExtra.html#getForParser[P,T](task:sbt.TaskKey[T])(init:(sbt.State,Option[T])=>sbt.internal.util.complete.Parser[P]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[P]]", "kind" : "def"}, {"label" : "loadForParserI", "tail" : "(task: TaskKey[T])(init: Def.Initialize[(State, Option[T]) ⇒ Parser[P]])(format: JsonFormat[T]): Def.Initialize[(State) ⇒ Parser[P]]", "member" : "sbt.BuildCommon.loadForParserI", "link" : "sbt\/BuildExtra.html#loadForParserI[P,T](task:sbt.TaskKey[T])(init:sbt.Def.Initialize[(sbt.State,Option[T])=>sbt.internal.util.complete.Parser[P]])(implicitformat:sjsonnew.JsonFormat[T]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[P]]", "kind" : "def"}, {"label" : "loadForParser", "tail" : "(task: TaskKey[T])(f: (State, Option[T]) ⇒ Parser[P])(format: JsonFormat[T]): Def.Initialize[(State) ⇒ Parser[P]]", "member" : "sbt.BuildCommon.loadForParser", "link" : "sbt\/BuildExtra.html#loadForParser[P,T](task:sbt.TaskKey[T])(f:(sbt.State,Option[T])=>sbt.internal.util.complete.Parser[P])(implicitformat:sjsonnew.JsonFormat[T]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[P]]", "kind" : "def"}, {"label" : "loadFromContext", "tail" : "(task: TaskKey[T], context: Def.ScopedKey[_], s: State)(f: JsonFormat[T]): Option[T]", "member" : "sbt.BuildCommon.loadFromContext", "link" : "sbt\/BuildExtra.html#loadFromContext[T](task:sbt.TaskKey[T],context:sbt.Def.ScopedKey[_],s:sbt.State)(implicitf:sjsonnew.JsonFormat[T]):Option[T]", "kind" : "def"}, {"label" : "getFromContext", "tail" : "(task: TaskKey[T], context: Def.ScopedKey[_], s: State): Option[T]", "member" : "sbt.BuildCommon.getFromContext", "link" : "sbt\/BuildExtra.html#getFromContext[T](task:sbt.TaskKey[T],context:sbt.Def.ScopedKey[_],s:sbt.State):Option[T]", "kind" : "def"}, {"label" : "overrideConfigs", "tail" : "(cs: Configuration*)(configurations: Seq[Configuration]): Seq[Configuration]", "member" : "sbt.BuildCommon.overrideConfigs", "link" : "sbt\/BuildExtra.html#overrideConfigs(cs:sbt.librarymanagement.Configuration*)(configurations:Seq[sbt.librarymanagement.Configuration]):Seq[sbt.librarymanagement.Configuration]", "kind" : "def"}, {"label" : "richPathFinder", "tail" : "(s: PathFinder): RichPathFinder", "member" : "sbt.BuildCommon.richPathFinder", "link" : "sbt\/BuildExtra.html#richPathFinder(s:sbt.io.PathFinder):BuildCommon.this.RichPathFinder", "kind" : "implicit def"}, {"label" : "richFiles", "tail" : "(s: Seq[File]): RichFiles", "member" : "sbt.BuildCommon.richFiles", "link" : "sbt\/BuildExtra.html#richFiles(s:Seq[java.io.File]):BuildCommon.this.RichFiles", "kind" : "implicit def"}, {"label" : "richAttributed", "tail" : "(s: Seq[Attributed[File]]): RichAttributed", "member" : "sbt.BuildCommon.richAttributed", "link" : "sbt\/BuildExtra.html#richAttributed(s:Seq[sbt.internal.util.Attributed[java.io.File]]):BuildCommon.this.RichAttributed", "kind" : "implicit def"}, {"label" : "globFilter", "tail" : "(expression: String): NameFilter", "member" : "sbt.BuildCommon.globFilter", "link" : "sbt\/BuildExtra.html#globFilter(expression:String):sbt.io.NameFilter", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/BuildExtra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/BuildExtra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/BuildExtra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/BuildExtra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/BuildExtra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/BuildExtra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/BuildExtra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildExtra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildExtra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildExtra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/BuildExtra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/BuildExtra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/BuildExtra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/BuildExtra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/BuildExtra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/BuildExtra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/BuildExtra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/BuildExtra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/BuildExtra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/BuildExtra.html", "kind" : "trait"}, {"name" : "sbt.BuildPaths", "shortDescription" : "", "object" : "sbt\/BuildPaths$.html", "members_object" : [{"label" : "crossPath", "tail" : "(base: File, instance: ScalaInstance): File", "member" : "sbt.BuildPaths.crossPath", "link" : "sbt\/BuildPaths$.html#crossPath(base:sbt.io.syntax.File,instance:xsbti.compile.ScalaInstance):sbt.io.syntax.File", "kind" : "def"}, {"label" : "GlobalZincProperty", "tail" : ": String(\"sbt.global.zinc\")", "member" : "sbt.BuildPaths.GlobalZincProperty", "link" : "sbt\/BuildPaths$.html#GlobalZincProperty:String(\"sbt.global.zinc\")", "kind" : "final val"}, {"label" : "DependencyBaseProperty", "tail" : ": String(\"sbt.dependency.base\")", "member" : "sbt.BuildPaths.DependencyBaseProperty", "link" : "sbt\/BuildPaths$.html#DependencyBaseProperty:String(\"sbt.dependency.base\")", "kind" : "final val"}, {"label" : "GlobalSettingsProperty", "tail" : ": String(\"sbt.global.settings\")", "member" : "sbt.BuildPaths.GlobalSettingsProperty", "link" : "sbt\/BuildPaths$.html#GlobalSettingsProperty:String(\"sbt.global.settings\")", "kind" : "final val"}, {"label" : "GlobalPluginsProperty", "tail" : ": String(\"sbt.global.plugins\")", "member" : "sbt.BuildPaths.GlobalPluginsProperty", "link" : "sbt\/BuildPaths$.html#GlobalPluginsProperty:String(\"sbt.global.plugins\")", "kind" : "final val"}, {"label" : "StagingProperty", "tail" : ": String(\"sbt.global.staging\")", "member" : "sbt.BuildPaths.StagingProperty", "link" : "sbt\/BuildPaths$.html#StagingProperty:String(\"sbt.global.staging\")", "kind" : "final val"}, {"label" : "GlobalBaseProperty", "tail" : ": String(\"sbt.global.base\")", "member" : "sbt.BuildPaths.GlobalBaseProperty", "link" : "sbt\/BuildPaths$.html#GlobalBaseProperty:String(\"sbt.global.base\")", "kind" : "final val"}, {"label" : "ConfigDirectoryName", "tail" : ": String(\".sbt\")", "member" : "sbt.BuildPaths.ConfigDirectoryName", "link" : "sbt\/BuildPaths$.html#ConfigDirectoryName:String(\".sbt\")", "kind" : "final val"}, {"label" : "DefaultTargetName", "tail" : ": String(\"target\")", "member" : "sbt.BuildPaths.DefaultTargetName", "link" : "sbt\/BuildPaths$.html#DefaultTargetName:String(\"target\")", "kind" : "final val"}, {"label" : "PluginsDirectoryName", "tail" : ": String(\"plugins\")", "member" : "sbt.BuildPaths.PluginsDirectoryName", "link" : "sbt\/BuildPaths$.html#PluginsDirectoryName:String(\"plugins\")", "kind" : "final val"}, {"label" : "projectStandard", "tail" : "(base: File): File", "member" : "sbt.BuildPaths.projectStandard", "link" : "sbt\/BuildPaths$.html#projectStandard(base:sbt.io.syntax.File):java.io.File", "kind" : "def"}, {"label" : "outputDirectory", "tail" : "(base: File): File", "member" : "sbt.BuildPaths.outputDirectory", "link" : "sbt\/BuildPaths$.html#outputDirectory(base:sbt.io.syntax.File):java.io.File", "kind" : "def"}, {"label" : "evalOutputDirectory", "tail" : "(base: File): File", "member" : "sbt.BuildPaths.evalOutputDirectory", "link" : "sbt\/BuildPaths$.html#evalOutputDirectory(base:sbt.io.syntax.File):java.io.File", "kind" : "def"}, {"label" : "pluginDirectory", "tail" : "(definitionBase: File): File", "member" : "sbt.BuildPaths.pluginDirectory", "link" : "sbt\/BuildPaths$.html#pluginDirectory(definitionBase:sbt.io.syntax.File):java.io.File", "kind" : "def"}, {"label" : "configurationSources", "tail" : "(base: File): Seq[File]", "member" : "sbt.BuildPaths.configurationSources", "link" : "sbt\/BuildPaths$.html#configurationSources(base:sbt.io.syntax.File):Seq[sbt.io.syntax.File]", "kind" : "def"}, {"label" : "defaultGlobalBase", "tail" : "(): File", "member" : "sbt.BuildPaths.defaultGlobalBase", "link" : "sbt\/BuildPaths$.html#defaultGlobalBase:java.io.File", "kind" : "def"}, {"label" : "defaultVersionedGlobalBase", "tail" : "(sbtVersion: String): File", "member" : "sbt.BuildPaths.defaultVersionedGlobalBase", "link" : "sbt\/BuildPaths$.html#defaultVersionedGlobalBase(sbtVersion:String):sbt.io.syntax.File", "kind" : "def"}, {"label" : "getFileProperty", "tail" : "(name: String): Option[File]", "member" : "sbt.BuildPaths.getFileProperty", "link" : "sbt\/BuildPaths$.html#getFileProperty(name:String):Option[sbt.io.syntax.File]", "kind" : "def"}, {"label" : "getFileSetting", "tail" : "(stateKey: AttributeKey[File], property: String, default: ⇒ File)(state: State): File", "member" : "sbt.BuildPaths.getFileSetting", "link" : "sbt\/BuildPaths$.html#getFileSetting(stateKey:sbt.internal.util.AttributeKey[sbt.io.syntax.File],property:String,default:=>sbt.io.syntax.File)(state:sbt.State):sbt.io.syntax.File", "kind" : "def"}, {"label" : "getZincDirectory", "tail" : "(state: State, globalBase: File): File", "member" : "sbt.BuildPaths.getZincDirectory", "link" : "sbt\/BuildPaths$.html#getZincDirectory(state:sbt.State,globalBase:sbt.io.syntax.File):sbt.io.syntax.File", "kind" : "def"}, {"label" : "getDependencyDirectory", "tail" : "(state: State, globalBase: File): File", "member" : "sbt.BuildPaths.getDependencyDirectory", "link" : "sbt\/BuildPaths$.html#getDependencyDirectory(state:sbt.State,globalBase:sbt.io.syntax.File):sbt.io.syntax.File", "kind" : "def"}, {"label" : "getGlobalSettingsDirectory", "tail" : "(state: State, globalBase: File): File", "member" : "sbt.BuildPaths.getGlobalSettingsDirectory", "link" : "sbt\/BuildPaths$.html#getGlobalSettingsDirectory(state:sbt.State,globalBase:sbt.io.syntax.File):sbt.io.syntax.File", "kind" : "def"}, {"label" : "getGlobalPluginsDirectory", "tail" : "(state: State, globalBase: File): File", "member" : "sbt.BuildPaths.getGlobalPluginsDirectory", "link" : "sbt\/BuildPaths$.html#getGlobalPluginsDirectory(state:sbt.State,globalBase:sbt.io.syntax.File):sbt.io.syntax.File", "kind" : "def"}, {"label" : "getStagingDirectory", "tail" : "(state: State, globalBase: File): File", "member" : "sbt.BuildPaths.getStagingDirectory", "link" : "sbt\/BuildPaths$.html#getStagingDirectory(state:sbt.State,globalBase:sbt.io.syntax.File):sbt.io.syntax.File", "kind" : "def"}, {"label" : "getGlobalBase", "tail" : "(state: State): File", "member" : "sbt.BuildPaths.getGlobalBase", "link" : "sbt\/BuildPaths$.html#getGlobalBase(state:sbt.State):sbt.io.syntax.File", "kind" : "def"}, {"label" : "globalZincDirectory", "tail" : ": AttributeKey[File]", "member" : "sbt.BuildPaths.globalZincDirectory", "link" : "sbt\/BuildPaths$.html#globalZincDirectory:sbt.internal.util.AttributeKey[java.io.File]", "kind" : "val"}, {"label" : "dependencyBaseDirectory", "tail" : ": AttributeKey[File]", "member" : "sbt.BuildPaths.dependencyBaseDirectory", "link" : "sbt\/BuildPaths$.html#dependencyBaseDirectory:sbt.internal.util.AttributeKey[java.io.File]", "kind" : "val"}, {"label" : "stagingDirectory", "tail" : ": AttributeKey[File]", "member" : "sbt.BuildPaths.stagingDirectory", "link" : "sbt\/BuildPaths$.html#stagingDirectory:sbt.internal.util.AttributeKey[java.io.File]", "kind" : "val"}, {"label" : "globalSettingsDirectory", "tail" : ": AttributeKey[File]", "member" : "sbt.BuildPaths.globalSettingsDirectory", "link" : "sbt\/BuildPaths$.html#globalSettingsDirectory:sbt.internal.util.AttributeKey[java.io.File]", "kind" : "val"}, {"label" : "globalPluginsDirectory", "tail" : ": AttributeKey[File]", "member" : "sbt.BuildPaths.globalPluginsDirectory", "link" : "sbt\/BuildPaths$.html#globalPluginsDirectory:sbt.internal.util.AttributeKey[java.io.File]", "kind" : "val"}, {"label" : "globalBaseDirectory", "tail" : ": AttributeKey[File]", "member" : "sbt.BuildPaths.globalBaseDirectory", "link" : "sbt\/BuildPaths$.html#globalBaseDirectory:sbt.internal.util.AttributeKey[java.io.File]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/BuildPaths$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/BuildPaths$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/BuildPaths$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/BuildPaths$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/BuildPaths$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/BuildPaths$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/BuildPaths$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildPaths$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildPaths$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildPaths$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/BuildPaths$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/BuildPaths$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/BuildPaths$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/BuildPaths$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/BuildPaths$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/BuildPaths$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/BuildPaths$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/BuildPaths$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/BuildPaths$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.BuildRef", "shortDescription" : "Uniquely identifies a build by a URI.", "members_case class" : [{"member" : "sbt.BuildRef#<init>", "error" : "unsupported entity"}, {"label" : "build", "tail" : ": URI", "member" : "sbt.BuildRef.build", "link" : "sbt\/BuildRef.html#build:java.net.URI", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/BuildRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/BuildRef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/BuildRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/BuildRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/BuildRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/BuildRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/BuildRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/BuildRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/BuildRef.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/BuildRef.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/BuildRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/BuildRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/BuildRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/BuildRef.html", "kind" : "case class"}, {"name" : "sbt.BuildReference", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/BuildReference.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/BuildReference.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/BuildReference.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/BuildReference.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/BuildReference.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/BuildReference.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/BuildReference.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildReference.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildReference.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuildReference.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/BuildReference.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/BuildReference.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/BuildReference.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/BuildReference.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/BuildReference.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/BuildReference.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/BuildReference.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/BuildReference.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/BuildReference.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Identifies a build.", "trait" : "sbt\/BuildReference.html", "kind" : "trait"}, {"name" : "sbt.BuiltinCommands", "shortDescription" : "", "object" : "sbt\/BuiltinCommands$.html", "members_object" : [{"label" : "shell", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.shell", "link" : "sbt\/BuiltinCommands$.html#shell:sbt.Command", "kind" : "def"}, {"label" : "registerCompilerCache", "tail" : "(s: State): State", "member" : "sbt.BuiltinCommands.registerCompilerCache", "link" : "sbt\/BuiltinCommands$.html#registerCompilerCache(s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "doLoadProject", "tail" : "(s0: State, action: Project.LoadAction.Value): State", "member" : "sbt.BuiltinCommands.doLoadProject", "link" : "sbt\/BuiltinCommands$.html#doLoadProject(s0:sbt.State,action:sbt.Project.LoadAction.Value):sbt.State", "kind" : "def"}, {"label" : "loadProjectImpl", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.loadProjectImpl", "link" : "sbt\/BuiltinCommands$.html#loadProjectImpl:sbt.Command", "kind" : "def"}, {"label" : "loadProject", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.loadProject", "link" : "sbt\/BuiltinCommands$.html#loadProject:sbt.Command", "kind" : "def"}, {"label" : "loadProjectCommands", "tail" : "(arg: String): List[String]", "member" : "sbt.BuiltinCommands.loadProjectCommands", "link" : "sbt\/BuiltinCommands$.html#loadProjectCommands(arg:String):List[String]", "kind" : "def"}, {"label" : "loadFailed", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.loadFailed", "link" : "sbt\/BuiltinCommands$.html#loadFailed:sbt.Command", "kind" : "def"}, {"label" : "project", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.project", "link" : "sbt\/BuiltinCommands$.html#project:sbt.Command", "kind" : "def"}, {"label" : "projectsParser", "tail" : "(s: State): Parser[(List[URI]) ⇒ List[URI]]", "member" : "sbt.BuiltinCommands.projectsParser", "link" : "sbt\/BuiltinCommands$.html#projectsParser(s:sbt.State):sbt.internal.util.complete.Parser[List[java.net.URI]=>List[java.net.URI]]", "kind" : "def"}, {"label" : "transformExtraBuilds", "tail" : "(s: State, f: (List[URI]) ⇒ List[URI]): State", "member" : "sbt.BuiltinCommands.transformExtraBuilds", "link" : "sbt\/BuiltinCommands$.html#transformExtraBuilds(s:sbt.State,f:List[java.net.URI]=>List[java.net.URI]):sbt.State", "kind" : "def"}, {"label" : "showProjects", "tail" : "(s: State): Unit", "member" : "sbt.BuiltinCommands.showProjects", "link" : "sbt\/BuiltinCommands$.html#showProjects(s:sbt.State):Unit", "kind" : "def"}, {"label" : "projects", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.projects", "link" : "sbt\/BuiltinCommands$.html#projects:sbt.Command", "kind" : "def"}, {"label" : "plugin", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.plugin", "link" : "sbt\/BuiltinCommands$.html#plugin:sbt.Command", "kind" : "def"}, {"label" : "pluginParser", "tail" : ": (State) ⇒ Parser[AutoPlugin]", "member" : "sbt.BuiltinCommands.pluginParser", "link" : "sbt\/BuiltinCommands$.html#pluginParser:sbt.State=>sbt.internal.util.complete.Parser[sbt.AutoPlugin]", "kind" : "val"}, {"label" : "plugins", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.plugins", "link" : "sbt\/BuiltinCommands$.html#plugins:sbt.Command", "kind" : "def"}, {"label" : "keysHelp", "tail" : "(s: State): Help", "member" : "sbt.BuiltinCommands.keysHelp", "link" : "sbt\/BuiltinCommands$.html#keysHelp(s:sbt.State):sbt.Help", "kind" : "def"}, {"label" : "actHelp", "tail" : "(): (State) ⇒ Help", "member" : "sbt.BuiltinCommands.actHelp", "link" : "sbt\/BuiltinCommands$.html#actHelp:sbt.State=>sbt.Help", "kind" : "def"}, {"label" : "act", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.act", "link" : "sbt\/BuiltinCommands$.html#act:sbt.Command", "kind" : "def"}, {"label" : "listBuild", "tail" : "(uri: URI, build: LoadedBuildUnit, current: Boolean, currentID: String, log: Logger): Unit", "member" : "sbt.BuiltinCommands.listBuild", "link" : "sbt\/BuiltinCommands$.html#listBuild(uri:java.net.URI,build:sbt.internal.LoadedBuildUnit,current:Boolean,currentID:String,log:sbt.util.Logger):Unit", "kind" : "def"}, {"label" : "imports", "tail" : "(extracted: Extracted): Seq[(String, Int)]", "member" : "sbt.BuiltinCommands.imports", "link" : "sbt\/BuiltinCommands$.html#imports(extracted:sbt.Extracted):Seq[(String,Int)]", "kind" : "def"}, {"label" : "autoImports", "tail" : "(extracted: Extracted): EvalImports", "member" : "sbt.BuiltinCommands.autoImports", "link" : "sbt\/BuiltinCommands$.html#autoImports(extracted:sbt.Extracted):sbt.compiler.EvalImports", "kind" : "def"}, {"label" : "printLast", "tail" : "(s: State): (Seq[String]) ⇒ Unit", "member" : "sbt.BuiltinCommands.printLast", "link" : "sbt\/BuiltinCommands$.html#printLast(s:sbt.State):Seq[String]=>Unit", "kind" : "def"}, {"label" : "isLastOnly", "tail" : "(s: State): Boolean", "member" : "sbt.BuiltinCommands.isLastOnly", "link" : "sbt\/BuiltinCommands$.html#isLastOnly(s:sbt.State):Boolean", "kind" : "def"}, {"label" : "keepLastLog", "tail" : "(s: State): State", "member" : "sbt.BuiltinCommands.keepLastLog", "link" : "sbt\/BuiltinCommands$.html#keepLastLog(s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "lastLogFile", "tail" : "(s: State): Option[File]", "member" : "sbt.BuiltinCommands.lastLogFile", "link" : "sbt\/BuiltinCommands$.html#lastLogFile(s:sbt.State):Option[java.io.File]", "kind" : "def"}, {"label" : "export", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.export", "link" : "sbt\/BuiltinCommands$.html#export:sbt.Command", "kind" : "def"}, {"label" : "last", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.last", "link" : "sbt\/BuiltinCommands$.html#last:sbt.Command", "kind" : "def"}, {"label" : "lastGrepParser", "tail" : "(s: State): Parser[(String, Option[AnyKeys])]", "member" : "sbt.BuiltinCommands.lastGrepParser", "link" : "sbt\/BuiltinCommands$.html#lastGrepParser(s:sbt.State):sbt.internal.util.complete.Parser[(String,Option[sbt.internal.Aggregation.AnyKeys])]", "kind" : "def"}, {"label" : "exportParser", "tail" : ": (State) ⇒ Parser[() ⇒ State]", "member" : "sbt.BuiltinCommands.exportParser", "link" : "sbt\/BuiltinCommands$.html#exportParser:sbt.State=>sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "val"}, {"label" : "aggregatedKeyValueParser", "tail" : ": (State) ⇒ Parser[Option[AnyKeys]]", "member" : "sbt.BuiltinCommands.aggregatedKeyValueParser", "link" : "sbt\/BuiltinCommands$.html#aggregatedKeyValueParser:sbt.State=>sbt.internal.util.complete.Parser[Option[sbt.internal.Aggregation.AnyKeys]]", "kind" : "val"}, {"label" : "spacedAggregatedParser", "tail" : ": (State) ⇒ KeysParser", "member" : "sbt.BuiltinCommands.spacedAggregatedParser", "link" : "sbt\/BuiltinCommands$.html#spacedAggregatedParser:sbt.State=>sbt.BuiltinCommands.KeysParser", "kind" : "val"}, {"label" : "KeysParser", "tail" : "", "member" : "sbt.BuiltinCommands.KeysParser", "link" : "sbt\/BuiltinCommands$.html#KeysParser=sbt.internal.util.complete.Parser[Seq[sbt.Def.ScopedKey[T]]forSome{typeT}]", "kind" : "type"}, {"label" : "setParser", "tail" : "(): (State) ⇒ Parser[(Boolean, String)]", "member" : "sbt.BuiltinCommands.setParser", "link" : "sbt\/BuiltinCommands$.html#setParser:sbt.State=>sbt.internal.util.complete.Parser[(Boolean,String)]", "kind" : "def"}, {"label" : "extractLast", "tail" : "(s: State): (BuildStructure, Select[ProjectRef], Show[Def.ScopedKey[_]])", "member" : "sbt.BuiltinCommands.extractLast", "link" : "sbt\/BuiltinCommands$.html#extractLast(s:sbt.State):(sbt.internal.BuildStructure,sbt.Select[sbt.ProjectRef],sbt.util.Show[sbt.Def.ScopedKey[_]])", "kind" : "def"}, {"label" : "lastGrep", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.lastGrep", "link" : "sbt\/BuiltinCommands$.html#lastGrep:sbt.Command", "kind" : "def"}, {"label" : "inspect", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.inspect", "link" : "sbt\/BuiltinCommands$.html#inspect:sbt.Command", "kind" : "def"}, {"label" : "setThis", "tail" : "(s: State, extracted: Extracted, settings: Seq[Def.Setting[_]], arg: String): SetResult", "member" : "sbt.BuiltinCommands.setThis", "link" : "sbt\/BuiltinCommands$.html#setThis(s:sbt.State,extracted:sbt.Extracted,settings:Seq[sbt.Def.Setting[_]],arg:String):sbt.internal.SetResult", "kind" : "def"}, {"label" : "set", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.set", "link" : "sbt\/BuiltinCommands$.html#set:sbt.Command", "kind" : "def"}, {"label" : "reapply", "tail" : "(newSession: SessionSettings, structure: BuildStructure, s: State): State", "member" : "sbt.BuiltinCommands.reapply", "link" : "sbt\/BuiltinCommands$.html#reapply(newSession:sbt.internal.SessionSettings,structure:sbt.internal.BuildStructure,s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "sessionCommand", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.sessionCommand", "link" : "sbt\/BuiltinCommands$.html#sessionCommand:sbt.Command", "kind" : "def"}, {"label" : "eval", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.eval", "link" : "sbt\/BuiltinCommands$.html#eval:sbt.Command", "kind" : "def"}, {"label" : "initialize", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.initialize", "link" : "sbt\/BuiltinCommands$.html#initialize:sbt.Command", "kind" : "def"}, {"label" : "defaults", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.defaults", "link" : "sbt\/BuiltinCommands$.html#defaults:sbt.Command", "kind" : "def"}, {"label" : "taskStrings", "tail" : "(key: AttributeKey[_]): Option[(String, String)]", "member" : "sbt.BuiltinCommands.taskStrings", "link" : "sbt\/BuiltinCommands$.html#taskStrings(key:sbt.internal.util.AttributeKey[_]):Option[(String,String)]", "kind" : "def"}, {"label" : "tasksHelp", "tail" : "(s: State, filter: (Seq[AttributeKey[_]]) ⇒ Seq[AttributeKey[_]], arg: Option[String]): String", "member" : "sbt.BuiltinCommands.tasksHelp", "link" : "sbt\/BuiltinCommands$.html#tasksHelp(s:sbt.State,filter:Seq[sbt.internal.util.AttributeKey[_]]=>Seq[sbt.internal.util.AttributeKey[_]],arg:Option[String]):String", "kind" : "def"}, {"label" : "highPass", "tail" : "(rankCutoff: Int): (Seq[AttributeKey[_]]) ⇒ Seq[AttributeKey[_]]", "member" : "sbt.BuiltinCommands.highPass", "link" : "sbt\/BuiltinCommands$.html#highPass(rankCutoff:Int):Seq[sbt.internal.util.AttributeKey[_]]=>Seq[sbt.internal.util.AttributeKey[_]]", "kind" : "def"}, {"label" : "topNRanked", "tail" : "(n: Int): (Seq[AttributeKey[_]]) ⇒ Seq[AttributeKey[_]]", "member" : "sbt.BuiltinCommands.topNRanked", "link" : "sbt\/BuiltinCommands$.html#topNRanked(n:Int):Seq[sbt.internal.util.AttributeKey[_]]=>Seq[sbt.internal.util.AttributeKey[_]]", "kind" : "def"}, {"label" : "isTask", "tail" : "(mf: Manifest[_])(taskMF: Manifest[Task[_]], inputMF: Manifest[InputTask[_]]): Boolean", "member" : "sbt.BuiltinCommands.isTask", "link" : "sbt\/BuiltinCommands$.html#isTask(mf:Manifest[_])(implicittaskMF:Manifest[sbt.Task[_]],implicitinputMF:Manifest[sbt.InputTask[_]]):Boolean", "kind" : "def"}, {"label" : "withDescription", "tail" : "(keys: Seq[AttributeKey[_]]): Seq[AttributeKey[_]]", "member" : "sbt.BuiltinCommands.withDescription", "link" : "sbt\/BuiltinCommands$.html#withDescription(keys:Seq[sbt.internal.util.AttributeKey[_]]):Seq[sbt.internal.util.AttributeKey[_]]", "kind" : "def"}, {"label" : "sortByRank", "tail" : "(keys: Seq[AttributeKey[_]]): Seq[AttributeKey[_]]", "member" : "sbt.BuiltinCommands.sortByRank", "link" : "sbt\/BuiltinCommands$.html#sortByRank(keys:Seq[sbt.internal.util.AttributeKey[_]]):Seq[sbt.internal.util.AttributeKey[_]]", "kind" : "def"}, {"label" : "sortByLabel", "tail" : "(keys: Seq[AttributeKey[_]]): Seq[AttributeKey[_]]", "member" : "sbt.BuiltinCommands.sortByLabel", "link" : "sbt\/BuiltinCommands$.html#sortByLabel(keys:Seq[sbt.internal.util.AttributeKey[_]]):Seq[sbt.internal.util.AttributeKey[_]]", "kind" : "def"}, {"label" : "allTaskAndSettingKeys", "tail" : "(s: State): Seq[AttributeKey[_]]", "member" : "sbt.BuiltinCommands.allTaskAndSettingKeys", "link" : "sbt\/BuiltinCommands$.html#allTaskAndSettingKeys(s:sbt.State):Seq[sbt.internal.util.AttributeKey[_]]", "kind" : "def"}, {"label" : "taskDetail", "tail" : "(keys: Seq[AttributeKey[_]]): Seq[(String, String)]", "member" : "sbt.BuiltinCommands.taskDetail", "link" : "sbt\/BuiltinCommands$.html#taskDetail(keys:Seq[sbt.internal.util.AttributeKey[_]]):Seq[(String,String)]", "kind" : "def"}, {"label" : "verbosityParser", "tail" : "(): Parser[Int]", "member" : "sbt.BuiltinCommands.verbosityParser", "link" : "sbt\/BuiltinCommands$.html#verbosityParser:sbt.internal.util.complete.Parser[Int]", "kind" : "def"}, {"label" : "selectedParser", "tail" : "(s: State, keepKeys: (AttributeKey[_]) ⇒ Boolean): Parser[String]", "member" : "sbt.BuiltinCommands.selectedParser", "link" : "sbt\/BuiltinCommands$.html#selectedParser(s:sbt.State,keepKeys:sbt.internal.util.AttributeKey[_]=>Boolean):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "showSettingParser", "tail" : "(keepKeys: (AttributeKey[_]) ⇒ Boolean)(s: State): Parser[(Int, Option[String])]", "member" : "sbt.BuiltinCommands.showSettingParser", "link" : "sbt\/BuiltinCommands$.html#showSettingParser(keepKeys:sbt.internal.util.AttributeKey[_]=>Boolean)(s:sbt.State):sbt.internal.util.complete.Parser[(Int,Option[String])]", "kind" : "def"}, {"label" : "showSettingLike", "tail" : "(command: String, preamble: String, cutoff: Int, keep: (AttributeKey[_]) ⇒ Boolean): Command", "member" : "sbt.BuiltinCommands.showSettingLike", "link" : "sbt\/BuiltinCommands$.html#showSettingLike(command:String,preamble:String,cutoff:Int,keep:sbt.internal.util.AttributeKey[_]=>Boolean):sbt.Command", "kind" : "def"}, {"label" : "tasks", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.tasks", "link" : "sbt\/BuiltinCommands$.html#tasks:sbt.Command", "kind" : "def"}, {"label" : "settingsCommand", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.settingsCommand", "link" : "sbt\/BuiltinCommands$.html#settingsCommand:sbt.Command", "kind" : "def"}, {"label" : "aboutString", "tail" : "(s: State): String", "member" : "sbt.BuiltinCommands.aboutString", "link" : "sbt\/BuiltinCommands$.html#aboutString(s:sbt.State):String", "kind" : "def"}, {"label" : "aboutScala", "tail" : "(s: State, e: Extracted): String", "member" : "sbt.BuiltinCommands.aboutScala", "link" : "sbt\/BuiltinCommands$.html#aboutScala(s:sbt.State,e:sbt.Extracted):String", "kind" : "def"}, {"label" : "aboutPlugins", "tail" : "(e: Extracted): String", "member" : "sbt.BuiltinCommands.aboutPlugins", "link" : "sbt\/BuiltinCommands$.html#aboutPlugins(e:sbt.Extracted):String", "kind" : "def"}, {"label" : "aboutProject", "tail" : "(s: State): String", "member" : "sbt.BuiltinCommands.aboutProject", "link" : "sbt\/BuiltinCommands$.html#aboutProject(s:sbt.State):String", "kind" : "def"}, {"label" : "scalaVersion", "tail" : "(s: State): String", "member" : "sbt.BuiltinCommands.scalaVersion", "link" : "sbt\/BuiltinCommands$.html#scalaVersion(s:sbt.State):String", "kind" : "def"}, {"label" : "sbtVersion", "tail" : "(s: State): String", "member" : "sbt.BuiltinCommands.sbtVersion", "link" : "sbt\/BuiltinCommands$.html#sbtVersion(s:sbt.State):String", "kind" : "def"}, {"label" : "sbtName", "tail" : "(s: State): String", "member" : "sbt.BuiltinCommands.sbtName", "link" : "sbt\/BuiltinCommands$.html#sbtName(s:sbt.State):String", "kind" : "def"}, {"label" : "bootParser", "tail" : "(s: State): Parser[() ⇒ State]", "member" : "sbt.BuiltinCommands.bootParser", "link" : "sbt\/BuiltinCommands$.html#bootParser(s:sbt.State):sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "setLogLevel", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.setLogLevel", "link" : "sbt\/BuiltinCommands$.html#setLogLevel:sbt.Command", "kind" : "def"}, {"label" : "about", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.about", "link" : "sbt\/BuiltinCommands$.html#about:sbt.Command", "kind" : "def"}, {"label" : "boot", "tail" : "(): Command", "member" : "sbt.BuiltinCommands.boot", "link" : "sbt\/BuiltinCommands$.html#boot:sbt.Command", "kind" : "def"}, {"label" : "DefaultBootCommands", "tail" : "(): Seq[String]", "member" : "sbt.BuiltinCommands.DefaultBootCommands", "link" : "sbt\/BuiltinCommands$.html#DefaultBootCommands:Seq[String]", "kind" : "def"}, {"label" : "DefaultCommands", "tail" : "(): Seq[Command]", "member" : "sbt.BuiltinCommands.DefaultCommands", "link" : "sbt\/BuiltinCommands$.html#DefaultCommands:Seq[sbt.Command]", "kind" : "def"}, {"label" : "ScriptCommands", "tail" : "(): Seq[Command]", "member" : "sbt.BuiltinCommands.ScriptCommands", "link" : "sbt\/BuiltinCommands$.html#ScriptCommands:Seq[sbt.Command]", "kind" : "def"}, {"label" : "ConsoleCommands", "tail" : "(): Seq[Command]", "member" : "sbt.BuiltinCommands.ConsoleCommands", "link" : "sbt\/BuiltinCommands$.html#ConsoleCommands:Seq[sbt.Command]", "kind" : "def"}, {"label" : "initialAttributes", "tail" : "(): AttributeMap", "member" : "sbt.BuiltinCommands.initialAttributes", "link" : "sbt\/BuiltinCommands$.html#initialAttributes:sbt.internal.util.AttributeMap", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/BuiltinCommands$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/BuiltinCommands$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/BuiltinCommands$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/BuiltinCommands$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/BuiltinCommands$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/BuiltinCommands$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/BuiltinCommands$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuiltinCommands$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuiltinCommands$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/BuiltinCommands$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/BuiltinCommands$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/BuiltinCommands$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/BuiltinCommands$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/BuiltinCommands$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/BuiltinCommands$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/BuiltinCommands$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/BuiltinCommands$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/BuiltinCommands$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/BuiltinCommands$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.ClasspathDep", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ClasspathDep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ClasspathDep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ClasspathDep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ClasspathDep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ClasspathDep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ClasspathDep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ClasspathDep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ClasspathDep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ClasspathDep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ClasspathDep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ClasspathDep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ClasspathDep.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ClasspathDep.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ClasspathDep.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ClasspathDep.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ClasspathDep.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ClasspathDep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ClasspathDep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ClasspathDep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "configuration", "tail" : "(): Option[String]", "member" : "sbt.ClasspathDep.configuration", "link" : "sbt\/ClasspathDep.html#configuration:Option[String]", "kind" : "abstract def"}, {"label" : "project", "tail" : "(): PR", "member" : "sbt.ClasspathDep.project", "link" : "sbt\/ClasspathDep.html#project:PR", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/ClasspathDep.html", "kind" : "trait"}, {"name" : "sbt.ClasspathDependency", "shortDescription" : "", "members_case class" : [{"member" : "sbt.ClasspathDependency#<init>", "error" : "unsupported entity"}, {"label" : "configuration", "tail" : ": Option[String]", "member" : "sbt.ClasspathDependency.configuration", "link" : "sbt\/ClasspathDependency.html#configuration:Option[String]", "kind" : "val"}, {"label" : "project", "tail" : ": ProjectReference", "member" : "sbt.ClasspathDependency.project", "link" : "sbt\/ClasspathDependency.html#project:sbt.ProjectReference", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ClasspathDependency.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ClasspathDependency.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ClasspathDependency.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ClasspathDependency.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ClasspathDependency.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ClasspathDependency.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ClasspathDependency.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ClasspathDependency.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ClasspathDependency.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ClasspathDependency.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ClasspathDependency.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ClasspathDependency.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ClasspathDependency.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ClasspathDependency.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ClasspathDependency.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ClasspathDependency.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/ClasspathDependency.html", "kind" : "case class"}, {"name" : "sbt.Classpaths", "shortDescription" : "", "object" : "sbt\/Classpaths$.html", "members_object" : [{"label" : "shellPromptFromState", "tail" : "(): (State) ⇒ String", "member" : "sbt.Classpaths.shellPromptFromState", "link" : "sbt\/Classpaths$.html#shellPromptFromState:sbt.State=>String", "kind" : "def"}, {"label" : "bootRepositories", "tail" : "(app: AppConfiguration): Option[Vector[Resolver]]", "member" : "sbt.Classpaths.bootRepositories", "link" : "sbt\/Classpaths$.html#bootRepositories(app:xsbti.AppConfiguration):Option[Vector[sbt.librarymanagement.Resolver]]", "kind" : "def"}, {"label" : "appRepositories", "tail" : "(app: AppConfiguration): Option[Vector[Resolver]]", "member" : "sbt.Classpaths.appRepositories", "link" : "sbt\/Classpaths$.html#appRepositories(app:xsbti.AppConfiguration):Option[Vector[sbt.librarymanagement.Resolver]]", "kind" : "def"}, {"label" : "isOverrideRepositories", "tail" : "(app: AppConfiguration): Boolean", "member" : "sbt.Classpaths.isOverrideRepositories", "link" : "sbt\/Classpaths$.html#isOverrideRepositories(app:xsbti.AppConfiguration):Boolean", "kind" : "def"}, {"label" : "bootChecksums", "tail" : "(app: AppConfiguration): Vector[String]", "member" : "sbt.Classpaths.bootChecksums", "link" : "sbt\/Classpaths$.html#bootChecksums(app:xsbti.AppConfiguration):Vector[String]", "kind" : "def"}, {"label" : "bootIvyHome", "tail" : "(app: AppConfiguration): Option[File]", "member" : "sbt.Classpaths.bootIvyHome", "link" : "sbt\/Classpaths$.html#bootIvyHome(app:xsbti.AppConfiguration):Option[java.io.File]", "kind" : "def"}, {"label" : "substituteScalaFiles", "tail" : "(scalaOrg: String, report: UpdateReport)(scalaJars: (String) ⇒ Seq[File]): UpdateReport", "member" : "sbt.Classpaths.substituteScalaFiles", "link" : "sbt\/Classpaths$.html#substituteScalaFiles(scalaOrg:String,report:sbt.librarymanagement.UpdateReport)(scalaJars:String=>Seq[java.io.File]):sbt.librarymanagement.UpdateReport", "kind" : "def"}, {"label" : "compilerPluginConfig", "tail" : ": Seq[Def.Setting[Task[Seq[String]]]]", "member" : "sbt.Classpaths.compilerPluginConfig", "link" : "sbt\/Classpaths$.html#compilerPluginConfig:Seq[sbt.Def.Setting[sbt.Task[Seq[String]]]]", "kind" : "lazy val"}, {"label" : "autoPlugins", "tail" : "(report: UpdateReport, internalPluginClasspath: Seq[File]): Seq[String]", "member" : "sbt.Classpaths.autoPlugins", "link" : "sbt\/Classpaths$.html#autoPlugins(report:sbt.librarymanagement.UpdateReport,internalPluginClasspath:Seq[java.io.File]):Seq[String]", "kind" : "def"}, {"label" : "findUnmanagedJars", "tail" : "(config: Configuration, base: File, filter: FileFilter, excl: FileFilter): Classpath", "member" : "sbt.Classpaths.findUnmanagedJars", "link" : "sbt\/Classpaths$.html#findUnmanagedJars(config:sbt.librarymanagement.Configuration,base:java.io.File,filter:sbt.io.FileFilter,excl:sbt.io.FileFilter):sbt.Keys.Classpath", "kind" : "def"}, {"label" : "managedJars", "tail" : "(config: Configuration, jarTypes: Set[String], up: UpdateReport): Classpath", "member" : "sbt.Classpaths.managedJars", "link" : "sbt\/Classpaths$.html#managedJars(config:sbt.librarymanagement.Configuration,jarTypes:Set[String],up:sbt.librarymanagement.UpdateReport):sbt.Keys.Classpath", "kind" : "def"}, {"label" : "unmanagedScalaLibrary", "tail" : "(): Def.Initialize[Task[Seq[File]]]", "member" : "sbt.Classpaths.unmanagedScalaLibrary", "link" : "sbt\/Classpaths$.html#unmanagedScalaLibrary:sbt.Def.Initialize[sbt.Task[Seq[java.io.File]]]", "kind" : "def"}, {"label" : "addUnmanagedLibrary", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.Classpaths.addUnmanagedLibrary", "link" : "sbt\/Classpaths$.html#addUnmanagedLibrary:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "autoLibraryDependency", "tail" : "(auto: Boolean, plugin: Boolean, org: String, version: String): Seq[ModuleID]", "member" : "sbt.Classpaths.autoLibraryDependency", "link" : "sbt\/Classpaths$.html#autoLibraryDependency(auto:Boolean,plugin:Boolean,org:String,version:String):Seq[sbt.librarymanagement.ModuleID]", "kind" : "def"}, {"label" : "modifyForPlugin", "tail" : "(plugin: Boolean, dep: ModuleID): ModuleID", "member" : "sbt.Classpaths.modifyForPlugin", "link" : "sbt\/Classpaths$.html#modifyForPlugin(plugin:Boolean,dep:sbt.librarymanagement.ModuleID):sbt.librarymanagement.ModuleID", "kind" : "def"}, {"label" : "sbtPluginReleases", "tail" : ": URLRepository", "member" : "sbt.Classpaths.sbtPluginReleases", "link" : "sbt\/Classpaths$.html#sbtPluginReleases:sbt.librarymanagement.URLRepository", "kind" : "val"}, {"label" : "typesafeReleases", "tail" : ": URLRepository", "member" : "sbt.Classpaths.typesafeReleases", "link" : "sbt\/Classpaths$.html#typesafeReleases:sbt.librarymanagement.URLRepository", "kind" : "val"}, {"label" : "sbtIvySnapshots", "tail" : ": URLRepository", "member" : "sbt.Classpaths.sbtIvySnapshots", "link" : "sbt\/Classpaths$.html#sbtIvySnapshots:sbt.librarymanagement.URLRepository", "kind" : "val"}, {"label" : "flatten", "tail" : "(o: Option[Option[T]]): Option[T]", "member" : "sbt.Classpaths.flatten", "link" : "sbt\/Classpaths$.html#flatten[T](o:Option[Option[T]]):Option[T]", "kind" : "def"}, {"label" : "defaultConfigurationTask", "tail" : "(p: ResolvedReference, data: Settings[Scope]): Configuration", "member" : "sbt.Classpaths.defaultConfigurationTask", "link" : "sbt\/Classpaths$.html#defaultConfigurationTask(p:sbt.ResolvedReference,data:sbt.internal.util.Settings[sbt.Scope]):sbt.librarymanagement.Configuration", "kind" : "def"}, {"label" : "getClasspath", "tail" : "(key: TaskKey[Classpath], dep: ResolvedReference, conf: String, data: Settings[Scope]): Task[Classpath]", "member" : "sbt.Classpaths.getClasspath", "link" : "sbt\/Classpaths$.html#getClasspath(key:sbt.TaskKey[sbt.Keys.Classpath],dep:sbt.ResolvedReference,conf:String,data:sbt.internal.util.Settings[sbt.Scope]):sbt.Task[sbt.Keys.Classpath]", "kind" : "def"}, {"label" : "unmanagedLibs", "tail" : "(dep: ResolvedReference, conf: String, data: Settings[Scope]): Task[Classpath]", "member" : "sbt.Classpaths.unmanagedLibs", "link" : "sbt\/Classpaths$.html#unmanagedLibs(dep:sbt.ResolvedReference,conf:String,data:sbt.internal.util.Settings[sbt.Scope]):sbt.Task[sbt.Keys.Classpath]", "kind" : "def"}, {"label" : "confOpt", "tail" : "(configurations: Seq[Configuration], conf: String): Option[Configuration]", "member" : "sbt.Classpaths.confOpt", "link" : "sbt\/Classpaths$.html#confOpt(configurations:Seq[sbt.librarymanagement.Configuration],conf:String):Option[sbt.librarymanagement.Configuration]", "kind" : "def"}, {"label" : "getConfigurations", "tail" : "(p: ResolvedReference, data: Settings[Scope]): Seq[Configuration]", "member" : "sbt.Classpaths.getConfigurations", "link" : "sbt\/Classpaths$.html#getConfigurations(p:sbt.ResolvedReference,data:sbt.internal.util.Settings[sbt.Scope]):Seq[sbt.librarymanagement.Configuration]", "kind" : "def"}, {"label" : "allConfigs", "tail" : "(conf: Configuration): Seq[Configuration]", "member" : "sbt.Classpaths.allConfigs", "link" : "sbt\/Classpaths$.html#allConfigs(conf:sbt.librarymanagement.Configuration):Seq[sbt.librarymanagement.Configuration]", "kind" : "def"}, {"label" : "missingConfiguration", "tail" : "(in: String, conf: String): Nothing", "member" : "sbt.Classpaths.missingConfiguration", "link" : "sbt\/Classpaths$.html#missingConfiguration(in:String,conf:String):Nothing", "kind" : "def"}, {"label" : "replaceWildcard", "tail" : "(allConfs: Seq[String])(conf: String): Seq[String]", "member" : "sbt.Classpaths.replaceWildcard", "link" : "sbt\/Classpaths$.html#replaceWildcard(allConfs:Seq[String])(conf:String):Seq[String]", "kind" : "def"}, {"label" : "parseList", "tail" : "(s: String, allConfs: Seq[String]): Seq[String]", "member" : "sbt.Classpaths.parseList", "link" : "sbt\/Classpaths$.html#parseList(s:String,allConfs:Seq[String]):Seq[String]", "kind" : "def"}, {"label" : "union", "tail" : "(maps: Seq[(A) ⇒ Seq[B]]): (A) ⇒ Seq[B]", "member" : "sbt.Classpaths.union", "link" : "sbt\/Classpaths$.html#union[A,B](maps:Seq[A=>Seq[B]]):A=>Seq[B]", "kind" : "def"}, {"label" : "parseSingleMapping", "tail" : "(masterConfs: Seq[String], depConfs: Seq[String], default: (String) ⇒ Seq[String])(confString: String): (String) ⇒ Seq[String]", "member" : "sbt.Classpaths.parseSingleMapping", "link" : "sbt\/Classpaths$.html#parseSingleMapping(masterConfs:Seq[String],depConfs:Seq[String],default:String=>Seq[String])(confString:String):String=>Seq[String]", "kind" : "def"}, {"label" : "parseMapping", "tail" : "(confString: String, masterConfs: Seq[String], depConfs: Seq[String], default: (String) ⇒ Seq[String]): (String) ⇒ Seq[String]", "member" : "sbt.Classpaths.parseMapping", "link" : "sbt\/Classpaths$.html#parseMapping(confString:String,masterConfs:Seq[String],depConfs:Seq[String],default:String=>Seq[String]):String=>Seq[String]", "kind" : "def"}, {"label" : "mapped", "tail" : "(confString: Option[String], masterConfs: Seq[String], depConfs: Seq[String], default: String, defaultMapping: String): (String) ⇒ Seq[String]", "member" : "sbt.Classpaths.mapped", "link" : "sbt\/Classpaths$.html#mapped(confString:Option[String],masterConfs:Seq[String],depConfs:Seq[String],default:String,defaultMapping:String):String=>Seq[String]", "kind" : "def"}, {"label" : "interSort", "tail" : "(projectRef: ProjectRef, conf: Configuration, data: Settings[Scope], deps: BuildDependencies): Seq[(ProjectRef, String)]", "member" : "sbt.Classpaths.interSort", "link" : "sbt\/Classpaths$.html#interSort(projectRef:sbt.ProjectRef,conf:sbt.librarymanagement.Configuration,data:sbt.internal.util.Settings[sbt.Scope],deps:sbt.internal.BuildDependencies):Seq[(sbt.ProjectRef,String)]", "kind" : "def"}, {"label" : "mkIvyConfiguration", "tail" : "(): Def.Initialize[Task[IvyConfiguration]]", "member" : "sbt.Classpaths.mkIvyConfiguration", "link" : "sbt\/Classpaths$.html#mkIvyConfiguration:sbt.Def.Initialize[sbt.Task[sbt.librarymanagement.ivy.IvyConfiguration]]", "kind" : "def"}, {"label" : "unmanagedDependencies", "tail" : "(): Def.Initialize[Task[Classpath]]", "member" : "sbt.Classpaths.unmanagedDependencies", "link" : "sbt\/Classpaths$.html#unmanagedDependencies:sbt.Def.Initialize[sbt.Task[sbt.Keys.Classpath]]", "kind" : "def"}, {"label" : "internalDependencyJarsTask", "tail" : "(): Def.Initialize[Task[Classpath]]", "member" : "sbt.Classpaths.internalDependencyJarsTask", "link" : "sbt\/Classpaths$.html#internalDependencyJarsTask:sbt.Def.Initialize[sbt.Task[sbt.Keys.Classpath]]", "kind" : "def"}, {"label" : "internalDependencies", "tail" : "(): Def.Initialize[Task[Classpath]]", "member" : "sbt.Classpaths.internalDependencies", "link" : "sbt\/Classpaths$.html#internalDependencies:sbt.Def.Initialize[sbt.Task[sbt.Keys.Classpath]]", "kind" : "def"}, {"label" : "constructBuildDependencies", "tail" : "(): Def.Initialize[BuildDependencies]", "member" : "sbt.Classpaths.constructBuildDependencies", "link" : "sbt\/Classpaths$.html#constructBuildDependencies:sbt.Def.Initialize[sbt.internal.BuildDependencies]", "kind" : "def"}, {"label" : "makeProducts", "tail" : "(): Def.Initialize[Task[Seq[File]]]", "member" : "sbt.Classpaths.makeProducts", "link" : "sbt\/Classpaths$.html#makeProducts:sbt.Def.Initialize[sbt.Task[Seq[java.io.File]]]", "kind" : "def"}, {"label" : "analyzed", "tail" : "(data: T, analysis: CompileAnalysis): Attributed[T]", "member" : "sbt.Classpaths.analyzed", "link" : "sbt\/Classpaths$.html#analyzed[T](data:T,analysis:xsbti.compile.CompileAnalysis):sbt.internal.util.Attributed[T]", "kind" : "def"}, {"label" : "projectResolverTask", "tail" : "(): Def.Initialize[Task[Resolver]]", "member" : "sbt.Classpaths.projectResolverTask", "link" : "sbt\/Classpaths$.html#projectResolverTask:sbt.Def.Initialize[sbt.Task[sbt.librarymanagement.Resolver]]", "kind" : "def"}, {"label" : "projectDependenciesTask", "tail" : "(): Def.Initialize[Task[Seq[ModuleID]]]", "member" : "sbt.Classpaths.projectDependenciesTask", "link" : "sbt\/Classpaths$.html#projectDependenciesTask:sbt.Def.Initialize[sbt.Task[Seq[sbt.librarymanagement.ModuleID]]]", "kind" : "def"}, {"label" : "deliverPattern", "tail" : "(outputPath: File): String", "member" : "sbt.Classpaths.deliverPattern", "link" : "sbt\/Classpaths$.html#deliverPattern(outputPath:java.io.File):String", "kind" : "def"}, {"label" : "makeIvyXmlConfig", "tail" : "(publishMavenStyle: Boolean, deliverIvyPattern: String, status: String, configurations: Vector[ConfigRef], checksums: Vector[String], logging: UpdateLogging, overwrite: Boolean, optResolverName: Option[String]): PublishConfiguration", "member" : "sbt.Classpaths.makeIvyXmlConfig", "link" : "sbt\/Classpaths$.html#makeIvyXmlConfig(publishMavenStyle:Boolean,deliverIvyPattern:String,status:String,configurations:Vector[sbt.librarymanagement.ConfigRef],checksums:Vector[String],logging:sbt.librarymanagement.UpdateLogging,overwrite:Boolean,optResolverName:Option[String]):sbt.librarymanagement.PublishConfiguration", "kind" : "def"}, {"label" : "publishConfig", "tail" : "(publishMavenStyle: Boolean, deliverIvyPattern: String, status: String, configurations: Vector[ConfigRef], artifacts: Vector[(Artifact, File)], checksums: Vector[String], resolverName: String, logging: UpdateLogging, overwrite: Boolean): PublishConfiguration", "member" : "sbt.Classpaths.publishConfig", "link" : "sbt\/Classpaths$.html#publishConfig(publishMavenStyle:Boolean,deliverIvyPattern:String,status:String,configurations:Vector[sbt.librarymanagement.ConfigRef],artifacts:Vector[(sbt.librarymanagement.Artifact,java.io.File)],checksums:Vector[String],resolverName:String,logging:sbt.librarymanagement.UpdateLogging,overwrite:Boolean):sbt.librarymanagement.PublishConfiguration", "kind" : "def"}, {"label" : "getPublishTo", "tail" : "(repo: Option[Resolver]): Resolver", "member" : "sbt.Classpaths.getPublishTo", "link" : "sbt\/Classpaths$.html#getPublishTo(repo:Option[sbt.librarymanagement.Resolver]):sbt.librarymanagement.Resolver", "kind" : "def"}, {"label" : "defaultRepositoryFilter", "tail" : "(): (MavenRepository) ⇒ Boolean", "member" : "sbt.Classpaths.defaultRepositoryFilter", "link" : "sbt\/Classpaths$.html#defaultRepositoryFilter:sbt.librarymanagement.MavenRepository=>Boolean", "kind" : "def"}, {"label" : "updateTask", "tail" : "(): Def.Initialize[Task[UpdateReport]]", "member" : "sbt.Classpaths.updateTask", "link" : "sbt\/Classpaths$.html#updateTask:sbt.Def.Initialize[sbt.Task[sbt.librarymanagement.UpdateReport]]", "kind" : "def"}, {"label" : "withExcludes", "tail" : "(out: File, classifiers: Seq[String], lock: GlobalLock)(f: (Map[ModuleID, Vector[ConfigRef]]) ⇒ UpdateReport): UpdateReport", "member" : "sbt.Classpaths.withExcludes", "link" : "sbt\/Classpaths$.html#withExcludes(out:java.io.File,classifiers:Seq[String],lock:xsbti.GlobalLock)(f:Map[sbt.librarymanagement.ModuleID,Vector[sbt.librarymanagement.ConfigRef]]=>sbt.librarymanagement.UpdateReport):sbt.librarymanagement.UpdateReport", "kind" : "def"}, {"label" : "moduleIdJsonKeyFormat", "tail" : ": JsonKeyFormat[ModuleID]", "member" : "sbt.Classpaths.moduleIdJsonKeyFormat", "link" : "sbt\/Classpaths$.html#moduleIdJsonKeyFormat:sjsonnew.JsonKeyFormat[sbt.librarymanagement.ModuleID]", "kind" : "val"}, {"label" : "publishTask", "tail" : "(config: TaskKey[PublishConfiguration], deliverKey: TaskKey[_]): Def.Initialize[Task[Unit]]", "member" : "sbt.Classpaths.publishTask", "link" : "sbt\/Classpaths$.html#publishTask(config:sbt.TaskKey[sbt.librarymanagement.PublishConfiguration],deliverKey:sbt.TaskKey[_]):sbt.Def.Initialize[sbt.Task[Unit]]", "kind" : "def"}, {"label" : "deliverTask", "tail" : "(config: TaskKey[PublishConfiguration]): Def.Initialize[Task[File]]", "member" : "sbt.Classpaths.deliverTask", "link" : "sbt\/Classpaths$.html#deliverTask(config:sbt.TaskKey[sbt.librarymanagement.PublishConfiguration]):sbt.Def.Initialize[sbt.Task[java.io.File]]", "kind" : "def"}, {"label" : "classifiersModuleTask", "tail" : "(): Def.Initialize[Task[GetClassifiersModule]]", "member" : "sbt.Classpaths.classifiersModuleTask", "link" : "sbt\/Classpaths$.html#classifiersModuleTask:sbt.Def.Initialize[sbt.Task[sbt.librarymanagement.GetClassifiersModule]]", "kind" : "def"}, {"label" : "sbtClassifiersTasks", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.Classpaths.sbtClassifiersTasks", "link" : "sbt\/Classpaths$.html#sbtClassifiersTasks:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "moduleSettings0", "tail" : "(): Def.Initialize[Task[ModuleSettings]]", "member" : "sbt.Classpaths.moduleSettings0", "link" : "sbt\/Classpaths$.html#moduleSettings0:sbt.Def.Initialize[sbt.Task[sbt.librarymanagement.ModuleSettings]]", "kind" : "def"}, {"label" : "pluginProjectID", "tail" : "(): Def.Initialize[ModuleID]", "member" : "sbt.Classpaths.pluginProjectID", "link" : "sbt\/Classpaths$.html#pluginProjectID:sbt.Def.Initialize[sbt.librarymanagement.ModuleID]", "kind" : "def"}, {"label" : "warnResolversConflict", "tail" : "(ress: Seq[Resolver], log: Logger): Unit", "member" : "sbt.Classpaths.warnResolversConflict", "link" : "sbt\/Classpaths$.html#warnResolversConflict(ress:Seq[sbt.librarymanagement.Resolver],log:sbt.util.Logger):Unit", "kind" : "def"}, {"label" : "jvmBaseSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Classpaths.jvmBaseSettings", "link" : "sbt\/Classpaths$.html#jvmBaseSettings:Seq[sbt.Def.Setting[_]]", "kind" : "val"}, {"label" : "ivyBaseSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Classpaths.ivyBaseSettings", "link" : "sbt\/Classpaths$.html#ivyBaseSettings:Seq[sbt.Def.Setting[_]]", "kind" : "val"}, {"label" : "ivyPublishSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Classpaths.ivyPublishSettings", "link" : "sbt\/Classpaths$.html#ivyPublishSettings:Seq[sbt.Def.Setting[_]]", "kind" : "val"}, {"label" : "jvmPublishSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Classpaths.jvmPublishSettings", "link" : "sbt\/Classpaths$.html#jvmPublishSettings:Seq[sbt.Def.Setting[_]]", "kind" : "val"}, {"label" : "forallIn", "tail" : "(key: ScopingSetting[SettingKey[T]], pkgTasks: Seq[TaskKey[_]]): Def.Initialize[Seq[T]]", "member" : "sbt.Classpaths.forallIn", "link" : "sbt\/Classpaths$.html#forallIn[T](key:sbt.Scoped.ScopingSetting[sbt.SettingKey[T]],pkgTasks:Seq[sbt.TaskKey[_]]):sbt.Def.Initialize[Seq[T]]", "kind" : "def"}, {"label" : "enabledOnly", "tail" : "(key: SettingKey[T], pkgTasks: Seq[TaskKey[File]]): Def.Initialize[Seq[T]]", "member" : "sbt.Classpaths.enabledOnly", "link" : "sbt\/Classpaths$.html#enabledOnly[T](key:sbt.SettingKey[T],pkgTasks:Seq[sbt.TaskKey[java.io.File]]):sbt.Def.Initialize[Seq[T]]", "kind" : "def"}, {"label" : "artifactDefs", "tail" : "(pkgTasks: Seq[TaskKey[File]]): Def.Initialize[Seq[Artifact]]", "member" : "sbt.Classpaths.artifactDefs", "link" : "sbt\/Classpaths$.html#artifactDefs(pkgTasks:Seq[sbt.TaskKey[java.io.File]]):sbt.Def.Initialize[Seq[sbt.librarymanagement.Artifact]]", "kind" : "def"}, {"label" : "packaged", "tail" : "(pkgTasks: Seq[TaskKey[File]]): Def.Initialize[Task[Map[Artifact, File]]]", "member" : "sbt.Classpaths.packaged", "link" : "sbt\/Classpaths$.html#packaged(pkgTasks:Seq[sbt.TaskKey[java.io.File]]):sbt.Def.Initialize[sbt.Task[Map[sbt.librarymanagement.Artifact,java.io.File]]]", "kind" : "def"}, {"label" : "findClasspathConfig", "tail" : "(map: (Configuration) ⇒ Configuration, thisConfig: Configuration, delegated: Option[Configuration], report: UpdateReport): Configuration", "member" : "sbt.Classpaths.findClasspathConfig", "link" : "sbt\/Classpaths$.html#findClasspathConfig(map:sbt.librarymanagement.Configuration=>sbt.librarymanagement.Configuration,thisConfig:sbt.librarymanagement.Configuration,delegated:Option[sbt.librarymanagement.Configuration],report:sbt.librarymanagement.UpdateReport):sbt.librarymanagement.Configuration", "kind" : "def"}, {"label" : "defaultArtifactTasks", "tail" : ": Seq[TaskKey[File]]", "member" : "sbt.Classpaths.defaultArtifactTasks", "link" : "sbt\/Classpaths$.html#defaultArtifactTasks:Seq[sbt.TaskKey[java.io.File]]", "kind" : "lazy val"}, {"label" : "defaultPackages", "tail" : ": Seq[TaskKey[File]]", "member" : "sbt.Classpaths.defaultPackages", "link" : "sbt\/Classpaths$.html#defaultPackages:Seq[sbt.TaskKey[java.io.File]]", "kind" : "lazy val"}, {"label" : "defaultPackageKeys", "tail" : "(): Seq[TaskKey[File]]", "member" : "sbt.Classpaths.defaultPackageKeys", "link" : "sbt\/Classpaths$.html#defaultPackageKeys:Seq[sbt.TaskKey[java.io.File]]", "kind" : "def"}, {"label" : "configSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Classpaths.configSettings", "link" : "sbt\/Classpaths$.html#configSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "concatSettings", "tail" : "(a: SettingKey[Seq[T]], b: SettingKey[Seq[T]]): Def.Initialize[Seq[T]]", "member" : "sbt.Classpaths.concatSettings", "link" : "sbt\/Classpaths$.html#concatSettings[T](a:sbt.SettingKey[Seq[T]],b:sbt.SettingKey[Seq[T]]):sbt.Def.Initialize[Seq[T]]", "kind" : "def"}, {"label" : "concat", "tail" : "(a: ScopedTaskable[Seq[T]], b: ScopedTaskable[Seq[T]]): Def.Initialize[Task[Seq[T]]]", "member" : "sbt.Classpaths.concat", "link" : "sbt\/Classpaths$.html#concat[T](a:sbt.ScopedTaskable[Seq[T]],b:sbt.ScopedTaskable[Seq[T]]):sbt.Def.Initialize[sbt.Task[Seq[T]]]", "kind" : "def"}, {"label" : "concatDistinct", "tail" : "(a: ScopedTaskable[Seq[T]], b: ScopedTaskable[Seq[T]]): Def.Initialize[Task[Seq[T]]]", "member" : "sbt.Classpaths.concatDistinct", "link" : "sbt\/Classpaths$.html#concatDistinct[T](a:sbt.ScopedTaskable[Seq[T]],b:sbt.ScopedTaskable[Seq[T]]):sbt.Def.Initialize[sbt.Task[Seq[T]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Classpaths$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Classpaths$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Classpaths$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Classpaths$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Classpaths$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Classpaths$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Classpaths$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Classpaths$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Classpaths$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Classpaths$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Classpaths$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Classpaths$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Classpaths$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Classpaths$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Classpaths$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Classpaths$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Classpaths$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Classpaths$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Classpaths$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.Command", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Command.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Command.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Command.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Command.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Command.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Command.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Command.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Command.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Command.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Command.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Command.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Command.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Command.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Command.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Command.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Command.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Command.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Command.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Command.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tag", "tail" : "(key: AttributeKey[T], value: T): Command", "member" : "sbt.Command.tag", "link" : "sbt\/Command.html#tag[T](key:sbt.internal.util.AttributeKey[T],value:T):sbt.Command", "kind" : "abstract def"}, {"label" : "tags", "tail" : "(): AttributeMap", "member" : "sbt.Command.tags", "link" : "sbt\/Command.html#tags:sbt.internal.util.AttributeMap", "kind" : "abstract def"}, {"label" : "parser", "tail" : "(): (State) ⇒ Parser[() ⇒ State]", "member" : "sbt.Command.parser", "link" : "sbt\/Command.html#parser:sbt.State=>sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "abstract def"}, {"label" : "help", "tail" : "(): (State) ⇒ Help", "member" : "sbt.Command.help", "link" : "sbt\/Command.html#help:sbt.State=>sbt.Help", "kind" : "abstract def"}], "shortDescription" : "An operation that can be executed from the sbt console.", "object" : "sbt\/Command$.html", "members_object" : [{"label" : "spacedC", "tail" : "(name: String, c: Parser[Char]): Parser[String]", "member" : "sbt.Command.spacedC", "link" : "sbt\/Command$.html#spacedC(name:String,c:sbt.internal.util.complete.Parser[Char]):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "spacedAny", "tail" : "(name: String): Parser[String]", "member" : "sbt.Command.spacedAny", "link" : "sbt\/Command$.html#spacedAny(name:String):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "distance", "tail" : "(a: String, b: String): Int", "member" : "sbt.Command.distance", "link" : "sbt\/Command$.html#distance(a:String,b:String):Int", "kind" : "def"}, {"label" : "suggestions", "tail" : "(a: String, bs: Seq[String], maxDistance: Int, maxSuggestions: Int): Seq[String]", "member" : "sbt.Command.suggestions", "link" : "sbt\/Command$.html#suggestions(a:String,bs:Seq[String],maxDistance:Int,maxSuggestions:Int):Seq[String]", "kind" : "def"}, {"label" : "similar", "tail" : "(value: String, allowed: Iterable[String]): String", "member" : "sbt.Command.similar", "link" : "sbt\/Command$.html#similar(value:String,allowed:Iterable[String]):String", "kind" : "def"}, {"label" : "invalidValue", "tail" : "(label: String, allowed: Iterable[String])(value: String): String", "member" : "sbt.Command.invalidValue", "link" : "sbt\/Command$.html#invalidValue(label:String,allowed:Iterable[String])(value:String):String", "kind" : "def"}, {"label" : "simpleParser", "tail" : "(commandMap: Map[String, (State) ⇒ Parser[() ⇒ State]]): (State) ⇒ Parser[() ⇒ State]", "member" : "sbt.Command.simpleParser", "link" : "sbt\/Command$.html#simpleParser(commandMap:Map[String,sbt.State=>sbt.internal.util.complete.Parser[()=>sbt.State]]):sbt.State=>sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "simpleParser", "tail" : "(cmds: Seq[SimpleCommand]): (State) ⇒ Parser[() ⇒ State]", "member" : "sbt.Command.simpleParser", "link" : "sbt\/Command$.html#simpleParser(cmds:Seq[sbt.SimpleCommand]):sbt.State=>sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "combine", "tail" : "(cmds: Seq[Command]): (State) ⇒ Parser[() ⇒ State]", "member" : "sbt.Command.combine", "link" : "sbt\/Command$.html#combine(cmds:Seq[sbt.Command]):sbt.State=>sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "applyEffect", "tail" : "(parser: (State) ⇒ Parser[T])(effect: (State, T) ⇒ State): (State) ⇒ Parser[() ⇒ State]", "member" : "sbt.Command.applyEffect", "link" : "sbt\/Command$.html#applyEffect[T](parser:sbt.State=>sbt.internal.util.complete.Parser[T])(effect:(sbt.State,T)=>sbt.State):sbt.State=>sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "applyEffect", "tail" : "(p: Parser[T])(f: (T) ⇒ State): Parser[() ⇒ State]", "member" : "sbt.Command.applyEffect", "link" : "sbt\/Command$.html#applyEffect[T](p:sbt.internal.util.complete.Parser[T])(f:T=>sbt.State):sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "def"}, {"label" : "validID", "tail" : "(name: String): Boolean", "member" : "sbt.Command.validID", "link" : "sbt\/Command$.html#validID(name:String):Boolean", "kind" : "def"}, {"label" : "arb", "tail" : "(parser: (State) ⇒ Parser[T], help: Help)(effect: (State, T) ⇒ State): Command", "member" : "sbt.Command.arb", "link" : "sbt\/Command$.html#arb[T](parser:sbt.State=>sbt.internal.util.complete.Parser[T],help:sbt.Help)(effect:(sbt.State,T)=>sbt.State):sbt.Command", "kind" : "def"}, {"label" : "custom", "tail" : "(parser: (State) ⇒ Parser[() ⇒ State], help: Help): Command", "member" : "sbt.Command.custom", "link" : "sbt\/Command$.html#custom(parser:sbt.State=>sbt.internal.util.complete.Parser[()=>sbt.State],help:sbt.Help):sbt.Command", "kind" : "def"}, {"label" : "customHelp", "tail" : "(parser: (State) ⇒ Parser[() ⇒ State], help: (State) ⇒ Help): Command", "member" : "sbt.Command.customHelp", "link" : "sbt\/Command$.html#customHelp(parser:sbt.State=>sbt.internal.util.complete.Parser[()=>sbt.State],help:sbt.State=>sbt.Help):sbt.Command", "kind" : "def"}, {"label" : "args", "tail" : "(name: String, briefHelp: (String, String), detail: String, display: String)(f: (State, Seq[String]) ⇒ State): Command", "member" : "sbt.Command.args", "link" : "sbt\/Command$.html#args(name:String,briefHelp:(String,String),detail:String,display:String)(f:(sbt.State,Seq[String])=>sbt.State):sbt.Command", "kind" : "def"}, {"label" : "args", "tail" : "(name: String, display: String, help: Help)(f: (State, Seq[String]) ⇒ State): Command", "member" : "sbt.Command.args", "link" : "sbt\/Command$.html#args(name:String,display:String,help:sbt.Help)(f:(sbt.State,Seq[String])=>sbt.State):sbt.Command", "kind" : "def"}, {"label" : "single", "tail" : "(name: String, briefHelp: (String, String), detail: String)(f: (State, String) ⇒ State): Command", "member" : "sbt.Command.single", "link" : "sbt\/Command$.html#single(name:String,briefHelp:(String,String),detail:String)(f:(sbt.State,String)=>sbt.State):sbt.Command", "kind" : "def"}, {"label" : "single", "tail" : "(name: String, help: Help)(f: (State, String) ⇒ State): Command", "member" : "sbt.Command.single", "link" : "sbt\/Command$.html#single(name:String,help:sbt.Help)(f:(sbt.State,String)=>sbt.State):sbt.Command", "kind" : "def"}, {"label" : "command", "tail" : "(name: String, briefHelp: String, detail: String)(f: (State) ⇒ State): Command", "member" : "sbt.Command.command", "link" : "sbt\/Command$.html#command(name:String,briefHelp:String,detail:String)(f:sbt.State=>sbt.State):sbt.Command", "kind" : "def"}, {"label" : "command", "tail" : "(name: String, help: Help)(f: (State) ⇒ State): Command", "member" : "sbt.Command.command", "link" : "sbt\/Command$.html#command(name:String,help:sbt.Help)(f:sbt.State=>sbt.State):sbt.Command", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String, briefHelp: (String, String), detail: String)(parser: (State) ⇒ Parser[T])(effect: (State, T) ⇒ State): Command", "member" : "sbt.Command.apply", "link" : "sbt\/Command$.html#apply[T](name:String,briefHelp:(String,String),detail:String)(parser:sbt.State=>sbt.internal.util.complete.Parser[T])(effect:(sbt.State,T)=>sbt.State):sbt.Command", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String, help: Help)(parser: (State) ⇒ Parser[T])(effect: (State, T) ⇒ State): Command", "member" : "sbt.Command.apply", "link" : "sbt\/Command$.html#apply[T](name:String,help:sbt.Help)(parser:sbt.State=>sbt.internal.util.complete.Parser[T])(effect:(sbt.State,T)=>sbt.State):sbt.Command", "kind" : "def"}, {"label" : "make", "tail" : "(name: String, briefHelp: (String, String), detail: String)(parser: (State) ⇒ Parser[() ⇒ State]): Command", "member" : "sbt.Command.make", "link" : "sbt\/Command$.html#make(name:String,briefHelp:(String,String),detail:String)(parser:sbt.State=>sbt.internal.util.complete.Parser[()=>sbt.State]):sbt.Command", "kind" : "def"}, {"label" : "make", "tail" : "(name: String, help: Help)(parser: (State) ⇒ Parser[() ⇒ State]): Command", "member" : "sbt.Command.make", "link" : "sbt\/Command$.html#make(name:String,help:sbt.Help)(parser:sbt.State=>sbt.internal.util.complete.Parser[()=>sbt.State]):sbt.Command", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Command$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Command$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Command$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Command$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Command$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Command$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Command$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Command$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Command$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Command$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Command$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Command$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Command$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Command$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Command$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Command$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Command$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Command$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Command$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/Command.html", "kind" : "trait"}, {"name" : "sbt.CommandDefinitions", "members_trait" : [{"label" : "apply", "tail" : "(s: State): State", "member" : "sbt.CommandDefinitions.apply", "link" : "sbt\/CommandDefinitions.html#apply(s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "commands", "tail" : "(): Seq[Command]", "member" : "sbt.CommandDefinitions.commands", "link" : "sbt\/CommandDefinitions.html#commands:Seq[sbt.Command]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "sbt\/CommandDefinitions.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (State) ⇒ A): (State) ⇒ A", "member" : "scala.Function1.andThen", "link" : "sbt\/CommandDefinitions.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ State): (A) ⇒ State", "member" : "scala.Function1.compose", "link" : "sbt\/CommandDefinitions.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/CommandDefinitions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/CommandDefinitions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/CommandDefinitions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/CommandDefinitions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/CommandDefinitions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/CommandDefinitions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/CommandDefinitions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandDefinitions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandDefinitions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandDefinitions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/CommandDefinitions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/CommandDefinitions.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/CommandDefinitions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/CommandDefinitions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/CommandDefinitions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/CommandDefinitions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/CommandDefinitions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/CommandDefinitions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/CommandDefinitions.html", "kind" : "trait"}, {"name" : "sbt.CommandLineUIService", "members_trait" : [{"label" : "terminalHeight", "tail" : "(): Int", "member" : "sbt.CommandLineUIService.terminalHeight", "link" : "sbt\/CommandLineUIService.html#terminalHeight:Int", "kind" : "def"}, {"label" : "terminalWidth", "tail" : "(): Int", "member" : "sbt.CommandLineUIService.terminalWidth", "link" : "sbt\/CommandLineUIService.html#terminalWidth:Int", "kind" : "def"}, {"label" : "confirm", "tail" : "(msg: String): Boolean", "member" : "sbt.CommandLineUIService.confirm", "link" : "sbt\/CommandLineUIService.html#confirm(msg:String):Boolean", "kind" : "def"}, {"label" : "readLine", "tail" : "(prompt: String, mask: Boolean): Option[String]", "member" : "sbt.CommandLineUIService.readLine", "link" : "sbt\/CommandLineUIService.html#readLine(prompt:String,mask:Boolean):Option[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/CommandLineUIService.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/CommandLineUIService.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/CommandLineUIService.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/CommandLineUIService.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/CommandLineUIService.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/CommandLineUIService.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/CommandLineUIService.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandLineUIService.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandLineUIService.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandLineUIService.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/CommandLineUIService.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/CommandLineUIService.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/CommandLineUIService.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/CommandLineUIService.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/CommandLineUIService.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/CommandLineUIService.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/CommandLineUIService.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/CommandLineUIService.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/CommandLineUIService.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/CommandLineUIService$.html", "members_object" : [{"label" : "terminalHeight", "tail" : "(): Int", "member" : "sbt.CommandLineUIService.terminalHeight", "link" : "sbt\/CommandLineUIService$.html#terminalHeight:Int", "kind" : "def"}, {"label" : "terminalWidth", "tail" : "(): Int", "member" : "sbt.CommandLineUIService.terminalWidth", "link" : "sbt\/CommandLineUIService$.html#terminalWidth:Int", "kind" : "def"}, {"label" : "confirm", "tail" : "(msg: String): Boolean", "member" : "sbt.CommandLineUIService.confirm", "link" : "sbt\/CommandLineUIService$.html#confirm(msg:String):Boolean", "kind" : "def"}, {"label" : "readLine", "tail" : "(prompt: String, mask: Boolean): Option[String]", "member" : "sbt.CommandLineUIService.readLine", "link" : "sbt\/CommandLineUIService$.html#readLine(prompt:String,mask:Boolean):Option[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/CommandLineUIService$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/CommandLineUIService$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/CommandLineUIService$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/CommandLineUIService$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/CommandLineUIService$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/CommandLineUIService$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/CommandLineUIService$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandLineUIService$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandLineUIService$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandLineUIService$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/CommandLineUIService$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/CommandLineUIService$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/CommandLineUIService$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/CommandLineUIService$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/CommandLineUIService$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/CommandLineUIService$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/CommandLineUIService$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/CommandLineUIService$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/CommandLineUIService$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/CommandLineUIService.html", "kind" : "trait"}, {"name" : "sbt.CommandSource", "shortDescription" : "", "object" : "sbt\/CommandSource$.html", "members_class" : [{"label" : "withChannelName", "tail" : "(channelName: String): CommandSource", "member" : "sbt.CommandSource.withChannelName", "link" : "sbt\/CommandSource.html#withChannelName(channelName:String):sbt.CommandSource", "kind" : "def"}, {"label" : "copy", "tail" : "(channelName: String): CommandSource", "member" : "sbt.CommandSource.copy", "link" : "sbt\/CommandSource.html#copy(channelName:String):sbt.CommandSource", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.CommandSource.toString", "link" : "sbt\/CommandSource.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.CommandSource.hashCode", "link" : "sbt\/CommandSource.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.CommandSource.equals", "link" : "sbt\/CommandSource.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "channelName", "tail" : ": String", "member" : "sbt.CommandSource.channelName", "link" : "sbt\/CommandSource.html#channelName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/CommandSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/CommandSource.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/CommandSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/CommandSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/CommandSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/CommandSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/CommandSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandSource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/CommandSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/CommandSource.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/CommandSource.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/CommandSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/CommandSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/CommandSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(channelName: String): CommandSource", "member" : "sbt.CommandSource.apply", "link" : "sbt\/CommandSource$.html#apply(channelName:String):sbt.CommandSource", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/CommandSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/CommandSource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/CommandSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/CommandSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/CommandSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/CommandSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/CommandSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/CommandSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/CommandSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/CommandSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/CommandSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/CommandSource$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/CommandSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/CommandSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/CommandSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/CommandSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/CommandSource.html", "kind" : "class"}, {"name" : "sbt.CommandUtil", "shortDescription" : "", "object" : "sbt\/CommandUtil$.html", "members_object" : [{"label" : "HelpPatternFlags", "tail" : ": Int", "member" : "sbt.CommandUtil.HelpPatternFlags", "link" : "sbt\/CommandUtil$.html#HelpPatternFlags:Int", "kind" : "final val"}, {"label" : "layoutDetails", "tail" : "(details: Map[String, String]): String", "member" : "sbt.CommandUtil.layoutDetails", "link" : "sbt\/CommandUtil$.html#layoutDetails(details:Map[String,String]):String", "kind" : "def"}, {"label" : "searchHelp", "tail" : "(selected: String, detailMap: Map[String, String]): Map[String, String]", "member" : "sbt.CommandUtil.searchHelp", "link" : "sbt\/CommandUtil$.html#searchHelp(selected:String,detailMap:Map[String,String]):Map[String,String]", "kind" : "def"}, {"label" : "detail", "tail" : "(selected: String, detailMap: Map[String, String]): String", "member" : "sbt.CommandUtil.detail", "link" : "sbt\/CommandUtil$.html#detail(selected:String,detailMap:Map[String,String]):String", "kind" : "def"}, {"label" : "singleArgument", "tail" : "(exampleStrings: Set[String]): Parser[String]", "member" : "sbt.CommandUtil.singleArgument", "link" : "sbt\/CommandUtil$.html#singleArgument(exampleStrings:Set[String]):sbt.internal.util.complete.Parser[String]", "kind" : "def"}, {"label" : "withAttribute", "tail" : "(s: State, key: AttributeKey[T], ifMissing: String)(f: (T) ⇒ State): State", "member" : "sbt.CommandUtil.withAttribute", "link" : "sbt\/CommandUtil$.html#withAttribute[T](s:sbt.State,key:sbt.internal.util.AttributeKey[T],ifMissing:String)(f:T=>sbt.State):sbt.State", "kind" : "def"}, {"label" : "fill", "tail" : "(s: String, size: Int): String", "member" : "sbt.CommandUtil.fill", "link" : "sbt\/CommandUtil$.html#fill(s:String,size:Int):String", "kind" : "def"}, {"label" : "aligned", "tail" : "(pre: String, sep: String, in: Seq[(String, String)]): Seq[String]", "member" : "sbt.CommandUtil.aligned", "link" : "sbt\/CommandUtil$.html#aligned(pre:String,sep:String,in:Seq[(String,String)]):Seq[String]", "kind" : "def"}, {"label" : "bootDirectory", "tail" : "(state: State): File", "member" : "sbt.CommandUtil.bootDirectory", "link" : "sbt\/CommandUtil$.html#bootDirectory(state:sbt.State):java.io.File", "kind" : "def"}, {"label" : "readable", "tail" : "(files: Seq[File]): Seq[File]", "member" : "sbt.CommandUtil.readable", "link" : "sbt\/CommandUtil$.html#readable(files:Seq[java.io.File]):Seq[java.io.File]", "kind" : "def"}, {"label" : "notReadable", "tail" : "(files: Seq[File]): Seq[File]", "member" : "sbt.CommandUtil.notReadable", "link" : "sbt\/CommandUtil$.html#notReadable(files:Seq[java.io.File]):Seq[java.io.File]", "kind" : "def"}, {"label" : "ignoreLine", "tail" : "(s: String): Boolean", "member" : "sbt.CommandUtil.ignoreLine", "link" : "sbt\/CommandUtil$.html#ignoreLine(s:String):Boolean", "kind" : "def"}, {"label" : "processLine", "tail" : "(s: String): Option[String]", "member" : "sbt.CommandUtil.processLine", "link" : "sbt\/CommandUtil$.html#processLine(s:String):Option[String]", "kind" : "def"}, {"label" : "readLines", "tail" : "(files: Seq[File]): Seq[String]", "member" : "sbt.CommandUtil.readLines", "link" : "sbt\/CommandUtil$.html#readLines(files:Seq[java.io.File]):Seq[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/CommandUtil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/CommandUtil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/CommandUtil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/CommandUtil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/CommandUtil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/CommandUtil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/CommandUtil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandUtil$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandUtil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CommandUtil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/CommandUtil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/CommandUtil$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/CommandUtil$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/CommandUtil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/CommandUtil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/CommandUtil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/CommandUtil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/CommandUtil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/CommandUtil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.Completed", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Completed.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Completed.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Completed.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Completed.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Completed.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Completed.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Completed.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Completed.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Completed.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Completed.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Completed.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Completed.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Completed.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Completed.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Completed.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Completed.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Completed.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Completed.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Completed.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "process", "tail" : "(): Unit", "member" : "sbt.Completed.process", "link" : "sbt\/Completed.html#process():Unit", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/Completed.html", "kind" : "trait"}, {"name" : "sbt.CompletionService", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/CompletionService.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/CompletionService.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/CompletionService.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/CompletionService.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/CompletionService.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/CompletionService.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/CompletionService.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CompletionService.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CompletionService.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CompletionService.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/CompletionService.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/CompletionService.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/CompletionService.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/CompletionService.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/CompletionService.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/CompletionService.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/CompletionService.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/CompletionService.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/CompletionService.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "take", "tail" : "(): R", "member" : "sbt.CompletionService.take", "link" : "sbt\/CompletionService.html#take():R", "kind" : "abstract def"}, {"label" : "submit", "tail" : "(node: A, work: () ⇒ R): Unit", "member" : "sbt.CompletionService.submit", "link" : "sbt\/CompletionService.html#submit(node:A,work:()=>R):Unit", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/CompletionService$.html", "members_object" : [{"label" : "wrap", "tail" : "(service: CompletionService[A, T])(w: (A, () ⇒ T) ⇒ () ⇒ T): CompletionService[A, T]", "member" : "sbt.CompletionService.wrap", "link" : "sbt\/CompletionService$.html#wrap[A,T](service:sbt.CompletionService[A,T])(w:(A,()=>T)=>()=>T):sbt.CompletionService[A,T]", "kind" : "def"}, {"label" : "manage", "tail" : "(service: CompletionService[A, T])(setup: (A) ⇒ Unit, cleanup: (A) ⇒ Unit): CompletionService[A, T]", "member" : "sbt.CompletionService.manage", "link" : "sbt\/CompletionService$.html#manage[A,T](service:sbt.CompletionService[A,T])(setup:A=>Unit,cleanup:A=>Unit):sbt.CompletionService[A,T]", "kind" : "def"}, {"label" : "submit", "tail" : "(work: () ⇒ T, completion: java.util.concurrent.CompletionService[T]): () ⇒ T", "member" : "sbt.CompletionService.submit", "link" : "sbt\/CompletionService$.html#submit[T](work:()=>T,completion:java.util.concurrent.CompletionService[T]):()=>T", "kind" : "def"}, {"label" : "apply", "tail" : "(completion: java.util.concurrent.CompletionService[T]): CompletionService[A, T]", "member" : "sbt.CompletionService.apply", "link" : "sbt\/CompletionService$.html#apply[A,T](completion:java.util.concurrent.CompletionService[T]):sbt.CompletionService[A,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(x: Executor): CompletionService[A, T]", "member" : "sbt.CompletionService.apply", "link" : "sbt\/CompletionService$.html#apply[A,T](x:java.util.concurrent.Executor):sbt.CompletionService[A,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(poolSize: Int): (CompletionService[A, T], () ⇒ Unit)", "member" : "sbt.CompletionService.apply", "link" : "sbt\/CompletionService$.html#apply[A,T](poolSize:Int):(sbt.CompletionService[A,T],()=>Unit)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/CompletionService$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/CompletionService$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/CompletionService$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/CompletionService$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/CompletionService$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/CompletionService$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/CompletionService$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CompletionService$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CompletionService$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/CompletionService$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/CompletionService$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/CompletionService$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/CompletionService$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/CompletionService$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/CompletionService$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/CompletionService$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/CompletionService$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/CompletionService$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/CompletionService$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/CompletionService.html", "kind" : "trait"}, {"name" : "sbt.ConcurrentRestrictions", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ConcurrentRestrictions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ConcurrentRestrictions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ConcurrentRestrictions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ConcurrentRestrictions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ConcurrentRestrictions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ConcurrentRestrictions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ConcurrentRestrictions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConcurrentRestrictions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConcurrentRestrictions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConcurrentRestrictions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ConcurrentRestrictions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ConcurrentRestrictions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ConcurrentRestrictions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ConcurrentRestrictions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ConcurrentRestrictions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ConcurrentRestrictions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ConcurrentRestrictions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ConcurrentRestrictions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ConcurrentRestrictions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "valid", "tail" : "(g: G): Boolean", "member" : "sbt.ConcurrentRestrictions.valid", "link" : "sbt\/ConcurrentRestrictions.html#valid(g:ConcurrentRestrictions.this.G):Boolean", "kind" : "abstract def"}, {"label" : "remove", "tail" : "(g: G, a: A): G", "member" : "sbt.ConcurrentRestrictions.remove", "link" : "sbt\/ConcurrentRestrictions.html#remove(g:ConcurrentRestrictions.this.G,a:A):ConcurrentRestrictions.this.G", "kind" : "abstract def"}, {"label" : "add", "tail" : "(g: G, a: A): G", "member" : "sbt.ConcurrentRestrictions.add", "link" : "sbt\/ConcurrentRestrictions.html#add(g:ConcurrentRestrictions.this.G,a:A):ConcurrentRestrictions.this.G", "kind" : "abstract def"}, {"label" : "empty", "tail" : "(): G", "member" : "sbt.ConcurrentRestrictions.empty", "link" : "sbt\/ConcurrentRestrictions.html#empty:ConcurrentRestrictions.this.G", "kind" : "abstract def"}, {"member" : "sbt.ConcurrentRestrictions.G", "error" : "unsupported entity"}], "shortDescription" : "Describes restrictions on concurrent execution for a set of tasks.", "object" : "sbt\/ConcurrentRestrictions$.html", "members_object" : [{"label" : "completionService", "tail" : "(backing: Executor, tags: ConcurrentRestrictions[A], warn: (String) ⇒ Unit): CompletionService[A, R]", "member" : "sbt.ConcurrentRestrictions.completionService", "link" : "sbt\/ConcurrentRestrictions$.html#completionService[A,R](backing:java.util.concurrent.Executor,tags:sbt.ConcurrentRestrictions[A],warn:String=>Unit):sbt.CompletionService[A,R]", "kind" : "def"}, {"label" : "completionService", "tail" : "(tags: ConcurrentRestrictions[A], warn: (String) ⇒ Unit): (CompletionService[A, R], () ⇒ Unit)", "member" : "sbt.ConcurrentRestrictions.completionService", "link" : "sbt\/ConcurrentRestrictions$.html#completionService[A,R](tags:sbt.ConcurrentRestrictions[A],warn:String=>Unit):(sbt.CompletionService[A,R],()=>Unit)", "kind" : "def"}, {"label" : "tagged", "tail" : "(get: (A) ⇒ TagMap, validF: (TagMap) ⇒ Boolean): ConcurrentRestrictions[A]", "member" : "sbt.ConcurrentRestrictions.tagged", "link" : "sbt\/ConcurrentRestrictions$.html#tagged[A](get:A=>sbt.ConcurrentRestrictions.TagMap,validF:sbt.ConcurrentRestrictions.TagMap=>Boolean):sbt.ConcurrentRestrictions[A]", "kind" : "def"}, {"label" : "TagMap", "tail" : "", "member" : "sbt.ConcurrentRestrictions.TagMap", "link" : "sbt\/ConcurrentRestrictions$.html#TagMap=Map[sbt.ConcurrentRestrictions.Tag,Int]", "kind" : "type"}, {"label" : "All", "tail" : ": Tag", "member" : "sbt.ConcurrentRestrictions.All", "link" : "sbt\/ConcurrentRestrictions$.html#All:sbt.ConcurrentRestrictions.Tag", "kind" : "val"}, {"label" : "Untagged", "tail" : ": Tag", "member" : "sbt.ConcurrentRestrictions.Untagged", "link" : "sbt\/ConcurrentRestrictions$.html#Untagged:sbt.ConcurrentRestrictions.Tag", "kind" : "val"}, {"label" : "tagsKey", "tail" : ": AttributeKey[TagMap]", "member" : "sbt.ConcurrentRestrictions.tagsKey", "link" : "sbt\/ConcurrentRestrictions$.html#tagsKey:sbt.internal.util.AttributeKey[sbt.ConcurrentRestrictions.TagMap]", "kind" : "val"}, {"label" : "Tag", "tail" : "", "member" : "sbt.ConcurrentRestrictions.Tag", "link" : "sbt\/ConcurrentRestrictions$.html#TagextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "limitTotal", "tail" : "(i: Int): ConcurrentRestrictions[A]", "member" : "sbt.ConcurrentRestrictions.limitTotal", "link" : "sbt\/ConcurrentRestrictions$.html#limitTotal[A](i:Int):sbt.ConcurrentRestrictions[A]", "kind" : "def"}, {"label" : "unrestricted", "tail" : "(): ConcurrentRestrictions[A]", "member" : "sbt.ConcurrentRestrictions.unrestricted", "link" : "sbt\/ConcurrentRestrictions$.html#unrestricted[A]:sbt.ConcurrentRestrictions[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ConcurrentRestrictions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ConcurrentRestrictions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ConcurrentRestrictions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ConcurrentRestrictions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ConcurrentRestrictions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ConcurrentRestrictions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ConcurrentRestrictions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConcurrentRestrictions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConcurrentRestrictions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConcurrentRestrictions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ConcurrentRestrictions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ConcurrentRestrictions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ConcurrentRestrictions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ConcurrentRestrictions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ConcurrentRestrictions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ConcurrentRestrictions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ConcurrentRestrictions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ConcurrentRestrictions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ConcurrentRestrictions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/ConcurrentRestrictions.html", "kind" : "trait"}, {"name" : "sbt.ConfigKey", "shortDescription" : "", "object" : "sbt\/ConfigKey$.html", "members_object" : [{"label" : "configurationToKey", "tail" : "(c: Configuration): ConfigKey", "member" : "sbt.ConfigKey.configurationToKey", "link" : "sbt\/ConfigKey$.html#configurationToKey(c:sbt.librarymanagement.Configuration):sbt.ConfigKey", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ConfigKey$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ConfigKey$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ConfigKey$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ConfigKey$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ConfigKey$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ConfigKey$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ConfigKey$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConfigKey$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConfigKey$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConfigKey$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ConfigKey$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ConfigKey$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ConfigKey$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ConfigKey$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ConfigKey$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ConfigKey$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ConfigKey$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ConfigKey$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ConfigKey$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "sbt.ConfigKey#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "sbt.ConfigKey.name", "link" : "sbt\/ConfigKey.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ConfigKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ConfigKey.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ConfigKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ConfigKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ConfigKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ConfigKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ConfigKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConfigKey.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConfigKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConfigKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ConfigKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ConfigKey.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ConfigKey.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ConfigKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ConfigKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ConfigKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/ConfigKey.html", "kind" : "case class"}, {"name" : "sbt.Console", "shortDescription" : "", "object" : "sbt\/Console$.html", "members_class" : [{"label" : "apply", "tail" : "(classpath: Seq[File], options: Seq[String], initialCommands: String, cleanupCommands: String)(loader: Option[ClassLoader], bindings: Seq[(String, Any)])(log: Logger): Try[Unit]", "member" : "sbt.Console.apply", "link" : "sbt\/Console.html#apply(classpath:Seq[java.io.File],options:Seq[String],initialCommands:String,cleanupCommands:String)(loader:Option[ClassLoader],bindings:Seq[(String,Any)])(implicitlog:sbt.util.Logger):scala.util.Try[Unit]", "kind" : "def"}, {"label" : "apply", "tail" : "(classpath: Seq[File], options: Seq[String], loader: ClassLoader, initialCommands: String, cleanupCommands: String)(bindings: (String, Any)*)(log: Logger): Try[Unit]", "member" : "sbt.Console.apply", "link" : "sbt\/Console.html#apply(classpath:Seq[java.io.File],options:Seq[String],loader:ClassLoader,initialCommands:String,cleanupCommands:String)(bindings:(String,Any)*)(implicitlog:sbt.util.Logger):scala.util.Try[Unit]", "kind" : "def"}, {"label" : "apply", "tail" : "(classpath: Seq[File], options: Seq[String], initialCommands: String, cleanupCommands: String, log: Logger): Try[Unit]", "member" : "sbt.Console.apply", "link" : "sbt\/Console.html#apply(classpath:Seq[java.io.File],options:Seq[String],initialCommands:String,cleanupCommands:String,log:sbt.util.Logger):scala.util.Try[Unit]", "kind" : "def"}, {"label" : "apply", "tail" : "(classpath: Seq[File], log: Logger): Try[Unit]", "member" : "sbt.Console.apply", "link" : "sbt\/Console.html#apply(classpath:Seq[java.io.File],log:sbt.util.Logger):scala.util.Try[Unit]", "kind" : "def"}, {"member" : "sbt.Console#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Console.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Console.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Console.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Console.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Console.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Console.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Console.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Console.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Console.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Console.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Console.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Console.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Console.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Console.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Console.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Console.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Console.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Console.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Console.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(conf: Inputs): Console", "member" : "sbt.Console.apply", "link" : "sbt\/Console$.html#apply(conf:xsbti.compile.Inputs):sbt.Console", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Console$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Console$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Console$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Console$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Console$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Console$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Console$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Console$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Console$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Console$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Console$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Console$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Console$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Console$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Console$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Console$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Console$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Console$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Console$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/Console.html", "kind" : "class"}, {"name" : "sbt.ConsoleMain", "shortDescription" : "", "members_class" : [{"label" : "run", "tail" : "(configuration: AppConfiguration): MainResult", "member" : "sbt.ConsoleMain.run", "link" : "sbt\/ConsoleMain.html#run(configuration:xsbti.AppConfiguration):xsbti.MainResult", "kind" : "def"}, {"member" : "sbt.ConsoleMain#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ConsoleMain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ConsoleMain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ConsoleMain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ConsoleMain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ConsoleMain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ConsoleMain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ConsoleMain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConsoleMain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConsoleMain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ConsoleMain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ConsoleMain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ConsoleMain.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ConsoleMain.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ConsoleMain.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ConsoleMain.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ConsoleMain.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ConsoleMain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ConsoleMain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ConsoleMain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/ConsoleMain.html", "kind" : "class"}, {"name" : "sbt.ContentLogger", "shortDescription" : "", "members_class" : [{"member" : "sbt.ContentLogger#<init>", "error" : "unsupported entity"}, {"label" : "flush", "tail" : ": () ⇒ Unit", "member" : "sbt.ContentLogger.flush", "link" : "sbt\/ContentLogger.html#flush:()=>Unit", "kind" : "val"}, {"label" : "log", "tail" : ": Logger", "member" : "sbt.ContentLogger.log", "link" : "sbt\/ContentLogger.html#log:sbt.testing.Logger", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ContentLogger.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ContentLogger.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ContentLogger.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ContentLogger.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ContentLogger.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ContentLogger.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ContentLogger.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ContentLogger.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ContentLogger.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ContentLogger.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ContentLogger.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ContentLogger.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ContentLogger.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ContentLogger.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ContentLogger.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ContentLogger.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ContentLogger.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ContentLogger.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ContentLogger.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/ContentLogger.html", "kind" : "class"}, {"name" : "sbt.Cross", "shortDescription" : "", "object" : "sbt\/Cross$.html", "members_object" : [{"label" : "switchVersion", "tail" : "(): Command", "member" : "sbt.Cross.switchVersion", "link" : "sbt\/Cross$.html#switchVersion:sbt.Command", "kind" : "def"}, {"label" : "crossRestoreSession", "tail" : "(): Command", "member" : "sbt.Cross.crossRestoreSession", "link" : "sbt\/Cross$.html#crossRestoreSession:sbt.Command", "kind" : "def"}, {"label" : "crossBuild", "tail" : "(): Command", "member" : "sbt.Cross.crossBuild", "link" : "sbt\/Cross$.html#crossBuild:sbt.Command", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Cross$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Cross$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Cross$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Cross$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Cross$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Cross$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Cross$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Cross$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Cross$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Cross$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Cross$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Cross$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Cross$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Cross$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Cross$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Cross$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Cross$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Cross$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Cross$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.Def", "shortDescription" : "A concrete settings system that uses sbt.Scope for the scope type.", "object" : "sbt\/Def$.html", "members_object" : [{"label" : "KeyedInitialize", "tail" : "", "member" : "sbt.internal.util.Init.KeyedInitialize", "link" : "sbt\/internal\/util\/Init.html#KeyedInitialize[T]extendsInit.this.Keyed[T,T]", "kind" : "trait"}, {"label" : "Keyed", "tail" : "", "member" : "sbt.internal.util.Init.Keyed", "link" : "sbt\/internal\/util\/Init.html#Keyed[S,T]extendsInit.this.Initialize[T]", "kind" : "sealed trait"}, {"label" : "DefaultSetting", "tail" : "", "member" : "sbt.internal.util.Init.DefaultSetting", "link" : "sbt\/internal\/util\/Init.html#DefaultSetting", "kind" : "object"}, {"label" : "Setting", "tail" : "", "member" : "sbt.internal.util.Init.Setting", "link" : "sbt\/internal\/util\/Init.html#Setting[T]extendsInit.this.SettingsDefinition", "kind" : "sealed class"}, {"label" : "SettingList", "tail" : "", "member" : "sbt.internal.util.Init.SettingList", "link" : "sbt\/internal\/util\/Init.html#SettingListextendsInit.this.SettingsDefinition", "kind" : "final class"}, {"label" : "SettingsDefinition", "tail" : "", "member" : "sbt.internal.util.Init.SettingsDefinition", "link" : "sbt\/internal\/util\/Init.html#SettingsDefinitionextendsAnyRef", "kind" : "sealed trait"}, {"label" : "SettingsDefinition", "tail" : "", "member" : "sbt.internal.util.Init.SettingsDefinition", "link" : "sbt\/internal\/util\/Init.html#SettingsDefinition", "kind" : "object"}, {"label" : "Initialize", "tail" : "", "member" : "sbt.internal.util.Init.Initialize", "link" : "sbt\/internal\/util\/Init.html#Initialize", "kind" : "object"}, {"label" : "Initialize", "tail" : "", "member" : "sbt.internal.util.Init.Initialize", "link" : "sbt\/internal\/util\/Init.html#Initialize[T]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "Flattened", "tail" : "", "member" : "sbt.internal.util.Init.Flattened", "link" : "sbt\/internal\/util\/Init.html#FlattenedextendsAnyRef", "kind" : "final class"}, {"label" : "Compiled", "tail" : "", "member" : "sbt.internal.util.Init.Compiled", "link" : "sbt\/internal\/util\/Init.html#Compiled[T]extendsAnyRef", "kind" : "final class"}, {"label" : "RuntimeUndefined", "tail" : "", "member" : "sbt.internal.util.Init.RuntimeUndefined", "link" : "sbt\/internal\/util\/Init.html#RuntimeUndefinedextendsRuntimeException", "kind" : "final class"}, {"label" : "Undefined", "tail" : "", "member" : "sbt.internal.util.Init.Undefined", "link" : "sbt\/internal\/util\/Init.html#UndefinedextendsAnyRef", "kind" : "final class"}, {"label" : "Uninitialized", "tail" : "", "member" : "sbt.internal.util.Init.Uninitialized", "link" : "sbt\/internal\/util\/Init.html#UninitializedextendsException", "kind" : "final class"}, {"label" : "ScopedKey", "tail" : "", "member" : "sbt.internal.util.Init.ScopedKey", "link" : "sbt\/internal\/util\/Init.html#ScopedKey[T]extendsInit.this.KeyedInitialize[T]withProductwithSerializable", "kind" : "sealed case class"}, {"label" : "inputKey", "tail" : "(description: String): InputKey[T]", "member" : "sbt.Def.inputKey", "link" : "sbt\/Def$.html#inputKey[T](description:String):sbt.InputKey[T]", "kind" : "macro def"}, {"label" : "taskKey", "tail" : "(description: String): TaskKey[T]", "member" : "sbt.Def.taskKey", "link" : "sbt\/Def$.html#taskKey[T](description:String):sbt.TaskKey[T]", "kind" : "macro def"}, {"label" : "settingKey", "tail" : "(description: String): SettingKey[T]", "member" : "sbt.Def.settingKey", "link" : "sbt\/Def$.html#settingKey[T](description:String):sbt.SettingKey[T]", "kind" : "macro def"}, {"label" : "parserInitStateToInput", "tail" : "(p: Initialize[(State) ⇒ Parser[T]]): ParserInput[T]", "member" : "sbt.Def.parserInitStateToInput", "link" : "sbt\/Def$.html#parserInitStateToInput[T](p:sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[T]]):sbt.std.ParserInput[T]", "kind" : "implicit def"}, {"label" : "parserInitToInput", "tail" : "(p: Initialize[Parser[T]]): ParserInput[T]", "member" : "sbt.Def.parserInitToInput", "link" : "sbt\/Def$.html#parserInitToInput[T](p:sbt.Def.Initialize[sbt.internal.util.complete.Parser[T]]):sbt.std.ParserInput[T]", "kind" : "implicit def"}, {"label" : "macroPrevious", "tail" : "(in: TaskKey[T]): MacroPrevious[T]", "member" : "sbt.Def.macroPrevious", "link" : "sbt\/Def$.html#macroPrevious[T](in:sbt.TaskKey[T]):sbt.std.MacroPrevious[T]", "kind" : "implicit def"}, {"label" : "taskMacroValueIT", "tail" : "(in: Initialize[Task[T]]): MacroTaskValue[T]", "member" : "sbt.Def.taskMacroValueIT", "link" : "sbt\/Def$.html#taskMacroValueIT[T](in:sbt.Def.Initialize[sbt.Task[T]]):sbt.std.MacroTaskValue[T]", "kind" : "implicit def"}, {"label" : "macroValueIInT", "tail" : "(in: Initialize[InputTask[T]]): InputEvaluated[T]", "member" : "sbt.Def.macroValueIInT", "link" : "sbt\/Def$.html#macroValueIInT[T](in:sbt.Def.Initialize[sbt.InputTask[T]]):sbt.std.InputEvaluated[T]", "kind" : "implicit def"}, {"label" : "macroValueIT", "tail" : "(in: Initialize[Task[T]]): MacroValue[T]", "member" : "sbt.Def.macroValueIT", "link" : "sbt\/Def$.html#macroValueIT[T](in:sbt.Def.Initialize[sbt.Task[T]]):sbt.std.MacroValue[T]", "kind" : "implicit def"}, {"label" : "macroValueI", "tail" : "(in: Initialize[T]): MacroValue[T]", "member" : "sbt.Def.macroValueI", "link" : "sbt\/Def$.html#macroValueI[T](in:sbt.Def.Initialize[T]):sbt.std.MacroValue[T]", "kind" : "implicit def"}, {"label" : "inputTaskDyn", "tail" : "(t: Initialize[Task[T]]): Initialize[InputTask[T]]", "member" : "sbt.Def.inputTaskDyn", "link" : "sbt\/Def$.html#inputTaskDyn[T](t:sbt.Def.Initialize[sbt.Task[T]]):sbt.Def.Initialize[sbt.InputTask[T]]", "kind" : "macro def"}, {"label" : "inputTask", "tail" : "(t: T): Initialize[InputTask[T]]", "member" : "sbt.Def.inputTask", "link" : "sbt\/Def$.html#inputTask[T](t:T):sbt.Def.Initialize[sbt.InputTask[T]]", "kind" : "macro def"}, {"label" : "settingDyn", "tail" : "(t: Initialize[T]): Initialize[T]", "member" : "sbt.Def.settingDyn", "link" : "sbt\/Def$.html#settingDyn[T](t:sbt.Def.Initialize[T]):sbt.Def.Initialize[T]", "kind" : "macro def"}, {"label" : "setting", "tail" : "(t: T): Initialize[T]", "member" : "sbt.Def.setting", "link" : "sbt\/Def$.html#setting[T](t:T):sbt.Def.Initialize[T]", "kind" : "macro def"}, {"label" : "taskDyn", "tail" : "(t: Initialize[Task[T]]): Initialize[Task[T]]", "member" : "sbt.Def.taskDyn", "link" : "sbt\/Def$.html#taskDyn[T](t:sbt.Def.Initialize[sbt.Task[T]]):sbt.Def.Initialize[sbt.Task[T]]", "kind" : "macro def"}, {"label" : "task", "tail" : "(t: T): Initialize[Task[T]]", "member" : "sbt.Def.task", "link" : "sbt\/Def$.html#task[T](t:T):sbt.Def.Initialize[sbt.Task[T]]", "kind" : "macro def"}, {"label" : "toIParser", "tail" : "(p: Initialize[InputTask[T]]): Initialize[(State) ⇒ Parser[Task[T]]]", "member" : "sbt.Def.toIParser", "link" : "sbt\/Def$.html#toIParser[T](p:sbt.Def.Initialize[sbt.InputTask[T]]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[sbt.Task[T]]]", "kind" : "def"}, {"label" : "toISParser", "tail" : "(p: Initialize[Parser[T]]): Initialize[(State) ⇒ Parser[T]]", "member" : "sbt.Def.toISParser", "link" : "sbt\/Def$.html#toISParser[T](p:sbt.Def.Initialize[sbt.internal.util.complete.Parser[T]]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[T]]", "kind" : "def"}, {"label" : "toSParser", "tail" : "(p: Parser[T]): (State) ⇒ Parser[T]", "member" : "sbt.Def.toSParser", "link" : "sbt\/Def$.html#toSParser[T](p:sbt.internal.util.complete.Parser[T]):sbt.State=>sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "toITask", "tail" : "(i: Initialize[T]): Initialize[Task[T]]", "member" : "sbt.Def.toITask", "link" : "sbt\/Def$.html#toITask[T](i:sbt.Def.Initialize[T]):sbt.Def.Initialize[sbt.Task[T]]", "kind" : "def"}, {"label" : "spaceDelimited", "tail" : "(argLabel: String): Parser[Seq[String]]", "member" : "sbt.Def.spaceDelimited", "link" : "sbt\/Def$.html#spaceDelimited(argLabel:String):sbt.internal.util.complete.Parser[Seq[String]]", "kind" : "def"}, {"label" : "intersect", "tail" : "(s1: Scope, s2: Scope)(delegates: (Scope) ⇒ Seq[Scope]): Option[Scope]", "member" : "sbt.Def.intersect", "link" : "sbt\/Def$.html#intersect(s1:sbt.Scope,s2:sbt.Scope)(implicitdelegates:sbt.Scope=>Seq[sbt.Scope]):Option[sbt.Scope]", "kind" : "def"}, {"label" : "deriveAllowed", "tail" : "(s: Setting[T], allowDynamic: Boolean): Option[String]", "member" : "sbt.Def.deriveAllowed", "link" : "sbt\/Def$.html#deriveAllowed[T](s:sbt.Def.Setting[T],allowDynamic:Boolean):Option[String]", "kind" : "def"}, {"label" : "withColor", "tail" : "(s: String, color: Option[String]): String", "member" : "sbt.Def.withColor", "link" : "sbt\/Def$.html#withColor(s:String,color:Option[String]):String", "kind" : "def"}, {"label" : "displayMasked", "tail" : "(scoped: ScopedKey[_], mask: ScopeMask): String", "member" : "sbt.Def.displayMasked", "link" : "sbt\/Def$.html#displayMasked(scoped:sbt.Def.ScopedKey[_],mask:sbt.ScopeMask):String", "kind" : "def"}, {"label" : "displayFull", "tail" : "(scoped: ScopedKey[_], keyNameColor: Option[String]): String", "member" : "sbt.Def.displayFull", "link" : "sbt\/Def$.html#displayFull(scoped:sbt.Def.ScopedKey[_],keyNameColor:Option[String]):String", "kind" : "def"}, {"label" : "displayFull", "tail" : "(scoped: ScopedKey[_]): String", "member" : "sbt.Def.displayFull", "link" : "sbt\/Def$.html#displayFull(scoped:sbt.Def.ScopedKey[_]):String", "kind" : "def"}, {"label" : "displayBuildRelative", "tail" : "(currentBuild: URI, multi: Boolean, project: Reference): String", "member" : "sbt.Def.displayBuildRelative", "link" : "sbt\/Def$.html#displayBuildRelative(currentBuild:java.net.URI,multi:Boolean,project:sbt.Reference):String", "kind" : "def"}, {"label" : "displayRelative", "tail" : "(current: ProjectRef, multi: Boolean, project: Reference): String", "member" : "sbt.Def.displayRelative", "link" : "sbt\/Def$.html#displayRelative(current:sbt.ProjectRef,multi:Boolean,project:sbt.Reference):String", "kind" : "def"}, {"label" : "showBuildRelativeKey", "tail" : "(currentBuild: URI, multi: Boolean, keyNameColor: Option[String]): Show[ScopedKey[_]]", "member" : "sbt.Def.showBuildRelativeKey", "link" : "sbt\/Def$.html#showBuildRelativeKey(currentBuild:java.net.URI,multi:Boolean,keyNameColor:Option[String]):sbt.util.Show[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "showRelativeKey", "tail" : "(current: ProjectRef, multi: Boolean, keyNameColor: Option[String]): Show[ScopedKey[_]]", "member" : "sbt.Def.showRelativeKey", "link" : "sbt\/Def$.html#showRelativeKey(current:sbt.ProjectRef,multi:Boolean,keyNameColor:Option[String]):sbt.util.Show[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "showFullKey", "tail" : "(keyNameColor: Option[String]): Show[ScopedKey[_]]", "member" : "sbt.Def.showFullKey", "link" : "sbt\/Def$.html#showFullKey(keyNameColor:Option[String]):sbt.util.Show[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "showFullKey", "tail" : ": Show[ScopedKey[_]]", "member" : "sbt.Def.showFullKey", "link" : "sbt\/Def$.html#showFullKey:sbt.util.Show[sbt.Def.ScopedKey[_]]", "kind" : "lazy val"}, {"label" : "resolvedScoped", "tail" : ": SettingKey[ScopedKey[_]]", "member" : "sbt.Def.resolvedScoped", "link" : "sbt\/Def$.html#resolvedScoped:sbt.SettingKey[sbt.Def.ScopedKey[_]]", "kind" : "val"}, {"label" : "runBefore", "tail" : ": AttributeKey[Seq[Task[_]]]", "member" : "sbt.Def.runBefore", "link" : "sbt\/Def$.html#runBefore:sbt.internal.util.AttributeKey[Seq[sbt.Task[_]]]", "kind" : "val"}, {"label" : "triggeredBy", "tail" : ": AttributeKey[Seq[Task[_]]]", "member" : "sbt.Def.triggeredBy", "link" : "sbt\/Def$.html#triggeredBy:sbt.internal.util.AttributeKey[Seq[sbt.Task[_]]]", "kind" : "val"}, {"label" : "settings", "tail" : "(ss: SettingsDefinition*): Seq[Setting[_]]", "member" : "sbt.Def.settings", "link" : "sbt\/Def$.html#settings(ss:sbt.Def.SettingsDefinition*):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "Classpath", "tail" : "", "member" : "sbt.Def.Classpath", "link" : "sbt\/Def$.html#Classpath=Seq[sbt.internal.util.Attributed[java.io.File]]", "kind" : "type"}, {"label" : "stateParserToInput", "tail" : "(in: (State) ⇒ Parser[T]): ParserInput[T]", "member" : "sbt.TaskMacroExtra.stateParserToInput", "link" : "sbt\/Def$.html#stateParserToInput[T](in:sbt.State=>sbt.internal.util.complete.Parser[T]):sbt.std.ParserInput[T]", "kind" : "implicit def"}, {"label" : "parserToInput", "tail" : "(in: Parser[T]): ParserInput[T]", "member" : "sbt.TaskMacroExtra.parserToInput", "link" : "sbt\/Def$.html#parserToInput[T](in:sbt.internal.util.complete.Parser[T]):sbt.std.ParserInput[T]", "kind" : "implicit def"}, {"label" : "macroValueIn", "tail" : "(in: InputTask[T]): InputEvaluated[T]", "member" : "sbt.TaskMacroExtra.macroValueIn", "link" : "sbt\/Def$.html#macroValueIn[T](in:sbt.InputTask[T]):sbt.std.InputEvaluated[T]", "kind" : "implicit def"}, {"label" : "macroValueT", "tail" : "(in: Task[T]): MacroValue[T]", "member" : "sbt.TaskMacroExtra.macroValueT", "link" : "sbt\/Def$.html#macroValueT[T](in:sbt.Task[T]):sbt.std.MacroValue[T]", "kind" : "implicit def"}, {"label" : "definedAtString", "tail" : "(settings: Seq[Setting[_]]): String", "member" : "sbt.internal.util.Init.definedAtString", "link" : "sbt\/Def$.html#definedAtString(settings:Seq[Init.this.Setting[_]]):String", "kind" : "def"}, {"label" : "flattenLocals", "tail" : "(compiled: CompiledMap): Map[ScopedKey[_], Flattened]", "member" : "sbt.internal.util.Init.flattenLocals", "link" : "sbt\/Def$.html#flattenLocals(compiled:Init.this.CompiledMap):Map[Init.this.ScopedKey[_],Init.this.Flattened]", "kind" : "def"}, {"label" : "Uninitialized", "tail" : "(validKeys: Seq[ScopedKey[_]], delegates: (Scope) ⇒ Seq[Scope], keys: Seq[Undefined], runtime: Boolean)(display: Show[ScopedKey[_]]): Uninitialized", "member" : "sbt.internal.util.Init.Uninitialized", "link" : "sbt\/Def$.html#Uninitialized(validKeys:Seq[Init.this.ScopedKey[_]],delegates:Scope=>Seq[Scope],keys:Seq[Init.this.Undefined],runtime:Boolean)(implicitdisplay:sbt.util.Show[Init.this.ScopedKey[_]]):Init.this.Uninitialized", "kind" : "def"}, {"label" : "Undefined", "tail" : "(defining: Setting[_], referencedKey: ScopedKey[_]): Undefined", "member" : "sbt.internal.util.Init.Undefined", "link" : "sbt\/Def$.html#Undefined(defining:Init.this.Setting[_],referencedKey:Init.this.ScopedKey[_]):Init.this.Undefined", "kind" : "def"}, {"label" : "refinedDistance", "tail" : "(delegates: (Scope) ⇒ Seq[Scope], a: ScopedKey[_], b: ScopedKey[_]): Option[Int]", "member" : "sbt.internal.util.Init.refinedDistance", "link" : "sbt\/Def$.html#refinedDistance(delegates:Scope=>Seq[Scope],a:Init.this.ScopedKey[_],b:Init.this.ScopedKey[_]):Option[Int]", "kind" : "def"}, {"label" : "guessIntendedScope", "tail" : "(validKeys: Seq[ScopedKey[_]], delegates: (Scope) ⇒ Seq[Scope], key: ScopedKey[_]): Option[ScopedKey[_]]", "member" : "sbt.internal.util.Init.guessIntendedScope", "link" : "sbt\/Def$.html#guessIntendedScope(validKeys:Seq[Init.this.ScopedKey[_]],delegates:Scope=>Seq[Scope],key:Init.this.ScopedKey[_]):Option[Init.this.ScopedKey[_]]", "kind" : "def"}, {"label" : "showUndefined", "tail" : "(u: Undefined, validKeys: Seq[ScopedKey[_]], delegates: (Scope) ⇒ Seq[Scope])(display: Show[ScopedKey[_]]): String", "member" : "sbt.internal.util.Init.showUndefined", "link" : "sbt\/Def$.html#showUndefined(u:Init.this.Undefined,validKeys:Seq[Init.this.ScopedKey[_]],delegates:Scope=>Seq[Scope])(implicitdisplay:sbt.util.Show[Init.this.ScopedKey[_]]):String", "kind" : "def"}, {"label" : "delegate", "tail" : "(sMap: ScopedMap)(delegates: (Scope) ⇒ Seq[Scope], display: Show[ScopedKey[_]]): ScopedMap", "member" : "sbt.internal.util.Init.delegate", "link" : "sbt\/Def$.html#delegate(sMap:Init.this.ScopedMap)(implicitdelegates:Scope=>Seq[Scope],implicitdisplay:sbt.util.Show[Init.this.ScopedKey[_]]):Init.this.ScopedMap", "kind" : "def"}, {"label" : "addLocal", "tail" : "(init: Seq[Setting[_]])(scopeLocal: ScopeLocal): Seq[Setting[_]]", "member" : "sbt.internal.util.Init.addLocal", "link" : "sbt\/Def$.html#addLocal(init:Seq[Init.this.Setting[_]])(implicitscopeLocal:Init.this.ScopeLocal):Seq[Init.this.Setting[_]]", "kind" : "def"}, {"label" : "append", "tail" : "(ss: Seq[Setting[T]], s: Setting[T]): Seq[Setting[T]]", "member" : "sbt.internal.util.Init.append", "link" : "sbt\/Def$.html#append[T](ss:Seq[Init.this.Setting[T]],s:Init.this.Setting[T]):Seq[Init.this.Setting[T]]", "kind" : "def"}, {"label" : "add", "tail" : "(m: ScopedMap, s: Setting[T]): ScopedMap", "member" : "sbt.internal.util.Init.add", "link" : "sbt\/Def$.html#add[T](m:Init.this.ScopedMap,s:Init.this.Setting[T]):Init.this.ScopedMap", "kind" : "def"}, {"label" : "grouped", "tail" : "(init: Seq[Setting[_]]): ScopedMap", "member" : "sbt.internal.util.Init.grouped", "link" : "sbt\/Def$.html#grouped(init:Seq[Init.this.Setting[_]]):Init.this.ScopedMap", "kind" : "def"}, {"label" : "compile", "tail" : "(sMap: ScopedMap): CompiledMap", "member" : "sbt.internal.util.Init.compile", "link" : "sbt\/Def$.html#compile(sMap:Init.this.ScopedMap):Init.this.CompiledMap", "kind" : "def"}, {"label" : "sort", "tail" : "(cMap: CompiledMap): Seq[Compiled[_]]", "member" : "sbt.internal.util.Init.sort", "link" : "sbt\/Def$.html#sort(cMap:Init.this.CompiledMap):Seq[Init.this.Compiled[_]]", "kind" : "def"}, {"label" : "make", "tail" : "(init: Seq[Setting[_]])(delegates: (Scope) ⇒ Seq[Scope], scopeLocal: ScopeLocal, display: Show[ScopedKey[_]]): Settings[Scope]", "member" : "sbt.internal.util.Init.make", "link" : "sbt\/Def$.html#make(init:Seq[Init.this.Setting[_]])(implicitdelegates:Scope=>Seq[Scope],implicitscopeLocal:Init.this.ScopeLocal,implicitdisplay:sbt.util.Show[Init.this.ScopedKey[_]]):sbt.internal.util.Settings[Scope]", "kind" : "def"}, {"label" : "compiled", "tail" : "(init: Seq[Setting[_]], actual: Boolean)(delegates: (Scope) ⇒ Seq[Scope], scopeLocal: ScopeLocal, display: Show[ScopedKey[_]]): CompiledMap", "member" : "sbt.internal.util.Init.compiled", "link" : "sbt\/Def$.html#compiled(init:Seq[Init.this.Setting[_]],actual:Boolean)(implicitdelegates:Scope=>Seq[Scope],implicitscopeLocal:Init.this.ScopeLocal,implicitdisplay:sbt.util.Show[Init.this.ScopedKey[_]]):Init.this.CompiledMap", "kind" : "def"}, {"label" : "mapScope", "tail" : "(f: (Scope) ⇒ Scope): MapScoped", "member" : "sbt.internal.util.Init.mapScope", "link" : "sbt\/Def$.html#mapScope(f:Scope=>Scope):Init.this.MapScoped", "kind" : "def"}, {"label" : "asFunction", "tail" : "(s: Settings[Scope]): (ScopedKey[T]) ⇒ T", "member" : "sbt.internal.util.Init.asFunction", "link" : "sbt\/Def$.html#asFunction[T](s:sbt.internal.util.Settings[Scope]):Init.this.ScopedKey[T]=>T", "kind" : "def"}, {"label" : "getValue", "tail" : "(s: Settings[Scope], k: ScopedKey[T]): T", "member" : "sbt.internal.util.Init.getValue", "link" : "sbt\/Def$.html#getValue[T](s:sbt.internal.util.Settings[Scope],k:Init.this.ScopedKey[T]):T", "kind" : "def"}, {"label" : "asTransform", "tail" : "(s: Settings[Scope]): ~>[ScopedKey, internal.util.Types.Id]", "member" : "sbt.internal.util.Init.asTransform", "link" : "sbt\/Def$.html#asTransform(s:sbt.internal.util.Settings[Scope]):Init.this.ScopedKey~>sbt.internal.util.Types.Id", "kind" : "def"}, {"label" : "empty", "tail" : "(delegates: (Scope) ⇒ Seq[Scope]): Settings[Scope]", "member" : "sbt.internal.util.Init.empty", "link" : "sbt\/Def$.html#empty(implicitdelegates:Scope=>Seq[Scope]):sbt.internal.util.Settings[Scope]", "kind" : "def"}, {"label" : "derive", "tail" : "(s: Setting[T], allowDynamic: Boolean, filter: (Scope) ⇒ Boolean, trigger: (AttributeKey[_]) ⇒ Boolean, default: Boolean): Setting[T]", "member" : "sbt.internal.util.Init.derive", "link" : "sbt\/Def$.html#derive[T](s:Init.this.Setting[T],allowDynamic:Boolean,filter:Scope=>Boolean,trigger:sbt.internal.util.AttributeKey[_]=>Boolean,default:Boolean):Init.this.Setting[T]", "kind" : "final def"}, {"label" : "uniform", "tail" : "(inputs: Seq[Initialize[S]])(f: (Seq[S]) ⇒ T): Initialize[T]", "member" : "sbt.internal.util.Init.uniform", "link" : "sbt\/Def$.html#uniform[S,T](inputs:Seq[Init.this.Initialize[S]])(f:Seq[S]=>T):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "app", "tail" : "(inputs: K[Initialize])(f: (K[internal.util.Types.Id]) ⇒ T)(alist: AList[K]): Initialize[T]", "member" : "sbt.internal.util.Init.app", "link" : "sbt\/Def$.html#app[K[L[x]],T](inputs:K[Init.this.Initialize])(f:K[sbt.internal.util.Types.Id]=>T)(implicitalist:sbt.internal.util.AList[K]):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "map", "tail" : "(in: Initialize[S])(f: (S) ⇒ T): Initialize[T]", "member" : "sbt.internal.util.Init.map", "link" : "sbt\/Def$.html#map[S,T](in:Init.this.Initialize[S])(f:S=>T):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "bind", "tail" : "(in: Initialize[S])(f: (S) ⇒ Initialize[T]): Initialize[T]", "member" : "sbt.internal.util.Init.bind", "link" : "sbt\/Def$.html#bind[S,T](in:Init.this.Initialize[S])(f:S=>Init.this.Initialize[T]):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "update", "tail" : "(key: ScopedKey[T])(f: (T) ⇒ T): Setting[T]", "member" : "sbt.internal.util.Init.update", "link" : "sbt\/Def$.html#update[T](key:Init.this.ScopedKey[T])(f:T=>T):Init.this.Setting[T]", "kind" : "def"}, {"label" : "optional", "tail" : "(i: Initialize[T])(f: (Option[T]) ⇒ U): Initialize[U]", "member" : "sbt.internal.util.Init.optional", "link" : "sbt\/Def$.html#optional[T,U](i:Init.this.Initialize[T])(f:Option[T]=>U):Init.this.Initialize[U]", "kind" : "def"}, {"label" : "pure", "tail" : "(value: () ⇒ T): Initialize[T]", "member" : "sbt.internal.util.Init.pure", "link" : "sbt\/Def$.html#pure[T](value:()=>T):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "value", "tail" : "(value: ⇒ T): Initialize[T]", "member" : "sbt.internal.util.Init.value", "link" : "sbt\/Def$.html#value[T](value:=>T):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "valueStrict", "tail" : "(value: T): Initialize[T]", "member" : "sbt.internal.util.Init.valueStrict", "link" : "sbt\/Def$.html#valueStrict[T](value:T):Init.this.Initialize[T]", "kind" : "def"}, {"label" : "setting", "tail" : "(key: ScopedKey[T], init: Initialize[T], pos: SourcePosition): Setting[T]", "member" : "sbt.internal.util.Init.setting", "link" : "sbt\/Def$.html#setting[T](key:Init.this.ScopedKey[T],init:Init.this.Initialize[T],pos:sbt.internal.util.SourcePosition):Init.this.Setting[T]", "kind" : "def"}, {"label" : "capturedTransformations", "tail" : ": Initialize[~>[Initialize, Initialize]]", "member" : "sbt.internal.util.Init.capturedTransformations", "link" : "sbt\/Def$.html#capturedTransformations:Init.this.Initialize[Init.this.Initialize~>Init.this.Initialize]", "kind" : "lazy val"}, {"label" : "MapConstant", "tail" : "", "member" : "sbt.internal.util.Init.MapConstant", "link" : "sbt\/Def$.html#MapConstant=Init.this.ScopedKey~>Option", "kind" : "type"}, {"label" : "ScopeLocal", "tail" : "", "member" : "sbt.internal.util.Init.ScopeLocal", "link" : "sbt\/Def$.html#ScopeLocal=Init.this.ScopedKey[_]=>Seq[Init.this.Setting[_]]", "kind" : "type"}, {"label" : "ValidateRef", "tail" : "", "member" : "sbt.internal.util.Init.ValidateRef", "link" : "sbt\/Def$.html#ValidateRef=Init.this.ScopedKey~>Init.this.ValidatedRef", "kind" : "type"}, {"label" : "ValidatedInit", "tail" : "", "member" : "sbt.internal.util.Init.ValidatedInit", "link" : "sbt\/Def$.html#ValidatedInit[T]=Either[Seq[Init.this.Undefined],Init.this.Initialize[T]]", "kind" : "type"}, {"label" : "ValidatedRef", "tail" : "", "member" : "sbt.internal.util.Init.ValidatedRef", "link" : "sbt\/Def$.html#ValidatedRef[T]=Either[Init.this.Undefined,Init.this.ScopedKey[T]]", "kind" : "type"}, {"label" : "MapScoped", "tail" : "", "member" : "sbt.internal.util.Init.MapScoped", "link" : "sbt\/Def$.html#MapScoped=Init.this.ScopedKey~>Init.this.ScopedKey", "kind" : "type"}, {"label" : "CompiledMap", "tail" : "", "member" : "sbt.internal.util.Init.CompiledMap", "link" : "sbt\/Def$.html#CompiledMap=Map[Init.this.ScopedKey[_],Init.this.Compiled[_]]", "kind" : "type"}, {"label" : "ScopedMap", "tail" : "", "member" : "sbt.internal.util.Init.ScopedMap", "link" : "sbt\/Def$.html#ScopedMap=sbt.internal.util.IMap[Init.this.ScopedKey,Init.this.SettingSeq]", "kind" : "type"}, {"label" : "SettingSeq", "tail" : "", "member" : "sbt.internal.util.Init.SettingSeq", "link" : "sbt\/Def$.html#SettingSeq[T]=Seq[Init.this.Setting[T]]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Def$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Def$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Def$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Def$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Def$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Def$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Def$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Def$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Def$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Def$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Def$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Def$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Def$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Def$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Def$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Def$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Def$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Def$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Def$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.DefaultOptions", "shortDescription" : "", "object" : "sbt\/DefaultOptions$.html", "members_object" : [{"label" : "setupShellPrompt", "tail" : "(): Def.Setting[_]", "member" : "sbt.DefaultOptions.setupShellPrompt", "link" : "sbt\/DefaultOptions$.html#setupShellPrompt:sbt.Def.Setting[_]", "kind" : "def"}, {"label" : "shellPrompt", "tail" : "(version: String): (State) ⇒ String", "member" : "sbt.DefaultOptions.shellPrompt", "link" : "sbt\/DefaultOptions$.html#shellPrompt(version:String):sbt.State=>String", "kind" : "def"}, {"label" : "addCredentials", "tail" : "(): Def.Setting[_]", "member" : "sbt.DefaultOptions.addCredentials", "link" : "sbt\/DefaultOptions$.html#addCredentials:sbt.Def.Setting[_]", "kind" : "def"}, {"label" : "credentials", "tail" : "(state: State): Credentials", "member" : "sbt.DefaultOptions.credentials", "link" : "sbt\/DefaultOptions$.html#credentials(state:sbt.State):sbt.librarymanagement.ivy.Credentials", "kind" : "def"}, {"label" : "addPluginResolvers", "tail" : "(): Def.Setting[_]", "member" : "sbt.DefaultOptions.addPluginResolvers", "link" : "sbt\/DefaultOptions$.html#addPluginResolvers:sbt.Def.Setting[_]", "kind" : "def"}, {"label" : "addResolvers", "tail" : "(): Def.Setting[_]", "member" : "sbt.DefaultOptions.addResolvers", "link" : "sbt\/DefaultOptions$.html#addResolvers:sbt.Def.Setting[_]", "kind" : "def"}, {"label" : "pluginResolvers", "tail" : "(plugin: Boolean, snapshot: Boolean): Vector[Resolver]", "member" : "sbt.DefaultOptions.pluginResolvers", "link" : "sbt\/DefaultOptions$.html#pluginResolvers(plugin:Boolean,snapshot:Boolean):Vector[sbt.librarymanagement.Resolver]", "kind" : "def"}, {"label" : "resolvers", "tail" : "(snapshot: Boolean): Vector[Resolver]", "member" : "sbt.DefaultOptions.resolvers", "link" : "sbt\/DefaultOptions$.html#resolvers(snapshot:Boolean):Vector[sbt.librarymanagement.Resolver]", "kind" : "def"}, {"label" : "scaladoc", "tail" : "(name: String, version: String): Seq[String]", "member" : "sbt.DefaultOptions.scaladoc", "link" : "sbt\/DefaultOptions$.html#scaladoc(name:String,version:String):Seq[String]", "kind" : "def"}, {"label" : "javadoc", "tail" : "(name: String, version: String): Seq[String]", "member" : "sbt.DefaultOptions.javadoc", "link" : "sbt\/DefaultOptions$.html#javadoc(name:String,version:String):Seq[String]", "kind" : "def"}, {"label" : "scalac", "tail" : "(): Seq[String]", "member" : "sbt.DefaultOptions.scalac", "link" : "sbt\/DefaultOptions$.html#scalac:Seq[String]", "kind" : "def"}, {"label" : "javac", "tail" : "(): Seq[String]", "member" : "sbt.DefaultOptions.javac", "link" : "sbt\/DefaultOptions$.html#javac:Seq[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/DefaultOptions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/DefaultOptions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/DefaultOptions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/DefaultOptions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/DefaultOptions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/DefaultOptions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/DefaultOptions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DefaultOptions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DefaultOptions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DefaultOptions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/DefaultOptions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/DefaultOptions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/DefaultOptions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/DefaultOptions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/DefaultOptions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/DefaultOptions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/DefaultOptions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/DefaultOptions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/DefaultOptions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.Defaults", "shortDescription" : "", "object" : "sbt\/Defaults$.html", "members_object" : [{"label" : "RichFiles", "tail" : "", "member" : "sbt.BuildCommon.RichFiles", "link" : "sbt\/BuildCommon.html#RichFilesextendsAnyRef", "kind" : "final class"}, {"label" : "RichAttributed", "tail" : "", "member" : "sbt.BuildCommon.RichAttributed", "link" : "sbt\/BuildCommon.html#RichAttributedextendsAnyRef", "kind" : "final class"}, {"label" : "RichPathFinder", "tail" : "", "member" : "sbt.BuildCommon.RichPathFinder", "link" : "sbt\/BuildCommon.html#RichPathFinderextendsAnyRef", "kind" : "final class"}, {"label" : "deprecationSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.deprecationSettings", "link" : "sbt\/Defaults$.html#deprecationSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "coreDefaultSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.coreDefaultSettings", "link" : "sbt\/Defaults$.html#coreDefaultSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "defaultConfigs", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.defaultConfigs", "link" : "sbt\/Defaults$.html#defaultConfigs:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "itSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.itSettings", "link" : "sbt\/Defaults$.html#itSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "testSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.testSettings", "link" : "sbt\/Defaults$.html#testSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "compileSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.compileSettings", "link" : "sbt\/Defaults$.html#compileSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "configSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.configSettings", "link" : "sbt\/Defaults$.html#configSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "baseTasks", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.baseTasks", "link" : "sbt\/Defaults$.html#baseTasks:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "runnerSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.runnerSettings", "link" : "sbt\/Defaults$.html#runnerSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "disableAggregate", "tail" : "(k: Scoped): Def.Setting[Boolean]", "member" : "sbt.Defaults.disableAggregate", "link" : "sbt\/Defaults$.html#disableAggregate(k:sbt.Scoped):sbt.Def.Setting[Boolean]", "kind" : "def"}, {"label" : "disableAggregation", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.disableAggregation", "link" : "sbt\/Defaults$.html#disableAggregation:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "noAggregation", "tail" : "(): Seq[Scoped]", "member" : "sbt.Defaults.noAggregation", "link" : "sbt\/Defaults$.html#noAggregation:Seq[sbt.Scoped]", "kind" : "def"}, {"label" : "CompletionsID", "tail" : ": String", "member" : "sbt.Defaults.CompletionsID", "link" : "sbt\/Defaults$.html#CompletionsID:String", "kind" : "val"}, {"label" : "testOnlyParser", "tail" : "(): (State, Seq[String]) ⇒ Parser[(Seq[String], Seq[String])]", "member" : "sbt.Defaults.testOnlyParser", "link" : "sbt\/Defaults$.html#testOnlyParser:(sbt.State,Seq[String])=>sbt.internal.util.complete.Parser[(Seq[String],Seq[String])]", "kind" : "def"}, {"label" : "runMainParser", "tail" : "(): (State, Seq[String]) ⇒ Parser[(String, Seq[String])]", "member" : "sbt.Defaults.runMainParser", "link" : "sbt\/Defaults$.html#runMainParser:(sbt.State,Seq[String])=>sbt.internal.util.complete.Parser[(String,Seq[String])]", "kind" : "def"}, {"label" : "copyResourcesTask", "tail" : "(): Def.Initialize[Task[Seq[(File, File)]]]", "member" : "sbt.Defaults.copyResourcesTask", "link" : "sbt\/Defaults$.html#copyResourcesTask:sbt.Def.Initialize[sbt.Task[Seq[(sbt.io.syntax.File,java.io.File)]]]", "kind" : "def"}, {"label" : "discoverSbtPluginNames", "tail" : "(): Def.Initialize[Task[DiscoveredNames]]", "member" : "sbt.Defaults.discoverSbtPluginNames", "link" : "sbt\/Defaults$.html#discoverSbtPluginNames:sbt.Def.Initialize[sbt.Task[sbt.internal.PluginDiscovery.DiscoveredNames]]", "kind" : "def"}, {"label" : "sbtPluginExtra", "tail" : "(m: ModuleID, sbtV: String, scalaV: String): ModuleID", "member" : "sbt.Defaults.sbtPluginExtra", "link" : "sbt\/Defaults$.html#sbtPluginExtra(m:sbt.librarymanagement.ModuleID,sbtV:String,scalaV:String):sbt.librarymanagement.ModuleID", "kind" : "def"}, {"label" : "printWarningsTask", "tail" : "(): Def.Initialize[Task[Unit]]", "member" : "sbt.Defaults.printWarningsTask", "link" : "sbt\/Defaults$.html#printWarningsTask:sbt.Def.Initialize[sbt.Task[Unit]]", "kind" : "def"}, {"label" : "compileAnalysisSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.Defaults.compileAnalysisSettings", "link" : "sbt\/Defaults$.html#compileAnalysisSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "compileInputsSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.Defaults.compileInputsSettings", "link" : "sbt\/Defaults$.html#compileInputsSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "compileIncSetupTask", "tail" : "(): Def.Initialize[Task[Setup]]", "member" : "sbt.Defaults.compileIncSetupTask", "link" : "sbt\/Defaults$.html#compileIncSetupTask:sbt.Def.Initialize[sbt.Task[xsbti.compile.Setup]]", "kind" : "def"}, {"label" : "compileIncrementalTask", "tail" : "(): Def.Initialize[Task[CompileResult]]", "member" : "sbt.Defaults.compileIncrementalTask", "link" : "sbt\/Defaults$.html#compileIncrementalTask:sbt.Def.Initialize[sbt.Task[xsbti.compile.CompileResult]]", "kind" : "def"}, {"label" : "compileTask", "tail" : "(): Def.Initialize[Task[CompileAnalysis]]", "member" : "sbt.Defaults.compileTask", "link" : "sbt\/Defaults$.html#compileTask:sbt.Def.Initialize[sbt.Task[xsbti.compile.CompileAnalysis]]", "kind" : "def"}, {"label" : "consoleTask", "tail" : "(classpath: TaskKey[Classpath], task: TaskKey[_]): Def.Initialize[Task[Unit]]", "member" : "sbt.Defaults.consoleTask", "link" : "sbt\/Defaults$.html#consoleTask(classpath:sbt.TaskKey[sbt.Keys.Classpath],task:sbt.TaskKey[_]):sbt.Def.Initialize[sbt.Task[Unit]]", "kind" : "def"}, {"label" : "consoleQuickTask", "tail" : "(): Def.Initialize[Task[Unit]]", "member" : "sbt.Defaults.consoleQuickTask", "link" : "sbt\/Defaults$.html#consoleQuickTask:sbt.Def.Initialize[sbt.Task[Unit]]", "kind" : "def"}, {"label" : "consoleTask", "tail" : "(): Def.Initialize[Task[Unit]]", "member" : "sbt.Defaults.consoleTask", "link" : "sbt\/Defaults$.html#consoleTask:sbt.Def.Initialize[sbt.Task[Unit]]", "kind" : "def"}, {"label" : "consoleProjectTask", "tail" : "(): Def.Initialize[Task[Unit]]", "member" : "sbt.Defaults.consoleProjectTask", "link" : "sbt\/Defaults$.html#consoleProjectTask:sbt.Def.Initialize[sbt.Task[Unit]]", "kind" : "def"}, {"label" : "discoverMainClasses", "tail" : "(analysis: CompileAnalysis): Seq[String]", "member" : "sbt.Defaults.discoverMainClasses", "link" : "sbt\/Defaults$.html#discoverMainClasses(analysis:xsbti.compile.CompileAnalysis):Seq[String]", "kind" : "def"}, {"label" : "mainBgRunMainTask", "tail" : "(): Def.Setting[InputTask[JobHandle]]", "member" : "sbt.Defaults.mainBgRunMainTask", "link" : "sbt\/Defaults$.html#mainBgRunMainTask:sbt.Def.Setting[sbt.InputTask[sbt.JobHandle]]", "kind" : "def"}, {"label" : "mainBgRunTask", "tail" : "(): Def.Setting[InputTask[JobHandle]]", "member" : "sbt.Defaults.mainBgRunTask", "link" : "sbt\/Defaults$.html#mainBgRunTask:sbt.Def.Setting[sbt.InputTask[sbt.JobHandle]]", "kind" : "def"}, {"label" : "docTaskSettings", "tail" : "(key: TaskKey[File]): Seq[Def.Setting[_]]", "member" : "sbt.Defaults.docTaskSettings", "link" : "sbt\/Defaults$.html#docTaskSettings(key:sbt.TaskKey[java.io.File]):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "bgWaitForTask", "tail" : "(): Def.Initialize[InputTask[Unit]]", "member" : "sbt.Defaults.bgWaitForTask", "link" : "sbt\/Defaults$.html#bgWaitForTask:sbt.Def.Initialize[sbt.InputTask[Unit]]", "kind" : "def"}, {"label" : "bgStopTask", "tail" : "(): Def.Initialize[InputTask[Unit]]", "member" : "sbt.Defaults.bgStopTask", "link" : "sbt\/Defaults$.html#bgStopTask:sbt.Def.Initialize[sbt.InputTask[Unit]]", "kind" : "def"}, {"label" : "psTask", "tail" : "(): Def.Initialize[Task[Seq[JobHandle]]]", "member" : "sbt.Defaults.psTask", "link" : "sbt\/Defaults$.html#psTask:sbt.Def.Initialize[sbt.Task[Seq[sbt.JobHandle]]]", "kind" : "def"}, {"label" : "runnerInit", "tail" : "(): Def.Initialize[Task[ScalaRun]]", "member" : "sbt.Defaults.runnerInit", "link" : "sbt\/Defaults$.html#runnerInit:sbt.Def.Initialize[sbt.Task[sbt.ScalaRun]]", "kind" : "def"}, {"label" : "runnerTask", "tail" : "(): Def.Setting[Task[ScalaRun]]", "member" : "sbt.Defaults.runnerTask", "link" : "sbt\/Defaults$.html#runnerTask:sbt.Def.Setting[sbt.Task[sbt.ScalaRun]]", "kind" : "def"}, {"label" : "runTask", "tail" : "(classpath: Def.Initialize[Task[Classpath]], mainClassTask: Def.Initialize[Task[Option[String]]], scalaRun: Def.Initialize[Task[ScalaRun]]): Def.Initialize[InputTask[Unit]]", "member" : "sbt.Defaults.runTask", "link" : "sbt\/Defaults$.html#runTask(classpath:sbt.Def.Initialize[sbt.Task[sbt.Keys.Classpath]],mainClassTask:sbt.Def.Initialize[sbt.Task[Option[String]]],scalaRun:sbt.Def.Initialize[sbt.Task[sbt.ScalaRun]]):sbt.Def.Initialize[sbt.InputTask[Unit]]", "kind" : "def"}, {"label" : "runMainTask", "tail" : "(classpath: Def.Initialize[Task[Classpath]], scalaRun: Def.Initialize[Task[ScalaRun]]): Def.Initialize[InputTask[Unit]]", "member" : "sbt.Defaults.runMainTask", "link" : "sbt\/Defaults$.html#runMainTask(classpath:sbt.Def.Initialize[sbt.Task[sbt.Keys.Classpath]],scalaRun:sbt.Def.Initialize[sbt.Task[sbt.ScalaRun]]):sbt.Def.Initialize[sbt.InputTask[Unit]]", "kind" : "def"}, {"label" : "foregroundRunTask", "tail" : "(): Def.Initialize[InputTask[Unit]]", "member" : "sbt.Defaults.foregroundRunTask", "link" : "sbt\/Defaults$.html#foregroundRunTask:sbt.Def.Initialize[sbt.InputTask[Unit]]", "kind" : "def"}, {"label" : "foregroundRunMainTask", "tail" : "(): Def.Initialize[InputTask[Unit]]", "member" : "sbt.Defaults.foregroundRunMainTask", "link" : "sbt\/Defaults$.html#foregroundRunMainTask:sbt.Def.Initialize[sbt.InputTask[Unit]]", "kind" : "def"}, {"label" : "bgRunTask", "tail" : "(products: Def.Initialize[Task[Classpath]], classpath: Def.Initialize[Task[Classpath]], mainClassTask: Def.Initialize[Task[Option[String]]], copyClasspath: Def.Initialize[Boolean], scalaRun: Def.Initialize[Task[ScalaRun]]): Def.Initialize[InputTask[JobHandle]]", "member" : "sbt.Defaults.bgRunTask", "link" : "sbt\/Defaults$.html#bgRunTask(products:sbt.Def.Initialize[sbt.Task[sbt.Keys.Classpath]],classpath:sbt.Def.Initialize[sbt.Task[sbt.Keys.Classpath]],mainClassTask:sbt.Def.Initialize[sbt.Task[Option[String]]],copyClasspath:sbt.Def.Initialize[Boolean],scalaRun:sbt.Def.Initialize[sbt.Task[sbt.ScalaRun]]):sbt.Def.Initialize[sbt.InputTask[sbt.JobHandle]]", "kind" : "def"}, {"label" : "bgRunMainTask", "tail" : "(products: Def.Initialize[Task[Classpath]], classpath: Def.Initialize[Task[Classpath]], copyClasspath: Def.Initialize[Boolean], scalaRun: Def.Initialize[Task[ScalaRun]]): Def.Initialize[InputTask[JobHandle]]", "member" : "sbt.Defaults.bgRunMainTask", "link" : "sbt\/Defaults$.html#bgRunMainTask(products:sbt.Def.Initialize[sbt.Task[sbt.Keys.Classpath]],classpath:sbt.Def.Initialize[sbt.Task[sbt.Keys.Classpath]],copyClasspath:sbt.Def.Initialize[Boolean],scalaRun:sbt.Def.Initialize[sbt.Task[sbt.ScalaRun]]):sbt.Def.Initialize[sbt.InputTask[sbt.JobHandle]]", "kind" : "def"}, {"label" : "cleanFilesTask", "tail" : "(): Def.Initialize[Task[Vector[File]]]", "member" : "sbt.Defaults.cleanFilesTask", "link" : "sbt\/Defaults$.html#cleanFilesTask:sbt.Def.Initialize[sbt.Task[Vector[java.io.File]]]", "kind" : "def"}, {"label" : "pickMainClass", "tail" : "(classes: Seq[String]): Option[String]", "member" : "sbt.Defaults.pickMainClass", "link" : "sbt\/Defaults$.html#pickMainClass(classes:Seq[String]):Option[String]", "kind" : "def"}, {"label" : "askForMainClass", "tail" : "(classes: Seq[String]): Option[String]", "member" : "sbt.Defaults.askForMainClass", "link" : "sbt\/Defaults$.html#askForMainClass(classes:Seq[String]):Option[String]", "kind" : "def"}, {"label" : "packageConfigurationTask", "tail" : "(): Def.Initialize[Task[Configuration]]", "member" : "sbt.Defaults.packageConfigurationTask", "link" : "sbt\/Defaults$.html#packageConfigurationTask:sbt.Def.Initialize[sbt.Task[sbt.Package.Configuration]]", "kind" : "def"}, {"label" : "packageTask", "tail" : "(): Def.Initialize[Task[File]]", "member" : "sbt.Defaults.packageTask", "link" : "sbt\/Defaults$.html#packageTask:sbt.Def.Initialize[sbt.Task[java.io.File]]", "kind" : "def"}, {"label" : "packageTaskSettings", "tail" : "(key: TaskKey[File], mappingsTask: Def.Initialize[Task[Seq[(File, String)]]]): Seq[Def.Setting[_]]", "member" : "sbt.Defaults.packageTaskSettings", "link" : "sbt\/Defaults$.html#packageTaskSettings(key:sbt.TaskKey[java.io.File],mappingsTask:sbt.Def.Initialize[sbt.Task[Seq[(java.io.File,String)]]]):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "artifactConfigurations", "tail" : "(base: Artifact, scope: Configuration, classifier: Option[String]): Iterable[Configuration]", "member" : "sbt.Defaults.artifactConfigurations", "link" : "sbt\/Defaults$.html#artifactConfigurations(base:sbt.librarymanagement.Artifact,scope:sbt.librarymanagement.Configuration,classifier:Option[String]):Iterable[sbt.librarymanagement.Configuration]", "kind" : "def"}, {"label" : "artifactSetting", "tail" : "(): Def.Initialize[Artifact]", "member" : "sbt.Defaults.artifactSetting", "link" : "sbt\/Defaults$.html#artifactSetting:sbt.Def.Initialize[sbt.librarymanagement.Artifact]", "kind" : "def"}, {"label" : "artifactPathSetting", "tail" : "(art: SettingKey[Artifact]): Def.Initialize[File]", "member" : "sbt.Defaults.artifactPathSetting", "link" : "sbt\/Defaults$.html#artifactPathSetting(art:sbt.SettingKey[sbt.librarymanagement.Artifact]):sbt.Def.Initialize[java.io.File]", "kind" : "def"}, {"label" : "collectFiles", "tail" : "(dirs: ScopedTaskable[Seq[File]], filter: ScopedTaskable[FileFilter], excludes: ScopedTaskable[FileFilter]): Def.Initialize[Task[Seq[File]]]", "member" : "sbt.Defaults.collectFiles", "link" : "sbt\/Defaults$.html#collectFiles(dirs:sbt.ScopedTaskable[Seq[java.io.File]],filter:sbt.ScopedTaskable[sbt.io.FileFilter],excludes:sbt.ScopedTaskable[sbt.io.FileFilter]):sbt.Def.Initialize[sbt.Task[Seq[java.io.File]]]", "kind" : "def"}, {"label" : "relativeMappings", "tail" : "(files: ScopedTaskable[Seq[File]], dirs: ScopedTaskable[Seq[File]]): Def.Initialize[Task[Seq[(File, String)]]]", "member" : "sbt.Defaults.relativeMappings", "link" : "sbt\/Defaults$.html#relativeMappings(files:sbt.ScopedTaskable[Seq[java.io.File]],dirs:sbt.ScopedTaskable[Seq[java.io.File]]):sbt.Def.Initialize[sbt.Task[Seq[(java.io.File,String)]]]", "kind" : "def"}, {"label" : "resourceMappings", "tail" : "(): Def.Initialize[Task[Seq[(File, String)]]]", "member" : "sbt.Defaults.resourceMappings", "link" : "sbt\/Defaults$.html#resourceMappings:sbt.Def.Initialize[sbt.Task[Seq[(java.io.File,String)]]]", "kind" : "def"}, {"label" : "sourceMappings", "tail" : "(): Def.Initialize[Task[Seq[(File, String)]]]", "member" : "sbt.Defaults.sourceMappings", "link" : "sbt\/Defaults$.html#sourceMappings:sbt.Def.Initialize[sbt.Task[Seq[(java.io.File,String)]]]", "kind" : "def"}, {"label" : "concatMappings", "tail" : "(as: Mappings, bs: Mappings): Def.Initialize[Task[Seq[(File, String)]]]", "member" : "sbt.Defaults.concatMappings", "link" : "sbt\/Defaults$.html#concatMappings(as:sbt.Defaults.Mappings,bs:sbt.Defaults.Mappings):sbt.Def.Initialize[sbt.Task[Seq[(java.io.File,String)]]]", "kind" : "def"}, {"label" : "packageSrcMappings", "tail" : "(): Def.Initialize[Task[Seq[(File, String)]]]", "member" : "sbt.Defaults.packageSrcMappings", "link" : "sbt\/Defaults$.html#packageSrcMappings:sbt.Def.Initialize[sbt.Task[Seq[(java.io.File,String)]]]", "kind" : "def"}, {"label" : "packageDocMappings", "tail" : "(): Def.Initialize[Task[Seq[(File, String)]]]", "member" : "sbt.Defaults.packageDocMappings", "link" : "sbt\/Defaults$.html#packageDocMappings:sbt.Def.Initialize[sbt.Task[Seq[(java.io.File,String)]]]", "kind" : "def"}, {"label" : "packageBinMappings", "tail" : "(): Def.Initialize[Task[Seq[(File, String)]]]", "member" : "sbt.Defaults.packageBinMappings", "link" : "sbt\/Defaults$.html#packageBinMappings:sbt.Def.Initialize[sbt.Task[Seq[(java.io.File,String)]]]", "kind" : "def"}, {"label" : "packageConfig", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.packageConfig", "link" : "sbt\/Defaults$.html#packageConfig:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "packageBase", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.packageBase", "link" : "sbt\/Defaults$.html#packageBase:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "defaultRestrictions", "tail" : "(): Def.Initialize[Seq[Rule]]", "member" : "sbt.Defaults.defaultRestrictions", "link" : "sbt\/Defaults$.html#defaultRestrictions:sbt.Def.Initialize[Seq[sbt.Tags.Rule]]", "kind" : "def"}, {"label" : "detectTests", "tail" : "(): Def.Initialize[Task[Seq[TestDefinition]]]", "member" : "sbt.Defaults.detectTests", "link" : "sbt\/Defaults$.html#detectTests:sbt.Def.Initialize[sbt.Task[Seq[sbt.TestDefinition]]]", "kind" : "def"}, {"label" : "selectedFilter", "tail" : "(args: Seq[String]): Seq[(String) ⇒ Boolean]", "member" : "sbt.Defaults.selectedFilter", "link" : "sbt\/Defaults$.html#selectedFilter(args:Seq[String]):Seq[String=>Boolean]", "kind" : "def"}, {"label" : "createTestRunners", "tail" : "(frameworks: Map[TestFramework, Framework], loader: ClassLoader, config: Execution): Map[TestFramework, Runner]", "member" : "sbt.Defaults.createTestRunners", "link" : "sbt\/Defaults$.html#createTestRunners(frameworks:Map[sbt.TestFramework,sbt.testing.Framework],loader:ClassLoader,config:sbt.Tests.Execution):Map[sbt.TestFramework,sbt.testing.Runner]", "kind" : "def"}, {"label" : "inputTests", "tail" : "(key: InputKey[_]): Def.Initialize[InputTask[Unit]]", "member" : "sbt.Defaults.inputTests", "link" : "sbt\/Defaults$.html#inputTests(key:sbt.InputKey[_]):sbt.Def.Initialize[sbt.InputTask[Unit]]", "kind" : "def"}, {"label" : "succeededFile", "tail" : "(dir: File): File", "member" : "sbt.Defaults.succeededFile", "link" : "sbt\/Defaults$.html#succeededFile(dir:java.io.File):java.io.File", "kind" : "def"}, {"label" : "testQuickFilter", "tail" : "(): Def.Initialize[Task[(Seq[String]) ⇒ Seq[(String) ⇒ Boolean]]]", "member" : "sbt.Defaults.testQuickFilter", "link" : "sbt\/Defaults$.html#testQuickFilter:sbt.Def.Initialize[sbt.Task[Seq[String]=>Seq[String=>Boolean]]]", "kind" : "def"}, {"label" : "testExecutionTask", "tail" : "(task: Scoped): Def.Initialize[Task[Execution]]", "member" : "sbt.Defaults.testExecutionTask", "link" : "sbt\/Defaults$.html#testExecutionTask(task:sbt.Scoped):sbt.Def.Initialize[sbt.Task[sbt.Tests.Execution]]", "kind" : "def"}, {"label" : "forkOptionsTask", "tail" : "(): Def.Initialize[Task[ForkOptions]]", "member" : "sbt.Defaults.forkOptionsTask", "link" : "sbt\/Defaults$.html#forkOptionsTask:sbt.Def.Initialize[sbt.Task[sbt.ForkOptions]]", "kind" : "def"}, {"label" : "singleTestGroupDefault", "tail" : "(): Def.Initialize[Task[Seq[Group]]]", "member" : "sbt.Defaults.singleTestGroupDefault", "link" : "sbt\/Defaults$.html#singleTestGroupDefault:sbt.Def.Initialize[sbt.Task[Seq[sbt.Tests.Group]]]", "kind" : "def"}, {"label" : "singleTestGroup", "tail" : "(key: Scoped): Def.Initialize[Task[Seq[Group]]]", "member" : "sbt.Defaults.singleTestGroup", "link" : "sbt\/Defaults$.html#singleTestGroup(key:sbt.Scoped):sbt.Def.Initialize[sbt.Task[Seq[sbt.Tests.Group]]]", "kind" : "def"}, {"label" : "testExtra", "tail" : "(extra: AttributeMap, tdef: TestDefinition): AttributeMap", "member" : "sbt.Defaults.testExtra", "link" : "sbt\/Defaults$.html#testExtra(extra:sbt.internal.util.AttributeMap,tdef:sbt.TestDefinition):sbt.internal.util.AttributeMap", "kind" : "def"}, {"label" : "testTaskOptions", "tail" : "(key: Scoped): Seq[Def.Setting[_]]", "member" : "sbt.Defaults.testTaskOptions", "link" : "sbt\/Defaults$.html#testTaskOptions(key:sbt.Scoped):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "ConfigGlobal", "tail" : ": Scope", "member" : "sbt.Defaults.ConfigGlobal", "link" : "sbt\/Defaults$.html#ConfigGlobal:sbt.Scope", "kind" : "lazy val"}, {"label" : "ConfigZero", "tail" : ": Scope", "member" : "sbt.Defaults.ConfigZero", "link" : "sbt\/Defaults$.html#ConfigZero:sbt.Scope", "kind" : "lazy val"}, {"label" : "TaskGlobal", "tail" : ": Scope", "member" : "sbt.Defaults.TaskGlobal", "link" : "sbt\/Defaults$.html#TaskGlobal:sbt.Scope", "kind" : "lazy val"}, {"label" : "TaskZero", "tail" : ": Scope", "member" : "sbt.Defaults.TaskZero", "link" : "sbt\/Defaults$.html#TaskZero:sbt.Scope", "kind" : "lazy val"}, {"label" : "testTasks", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.testTasks", "link" : "sbt\/Defaults$.html#testTasks:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "scalaInstanceFromHome", "tail" : "(dir: File): Def.Initialize[Task[ScalaInstance]]", "member" : "sbt.Defaults.scalaInstanceFromHome", "link" : "sbt\/Defaults$.html#scalaInstanceFromHome(dir:java.io.File):sbt.Def.Initialize[sbt.Task[sbt.internal.inc.ScalaInstance]]", "kind" : "def"}, {"label" : "scalaInstanceFromUpdate", "tail" : "(): Def.Initialize[Task[ScalaInstance]]", "member" : "sbt.Defaults.scalaInstanceFromUpdate", "link" : "sbt\/Defaults$.html#scalaInstanceFromUpdate:sbt.Def.Initialize[sbt.Task[sbt.internal.inc.ScalaInstance]]", "kind" : "def"}, {"label" : "scalaInstanceTask", "tail" : "(): Def.Initialize[Task[ScalaInstance]]", "member" : "sbt.Defaults.scalaInstanceTask", "link" : "sbt\/Defaults$.html#scalaInstanceTask:sbt.Def.Initialize[sbt.Task[sbt.internal.inc.ScalaInstance]]", "kind" : "def"}, {"label" : "watchSetting", "tail" : "(): Def.Initialize[Watched]", "member" : "sbt.Defaults.watchSetting", "link" : "sbt\/Defaults$.html#watchSetting:sbt.Def.Initialize[sbt.Watched]", "kind" : "def"}, {"label" : "transitiveUpdateTask", "tail" : "(): Def.Initialize[Task[Seq[UpdateReport]]]", "member" : "sbt.Defaults.transitiveUpdateTask", "link" : "sbt\/Defaults$.html#transitiveUpdateTask:sbt.Def.Initialize[sbt.Task[Seq[sbt.librarymanagement.UpdateReport]]]", "kind" : "def"}, {"label" : "watchTransitiveSourcesTask", "tail" : "(): Def.Initialize[Task[Seq[Source]]]", "member" : "sbt.Defaults.watchTransitiveSourcesTask", "link" : "sbt\/Defaults$.html#watchTransitiveSourcesTask:sbt.Def.Initialize[sbt.Task[Seq[sbt.internal.io.Source]]]", "kind" : "def"}, {"label" : "generate", "tail" : "(generators: SettingKey[Seq[Task[Seq[File]]]]): Def.Initialize[Task[Seq[File]]]", "member" : "sbt.Defaults.generate", "link" : "sbt\/Defaults$.html#generate(generators:sbt.SettingKey[Seq[sbt.Task[Seq[java.io.File]]]]):sbt.Def.Initialize[sbt.Task[Seq[java.io.File]]]", "kind" : "def"}, {"label" : "projectTasks", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.projectTasks", "link" : "sbt\/Defaults$.html#projectTasks:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "configTasks", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.Defaults.configTasks", "link" : "sbt\/Defaults$.html#configTasks:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "defaultCompileSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.Defaults.defaultCompileSettings", "link" : "sbt\/Defaults$.html#defaultCompileSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "compilersSetting", "tail" : "(): Def.Setting[Task[Compilers]]", "member" : "sbt.Defaults.compilersSetting", "link" : "sbt\/Defaults$.html#compilersSetting:sbt.Def.Setting[sbt.Task[xsbti.compile.Compilers]]", "kind" : "def"}, {"label" : "makeCrossTarget", "tail" : "(t: File, sv: String, sbtv: String, plugin: Boolean, cross: Boolean): File", "member" : "sbt.Defaults.makeCrossTarget", "link" : "sbt\/Defaults$.html#makeCrossTarget(t:java.io.File,sv:String,sbtv:String,plugin:Boolean,cross:Boolean):java.io.File", "kind" : "def"}, {"label" : "makePluginCrossSources", "tail" : "(isPlugin: Boolean, scalaSrcDir: File, sbtBinaryV: String, cross: Boolean): Seq[File]", "member" : "sbt.Defaults.makePluginCrossSources", "link" : "sbt\/Defaults$.html#makePluginCrossSources(isPlugin:Boolean,scalaSrcDir:java.io.File,sbtBinaryV:String,cross:Boolean):Seq[java.io.File]", "kind" : "def"}, {"label" : "makeCrossSources", "tail" : "(scalaSrcDir: File, javaSrcDir: File, sv: String, cross: Boolean): Seq[File]", "member" : "sbt.Defaults.makeCrossSources", "link" : "sbt\/Defaults$.html#makeCrossSources(scalaSrcDir:java.io.File,javaSrcDir:java.io.File,sv:String,cross:Boolean):Seq[java.io.File]", "kind" : "def"}, {"label" : "compileBase", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.Defaults.compileBase", "link" : "sbt\/Defaults$.html#compileBase:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "addBaseSources", "tail" : "(): Seq[Def.Setting[Task[Seq[File]]]]", "member" : "sbt.Defaults.addBaseSources", "link" : "sbt\/Defaults$.html#addBaseSources:Seq[sbt.Def.Setting[sbt.Task[Seq[java.io.File]]]]", "kind" : "def"}, {"label" : "outputConfigPaths", "tail" : ": Seq[Def.Setting[File]]", "member" : "sbt.Defaults.outputConfigPaths", "link" : "sbt\/Defaults$.html#outputConfigPaths:Seq[sbt.Def.Setting[java.io.File]]", "kind" : "lazy val"}, {"label" : "resourceConfigPaths", "tail" : ": Seq[Def.Setting[_ >: Seq[Task[Seq[File]]] with Task[Seq[Source]] with Task[Seq[File]] with Seq[File] with File <: AnyRef]]", "member" : "sbt.Defaults.resourceConfigPaths", "link" : "sbt\/Defaults$.html#resourceConfigPaths:Seq[sbt.Def.Setting[_>:Seq[sbt.Task[Seq[java.io.File]]]withsbt.Task[Seq[sbt.internal.io.Source]]withsbt.Task[Seq[java.io.File]]withSeq[java.io.File]withjava.io.File<:Object]]", "kind" : "lazy val"}, {"label" : "sourceConfigPaths", "tail" : ": Seq[Def.Setting[_ >: Seq[Task[Seq[File]]] with Task[Seq[Source]] with Task[Seq[File]] with Seq[File] with File <: AnyRef]]", "member" : "sbt.Defaults.sourceConfigPaths", "link" : "sbt\/Defaults$.html#sourceConfigPaths:Seq[sbt.Def.Setting[_>:Seq[sbt.Task[Seq[java.io.File]]]withsbt.Task[Seq[sbt.internal.io.Source]]withsbt.Task[Seq[java.io.File]]withSeq[java.io.File]withjava.io.File<:Object]]", "kind" : "lazy val"}, {"label" : "configPaths", "tail" : ": Seq[Def.Setting[_ >: Seq[Task[Seq[File]]] with Task[Seq[Source]] with Task[Seq[File]] with Seq[File] with File <: AnyRef]]", "member" : "sbt.Defaults.configPaths", "link" : "sbt\/Defaults$.html#configPaths:Seq[sbt.Def.Setting[_>:Seq[sbt.Task[Seq[java.io.File]]]withsbt.Task[Seq[sbt.internal.io.Source]]withsbt.Task[Seq[java.io.File]]withSeq[java.io.File]withjava.io.File<:Object]]", "kind" : "lazy val"}, {"label" : "paths", "tail" : "(): Seq[Def.Setting[_ >: Option[File] with File <: Serializable]]", "member" : "sbt.Defaults.paths", "link" : "sbt\/Defaults$.html#paths:Seq[sbt.Def.Setting[_>:Option[java.io.File]withjava.io.File<:java.io.Serializable]]", "kind" : "def"}, {"label" : "projectCore", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.Defaults.projectCore", "link" : "sbt\/Defaults$.html#projectCore:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "defaultTestTasks", "tail" : "(key: Scoped): Seq[Def.Setting[_]]", "member" : "sbt.Defaults.defaultTestTasks", "link" : "sbt\/Defaults$.html#defaultTestTasks(key:sbt.Scoped):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "thisBuildCore", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.Defaults.thisBuildCore", "link" : "sbt\/Defaults$.html#thisBuildCore:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "buildCore", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.Defaults.buildCore", "link" : "sbt\/Defaults$.html#buildCore:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "analysisMap", "tail" : "(cp: Seq[Attributed[T]]): (T) ⇒ Option[CompileAnalysis]", "member" : "sbt.Defaults.analysisMap", "link" : "sbt\/Defaults$.html#analysisMap[T](cp:Seq[sbt.internal.util.Attributed[T]]):T=>Option[xsbti.compile.CompileAnalysis]", "kind" : "def"}, {"label" : "extractAnalysis", "tail" : "(a: Attributed[T]): (T, CompileAnalysis)", "member" : "sbt.Defaults.extractAnalysis", "link" : "sbt\/Defaults$.html#extractAnalysis[T](a:sbt.internal.util.Attributed[T]):(T,xsbti.compile.CompileAnalysis)", "kind" : "def"}, {"label" : "lock", "tail" : "(app: AppConfiguration): GlobalLock", "member" : "sbt.Defaults.lock", "link" : "sbt\/Defaults$.html#lock(app:xsbti.AppConfiguration):xsbti.GlobalLock", "kind" : "def"}, {"label" : "prefix", "tail" : "(config: String): String", "member" : "sbt.Defaults.prefix", "link" : "sbt\/Defaults$.html#prefix(config:String):String", "kind" : "def"}, {"label" : "nameForSrc", "tail" : "(config: String): String", "member" : "sbt.Defaults.nameForSrc", "link" : "sbt\/Defaults$.html#nameForSrc(config:String):String", "kind" : "def"}, {"label" : "configSrcSub", "tail" : "(key: SettingKey[File]): Def.Initialize[File]", "member" : "sbt.Defaults.configSrcSub", "link" : "sbt\/Defaults$.html#configSrcSub(key:sbt.SettingKey[java.io.File]):sbt.Def.Initialize[java.io.File]", "kind" : "def"}, {"label" : "CacheDirectoryName", "tail" : ": String(\"cache\")", "member" : "sbt.Defaults.CacheDirectoryName", "link" : "sbt\/Defaults$.html#CacheDirectoryName:String(\"cache\")", "kind" : "final val"}, {"label" : "getPrevious", "tail" : "(task: TaskKey[T]): Def.Initialize[Task[Option[T]]]", "member" : "sbt.BuildCommon.getPrevious", "link" : "sbt\/Defaults$.html#getPrevious[T](task:sbt.TaskKey[T]):sbt.Def.Initialize[sbt.Task[Option[T]]]", "kind" : "def"}, {"label" : "loadPrevious", "tail" : "(task: TaskKey[T])(f: JsonFormat[T]): Def.Initialize[Task[Option[T]]]", "member" : "sbt.BuildCommon.loadPrevious", "link" : "sbt\/Defaults$.html#loadPrevious[T](task:sbt.TaskKey[T])(implicitf:sjsonnew.JsonFormat[T]):sbt.Def.Initialize[sbt.Task[Option[T]]]", "kind" : "def"}, {"label" : "getForParserI", "tail" : "(task: TaskKey[T])(init: Def.Initialize[(State, Option[T]) ⇒ Parser[P]]): Def.Initialize[(State) ⇒ Parser[P]]", "member" : "sbt.BuildCommon.getForParserI", "link" : "sbt\/Defaults$.html#getForParserI[P,T](task:sbt.TaskKey[T])(init:sbt.Def.Initialize[(sbt.State,Option[T])=>sbt.internal.util.complete.Parser[P]]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[P]]", "kind" : "def"}, {"label" : "getForParser", "tail" : "(task: TaskKey[T])(init: (State, Option[T]) ⇒ Parser[P]): Def.Initialize[(State) ⇒ Parser[P]]", "member" : "sbt.BuildCommon.getForParser", "link" : "sbt\/Defaults$.html#getForParser[P,T](task:sbt.TaskKey[T])(init:(sbt.State,Option[T])=>sbt.internal.util.complete.Parser[P]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[P]]", "kind" : "def"}, {"label" : "loadForParserI", "tail" : "(task: TaskKey[T])(init: Def.Initialize[(State, Option[T]) ⇒ Parser[P]])(format: JsonFormat[T]): Def.Initialize[(State) ⇒ Parser[P]]", "member" : "sbt.BuildCommon.loadForParserI", "link" : "sbt\/Defaults$.html#loadForParserI[P,T](task:sbt.TaskKey[T])(init:sbt.Def.Initialize[(sbt.State,Option[T])=>sbt.internal.util.complete.Parser[P]])(implicitformat:sjsonnew.JsonFormat[T]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[P]]", "kind" : "def"}, {"label" : "loadForParser", "tail" : "(task: TaskKey[T])(f: (State, Option[T]) ⇒ Parser[P])(format: JsonFormat[T]): Def.Initialize[(State) ⇒ Parser[P]]", "member" : "sbt.BuildCommon.loadForParser", "link" : "sbt\/Defaults$.html#loadForParser[P,T](task:sbt.TaskKey[T])(f:(sbt.State,Option[T])=>sbt.internal.util.complete.Parser[P])(implicitformat:sjsonnew.JsonFormat[T]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[P]]", "kind" : "def"}, {"label" : "loadFromContext", "tail" : "(task: TaskKey[T], context: Def.ScopedKey[_], s: State)(f: JsonFormat[T]): Option[T]", "member" : "sbt.BuildCommon.loadFromContext", "link" : "sbt\/Defaults$.html#loadFromContext[T](task:sbt.TaskKey[T],context:sbt.Def.ScopedKey[_],s:sbt.State)(implicitf:sjsonnew.JsonFormat[T]):Option[T]", "kind" : "def"}, {"label" : "getFromContext", "tail" : "(task: TaskKey[T], context: Def.ScopedKey[_], s: State): Option[T]", "member" : "sbt.BuildCommon.getFromContext", "link" : "sbt\/Defaults$.html#getFromContext[T](task:sbt.TaskKey[T],context:sbt.Def.ScopedKey[_],s:sbt.State):Option[T]", "kind" : "def"}, {"label" : "overrideConfigs", "tail" : "(cs: Configuration*)(configurations: Seq[Configuration]): Seq[Configuration]", "member" : "sbt.BuildCommon.overrideConfigs", "link" : "sbt\/Defaults$.html#overrideConfigs(cs:sbt.librarymanagement.Configuration*)(configurations:Seq[sbt.librarymanagement.Configuration]):Seq[sbt.librarymanagement.Configuration]", "kind" : "def"}, {"label" : "richPathFinder", "tail" : "(s: PathFinder): RichPathFinder", "member" : "sbt.BuildCommon.richPathFinder", "link" : "sbt\/Defaults$.html#richPathFinder(s:sbt.io.PathFinder):BuildCommon.this.RichPathFinder", "kind" : "implicit def"}, {"label" : "richFiles", "tail" : "(s: Seq[File]): RichFiles", "member" : "sbt.BuildCommon.richFiles", "link" : "sbt\/Defaults$.html#richFiles(s:Seq[java.io.File]):BuildCommon.this.RichFiles", "kind" : "implicit def"}, {"label" : "richAttributed", "tail" : "(s: Seq[Attributed[File]]): RichAttributed", "member" : "sbt.BuildCommon.richAttributed", "link" : "sbt\/Defaults$.html#richAttributed(s:Seq[sbt.internal.util.Attributed[java.io.File]]):BuildCommon.this.RichAttributed", "kind" : "implicit def"}, {"label" : "globFilter", "tail" : "(expression: String): NameFilter", "member" : "sbt.BuildCommon.globFilter", "link" : "sbt\/Defaults$.html#globFilter(expression:String):sbt.io.NameFilter", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Defaults$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Defaults$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Defaults$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Defaults$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Defaults$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Defaults$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Defaults$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Defaults$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Defaults$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Defaults$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Defaults$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Defaults$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Defaults$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Defaults$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Defaults$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Defaults$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Defaults$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Defaults$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Defaults$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.DefExtra", "members_trait" : [{"label" : "toTaskSequential", "tail" : "(d: Def.type): TaskSequential", "member" : "sbt.DefExtra.toTaskSequential", "link" : "sbt\/DefExtra.html#toTaskSequential(d:sbt.Def.type):sbt.internal.TaskSequential", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/DefExtra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/DefExtra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/DefExtra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/DefExtra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/DefExtra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/DefExtra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/DefExtra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DefExtra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DefExtra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DefExtra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/DefExtra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/DefExtra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/DefExtra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/DefExtra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/DefExtra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/DefExtra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/DefExtra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/DefExtra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/DefExtra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/DefExtra.html", "kind" : "trait"}, {"name" : "sbt.DelegateIndex", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/DelegateIndex.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/DelegateIndex.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/DelegateIndex.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/DelegateIndex.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/DelegateIndex.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/DelegateIndex.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/DelegateIndex.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DelegateIndex.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DelegateIndex.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DelegateIndex.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/DelegateIndex.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/DelegateIndex.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/DelegateIndex.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/DelegateIndex.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/DelegateIndex.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/DelegateIndex.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/DelegateIndex.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/DelegateIndex.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/DelegateIndex.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "config", "tail" : "(ref: ProjectRef, conf: ConfigKey): Seq[ScopeAxis[ConfigKey]]", "member" : "sbt.DelegateIndex.config", "link" : "sbt\/DelegateIndex.html#config(ref:sbt.ProjectRef,conf:sbt.ConfigKey):Seq[sbt.ScopeAxis[sbt.ConfigKey]]", "kind" : "abstract def"}, {"label" : "project", "tail" : "(ref: ProjectRef): Seq[ScopeAxis[ResolvedReference]]", "member" : "sbt.DelegateIndex.project", "link" : "sbt\/DelegateIndex.html#project(ref:sbt.ProjectRef):Seq[sbt.ScopeAxis[sbt.ResolvedReference]]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/DelegateIndex.html", "kind" : "trait"}, {"name" : "sbt.DependsOn", "shortDescription" : "A computation in that requires other tasks deps to be evaluated first.", "members_case class" : [{"member" : "sbt.DependsOn#<init>", "error" : "unsupported entity"}, {"label" : "deps", "tail" : ": Seq[Task[_]]", "member" : "sbt.DependsOn.deps", "link" : "sbt\/DependsOn.html#deps:Seq[sbt.Task[_]]", "kind" : "val"}, {"label" : "in", "tail" : ": Task[T]", "member" : "sbt.DependsOn.in", "link" : "sbt\/DependsOn.html#in:sbt.Task[T]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/DependsOn.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/DependsOn.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/DependsOn.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/DependsOn.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/DependsOn.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/DependsOn.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/DependsOn.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DependsOn.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DependsOn.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DependsOn.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/DependsOn.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/DependsOn.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/DependsOn.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/DependsOn.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/DependsOn.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/DependsOn.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/DependsOn.html", "kind" : "case class"}, {"name" : "sbt.Doc", "members_trait" : [{"label" : "Gen", "tail" : "", "member" : "sbt.Doc.Gen", "link" : "sbt\/Doc.html#Gen=(Seq[java.io.File],Seq[java.io.File],java.io.File,Seq[String],Int,sbt.internal.util.ManagedLogger)=>Unit", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Doc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Doc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Doc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Doc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Doc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Doc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Doc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Doc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Doc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Doc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Doc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Doc.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Doc.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Doc.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Doc.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Doc.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Doc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Doc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Doc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/Doc$.html", "members_object" : [{"label" : "javaSourcesOnly", "tail" : ": (File) ⇒ Boolean", "member" : "sbt.Doc.javaSourcesOnly", "link" : "sbt\/Doc$.html#javaSourcesOnly:java.io.File=>Boolean", "kind" : "val"}, {"label" : "javadoc", "tail" : "(label: String, cacheStoreFactory: CacheStoreFactory, doc: JavaTools, log: Logger, reporter: Reporter, fileInputOptions: Seq[String]): Gen", "member" : "sbt.Doc.javadoc", "link" : "sbt\/Doc$.html#javadoc(label:String,cacheStoreFactory:sbt.util.CacheStoreFactory,doc:xsbti.compile.JavaTools,log:sbt.util.Logger,reporter:xsbti.Reporter,fileInputOptions:Seq[String]):sbt.RawCompileLike.Gen", "kind" : "def"}, {"label" : "javadoc", "tail" : "(label: String, cacheStoreFactory: CacheStoreFactory, doc: JavaTools, log: Logger, reporter: Reporter): Gen", "member" : "sbt.Doc.javadoc", "link" : "sbt\/Doc$.html#javadoc(label:String,cacheStoreFactory:sbt.util.CacheStoreFactory,doc:xsbti.compile.JavaTools,log:sbt.util.Logger,reporter:xsbti.Reporter):sbt.RawCompileLike.Gen", "kind" : "def"}, {"label" : "scaladoc", "tail" : "(label: String, cacheStoreFactory: CacheStoreFactory, compiler: AnalyzingCompiler, fileInputOptions: Seq[String]): Gen", "member" : "sbt.Doc.scaladoc", "link" : "sbt\/Doc$.html#scaladoc(label:String,cacheStoreFactory:sbt.util.CacheStoreFactory,compiler:sbt.internal.inc.AnalyzingCompiler,fileInputOptions:Seq[String]):sbt.RawCompileLike.Gen", "kind" : "def"}, {"label" : "scaladoc", "tail" : "(label: String, cacheStoreFactory: CacheStoreFactory, compiler: AnalyzingCompiler): Gen", "member" : "sbt.Doc.scaladoc", "link" : "sbt\/Doc$.html#scaladoc(label:String,cacheStoreFactory:sbt.util.CacheStoreFactory,compiler:sbt.internal.inc.AnalyzingCompiler):sbt.RawCompileLike.Gen", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Doc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Doc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Doc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Doc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Doc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Doc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Doc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Doc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Doc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Doc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Doc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Doc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Doc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Doc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Doc$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Doc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Doc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Doc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Doc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/Doc.html", "kind" : "object"}, {"name" : "sbt.DotGraph", "shortDescription" : "", "object" : "sbt\/DotGraph$.html", "members_object" : [{"label" : "sourceToString", "tail" : "(roots: Iterable[File], source: File): String", "member" : "sbt.DotGraph.sourceToString", "link" : "sbt\/DotGraph$.html#sourceToString(roots:Iterable[java.io.File],source:java.io.File):String", "kind" : "def"}, {"label" : "generateGraph", "tail" : "(file: File, graphName: String, relation: Relation[K, V], keyToString: (K) ⇒ String, valueToString: (V) ⇒ String): Unit", "member" : "sbt.DotGraph.generateGraph", "link" : "sbt\/DotGraph$.html#generateGraph[K,V](file:java.io.File,graphName:String,relation:sbt.internal.util.Relation[K,V],keyToString:K=>String,valueToString:V=>String):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(relations: Relations, outputDir: File, sourceToString: (File) ⇒ String, externalToString: (File) ⇒ String): Unit", "member" : "sbt.DotGraph.apply", "link" : "sbt\/DotGraph$.html#apply(relations:sbt.internal.inc.Relations,outputDir:java.io.File,sourceToString:java.io.File=>String,externalToString:java.io.File=>String):Unit", "kind" : "def"}, {"label" : "packages", "tail" : "(relations: Relations, outputDirectory: File, sourceRoots: Iterable[File]): Unit", "member" : "sbt.DotGraph.packages", "link" : "sbt\/DotGraph$.html#packages(relations:sbt.internal.inc.Relations,outputDirectory:java.io.File,sourceRoots:Iterable[java.io.File]):Unit", "kind" : "def"}, {"label" : "sources", "tail" : "(relations: Relations, outputDirectory: File, sourceRoots: Iterable[File]): Unit", "member" : "sbt.DotGraph.sources", "link" : "sbt\/DotGraph$.html#sources(relations:sbt.internal.inc.Relations,outputDirectory:java.io.File,sourceRoots:Iterable[java.io.File]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/DotGraph$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/DotGraph$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/DotGraph$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/DotGraph$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/DotGraph$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/DotGraph$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/DotGraph$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DotGraph$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DotGraph$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/DotGraph$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/DotGraph$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/DotGraph$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/DotGraph$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/DotGraph$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/DotGraph$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/DotGraph$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/DotGraph$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/DotGraph$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/DotGraph$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.EvaluateTask", "shortDescription" : "", "object" : "sbt\/EvaluateTask$.html", "members_object" : [{"label" : "injectStreams", "tail" : ": (Def.ScopedKey[_]) ⇒ Seq[Def.Setting[_]]", "member" : "sbt.EvaluateTask.injectStreams", "link" : "sbt\/EvaluateTask$.html#injectStreams:sbt.Def.ScopedKey[_]=>Seq[sbt.Def.Setting[_]]", "kind" : "val"}, {"label" : "onResult", "tail" : "(result: Result[T], log: Logger)(f: (T) ⇒ S): S", "member" : "sbt.EvaluateTask.onResult", "link" : "sbt\/EvaluateTask$.html#onResult[T,S](result:sbt.Result[T],log:sbt.util.Logger)(f:T=>S):S", "kind" : "def"}, {"label" : "processResult", "tail" : "(result: Result[T], log: Logger, show: Boolean): T", "member" : "sbt.EvaluateTask.processResult", "link" : "sbt\/EvaluateTask$.html#processResult[T](result:sbt.Result[T],log:sbt.util.Logger,show:Boolean):T", "kind" : "def"}, {"label" : "liftAnonymous", "tail" : "(): (Incomplete) ⇒ Incomplete", "member" : "sbt.EvaluateTask.liftAnonymous", "link" : "sbt\/EvaluateTask$.html#liftAnonymous:sbt.Incomplete=>sbt.Incomplete", "kind" : "def"}, {"label" : "convertCyclic", "tail" : "(c: AnyCyclic): String", "member" : "sbt.EvaluateTask.convertCyclic", "link" : "sbt\/EvaluateTask$.html#convertCyclic(c:sbt.EvaluateTask.AnyCyclic):String", "kind" : "def"}, {"label" : "convertCyclicInc", "tail" : "(): (Incomplete) ⇒ Incomplete", "member" : "sbt.EvaluateTask.convertCyclicInc", "link" : "sbt\/EvaluateTask$.html#convertCyclicInc:sbt.Incomplete=>sbt.Incomplete", "kind" : "def"}, {"label" : "AnyCyclic", "tail" : "", "member" : "sbt.EvaluateTask.AnyCyclic", "link" : "sbt\/EvaluateTask$.html#AnyCyclic=sbt.Execute[AnyRef{typeA[_]<:AnyRef}#A]#CyclicException[_]", "kind" : "type"}, {"label" : "taskToKey", "tail" : "(): (Incomplete) ⇒ Incomplete", "member" : "sbt.EvaluateTask.taskToKey", "link" : "sbt\/EvaluateTask$.html#taskToKey:sbt.Incomplete=>sbt.Incomplete", "kind" : "def"}, {"label" : "transformInc", "tail" : "(result: Result[T]): Result[T]", "member" : "sbt.EvaluateTask.transformInc", "link" : "sbt\/EvaluateTask$.html#transformInc[T](result:sbt.Result[T]):sbt.Result[T]", "kind" : "def"}, {"label" : "stateTransform", "tail" : "(results: RMap[Task, Result]): (State) ⇒ State", "member" : "sbt.EvaluateTask.stateTransform", "link" : "sbt\/EvaluateTask$.html#stateTransform(results:sbt.internal.util.RMap[sbt.Task,sbt.Result]):sbt.State=>sbt.State", "kind" : "def"}, {"label" : "applyResults", "tail" : "(results: RMap[Task, Result], state: State, root: Task[T]): (State, Result[T])", "member" : "sbt.EvaluateTask.applyResults", "link" : "sbt\/EvaluateTask$.html#applyResults[T](results:sbt.internal.util.RMap[sbt.Task,sbt.Result],state:sbt.State,root:sbt.Task[T]):(sbt.State,sbt.Result[T])", "kind" : "def"}, {"label" : "runTask", "tail" : "(root: Task[T], state: State, streams: Streams, triggers: Triggers[Task], config: EvaluateTaskConfig)(taskToNode: NodeView[Task]): (State, Result[T])", "member" : "sbt.EvaluateTask.runTask", "link" : "sbt\/EvaluateTask$.html#runTask[T](root:sbt.Task[T],state:sbt.State,streams:sbt.Keys.Streams,triggers:sbt.Triggers[sbt.Task],config:sbt.EvaluateTaskConfig)(implicittaskToNode:sbt.NodeView[sbt.Task]):(sbt.State,sbt.Result[T])", "kind" : "def"}, {"label" : "nodeView", "tail" : "(state: State, streams: Streams, roots: Seq[Def.ScopedKey[_]], dummies: DummyTaskMap): NodeView[Task]", "member" : "sbt.EvaluateTask.nodeView", "link" : "sbt\/EvaluateTask$.html#nodeView[HL<:sbt.internal.util.HList](state:sbt.State,streams:sbt.Keys.Streams,roots:Seq[sbt.Def.ScopedKey[_]],dummies:sbt.std.Transform.DummyTaskMap):sbt.NodeView[sbt.Task]", "kind" : "def"}, {"label" : "getTask", "tail" : "(structure: BuildStructure, taskKey: Def.ScopedKey[Task[T]], state: State, streams: Streams, ref: ProjectRef): Option[(Task[T], NodeView[Task])]", "member" : "sbt.EvaluateTask.getTask", "link" : "sbt\/EvaluateTask$.html#getTask[T](structure:sbt.internal.BuildStructure,taskKey:sbt.Def.ScopedKey[sbt.Task[T]],state:sbt.State,streams:sbt.Keys.Streams,ref:sbt.ProjectRef):Option[(sbt.Task[T],sbt.NodeView[sbt.Task])]", "kind" : "def"}, {"label" : "withStreams", "tail" : "(structure: BuildStructure, state: State)(f: (Streams) ⇒ T): T", "member" : "sbt.EvaluateTask.withStreams", "link" : "sbt\/EvaluateTask$.html#withStreams[T](structure:sbt.internal.BuildStructure,state:sbt.State)(f:sbt.Keys.Streams=>T):T", "kind" : "def"}, {"label" : "getStreams", "tail" : "(key: Def.ScopedKey[_], streams: Streams): TaskStreams", "member" : "sbt.EvaluateTask.getStreams", "link" : "sbt\/EvaluateTask$.html#getStreams(key:sbt.Def.ScopedKey[_],streams:sbt.Keys.Streams):sbt.Keys.TaskStreams", "kind" : "def"}, {"label" : "suppressedMessage", "tail" : "(key: Def.ScopedKey[_])(display: Show[Def.ScopedKey[_]]): String", "member" : "sbt.EvaluateTask.suppressedMessage", "link" : "sbt\/EvaluateTask$.html#suppressedMessage(key:sbt.Def.ScopedKey[_])(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):String", "kind" : "def"}, {"label" : "logIncomplete", "tail" : "(result: Incomplete, state: State, streams: Streams): Unit", "member" : "sbt.EvaluateTask.logIncomplete", "link" : "sbt\/EvaluateTask$.html#logIncomplete(result:sbt.Incomplete,state:sbt.State,streams:sbt.Keys.Streams):Unit", "kind" : "def"}, {"label" : "logIncResult", "tail" : "(result: Result[_], state: State, streams: Streams): Unit", "member" : "sbt.EvaluateTask.logIncResult", "link" : "sbt\/EvaluateTask$.html#logIncResult(result:sbt.Result[_],state:sbt.State,streams:sbt.Keys.Streams):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(structure: BuildStructure, taskKey: Def.ScopedKey[Task[T]], state: State, ref: ProjectRef, config: EvaluateTaskConfig): Option[(State, Result[T])]", "member" : "sbt.EvaluateTask.apply", "link" : "sbt\/EvaluateTask$.html#apply[T](structure:sbt.internal.BuildStructure,taskKey:sbt.Def.ScopedKey[sbt.Task[T]],state:sbt.State,ref:sbt.ProjectRef,config:sbt.EvaluateTaskConfig):Option[(sbt.State,sbt.Result[T])]", "kind" : "def"}, {"label" : "apply", "tail" : "(structure: BuildStructure, taskKey: Def.ScopedKey[Task[T]], state: State, ref: ProjectRef): Option[(State, Result[T])]", "member" : "sbt.EvaluateTask.apply", "link" : "sbt\/EvaluateTask$.html#apply[T](structure:sbt.internal.BuildStructure,taskKey:sbt.Def.ScopedKey[sbt.Task[T]],state:sbt.State,ref:sbt.ProjectRef):Option[(sbt.State,sbt.Result[T])]", "kind" : "def"}, {"label" : "evalPluginDef", "tail" : "(log: Logger)(pluginDef: BuildStructure, state: State): PluginData", "member" : "sbt.EvaluateTask.evalPluginDef", "link" : "sbt\/EvaluateTask$.html#evalPluginDef(log:sbt.util.Logger)(pluginDef:sbt.internal.BuildStructure,state:sbt.State):sbt.PluginData", "kind" : "def"}, {"label" : "injectSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.EvaluateTask.injectSettings", "link" : "sbt\/EvaluateTask$.html#injectSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "getSetting", "tail" : "(key: SettingKey[T], default: T, extracted: Extracted, structure: BuildStructure): T", "member" : "sbt.EvaluateTask.getSetting", "link" : "sbt\/EvaluateTask$.html#getSetting[T](key:sbt.SettingKey[T],default:T,extracted:sbt.Extracted,structure:sbt.internal.BuildStructure):T", "kind" : "def"}, {"label" : "cancelStrategy", "tail" : "(extracted: Extracted, structure: BuildStructure, state: State): TaskCancellationStrategy", "member" : "sbt.EvaluateTask.cancelStrategy", "link" : "sbt\/EvaluateTask$.html#cancelStrategy(extracted:sbt.Extracted,structure:sbt.internal.BuildStructure,state:sbt.State):sbt.TaskCancellationStrategy", "kind" : "def"}, {"label" : "cancelable", "tail" : "(extracted: Extracted, structure: BuildStructure): Boolean", "member" : "sbt.EvaluateTask.cancelable", "link" : "sbt\/EvaluateTask$.html#cancelable(extracted:sbt.Extracted,structure:sbt.internal.BuildStructure):Boolean", "kind" : "def"}, {"label" : "maxWorkers", "tail" : "(extracted: Extracted, structure: BuildStructure): Int", "member" : "sbt.EvaluateTask.maxWorkers", "link" : "sbt\/EvaluateTask$.html#maxWorkers(extracted:sbt.Extracted,structure:sbt.internal.BuildStructure):Int", "kind" : "def"}, {"label" : "restrictions", "tail" : "(extracted: Extracted, structure: BuildStructure): Seq[Rule]", "member" : "sbt.EvaluateTask.restrictions", "link" : "sbt\/EvaluateTask$.html#restrictions(extracted:sbt.Extracted,structure:sbt.internal.BuildStructure):Seq[sbt.Tags.Rule]", "kind" : "def"}, {"label" : "restrictions", "tail" : "(state: State): Seq[Rule]", "member" : "sbt.EvaluateTask.restrictions", "link" : "sbt\/EvaluateTask$.html#restrictions(state:sbt.State):Seq[sbt.Tags.Rule]", "kind" : "def"}, {"label" : "defaultRestrictions", "tail" : "(extracted: Extracted, structure: BuildStructure): Seq[Rule]", "member" : "sbt.EvaluateTask.defaultRestrictions", "link" : "sbt\/EvaluateTask$.html#defaultRestrictions(extracted:sbt.Extracted,structure:sbt.internal.BuildStructure):Seq[sbt.Tags.Rule]", "kind" : "def"}, {"label" : "defaultRestrictions", "tail" : "(maxWorkers: Int): List[Rule]", "member" : "sbt.EvaluateTask.defaultRestrictions", "link" : "sbt\/EvaluateTask$.html#defaultRestrictions(maxWorkers:Int):List[sbt.Tags.Rule]", "kind" : "def"}, {"label" : "extractedTaskConfig", "tail" : "(extracted: Extracted, structure: BuildStructure, state: State): EvaluateTaskConfig", "member" : "sbt.EvaluateTask.extractedTaskConfig", "link" : "sbt\/EvaluateTask$.html#extractedTaskConfig(extracted:sbt.Extracted,structure:sbt.internal.BuildStructure,state:sbt.State):sbt.EvaluateTaskConfig", "kind" : "def"}, {"label" : "SystemProcessors", "tail" : ": Int", "member" : "sbt.EvaluateTask.SystemProcessors", "link" : "sbt\/EvaluateTask$.html#SystemProcessors:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/EvaluateTask$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/EvaluateTask$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/EvaluateTask$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/EvaluateTask$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/EvaluateTask$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/EvaluateTask$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/EvaluateTask$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/EvaluateTask$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/EvaluateTask$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/EvaluateTask$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/EvaluateTask$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/EvaluateTask$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/EvaluateTask$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/EvaluateTask$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/EvaluateTask$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/EvaluateTask$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/EvaluateTask$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/EvaluateTask$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/EvaluateTask$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.EvaluateTaskConfig", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/EvaluateTaskConfig.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/EvaluateTaskConfig.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/EvaluateTaskConfig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/EvaluateTaskConfig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/EvaluateTaskConfig.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/EvaluateTaskConfig.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/EvaluateTaskConfig.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/EvaluateTaskConfig.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/EvaluateTaskConfig.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/EvaluateTaskConfig.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/EvaluateTaskConfig.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/EvaluateTaskConfig.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/EvaluateTaskConfig.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/EvaluateTaskConfig.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/EvaluateTaskConfig.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/EvaluateTaskConfig.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/EvaluateTaskConfig.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/EvaluateTaskConfig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/EvaluateTaskConfig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "minForcegcInterval", "tail" : "(): Duration", "member" : "sbt.EvaluateTaskConfig.minForcegcInterval", "link" : "sbt\/EvaluateTaskConfig.html#minForcegcInterval:scala.concurrent.duration.Duration", "kind" : "abstract def"}, {"label" : "forceGarbageCollection", "tail" : "(): Boolean", "member" : "sbt.EvaluateTaskConfig.forceGarbageCollection", "link" : "sbt\/EvaluateTaskConfig.html#forceGarbageCollection:Boolean", "kind" : "abstract def"}, {"label" : "cancelStrategy", "tail" : "(): TaskCancellationStrategy", "member" : "sbt.EvaluateTaskConfig.cancelStrategy", "link" : "sbt\/EvaluateTaskConfig.html#cancelStrategy:sbt.TaskCancellationStrategy", "kind" : "abstract def"}, {"label" : "progressReporter", "tail" : "(): ExecuteProgress[Task]", "member" : "sbt.EvaluateTaskConfig.progressReporter", "link" : "sbt\/EvaluateTaskConfig.html#progressReporter:sbt.ExecuteProgress[sbt.Task]", "kind" : "abstract def"}, {"label" : "checkCycles", "tail" : "(): Boolean", "member" : "sbt.EvaluateTaskConfig.checkCycles", "link" : "sbt\/EvaluateTaskConfig.html#checkCycles:Boolean", "kind" : "abstract def"}, {"label" : "restrictions", "tail" : "(): Seq[Rule]", "member" : "sbt.EvaluateTaskConfig.restrictions", "link" : "sbt\/EvaluateTaskConfig.html#restrictions:Seq[sbt.Tags.Rule]", "kind" : "abstract def"}], "shortDescription" : "The new API for running tasks.", "object" : "sbt\/EvaluateTaskConfig$.html", "members_object" : [{"label" : "apply", "tail" : "(restrictions: Seq[Rule], checkCycles: Boolean, progressReporter: ExecuteProgress[Task], cancelStrategy: TaskCancellationStrategy, forceGarbageCollection: Boolean, minForcegcInterval: Duration): EvaluateTaskConfig", "member" : "sbt.EvaluateTaskConfig.apply", "link" : "sbt\/EvaluateTaskConfig$.html#apply(restrictions:Seq[sbt.Tags.Rule],checkCycles:Boolean,progressReporter:sbt.ExecuteProgress[sbt.Task],cancelStrategy:sbt.TaskCancellationStrategy,forceGarbageCollection:Boolean,minForcegcInterval:scala.concurrent.duration.Duration):sbt.EvaluateTaskConfig", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/EvaluateTaskConfig$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/EvaluateTaskConfig$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/EvaluateTaskConfig$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/EvaluateTaskConfig$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/EvaluateTaskConfig$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/EvaluateTaskConfig$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/EvaluateTaskConfig$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/EvaluateTaskConfig$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/EvaluateTaskConfig$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/EvaluateTaskConfig$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/EvaluateTaskConfig$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/EvaluateTaskConfig$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/EvaluateTaskConfig$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/EvaluateTaskConfig$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/EvaluateTaskConfig$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/EvaluateTaskConfig$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/EvaluateTaskConfig$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/EvaluateTaskConfig$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/EvaluateTaskConfig$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/EvaluateTaskConfig.html", "kind" : "trait"}, {"name" : "sbt.Exec", "shortDescription" : "", "object" : "sbt\/Exec$.html", "members_class" : [{"label" : "withSource", "tail" : "(source: CommandSource): Exec", "member" : "sbt.Exec.withSource", "link" : "sbt\/Exec.html#withSource(source:sbt.CommandSource):sbt.Exec", "kind" : "def"}, {"label" : "withSource", "tail" : "(source: Option[CommandSource]): Exec", "member" : "sbt.Exec.withSource", "link" : "sbt\/Exec.html#withSource(source:Option[sbt.CommandSource]):sbt.Exec", "kind" : "def"}, {"label" : "withExecId", "tail" : "(execId: String): Exec", "member" : "sbt.Exec.withExecId", "link" : "sbt\/Exec.html#withExecId(execId:String):sbt.Exec", "kind" : "def"}, {"label" : "withExecId", "tail" : "(execId: Option[String]): Exec", "member" : "sbt.Exec.withExecId", "link" : "sbt\/Exec.html#withExecId(execId:Option[String]):sbt.Exec", "kind" : "def"}, {"label" : "withCommandLine", "tail" : "(commandLine: String): Exec", "member" : "sbt.Exec.withCommandLine", "link" : "sbt\/Exec.html#withCommandLine(commandLine:String):sbt.Exec", "kind" : "def"}, {"label" : "copy", "tail" : "(commandLine: String, execId: Option[String], source: Option[CommandSource]): Exec", "member" : "sbt.Exec.copy", "link" : "sbt\/Exec.html#copy(commandLine:String,execId:Option[String],source:Option[sbt.CommandSource]):sbt.Exec", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.Exec.toString", "link" : "sbt\/Exec.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.Exec.hashCode", "link" : "sbt\/Exec.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.Exec.equals", "link" : "sbt\/Exec.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "source", "tail" : ": Option[CommandSource]", "member" : "sbt.Exec.source", "link" : "sbt\/Exec.html#source:Option[sbt.CommandSource]", "kind" : "val"}, {"label" : "execId", "tail" : ": Option[String]", "member" : "sbt.Exec.execId", "link" : "sbt\/Exec.html#execId:Option[String]", "kind" : "val"}, {"label" : "commandLine", "tail" : ": String", "member" : "sbt.Exec.commandLine", "link" : "sbt\/Exec.html#commandLine:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Exec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Exec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Exec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Exec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Exec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Exec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Exec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Exec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Exec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Exec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Exec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Exec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Exec.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Exec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Exec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Exec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(commandLine: String, execId: String, source: CommandSource): Exec", "member" : "sbt.Exec.apply", "link" : "sbt\/Exec$.html#apply(commandLine:String,execId:String,source:sbt.CommandSource):sbt.Exec", "kind" : "def"}, {"label" : "apply", "tail" : "(commandLine: String, execId: Option[String], source: Option[CommandSource]): Exec", "member" : "sbt.Exec.apply", "link" : "sbt\/Exec$.html#apply(commandLine:String,execId:Option[String],source:Option[sbt.CommandSource]):sbt.Exec", "kind" : "def"}, {"label" : "apply", "tail" : "(commandLine: String, source: CommandSource): Exec", "member" : "sbt.Exec.apply", "link" : "sbt\/Exec$.html#apply(commandLine:String,source:sbt.CommandSource):sbt.Exec", "kind" : "def"}, {"label" : "apply", "tail" : "(commandLine: String, source: Option[CommandSource]): Exec", "member" : "sbt.Exec.apply", "link" : "sbt\/Exec$.html#apply(commandLine:String,source:Option[sbt.CommandSource]):sbt.Exec", "kind" : "def"}, {"label" : "newExecId", "tail" : "(): String", "member" : "sbt.Exec.newExecId", "link" : "sbt\/Exec$.html#newExecId:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Exec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Exec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Exec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Exec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Exec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Exec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Exec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Exec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Exec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Exec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Exec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Exec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Exec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Exec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Exec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Exec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Exec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Exec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Exec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/Exec.html", "kind" : "class"}, {"name" : "sbt.Exit", "shortDescription" : "", "members_case class" : [{"member" : "sbt.Exit#<init>", "error" : "unsupported entity"}, {"label" : "code", "tail" : ": Int", "member" : "sbt.Exit.code", "link" : "sbt\/Exit.html#code:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Exit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Exit.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Exit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Exit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Exit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Exit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Exit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Exit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Exit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Exit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Exit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Exit.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Exit.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Exit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Exit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Exit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/Exit.html", "kind" : "case class"}, {"name" : "sbt.Extracted", "shortDescription" : "", "members_case class" : [{"label" : "append", "tail" : "(settings: Seq[Def.Setting[_]], state: State): State", "member" : "sbt.Extracted.append", "link" : "sbt\/Extracted.html#append(settings:Seq[sbt.Def.Setting[_]],state:sbt.State):sbt.State", "kind" : "def"}, {"label" : "runAggregated", "tail" : "(key: TaskKey[T], state: State): State", "member" : "sbt.Extracted.runAggregated", "link" : "sbt\/Extracted.html#runAggregated[T](key:sbt.TaskKey[T],state:sbt.State):sbt.State", "kind" : "def"}, {"label" : "runInputTask", "tail" : "(key: InputKey[T], input: String, state: State): (State, T)", "member" : "sbt.Extracted.runInputTask", "link" : "sbt\/Extracted.html#runInputTask[T](key:sbt.InputKey[T],input:String,state:sbt.State):(sbt.State,T)", "kind" : "def"}, {"label" : "runTask", "tail" : "(key: TaskKey[T], state: State): (State, T)", "member" : "sbt.Extracted.runTask", "link" : "sbt\/Extracted.html#runTask[T](key:sbt.TaskKey[T],state:sbt.State):(sbt.State,T)", "kind" : "def"}, {"label" : "getOpt", "tail" : "(key: TaskKey[T]): Option[Task[T]]", "member" : "sbt.Extracted.getOpt", "link" : "sbt\/Extracted.html#getOpt[T](key:sbt.TaskKey[T]):Option[sbt.Task[T]]", "kind" : "def"}, {"label" : "getOpt", "tail" : "(key: SettingKey[T]): Option[T]", "member" : "sbt.Extracted.getOpt", "link" : "sbt\/Extracted.html#getOpt[T](key:sbt.SettingKey[T]):Option[T]", "kind" : "def"}, {"label" : "get", "tail" : "(key: TaskKey[T]): Task[T]", "member" : "sbt.Extracted.get", "link" : "sbt\/Extracted.html#get[T](key:sbt.TaskKey[T]):sbt.Task[T]", "kind" : "def"}, {"label" : "get", "tail" : "(key: SettingKey[T]): T", "member" : "sbt.Extracted.get", "link" : "sbt\/Extracted.html#get[T](key:sbt.SettingKey[T]):T", "kind" : "def"}, {"label" : "currentLoader", "tail" : ": ClassLoader", "member" : "sbt.Extracted.currentLoader", "link" : "sbt\/Extracted.html#currentLoader:ClassLoader", "kind" : "lazy val"}, {"label" : "currentProject", "tail" : ": ResolvedProject", "member" : "sbt.Extracted.currentProject", "link" : "sbt\/Extracted.html#currentProject:sbt.ResolvedProject", "kind" : "lazy val"}, {"label" : "currentUnit", "tail" : ": LoadedBuildUnit", "member" : "sbt.Extracted.currentUnit", "link" : "sbt\/Extracted.html#currentUnit:sbt.internal.LoadedBuildUnit", "kind" : "lazy val"}, {"label" : "rootProject", "tail" : "(): (URI) ⇒ String", "member" : "sbt.Extracted.rootProject", "link" : "sbt\/Extracted.html#rootProject:java.net.URI=>String", "kind" : "def"}, {"member" : "sbt.Extracted#<init>", "error" : "unsupported entity"}, {"label" : "showKey", "tail" : ": Show[Def.ScopedKey[_]]", "member" : "sbt.Extracted.showKey", "link" : "sbt\/Extracted.html#showKey:sbt.util.Show[sbt.Def.ScopedKey[_]]", "kind" : "implicit val"}, {"label" : "currentRef", "tail" : ": ProjectRef", "member" : "sbt.Extracted.currentRef", "link" : "sbt\/Extracted.html#currentRef:sbt.ProjectRef", "kind" : "val"}, {"label" : "session", "tail" : ": SessionSettings", "member" : "sbt.Extracted.session", "link" : "sbt\/Extracted.html#session:sbt.internal.SessionSettings", "kind" : "val"}, {"label" : "structure", "tail" : ": BuildStructure", "member" : "sbt.Extracted.structure", "link" : "sbt\/Extracted.html#structure:sbt.internal.BuildStructure", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Extracted.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Extracted.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Extracted.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Extracted.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Extracted.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Extracted.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Extracted.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Extracted.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Extracted.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Extracted.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Extracted.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Extracted.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Extracted.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Extracted.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Extracted.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Extracted.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/Extracted.html", "kind" : "case class"}, {"name" : "sbt.FlatMapped", "shortDescription" : "Computes another task to evaluate based on results from evaluating other tasks.", "members_case class" : [{"member" : "sbt.FlatMapped#<init>", "error" : "unsupported entity"}, {"label" : "alist", "tail" : ": AList[K]", "member" : "sbt.FlatMapped.alist", "link" : "sbt\/FlatMapped.html#alist:sbt.internal.util.AList[K]", "kind" : "val"}, {"label" : "f", "tail" : ": (K[Result]) ⇒ Task[T]", "member" : "sbt.FlatMapped.f", "link" : "sbt\/FlatMapped.html#f:K[sbt.Result]=>sbt.Task[T]", "kind" : "val"}, {"label" : "in", "tail" : ": K[Task]", "member" : "sbt.FlatMapped.in", "link" : "sbt\/FlatMapped.html#in:K[sbt.Task]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/FlatMapped.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/FlatMapped.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/FlatMapped.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/FlatMapped.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/FlatMapped.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/FlatMapped.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/FlatMapped.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/FlatMapped.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/FlatMapped.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/FlatMapped.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/FlatMapped.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/FlatMapped.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/FlatMapped.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/FlatMapped.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/FlatMapped.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/FlatMapped.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/FlatMapped.html", "kind" : "case class"}, {"name" : "sbt.Fork", "shortDescription" : "Represents a command that can be forked.", "object" : "sbt\/Fork$.html", "members_class" : [{"label" : "fork", "tail" : "(config: ForkOptions, arguments: Seq[String]): Process", "member" : "sbt.Fork.fork", "link" : "sbt\/Fork.html#fork(config:sbt.ForkOptions,arguments:Seq[String]):scala.sys.process.Process", "kind" : "def"}, {"label" : "apply", "tail" : "(config: ForkOptions, arguments: Seq[String]): Int", "member" : "sbt.Fork.apply", "link" : "sbt\/Fork.html#apply(config:sbt.ForkOptions,arguments:Seq[String]):Int", "kind" : "def"}, {"member" : "sbt.Fork#<init>", "error" : "unsupported entity"}, {"label" : "runnerClass", "tail" : ": Option[String]", "member" : "sbt.Fork.runnerClass", "link" : "sbt\/Fork.html#runnerClass:Option[String]", "kind" : "val"}, {"label" : "commandName", "tail" : ": String", "member" : "sbt.Fork.commandName", "link" : "sbt\/Fork.html#commandName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Fork.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Fork.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Fork.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Fork.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Fork.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Fork.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Fork.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Fork.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Fork.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Fork.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Fork.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Fork.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Fork.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Fork.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Fork.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Fork.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Fork.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Fork.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Fork.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "scalac", "tail" : ": Fork", "member" : "sbt.Fork.scalac", "link" : "sbt\/Fork$.html#scalac:sbt.Fork", "kind" : "val"}, {"label" : "scala", "tail" : ": Fork", "member" : "sbt.Fork.scala", "link" : "sbt\/Fork$.html#scala:sbt.Fork", "kind" : "val"}, {"label" : "javac", "tail" : ": Fork", "member" : "sbt.Fork.javac", "link" : "sbt\/Fork$.html#javac:sbt.Fork", "kind" : "val"}, {"label" : "java", "tail" : ": Fork", "member" : "sbt.Fork.java", "link" : "sbt\/Fork$.html#java:sbt.Fork", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Fork$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Fork$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Fork$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Fork$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Fork$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Fork$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Fork$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Fork$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Fork$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Fork$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Fork$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Fork$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Fork$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Fork$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Fork$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Fork$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Fork$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Fork$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Fork$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/Fork.html", "kind" : "class"}, {"name" : "sbt.ForkConfiguration", "shortDescription" : "", "members_class" : [{"label" : "isParallel", "tail" : "(): Boolean", "member" : "sbt.ForkConfiguration.isParallel", "link" : "sbt\/ForkConfiguration.html#isParallel():Boolean", "kind" : "def"}, {"label" : "isAnsiCodesSupported", "tail" : "(): Boolean", "member" : "sbt.ForkConfiguration.isAnsiCodesSupported", "link" : "sbt\/ForkConfiguration.html#isAnsiCodesSupported():Boolean", "kind" : "def"}, {"member" : "sbt.ForkConfiguration#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ForkConfiguration.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ForkConfiguration.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ForkConfiguration.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ForkConfiguration.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ForkConfiguration.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ForkConfiguration.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ForkConfiguration.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkConfiguration.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkConfiguration.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkConfiguration.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ForkConfiguration.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ForkConfiguration.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ForkConfiguration.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ForkConfiguration.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ForkConfiguration.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ForkConfiguration.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ForkConfiguration.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ForkConfiguration.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ForkConfiguration.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/ForkConfiguration.html", "kind" : "class"}, {"name" : "sbt.ForkMain", "shortDescription" : "", "members_class" : [{"member" : "sbt.ForkMain#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ForkMain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ForkMain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ForkMain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ForkMain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ForkMain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ForkMain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ForkMain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkMain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkMain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkMain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ForkMain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ForkMain.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ForkMain.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ForkMain.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ForkMain.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ForkMain.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ForkMain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ForkMain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ForkMain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/ForkMain.html", "kind" : "class"}, {"name" : "sbt.ForkOptions", "shortDescription" : "Configures forking.", "object" : "sbt\/ForkOptions$.html", "members_class" : [{"label" : "withEnvVars", "tail" : "(envVars: Map[String, String]): ForkOptions", "member" : "sbt.ForkOptions.withEnvVars", "link" : "sbt\/ForkOptions.html#withEnvVars(envVars:scala.collection.immutable.Map[String,String]):sbt.ForkOptions", "kind" : "def"}, {"label" : "withConnectInput", "tail" : "(connectInput: Boolean): ForkOptions", "member" : "sbt.ForkOptions.withConnectInput", "link" : "sbt\/ForkOptions.html#withConnectInput(connectInput:Boolean):sbt.ForkOptions", "kind" : "def"}, {"label" : "withRunJVMOptions", "tail" : "(runJVMOptions: Vector[String]): ForkOptions", "member" : "sbt.ForkOptions.withRunJVMOptions", "link" : "sbt\/ForkOptions.html#withRunJVMOptions(runJVMOptions:Vector[String]):sbt.ForkOptions", "kind" : "def"}, {"label" : "withWorkingDirectory", "tail" : "(workingDirectory: File): ForkOptions", "member" : "sbt.ForkOptions.withWorkingDirectory", "link" : "sbt\/ForkOptions.html#withWorkingDirectory(workingDirectory:java.io.File):sbt.ForkOptions", "kind" : "def"}, {"label" : "withWorkingDirectory", "tail" : "(workingDirectory: Option[File]): ForkOptions", "member" : "sbt.ForkOptions.withWorkingDirectory", "link" : "sbt\/ForkOptions.html#withWorkingDirectory(workingDirectory:Option[java.io.File]):sbt.ForkOptions", "kind" : "def"}, {"label" : "withBootJars", "tail" : "(bootJars: Vector[File]): ForkOptions", "member" : "sbt.ForkOptions.withBootJars", "link" : "sbt\/ForkOptions.html#withBootJars(bootJars:Vector[java.io.File]):sbt.ForkOptions", "kind" : "def"}, {"label" : "withOutputStrategy", "tail" : "(outputStrategy: OutputStrategy): ForkOptions", "member" : "sbt.ForkOptions.withOutputStrategy", "link" : "sbt\/ForkOptions.html#withOutputStrategy(outputStrategy:sbt.OutputStrategy):sbt.ForkOptions", "kind" : "def"}, {"label" : "withOutputStrategy", "tail" : "(outputStrategy: Option[OutputStrategy]): ForkOptions", "member" : "sbt.ForkOptions.withOutputStrategy", "link" : "sbt\/ForkOptions.html#withOutputStrategy(outputStrategy:Option[sbt.OutputStrategy]):sbt.ForkOptions", "kind" : "def"}, {"label" : "withJavaHome", "tail" : "(javaHome: File): ForkOptions", "member" : "sbt.ForkOptions.withJavaHome", "link" : "sbt\/ForkOptions.html#withJavaHome(javaHome:java.io.File):sbt.ForkOptions", "kind" : "def"}, {"label" : "withJavaHome", "tail" : "(javaHome: Option[File]): ForkOptions", "member" : "sbt.ForkOptions.withJavaHome", "link" : "sbt\/ForkOptions.html#withJavaHome(javaHome:Option[java.io.File]):sbt.ForkOptions", "kind" : "def"}, {"label" : "copy", "tail" : "(javaHome: Option[File], outputStrategy: Option[OutputStrategy], bootJars: Vector[File], workingDirectory: Option[File], runJVMOptions: Vector[String], connectInput: Boolean, envVars: Map[String, String]): ForkOptions", "member" : "sbt.ForkOptions.copy", "link" : "sbt\/ForkOptions.html#copy(javaHome:Option[java.io.File],outputStrategy:Option[sbt.OutputStrategy],bootJars:Vector[java.io.File],workingDirectory:Option[java.io.File],runJVMOptions:Vector[String],connectInput:Boolean,envVars:scala.collection.immutable.Map[String,String]):sbt.ForkOptions", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.ForkOptions.toString", "link" : "sbt\/ForkOptions.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.ForkOptions.hashCode", "link" : "sbt\/ForkOptions.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.ForkOptions.equals", "link" : "sbt\/ForkOptions.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "envVars", "tail" : ": Map[String, String]", "member" : "sbt.ForkOptions.envVars", "link" : "sbt\/ForkOptions.html#envVars:scala.collection.immutable.Map[String,String]", "kind" : "val"}, {"label" : "connectInput", "tail" : ": Boolean", "member" : "sbt.ForkOptions.connectInput", "link" : "sbt\/ForkOptions.html#connectInput:Boolean", "kind" : "val"}, {"label" : "runJVMOptions", "tail" : ": Vector[String]", "member" : "sbt.ForkOptions.runJVMOptions", "link" : "sbt\/ForkOptions.html#runJVMOptions:Vector[String]", "kind" : "val"}, {"label" : "workingDirectory", "tail" : ": Option[File]", "member" : "sbt.ForkOptions.workingDirectory", "link" : "sbt\/ForkOptions.html#workingDirectory:Option[java.io.File]", "kind" : "val"}, {"label" : "bootJars", "tail" : ": Vector[File]", "member" : "sbt.ForkOptions.bootJars", "link" : "sbt\/ForkOptions.html#bootJars:Vector[java.io.File]", "kind" : "val"}, {"label" : "outputStrategy", "tail" : ": Option[OutputStrategy]", "member" : "sbt.ForkOptions.outputStrategy", "link" : "sbt\/ForkOptions.html#outputStrategy:Option[sbt.OutputStrategy]", "kind" : "val"}, {"label" : "javaHome", "tail" : ": Option[File]", "member" : "sbt.ForkOptions.javaHome", "link" : "sbt\/ForkOptions.html#javaHome:Option[java.io.File]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ForkOptions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ForkOptions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ForkOptions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ForkOptions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ForkOptions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ForkOptions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ForkOptions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkOptions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkOptions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkOptions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ForkOptions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ForkOptions.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ForkOptions.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ForkOptions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ForkOptions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ForkOptions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(javaHome: File, outputStrategy: OutputStrategy, bootJars: Vector[File], workingDirectory: File, runJVMOptions: Vector[String], connectInput: Boolean, envVars: Map[String, String]): ForkOptions", "member" : "sbt.ForkOptions.apply", "link" : "sbt\/ForkOptions$.html#apply(javaHome:java.io.File,outputStrategy:sbt.OutputStrategy,bootJars:Vector[java.io.File],workingDirectory:java.io.File,runJVMOptions:Vector[String],connectInput:Boolean,envVars:scala.collection.immutable.Map[String,String]):sbt.ForkOptions", "kind" : "def"}, {"label" : "apply", "tail" : "(javaHome: Option[File], outputStrategy: Option[OutputStrategy], bootJars: Vector[File], workingDirectory: Option[File], runJVMOptions: Vector[String], connectInput: Boolean, envVars: Map[String, String]): ForkOptions", "member" : "sbt.ForkOptions.apply", "link" : "sbt\/ForkOptions$.html#apply(javaHome:Option[java.io.File],outputStrategy:Option[sbt.OutputStrategy],bootJars:Vector[java.io.File],workingDirectory:Option[java.io.File],runJVMOptions:Vector[String],connectInput:Boolean,envVars:scala.collection.immutable.Map[String,String]):sbt.ForkOptions", "kind" : "def"}, {"label" : "apply", "tail" : "(): ForkOptions", "member" : "sbt.ForkOptions.apply", "link" : "sbt\/ForkOptions$.html#apply():sbt.ForkOptions", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ForkOptions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ForkOptions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ForkOptions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ForkOptions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ForkOptions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ForkOptions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ForkOptions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkOptions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkOptions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkOptions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ForkOptions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ForkOptions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ForkOptions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ForkOptions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ForkOptions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ForkOptions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ForkOptions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ForkOptions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ForkOptions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/ForkOptions.html", "kind" : "class"}, {"name" : "sbt.ForkRun", "shortDescription" : "", "members_class" : [{"label" : "fork", "tail" : "(mainClass: String, classpath: Seq[File], options: Seq[String], log: Logger): Process", "member" : "sbt.ForkRun.fork", "link" : "sbt\/ForkRun.html#fork(mainClass:String,classpath:Seq[java.io.File],options:Seq[String],log:sbt.util.Logger):scala.sys.process.Process", "kind" : "def"}, {"label" : "run", "tail" : "(mainClass: String, classpath: Seq[File], options: Seq[String], log: Logger): Try[Unit]", "member" : "sbt.ForkRun.run", "link" : "sbt\/ForkRun.html#run(mainClass:String,classpath:Seq[java.io.File],options:Seq[String],log:sbt.util.Logger):scala.util.Try[Unit]", "kind" : "def"}, {"member" : "sbt.ForkRun#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ForkRun.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ForkRun.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ForkRun.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ForkRun.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ForkRun.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ForkRun.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ForkRun.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkRun.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkRun.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkRun.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ForkRun.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ForkRun.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ForkRun.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ForkRun.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ForkRun.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ForkRun.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ForkRun.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ForkRun.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ForkRun.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/ForkRun.html", "kind" : "class"}, {"name" : "sbt.ForkTags", "shortDescription" : "", "members_class" : [{"label" : "finalize", "tail" : "(): Unit", "member" : "java.lang.Enum.finalize", "link" : "sbt\/ForkTags.html#finalize():Unit", "kind" : "final def"}, {"label" : "getDeclaringClass", "tail" : "(): Class[ForkTags]", "member" : "java.lang.Enum.getDeclaringClass", "link" : "sbt\/ForkTags.html#getDeclaringClass():Class[E]", "kind" : "final def"}, {"label" : "compareTo", "tail" : "(arg0: ForkTags): Int", "member" : "java.lang.Enum.compareTo", "link" : "sbt\/ForkTags.html#compareTo(x$1:E):Int", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "java.lang.Enum.clone", "link" : "sbt\/ForkTags.html#clone():Object", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "java.lang.Enum.hashCode", "link" : "sbt\/ForkTags.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "java.lang.Enum.equals", "link" : "sbt\/ForkTags.html#equals(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Enum.toString", "link" : "sbt\/ForkTags.html#toString():String", "kind" : "def"}, {"label" : "ordinal", "tail" : "(): Int", "member" : "java.lang.Enum.ordinal", "link" : "sbt\/ForkTags.html#ordinal():Int", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "java.lang.Enum.name", "link" : "sbt\/ForkTags.html#name():String", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ForkTags.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ForkTags.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ForkTags.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ForkTags.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ForkTags.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ForkTags.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkTags.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkTags.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ForkTags.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ForkTags.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ForkTags.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ForkTags.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ForkTags.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ForkTags.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/ForkTags.html", "kind" : "class"}, {"name" : "sbt.Help", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Help.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Help.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Help.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Help.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Help.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Help.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Help.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Help.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Help.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Help.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Help.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Help.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Help.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Help.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Help.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Help.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Help.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Help.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Help.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "++", "tail" : "(o: Help): Help", "member" : "sbt.Help.++", "link" : "sbt\/Help.html#++(o:sbt.Help):sbt.Help", "kind" : "abstract def"}, {"label" : "more", "tail" : "(): Set[String]", "member" : "sbt.Help.more", "link" : "sbt\/Help.html#more:Set[String]", "kind" : "abstract def"}, {"label" : "brief", "tail" : "(): Seq[(String, String)]", "member" : "sbt.Help.brief", "link" : "sbt\/Help.html#brief:Seq[(String,String)]", "kind" : "abstract def"}, {"label" : "detail", "tail" : "(): Map[String, String]", "member" : "sbt.Help.detail", "link" : "sbt\/Help.html#detail:Map[String,String]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/Help$.html", "members_object" : [{"label" : "moreMessage", "tail" : "(more: Seq[String]): String", "member" : "sbt.Help.moreMessage", "link" : "sbt\/Help$.html#moreMessage(more:Seq[String]):String", "kind" : "def"}, {"label" : "message", "tail" : "(h: Help, arg: Option[String]): String", "member" : "sbt.Help.message", "link" : "sbt\/Help$.html#message(h:sbt.Help,arg:Option[String]):String", "kind" : "def"}, {"label" : "detailOnly", "tail" : "(help: Seq[(String, String)]): Help", "member" : "sbt.Help.detailOnly", "link" : "sbt\/Help$.html#detailOnly(help:Seq[(String,String)]):sbt.Help", "kind" : "def"}, {"label" : "briefOnly", "tail" : "(help: Seq[(String, String)]): Help", "member" : "sbt.Help.briefOnly", "link" : "sbt\/Help$.html#briefOnly(help:Seq[(String,String)]):sbt.Help", "kind" : "def"}, {"label" : "briefDetail", "tail" : "(help: Seq[(String, String)]): Help", "member" : "sbt.Help.briefDetail", "link" : "sbt\/Help$.html#briefDetail(help:Seq[(String,String)]):sbt.Help", "kind" : "def"}, {"label" : "more", "tail" : "(name: String, detailedHelp: String): Help", "member" : "sbt.Help.more", "link" : "sbt\/Help$.html#more(name:String,detailedHelp:String):sbt.Help", "kind" : "def"}, {"label" : "apply", "tail" : "(briefHelp: Seq[(String, String)], detailedHelp: Map[String, String], more: Set[String]): Help", "member" : "sbt.Help.apply", "link" : "sbt\/Help$.html#apply(briefHelp:Seq[(String,String)],detailedHelp:Map[String,String],more:Set[String]):sbt.Help", "kind" : "def"}, {"label" : "apply", "tail" : "(briefHelp: Seq[(String, String)], detailedHelp: Map[String, String]): Help", "member" : "sbt.Help.apply", "link" : "sbt\/Help$.html#apply(briefHelp:Seq[(String,String)],detailedHelp:Map[String,String]):sbt.Help", "kind" : "def"}, {"label" : "apply", "tail" : "(briefHelp: (String, String), detailedHelp: Map[String, String]): Help", "member" : "sbt.Help.apply", "link" : "sbt\/Help$.html#apply(briefHelp:(String,String),detailedHelp:Map[String,String]):sbt.Help", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String, briefHelp: (String, String), detail: String): Help", "member" : "sbt.Help.apply", "link" : "sbt\/Help$.html#apply(name:String,briefHelp:(String,String),detail:String):sbt.Help", "kind" : "def"}, {"label" : "empty", "tail" : ": Help", "member" : "sbt.Help.empty", "link" : "sbt\/Help$.html#empty:sbt.Help", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Help$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Help$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Help$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Help$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Help$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Help$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Help$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Help$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Help$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Help$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Help$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Help$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Help$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Help$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Help$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Help$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Help$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Help$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Help$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/Help.html", "kind" : "trait"}, {"name" : "sbt.Highlight", "shortDescription" : "", "object" : "sbt\/Highlight$.html", "members_object" : [{"label" : "bold", "tail" : "(s: String): String", "member" : "sbt.Highlight.bold", "link" : "sbt\/Highlight$.html#bold(s:String):String", "kind" : "def"}, {"label" : "showMatches", "tail" : "(pattern: Pattern)(line: String): Option[String]", "member" : "sbt.Highlight.showMatches", "link" : "sbt\/Highlight$.html#showMatches(pattern:java.util.regex.Pattern)(line:String):Option[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Highlight$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Highlight$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Highlight$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Highlight$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Highlight$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Highlight$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Highlight$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Highlight$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Highlight$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Highlight$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Highlight$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Highlight$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Highlight$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Highlight$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Highlight$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Highlight$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Highlight$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Highlight$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Highlight$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.Identity", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.Identity.toString", "link" : "sbt\/Identity.html#toString():String", "kind" : "final def"}, {"label" : "equals", "tail" : "(a: Any): Boolean", "member" : "sbt.Identity.equals", "link" : "sbt\/Identity.html#equals(a:Any):Boolean", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.Identity.hashCode", "link" : "sbt\/Identity.html#hashCode():Int", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Identity.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Identity.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Identity.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Identity.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Identity.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Identity.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Identity.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Identity.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Identity.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Identity.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Identity.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Identity.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Identity.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Identity.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Identity.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Identity.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/Identity.html", "kind" : "trait"}, {"name" : "sbt.Inc", "shortDescription" : "Indicates the task did not complete normally and so it does not have a value.", "members_case class" : [{"label" : "toEither", "tail" : "(): Either[Incomplete, Nothing]", "member" : "sbt.Inc.toEither", "link" : "sbt\/Inc.html#toEither:Either[sbt.Incomplete,Nothing]", "kind" : "def"}, {"member" : "sbt.Inc#<init>", "error" : "unsupported entity"}, {"label" : "cause", "tail" : ": Incomplete", "member" : "sbt.Inc.cause", "link" : "sbt\/Inc.html#cause:sbt.Incomplete", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Inc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Inc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Inc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Inc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Inc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Inc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Inc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Inc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Inc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Inc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Inc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Inc.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Inc.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Inc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Inc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Inc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/Inc.html", "kind" : "case class"}, {"name" : "sbt.Incomplete", "shortDescription" : "Describes why a task did not complete.", "object" : "sbt\/Incomplete$.html", "members_object" : [{"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "sbt\/Incomplete$.html#ValueSet", "kind" : "object"}, {"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "sbt\/Incomplete$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "sbt\/Incomplete$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "sbt\/Incomplete$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "show", "tail" : "(tpe: Value): String", "member" : "sbt.Incomplete.show", "link" : "sbt\/Incomplete$.html#show(tpe:sbt.Incomplete.Value):String", "kind" : "def"}, {"label" : "allExceptions", "tail" : "(i: Incomplete): Iterable[Throwable]", "member" : "sbt.Incomplete.allExceptions", "link" : "sbt\/Incomplete$.html#allExceptions(i:sbt.Incomplete):Iterable[Throwable]", "kind" : "def"}, {"label" : "allExceptions", "tail" : "(is: Seq[Incomplete]): Iterable[Throwable]", "member" : "sbt.Incomplete.allExceptions", "link" : "sbt\/Incomplete$.html#allExceptions(is:Seq[sbt.Incomplete]):Iterable[Throwable]", "kind" : "def"}, {"label" : "linearize", "tail" : "(i: Incomplete): Seq[Incomplete]", "member" : "sbt.Incomplete.linearize", "link" : "sbt\/Incomplete$.html#linearize(i:sbt.Incomplete):Seq[sbt.Incomplete]", "kind" : "def"}, {"label" : "visitAll", "tail" : "(i: Incomplete)(f: (Incomplete) ⇒ Unit): Unit", "member" : "sbt.Incomplete.visitAll", "link" : "sbt\/Incomplete$.html#visitAll(i:sbt.Incomplete)(f:sbt.Incomplete=>Unit):Unit", "kind" : "def"}, {"label" : "transform", "tail" : "(i: Incomplete, topDown: Boolean)(f: (Incomplete) ⇒ Incomplete): Incomplete", "member" : "sbt.Incomplete.transform", "link" : "sbt\/Incomplete$.html#transform(i:sbt.Incomplete,topDown:Boolean)(f:sbt.Incomplete=>sbt.Incomplete):sbt.Incomplete", "kind" : "def"}, {"label" : "transformBU", "tail" : "(i: Incomplete)(f: (Incomplete) ⇒ Incomplete): Incomplete", "member" : "sbt.Incomplete.transformBU", "link" : "sbt\/Incomplete$.html#transformBU(i:sbt.Incomplete)(f:sbt.Incomplete=>sbt.Incomplete):sbt.Incomplete", "kind" : "def"}, {"label" : "transformTD", "tail" : "(i: Incomplete)(f: (Incomplete) ⇒ Incomplete): Incomplete", "member" : "sbt.Incomplete.transformTD", "link" : "sbt\/Incomplete$.html#transformTD(i:sbt.Incomplete)(f:sbt.Incomplete=>sbt.Incomplete):sbt.Incomplete", "kind" : "def"}, {"label" : "Error", "tail" : ": Value", "member" : "sbt.Incomplete.Error", "link" : "sbt\/Incomplete$.html#Error:sbt.Incomplete.Value", "kind" : "val"}, {"label" : "Skipped", "tail" : ": Value", "member" : "sbt.Incomplete.Skipped", "link" : "sbt\/Incomplete$.html#Skipped:sbt.Incomplete.Value", "kind" : "val"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "sbt\/Incomplete$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "sbt\/Incomplete$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "sbt\/Incomplete$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "sbt\/Incomplete$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "sbt\/Incomplete$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "sbt\/Incomplete$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "sbt\/Incomplete$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "sbt\/Incomplete$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "sbt\/Incomplete$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "sbt\/Incomplete$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "sbt\/Incomplete$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "sbt\/Incomplete$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Incomplete$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Incomplete$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Incomplete$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Incomplete$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Incomplete$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Incomplete$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Incomplete$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Incomplete$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Incomplete$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Incomplete$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Incomplete$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Incomplete$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Incomplete$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Incomplete$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Incomplete$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Incomplete$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Incomplete$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Incomplete$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.Incomplete.toString", "link" : "sbt\/Incomplete.html#toString():String", "kind" : "def"}, {"member" : "sbt.Incomplete#<init>", "error" : "unsupported entity"}, {"label" : "directCause", "tail" : ": Option[Throwable]", "member" : "sbt.Incomplete.directCause", "link" : "sbt\/Incomplete.html#directCause:Option[Throwable]", "kind" : "val"}, {"label" : "causes", "tail" : ": Seq[Incomplete]", "member" : "sbt.Incomplete.causes", "link" : "sbt\/Incomplete.html#causes:Seq[sbt.Incomplete]", "kind" : "val"}, {"label" : "message", "tail" : ": Option[String]", "member" : "sbt.Incomplete.message", "link" : "sbt\/Incomplete.html#message:Option[String]", "kind" : "val"}, {"label" : "tpe", "tail" : ": Incomplete.Value", "member" : "sbt.Incomplete.tpe", "link" : "sbt\/Incomplete.html#tpe:sbt.Incomplete.Value", "kind" : "val"}, {"label" : "node", "tail" : ": Option[AnyRef]", "member" : "sbt.Incomplete.node", "link" : "sbt\/Incomplete.html#node:Option[AnyRef]", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "sbt\/Incomplete.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "sbt\/Incomplete.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "sbt\/Incomplete.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "sbt\/Incomplete.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "sbt\/Incomplete.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/Incomplete.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/Incomplete.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/Incomplete.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "sbt\/Incomplete.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "sbt\/Incomplete.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "sbt\/Incomplete.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "sbt\/Incomplete.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Incomplete.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Incomplete.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Incomplete.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Incomplete.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Incomplete.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Incomplete.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Incomplete.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Incomplete.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Incomplete.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Incomplete.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Incomplete.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Incomplete.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Incomplete.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Incomplete.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Incomplete.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Incomplete.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/Incomplete.html", "kind" : "case class"}, {"name" : "sbt.Info", "shortDescription" : "Used to provide information about a task, such as the name, description, and tags for controlling concurrent execution.", "object" : "sbt\/Info$.html", "members_object" : [{"label" : "Description", "tail" : ": AttributeKey[String]", "member" : "sbt.Info.Description", "link" : "sbt\/Info$.html#Description:sbt.internal.util.AttributeKey[String]", "kind" : "val"}, {"label" : "Name", "tail" : ": AttributeKey[String]", "member" : "sbt.Info.Name", "link" : "sbt\/Info$.html#Name:sbt.internal.util.AttributeKey[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Info$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Info$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Info$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Info$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Info$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Info$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Info$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Info$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Info$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Info$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Info$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Info$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Info$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Info$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Info$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Info$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Info$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Info$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Info$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.Info.toString", "link" : "sbt\/Info.html#toString():String", "kind" : "def"}, {"label" : "postTransform", "tail" : "(f: (T, AttributeMap) ⇒ AttributeMap): Info[T]", "member" : "sbt.Info.postTransform", "link" : "sbt\/Info.html#postTransform(f:(T,sbt.internal.util.AttributeMap)=>sbt.internal.util.AttributeMap):sbt.Info[T]", "kind" : "def"}, {"label" : "get", "tail" : "(key: AttributeKey[A]): Option[A]", "member" : "sbt.Info.get", "link" : "sbt\/Info.html#get[A](key:sbt.internal.util.AttributeKey[A]):Option[A]", "kind" : "def"}, {"label" : "set", "tail" : "(key: AttributeKey[A], value: A): Info[T]", "member" : "sbt.Info.set", "link" : "sbt\/Info.html#set[A](key:sbt.internal.util.AttributeKey[A],value:A):sbt.Info[T]", "kind" : "def"}, {"label" : "setDescription", "tail" : "(d: String): Info[T]", "member" : "sbt.Info.setDescription", "link" : "sbt\/Info.html#setDescription(d:String):sbt.Info[T]", "kind" : "def"}, {"label" : "setName", "tail" : "(n: String): Info[T]", "member" : "sbt.Info.setName", "link" : "sbt\/Info.html#setName(n:String):sbt.Info[T]", "kind" : "def"}, {"label" : "description", "tail" : "(): Option[String]", "member" : "sbt.Info.description", "link" : "sbt\/Info.html#description:Option[String]", "kind" : "def"}, {"label" : "name", "tail" : "(): Option[String]", "member" : "sbt.Info.name", "link" : "sbt\/Info.html#name:Option[String]", "kind" : "def"}, {"member" : "sbt.Info#<init>", "error" : "unsupported entity"}, {"label" : "post", "tail" : ": (T) ⇒ AttributeMap", "member" : "sbt.Info.post", "link" : "sbt\/Info.html#post:T=>sbt.internal.util.AttributeMap", "kind" : "val"}, {"label" : "attributes", "tail" : ": AttributeMap", "member" : "sbt.Info.attributes", "link" : "sbt\/Info.html#attributes:sbt.internal.util.AttributeMap", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Info.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Info.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Info.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Info.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Info.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Info.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Info.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Info.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Info.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Info.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Info.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Info.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Info.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Info.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Info.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Info.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/Info.html", "kind" : "case class"}, {"name" : "sbt.InputKey", "members_trait" : [{"label" : "withRank", "tail" : "(rank: Int): InputKey[T]", "member" : "sbt.InputKey.withRank", "link" : "sbt\/InputKey.html#withRank(rank:Int):sbt.InputKey[T]", "kind" : "final def"}, {"label" : "transform", "tail" : "(f: (T) ⇒ T, source: SourcePosition): Def.Setting[InputTask[T]]", "member" : "sbt.InputKey.transform", "link" : "sbt\/InputKey.html#transform(f:T=>T,source:sbt.internal.util.SourcePosition):sbt.Def.Setting[sbt.InputTask[T]]", "kind" : "final def"}, {"label" : "~=", "tail" : "(f: (T) ⇒ T): Def.Setting[InputTask[T]]", "member" : "sbt.InputKey.~=", "link" : "sbt\/InputKey.html#~=(f:T=>T):sbt.Def.Setting[sbt.InputTask[T]]", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(v: T): Def.Setting[InputTask[T]]", "member" : "sbt.InputKey.:=", "link" : "sbt\/InputKey.html#:=(v:T):sbt.Def.Setting[sbt.InputTask[T]]", "kind" : "final macro def"}, {"label" : "in", "tail" : "(scope: Scope): InputKey[T]", "member" : "sbt.InputKey.in", "link" : "sbt\/InputKey.html#in(scope:sbt.Scope):sbt.InputKey[T]", "kind" : "def"}, {"label" : "scopedKey", "tail" : "(): Def.ScopedKey[InputTask[T]]", "member" : "sbt.InputKey.scopedKey", "link" : "sbt\/InputKey.html#scopedKey:sbt.Def.ScopedKey[sbt.InputTask[T]]", "kind" : "def"}, {"label" : "??", "tail" : "(or: ⇒ T): Def.Initialize[T]", "member" : "sbt.Scoped.DefinableSetting.??", "link" : "sbt\/InputKey.html#??[T>:S](or:=>T):sbt.Def.Initialize[T]", "kind" : "final def"}, {"label" : "or", "tail" : "(i: Def.Initialize[T]): Def.Initialize[T]", "member" : "sbt.Scoped.DefinableSetting.or", "link" : "sbt\/InputKey.html#or[T>:S](i:sbt.Def.Initialize[T]):sbt.Def.Initialize[T]", "kind" : "final def"}, {"label" : "?", "tail" : "(): Def.Initialize[Option[InputTask[T]]]", "member" : "sbt.Scoped.DefinableSetting.?", "link" : "sbt\/InputKey.html#?:sbt.Def.Initialize[Option[S]]", "kind" : "final def"}, {"label" : "get", "tail" : "(settings: Settings[Scope]): Option[InputTask[T]]", "member" : "sbt.Scoped.DefinableSetting.get", "link" : "sbt\/InputKey.html#get(settings:sbt.internal.util.Settings[sbt.Scope]):Option[S]", "kind" : "final def"}, {"label" : "set", "tail" : "(app: Def.Initialize[InputTask[T]], source: SourcePosition): Def.Setting[InputTask[T]]", "member" : "sbt.Scoped.DefinableSetting.set", "link" : "sbt\/InputKey.html#set(app:sbt.Def.Initialize[S],source:sbt.internal.util.SourcePosition):sbt.Def.Setting[S]", "kind" : "final def"}, {"label" : "<<=", "tail" : "(app: Def.Initialize[InputTask[T]]): Def.Setting[InputTask[T]]", "member" : "sbt.Scoped.DefinableSetting.<<=", "link" : "sbt\/InputKey.html#<<=(app:sbt.Def.Initialize[S]):sbt.Def.Setting[S]", "kind" : "final macro def"}, {"label" : "in", "tail" : "(p: ScopeAxis[Reference], c: ScopeAxis[ConfigKey], t: ScopeAxis[AttributeKey[_]]): InputKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/InputKey.html#in(p:sbt.ScopeAxis[sbt.Reference],c:sbt.ScopeAxis[sbt.ConfigKey],t:sbt.ScopeAxis[sbt.internal.util.AttributeKey[_]]):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(p: Reference, c: ConfigKey, t: Scoped): InputKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/InputKey.html#in(p:sbt.Reference,c:sbt.ConfigKey,t:sbt.Scoped):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(p: Reference, t: Scoped): InputKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/InputKey.html#in(p:sbt.Reference,t:sbt.Scoped):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(p: Reference, c: ConfigKey): InputKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/InputKey.html#in(p:sbt.Reference,c:sbt.ConfigKey):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(c: ConfigKey, t: Scoped): InputKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/InputKey.html#in(c:sbt.ConfigKey,t:sbt.Scoped):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(c: ConfigKey): InputKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/InputKey.html#in(c:sbt.ConfigKey):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(t: Scoped): InputKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/InputKey.html#in(t:sbt.Scoped):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(p: Reference): InputKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/InputKey.html#in(p:sbt.Reference):ResultType", "kind" : "def"}, {"label" : "transform", "tail" : ": (InputTask[T]) ⇒ InputTask[T]", "member" : "sbt.internal.util.Init.KeyedInitialize.transform", "link" : "sbt\/InputKey.html#transform:T=>T", "kind" : "final val"}, {"label" : "mapConstant", "tail" : "(g: Def.MapConstant): Def.Initialize[InputTask[T]]", "member" : "sbt.internal.util.Init.Keyed.mapConstant", "link" : "sbt\/InputKey.html#mapConstant(g:Init.this.MapConstant):Init.this.Initialize[T]", "kind" : "final def"}, {"label" : "mapReferenced", "tail" : "(g: Def.MapScoped): Def.Initialize[InputTask[T]]", "member" : "sbt.internal.util.Init.Keyed.mapReferenced", "link" : "sbt\/InputKey.html#mapReferenced(g:Init.this.MapScoped):Init.this.Initialize[T]", "kind" : "final def"}, {"label" : "evaluate", "tail" : "(ss: Settings[Scope]): InputTask[T]", "member" : "sbt.internal.util.Init.Keyed.evaluate", "link" : "sbt\/InputKey.html#evaluate(ss:sbt.internal.util.Settings[Scope]):T", "kind" : "final def"}, {"label" : "apply", "tail" : "(g: (InputTask[T]) ⇒ Z): Def.Initialize[Z]", "member" : "sbt.internal.util.Init.Keyed.apply", "link" : "sbt\/InputKey.html#apply[Z](g:T=>Z):Init.this.Initialize[Z]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): List[Def.ScopedKey[InputTask[T]]]", "member" : "sbt.internal.util.Init.Keyed.dependencies", "link" : "sbt\/InputKey.html#dependencies:List[Init.this.ScopedKey[S]]", "kind" : "final def"}, {"label" : "zipWith", "tail" : "(o: Def.Initialize[S])(f: (InputTask[T], S) ⇒ U): Def.Initialize[U]", "member" : "sbt.internal.util.Init.Initialize.zipWith", "link" : "sbt\/InputKey.html#zipWith[S,U](o:Init.this.Initialize[S])(f:(T,S)=>U):Init.this.Initialize[U]", "kind" : "def"}, {"label" : "zip", "tail" : "(o: Def.Initialize[S]): Def.Initialize[(InputTask[T], S)]", "member" : "sbt.internal.util.Init.Initialize.zip", "link" : "sbt\/InputKey.html#zip[S](o:Init.this.Initialize[S]):Init.this.Initialize[(T,S)]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/InputKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/InputKey.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/InputKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/InputKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/InputKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/InputKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/InputKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InputKey.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InputKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InputKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/InputKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/InputKey.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/InputKey.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/InputKey.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/InputKey.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/InputKey.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/InputKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/InputKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/InputKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "key", "tail" : ": AttributeKey[InputTask[T]]", "member" : "sbt.InputKey.key", "link" : "sbt\/InputKey.html#key:sbt.internal.util.AttributeKey[sbt.InputTask[T]]", "kind" : "abstract val"}, {"label" : "scope", "tail" : "(): Scope", "member" : "sbt.Scoped.scope", "link" : "sbt\/InputKey.html#scope:sbt.Scope", "kind" : "abstract def"}], "shortDescription" : "Identifies an input task.", "object" : "sbt\/InputKey$.html", "members_object" : [{"label" : "apply", "tail" : "(akey: AttributeKey[InputTask[T]]): InputKey[T]", "member" : "sbt.InputKey.apply", "link" : "sbt\/InputKey$.html#apply[T](akey:sbt.internal.util.AttributeKey[sbt.InputTask[T]]):sbt.InputKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(label: String, description: String, rank: Int, extend1: Scoped, extendN: Scoped*)(arg0: Manifest[T]): InputKey[T]", "member" : "sbt.InputKey.apply", "link" : "sbt\/InputKey$.html#apply[T](label:String,description:String,rank:Int,extend1:sbt.Scoped,extendN:sbt.Scoped*)(implicitevidence$3:Manifest[T]):sbt.InputKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(label: String, description: String, extend1: Scoped, extendN: Scoped*)(arg0: Manifest[T]): InputKey[T]", "member" : "sbt.InputKey.apply", "link" : "sbt\/InputKey$.html#apply[T](label:String,description:String,extend1:sbt.Scoped,extendN:sbt.Scoped*)(implicitevidence$2:Manifest[T]):sbt.InputKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(label: String, description: String, rank: Int)(arg0: Manifest[T]): InputKey[T]", "member" : "sbt.InputKey.apply", "link" : "sbt\/InputKey$.html#apply[T](label:String,description:String,rank:Int)(implicitevidence$1:Manifest[T]):sbt.InputKey[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/InputKey$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/InputKey$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/InputKey$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/InputKey$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/InputKey$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/InputKey$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/InputKey$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InputKey$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InputKey$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InputKey$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/InputKey$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/InputKey$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/InputKey$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/InputKey$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/InputKey$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/InputKey$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/InputKey$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/InputKey$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/InputKey$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/InputKey.html", "kind" : "trait"}, {"name" : "sbt.InputTask", "shortDescription" : "Parses input and produces a task to run.", "object" : "sbt\/InputTask$.html", "members_class" : [{"label" : "fullInput", "tail" : "(in: String): InputTask[T]", "member" : "sbt.InputTask.fullInput", "link" : "sbt\/InputTask.html#fullInput(in:String):sbt.InputTask[T]", "kind" : "def"}, {"label" : "partialInput", "tail" : "(in: String): InputTask[T]", "member" : "sbt.InputTask.partialInput", "link" : "sbt\/InputTask.html#partialInput(in:String):sbt.InputTask[T]", "kind" : "def"}, {"label" : "mapTask", "tail" : "(f: (Task[T]) ⇒ Task[S]): InputTask[S]", "member" : "sbt.InputTask.mapTask", "link" : "sbt\/InputTask.html#mapTask[S](f:sbt.Task[T]=>sbt.Task[S]):sbt.InputTask[S]", "kind" : "def"}, {"label" : "parser", "tail" : ": (State) ⇒ Parser[Task[T]]", "member" : "sbt.InputTask.parser", "link" : "sbt\/InputTask.html#parser:sbt.State=>sbt.internal.util.complete.Parser[sbt.Task[T]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/InputTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/InputTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/InputTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/InputTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/InputTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/InputTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/InputTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InputTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InputTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InputTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/InputTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/InputTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/InputTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/InputTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/InputTask.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/InputTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/InputTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/InputTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/InputTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(p: Def.Initialize[(State) ⇒ Parser[I]])(action: (TaskKey[I]) ⇒ Def.Initialize[Task[T]]): Def.Initialize[InputTask[T]]", "member" : "sbt.InputTask.apply", "link" : "sbt\/InputTask$.html#apply[I,T](p:sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[I]])(action:sbt.TaskKey[I]=>sbt.Def.Initialize[sbt.Task[T]]):sbt.Def.Initialize[sbt.InputTask[T]]", "kind" : "def"}, {"label" : "initParserAsInput", "tail" : "(i: Def.Initialize[Parser[T]]): Def.Initialize[(State) ⇒ Parser[T]]", "member" : "sbt.InputTask.initParserAsInput", "link" : "sbt\/InputTask$.html#initParserAsInput[T](i:sbt.Def.Initialize[sbt.internal.util.complete.Parser[T]]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[T]]", "kind" : "def"}, {"label" : "parserAsInput", "tail" : "(p: Parser[T]): Def.Initialize[(State) ⇒ Parser[T]]", "member" : "sbt.InputTask.parserAsInput", "link" : "sbt\/InputTask$.html#parserAsInput[T](p:sbt.internal.util.complete.Parser[T]):sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[T]]", "kind" : "def"}, {"label" : "emptyParser", "tail" : "(): (State) ⇒ Parser[Unit]", "member" : "sbt.InputTask.emptyParser", "link" : "sbt\/InputTask$.html#emptyParser:sbt.State=>sbt.internal.util.complete.Parser[Unit]", "kind" : "def"}, {"label" : "createDyn", "tail" : "(p: Def.Initialize[(State) ⇒ Parser[I]])(action: Def.Initialize[Task[(I) ⇒ Def.Initialize[Task[T]]]]): Def.Initialize[InputTask[T]]", "member" : "sbt.InputTask.createDyn", "link" : "sbt\/InputTask$.html#createDyn[I,T](p:sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[I]])(action:sbt.Def.Initialize[sbt.Task[I=>sbt.Def.Initialize[sbt.Task[T]]]]):sbt.Def.Initialize[sbt.InputTask[T]]", "kind" : "def"}, {"label" : "createFree", "tail" : "(action: Def.Initialize[Task[T]]): Def.Initialize[InputTask[T]]", "member" : "sbt.InputTask.createFree", "link" : "sbt\/InputTask$.html#createFree[T](action:sbt.Def.Initialize[sbt.Task[T]]):sbt.Def.Initialize[sbt.InputTask[T]]", "kind" : "def"}, {"label" : "separate", "tail" : "(p: Def.Initialize[(State) ⇒ Parser[I]])(action: Def.Initialize[(I) ⇒ Task[T]]): Def.Initialize[InputTask[T]]", "member" : "sbt.InputTask.separate", "link" : "sbt\/InputTask$.html#separate[I,T](p:sbt.Def.Initialize[sbt.State=>sbt.internal.util.complete.Parser[I]])(action:sbt.Def.Initialize[I=>sbt.Task[T]]):sbt.Def.Initialize[sbt.InputTask[T]]", "kind" : "def"}, {"label" : "separate", "tail" : "(p: (State) ⇒ Parser[I])(action: Def.Initialize[(I) ⇒ Task[T]]): Def.Initialize[InputTask[T]]", "member" : "sbt.InputTask.separate", "link" : "sbt\/InputTask$.html#separate[I,T](p:sbt.State=>sbt.internal.util.complete.Parser[I])(action:sbt.Def.Initialize[I=>sbt.Task[T]]):sbt.Def.Initialize[sbt.InputTask[T]]", "kind" : "def"}, {"label" : "free", "tail" : "(p: (State) ⇒ Parser[I])(c: (I) ⇒ Task[T]): InputTask[T]", "member" : "sbt.InputTask.free", "link" : "sbt\/InputTask$.html#free[I,T](p:sbt.State=>sbt.internal.util.complete.Parser[I])(c:I=>sbt.Task[T]):sbt.InputTask[T]", "kind" : "def"}, {"label" : "free", "tail" : "(p: (State) ⇒ Parser[Task[T]]): InputTask[T]", "member" : "sbt.InputTask.free", "link" : "sbt\/InputTask$.html#free[T](p:sbt.State=>sbt.internal.util.complete.Parser[sbt.Task[T]]):sbt.InputTask[T]", "kind" : "def"}, {"label" : "static", "tail" : "(p: Parser[I])(c: (I) ⇒ Task[T]): InputTask[T]", "member" : "sbt.InputTask.static", "link" : "sbt\/InputTask$.html#static[I,T](p:sbt.internal.util.complete.Parser[I])(c:I=>sbt.Task[T]):sbt.InputTask[T]", "kind" : "def"}, {"label" : "static", "tail" : "(p: Parser[Task[T]]): InputTask[T]", "member" : "sbt.InputTask.static", "link" : "sbt\/InputTask$.html#static[T](p:sbt.internal.util.complete.Parser[sbt.Task[T]]):sbt.InputTask[T]", "kind" : "def"}, {"label" : "make", "tail" : "(p: (State) ⇒ Parser[Task[T]]): InputTask[T]", "member" : "sbt.InputTask.make", "link" : "sbt\/InputTask$.html#make[T](p:sbt.State=>sbt.internal.util.complete.Parser[sbt.Task[T]]):sbt.InputTask[T]", "kind" : "def"}, {"label" : "inputTaskInitParsed", "tail" : "(in: Def.Initialize[InputTask[T]]): ParserInputTask[T]", "member" : "sbt.InputTask.inputTaskInitParsed", "link" : "sbt\/InputTask$.html#inputTaskInitParsed[T](in:sbt.Def.Initialize[sbt.InputTask[T]]):sbt.std.ParserInputTask[T]", "kind" : "implicit def"}, {"label" : "inputTaskParsed", "tail" : "(in: InputTask[T]): ParserInputTask[T]", "member" : "sbt.InputTask.inputTaskParsed", "link" : "sbt\/InputTask$.html#inputTaskParsed[T](in:sbt.InputTask[T]):sbt.std.ParserInputTask[T]", "kind" : "implicit def"}, {"label" : "InitializeInput", "tail" : "", "member" : "sbt.InputTask.InitializeInput", "link" : "sbt\/InputTask$.html#InitializeInput[T]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/InputTask$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/InputTask$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/InputTask$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/InputTask$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/InputTask$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/InputTask$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/InputTask$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InputTask$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InputTask$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InputTask$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/InputTask$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/InputTask$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/InputTask$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/InputTask$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/InputTask$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/InputTask$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/InputTask$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/InputTask$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/InputTask$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/InputTask.html", "kind" : "class"}, {"name" : "sbt.InteractionService", "shortDescription" : "InteractionService provides an abstration over standard input.", "members_class" : [{"member" : "sbt.InteractionService#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/InteractionService.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/InteractionService.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/InteractionService.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/InteractionService.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/InteractionService.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/InteractionService.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/InteractionService.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InteractionService.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InteractionService.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/InteractionService.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/InteractionService.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/InteractionService.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/InteractionService.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/InteractionService.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/InteractionService.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/InteractionService.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/InteractionService.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/InteractionService.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/InteractionService.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "terminalHeight", "tail" : "(): Int", "member" : "sbt.InteractionService.terminalHeight", "link" : "sbt\/InteractionService.html#terminalHeight:Int", "kind" : "abstract def"}, {"label" : "terminalWidth", "tail" : "(): Int", "member" : "sbt.InteractionService.terminalWidth", "link" : "sbt\/InteractionService.html#terminalWidth:Int", "kind" : "abstract def"}, {"label" : "confirm", "tail" : "(msg: String): Boolean", "member" : "sbt.InteractionService.confirm", "link" : "sbt\/InteractionService.html#confirm(msg:String):Boolean", "kind" : "abstract def"}, {"label" : "readLine", "tail" : "(prompt: String, mask: Boolean): Option[String]", "member" : "sbt.InteractionService.readLine", "link" : "sbt\/InteractionService.html#readLine(prompt:String,mask:Boolean):Option[String]", "kind" : "abstract def"}], "class" : "sbt\/InteractionService.html", "kind" : "class"}, {"name" : "sbt.JobHandle", "shortDescription" : "", "members_class" : [{"member" : "sbt.JobHandle#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/JobHandle.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/JobHandle.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/JobHandle.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/JobHandle.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/JobHandle.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/JobHandle.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/JobHandle.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/JobHandle.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/JobHandle.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/JobHandle.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/JobHandle.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/JobHandle.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/JobHandle.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/JobHandle.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/JobHandle.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/JobHandle.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/JobHandle.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/JobHandle.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/JobHandle.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "spawningTask", "tail" : "(): Def.ScopedKey[_]", "member" : "sbt.JobHandle.spawningTask", "link" : "sbt\/JobHandle.html#spawningTask:sbt.Def.ScopedKey[_]", "kind" : "abstract def"}, {"label" : "humanReadableName", "tail" : "(): String", "member" : "sbt.JobHandle.humanReadableName", "link" : "sbt\/JobHandle.html#humanReadableName:String", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): Long", "member" : "sbt.JobHandle.id", "link" : "sbt\/JobHandle.html#id:Long", "kind" : "abstract def"}], "class" : "sbt\/JobHandle.html", "kind" : "class"}, {"name" : "sbt.Join", "shortDescription" : "A computation that operates on the results of a homogeneous list of other tasks.", "members_case class" : [{"member" : "sbt.Join#<init>", "error" : "unsupported entity"}, {"label" : "f", "tail" : ": (Seq[Result[U]]) ⇒ Either[Task[T], T]", "member" : "sbt.Join.f", "link" : "sbt\/Join.html#f:Seq[sbt.Result[U]]=>Either[sbt.Task[T],T]", "kind" : "val"}, {"label" : "in", "tail" : ": Seq[Task[U]]", "member" : "sbt.Join.in", "link" : "sbt\/Join.html#in:Seq[sbt.Task[U]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Join.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Join.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Join.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Join.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Join.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Join.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Join.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Join.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Join.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Join.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Join.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Join.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Join.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Join.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Join.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Join.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/Join.html", "kind" : "case class"}, {"name" : "sbt.JUnitXmlTestsListener", "shortDescription" : "A tests listener that outputs the results it receives in junit xmlreport format.", "members_class" : [{"label" : "contentLogger", "tail" : "(test: TestDefinition): Option[ContentLogger]", "member" : "sbt.JUnitXmlTestsListener.contentLogger", "link" : "sbt\/JUnitXmlTestsListener.html#contentLogger(test:sbt.TestDefinition):Option[sbt.ContentLogger]", "kind" : "def"}, {"label" : "doComplete", "tail" : "(finalResult: TestResult): Unit", "member" : "sbt.JUnitXmlTestsListener.doComplete", "link" : "sbt\/JUnitXmlTestsListener.html#doComplete(finalResult:sbt.protocol.testing.TestResult):Unit", "kind" : "def"}, {"label" : "endGroup", "tail" : "(name: String, result: TestResult): Unit", "member" : "sbt.JUnitXmlTestsListener.endGroup", "link" : "sbt\/JUnitXmlTestsListener.html#endGroup(name:String,result:sbt.protocol.testing.TestResult):Unit", "kind" : "def"}, {"label" : "endGroup", "tail" : "(name: String, t: Throwable): Unit", "member" : "sbt.JUnitXmlTestsListener.endGroup", "link" : "sbt\/JUnitXmlTestsListener.html#endGroup(name:String,t:Throwable):Unit", "kind" : "def"}, {"label" : "testEvent", "tail" : "(event: TestEvent): Unit", "member" : "sbt.JUnitXmlTestsListener.testEvent", "link" : "sbt\/JUnitXmlTestsListener.html#testEvent(event:sbt.TestEvent):Unit", "kind" : "def"}, {"label" : "startGroup", "tail" : "(name: String): Unit", "member" : "sbt.JUnitXmlTestsListener.startGroup", "link" : "sbt\/JUnitXmlTestsListener.html#startGroup(name:String):Unit", "kind" : "def"}, {"label" : "doInit", "tail" : "(): Unit", "member" : "sbt.JUnitXmlTestsListener.doInit", "link" : "sbt\/JUnitXmlTestsListener.html#doInit():Unit", "kind" : "def"}, {"label" : "testSuite", "tail" : ": DynamicVariable[TestSuite]", "member" : "sbt.JUnitXmlTestsListener.testSuite", "link" : "sbt\/JUnitXmlTestsListener.html#testSuite:scala.util.DynamicVariable[JUnitXmlTestsListener.this.TestSuite]", "kind" : "val"}, {"label" : "TestSuite", "tail" : "", "member" : "sbt.JUnitXmlTestsListener.TestSuite", "link" : "sbt\/JUnitXmlTestsListener.html#TestSuiteextendsAnyRef", "kind" : "class"}, {"label" : "properties", "tail" : ": Elem", "member" : "sbt.JUnitXmlTestsListener.properties", "link" : "sbt\/JUnitXmlTestsListener.html#properties:scala.xml.Elem", "kind" : "val"}, {"label" : "targetDir", "tail" : ": File", "member" : "sbt.JUnitXmlTestsListener.targetDir", "link" : "sbt\/JUnitXmlTestsListener.html#targetDir:java.io.File", "kind" : "val"}, {"label" : "hostname", "tail" : ": String", "member" : "sbt.JUnitXmlTestsListener.hostname", "link" : "sbt\/JUnitXmlTestsListener.html#hostname:String", "kind" : "val"}, {"member" : "sbt.JUnitXmlTestsListener#<init>", "error" : "unsupported entity"}, {"label" : "outputDir", "tail" : ": String", "member" : "sbt.JUnitXmlTestsListener.outputDir", "link" : "sbt\/JUnitXmlTestsListener.html#outputDir:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/JUnitXmlTestsListener.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/JUnitXmlTestsListener.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/JUnitXmlTestsListener.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/JUnitXmlTestsListener.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/JUnitXmlTestsListener.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/JUnitXmlTestsListener.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/JUnitXmlTestsListener.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/JUnitXmlTestsListener.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/JUnitXmlTestsListener.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/JUnitXmlTestsListener.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/JUnitXmlTestsListener.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/JUnitXmlTestsListener.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/JUnitXmlTestsListener.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/JUnitXmlTestsListener.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/JUnitXmlTestsListener.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/JUnitXmlTestsListener.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/JUnitXmlTestsListener.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/JUnitXmlTestsListener.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/JUnitXmlTestsListener.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/JUnitXmlTestsListener.html", "kind" : "class"}, {"name" : "sbt.KeyRanks", "shortDescription" : "", "object" : "sbt\/KeyRanks$.html", "members_object" : [{"label" : "Invisible", "tail" : ": Int", "member" : "sbt.KeyRanks.Invisible", "link" : "sbt\/KeyRanks$.html#Invisible:Int", "kind" : "val"}, {"label" : "DefaultSettingRank", "tail" : ": Int", "member" : "sbt.KeyRanks.DefaultSettingRank", "link" : "sbt\/KeyRanks$.html#DefaultSettingRank:Int", "kind" : "final val"}, {"label" : "DefaultInputRank", "tail" : ": Int(5)", "member" : "sbt.KeyRanks.DefaultInputRank", "link" : "sbt\/KeyRanks$.html#DefaultInputRank:Int(5)", "kind" : "final val"}, {"label" : "DefaultTaskRank", "tail" : ": Int", "member" : "sbt.KeyRanks.DefaultTaskRank", "link" : "sbt\/KeyRanks$.html#DefaultTaskRank:Int", "kind" : "final val"}, {"label" : "MainCutoff", "tail" : ": Int", "member" : "sbt.KeyRanks.MainCutoff", "link" : "sbt\/KeyRanks$.html#MainCutoff:Int", "kind" : "final val"}, {"label" : "MainSettingCutoff", "tail" : ": Int(11)", "member" : "sbt.KeyRanks.MainSettingCutoff", "link" : "sbt\/KeyRanks$.html#MainSettingCutoff:Int(11)", "kind" : "final val"}, {"label" : "MainTaskCutoff", "tail" : ": Int(6)", "member" : "sbt.KeyRanks.MainTaskCutoff", "link" : "sbt\/KeyRanks$.html#MainTaskCutoff:Int(6)", "kind" : "final val"}, {"label" : "DTask", "tail" : ": Int(20000)", "member" : "sbt.KeyRanks.DTask", "link" : "sbt\/KeyRanks$.html#DTask:Int(20000)", "kind" : "final val"}, {"label" : "DSetting", "tail" : ": Int(10000)", "member" : "sbt.KeyRanks.DSetting", "link" : "sbt\/KeyRanks$.html#DSetting:Int(10000)", "kind" : "final val"}, {"label" : "CTask", "tail" : ": Int(200)", "member" : "sbt.KeyRanks.CTask", "link" : "sbt\/KeyRanks$.html#CTask:Int(200)", "kind" : "final val"}, {"label" : "CSetting", "tail" : ": Int(100)", "member" : "sbt.KeyRanks.CSetting", "link" : "sbt\/KeyRanks$.html#CSetting:Int(100)", "kind" : "final val"}, {"label" : "BMinusSetting", "tail" : ": Int(41)", "member" : "sbt.KeyRanks.BMinusSetting", "link" : "sbt\/KeyRanks$.html#BMinusSetting:Int(41)", "kind" : "final val"}, {"label" : "BSetting", "tail" : ": Int(40)", "member" : "sbt.KeyRanks.BSetting", "link" : "sbt\/KeyRanks$.html#BSetting:Int(40)", "kind" : "final val"}, {"label" : "BPlusSetting", "tail" : ": Int(39)", "member" : "sbt.KeyRanks.BPlusSetting", "link" : "sbt\/KeyRanks$.html#BPlusSetting:Int(39)", "kind" : "final val"}, {"label" : "BMinusTask", "tail" : ": Int(31)", "member" : "sbt.KeyRanks.BMinusTask", "link" : "sbt\/KeyRanks$.html#BMinusTask:Int(31)", "kind" : "final val"}, {"label" : "BTask", "tail" : ": Int(30)", "member" : "sbt.KeyRanks.BTask", "link" : "sbt\/KeyRanks$.html#BTask:Int(30)", "kind" : "final val"}, {"label" : "BPlusTask", "tail" : ": Int(29)", "member" : "sbt.KeyRanks.BPlusTask", "link" : "sbt\/KeyRanks$.html#BPlusTask:Int(29)", "kind" : "final val"}, {"label" : "AMinusSetting", "tail" : ": Int(11)", "member" : "sbt.KeyRanks.AMinusSetting", "link" : "sbt\/KeyRanks$.html#AMinusSetting:Int(11)", "kind" : "final val"}, {"label" : "ASetting", "tail" : ": Int(10)", "member" : "sbt.KeyRanks.ASetting", "link" : "sbt\/KeyRanks$.html#ASetting:Int(10)", "kind" : "final val"}, {"label" : "APlusSetting", "tail" : ": Int(9)", "member" : "sbt.KeyRanks.APlusSetting", "link" : "sbt\/KeyRanks$.html#APlusSetting:Int(9)", "kind" : "final val"}, {"label" : "AMinusTask", "tail" : ": Int(6)", "member" : "sbt.KeyRanks.AMinusTask", "link" : "sbt\/KeyRanks$.html#AMinusTask:Int(6)", "kind" : "final val"}, {"label" : "ATask", "tail" : ": Int(5)", "member" : "sbt.KeyRanks.ATask", "link" : "sbt\/KeyRanks$.html#ATask:Int(5)", "kind" : "final val"}, {"label" : "APlusTask", "tail" : ": Int(4)", "member" : "sbt.KeyRanks.APlusTask", "link" : "sbt\/KeyRanks$.html#APlusTask:Int(4)", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/KeyRanks$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/KeyRanks$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/KeyRanks$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/KeyRanks$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/KeyRanks$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/KeyRanks$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/KeyRanks$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/KeyRanks$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/KeyRanks$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/KeyRanks$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/KeyRanks$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/KeyRanks$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/KeyRanks$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/KeyRanks$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/KeyRanks$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/KeyRanks$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/KeyRanks$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/KeyRanks$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/KeyRanks$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.Keys", "shortDescription" : "", "object" : "sbt\/Keys$.html", "members_object" : [{"label" : "TaskStreams", "tail" : "", "member" : "sbt.Keys.TaskStreams", "link" : "sbt\/Keys$.html#TaskStreams=sbt.std.TaskStreams[sbt.Def.ScopedKey[_]]", "kind" : "type"}, {"label" : "Streams", "tail" : "", "member" : "sbt.Keys.Streams", "link" : "sbt\/Keys$.html#Streams=sbt.std.Streams[sbt.Def.ScopedKey[_]]", "kind" : "type"}, {"label" : "runBefore", "tail" : ": AttributeKey[Seq[Task[_]]]", "member" : "sbt.Keys.runBefore", "link" : "sbt\/Keys$.html#runBefore:sbt.internal.util.AttributeKey[Seq[sbt.Task[_]]]", "kind" : "val"}, {"label" : "triggeredBy", "tail" : ": AttributeKey[Seq[Task[_]]]", "member" : "sbt.Keys.triggeredBy", "link" : "sbt\/Keys$.html#triggeredBy:sbt.internal.util.AttributeKey[Seq[sbt.Task[_]]]", "kind" : "val"}, {"label" : "globalPluginUpdate", "tail" : ": TaskKey[UpdateReport]", "member" : "sbt.Keys.globalPluginUpdate", "link" : "sbt\/Keys$.html#globalPluginUpdate:sbt.TaskKey[sbt.librarymanagement.UpdateReport]", "kind" : "val"}, {"label" : "pluginData", "tail" : ": TaskKey[PluginData]", "member" : "sbt.Keys.pluginData", "link" : "sbt\/Keys$.html#pluginData:sbt.TaskKey[sbt.PluginData]", "kind" : "val"}, {"label" : "resolvedScoped", "tail" : ": SettingKey[Def.ScopedKey[_]]", "member" : "sbt.Keys.resolvedScoped", "link" : "sbt\/Keys$.html#resolvedScoped:sbt.SettingKey[sbt.Def.ScopedKey[_]]", "kind" : "val"}, {"label" : "stateStreams", "tail" : ": AttributeKey[Streams]", "member" : "sbt.Keys.stateStreams", "link" : "sbt\/Keys$.html#stateStreams:sbt.internal.util.AttributeKey[sbt.Keys.Streams]", "kind" : "val"}, {"label" : "streamsManager", "tail" : ": TaskKey[std.Streams[Def.ScopedKey[_]]]", "member" : "sbt.Keys.streamsManager", "link" : "sbt\/Keys$.html#streamsManager:sbt.TaskKey[sbt.std.Streams[sbt.Def.ScopedKey[_]]]", "kind" : "val"}, {"label" : "state", "tail" : ": TaskKey[State]", "member" : "sbt.Keys.state", "link" : "sbt\/Keys$.html#state:sbt.TaskKey[sbt.State]", "kind" : "val"}, {"label" : "dummyRoots", "tail" : ": Task[Seq[Def.ScopedKey[_]]]", "member" : "sbt.Keys.dummyRoots", "link" : "sbt\/Keys$.html#dummyRoots:sbt.Task[Seq[sbt.Def.ScopedKey[_]]]", "kind" : "val"}, {"label" : "executionRoots", "tail" : ": TaskKey[Seq[Def.ScopedKey[_]]]", "member" : "sbt.Keys.executionRoots", "link" : "sbt\/Keys$.html#executionRoots:sbt.TaskKey[Seq[sbt.Def.ScopedKey[_]]]", "kind" : "val"}, {"label" : "taskDefinitionKey", "tail" : ": AttributeKey[Def.ScopedKey[_]]", "member" : "sbt.Keys.taskDefinitionKey", "link" : "sbt\/Keys$.html#taskDefinitionKey:sbt.internal.util.AttributeKey[sbt.Def.ScopedKey[_]]", "kind" : "val"}, {"label" : "streams", "tail" : ": TaskKey[TaskStreams]", "member" : "sbt.Keys.streams", "link" : "sbt\/Keys$.html#streams:sbt.TaskKey[sbt.Keys.TaskStreams]", "kind" : "val"}, {"label" : "settingsData", "tail" : ": TaskKey[SS]", "member" : "sbt.Keys.settingsData", "link" : "sbt\/Keys$.html#settingsData:sbt.TaskKey[sbt.std.FullInstance.SS]", "kind" : "val"}, {"label" : "minForcegcInterval", "tail" : ": SettingKey[Duration]", "member" : "sbt.Keys.minForcegcInterval", "link" : "sbt\/Keys$.html#minForcegcInterval:sbt.SettingKey[scala.concurrent.duration.Duration]", "kind" : "val"}, {"label" : "forcegc", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.forcegc", "link" : "sbt\/Keys$.html#forcegc:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "cancelable", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.cancelable", "link" : "sbt\/Keys$.html#cancelable:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "concurrentRestrictions", "tail" : ": SettingKey[Seq[Rule]]", "member" : "sbt.Keys.concurrentRestrictions", "link" : "sbt\/Keys$.html#concurrentRestrictions:sbt.SettingKey[Seq[sbt.Tags.Rule]]", "kind" : "val"}, {"label" : "tags", "tail" : ": SettingKey[Seq[(Tag, Int)]]", "member" : "sbt.Keys.tags", "link" : "sbt\/Keys$.html#tags:sbt.SettingKey[Seq[(sbt.Tags.Tag,Int)]]", "kind" : "val"}, {"label" : "parallelExecution", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.parallelExecution", "link" : "sbt\/Keys$.html#parallelExecution:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "sessionVars", "tail" : ": AttributeKey[Map]", "member" : "sbt.Keys.sessionVars", "link" : "sbt\/Keys$.html#sessionVars:sbt.internal.util.AttributeKey[sbt.SessionVar.Map]", "kind" : "val"}, {"label" : "interactionService", "tail" : ": TaskKey[InteractionService]", "member" : "sbt.Keys.interactionService", "link" : "sbt\/Keys$.html#interactionService:sbt.TaskKey[sbt.InteractionService]", "kind" : "val"}, {"label" : "templateResolverInfos", "tail" : ": SettingKey[Seq[TemplateResolverInfo]]", "member" : "sbt.Keys.templateResolverInfos", "link" : "sbt\/Keys$.html#templateResolverInfos:sbt.SettingKey[Seq[sbt.TemplateResolverInfo]]", "kind" : "val"}, {"label" : "skip", "tail" : ": TaskKey[Boolean]", "member" : "sbt.Keys.skip", "link" : "sbt\/Keys$.html#skip:sbt.TaskKey[Boolean]", "kind" : "val"}, {"label" : "sbtBinaryVersion", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.sbtBinaryVersion", "link" : "sbt\/Keys$.html#sbtBinaryVersion:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "sbtVersion", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.sbtVersion", "link" : "sbt\/Keys$.html#sbtVersion:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "sbtDependency", "tail" : ": SettingKey[ModuleID]", "member" : "sbt.Keys.sbtDependency", "link" : "sbt\/Keys$.html#sbtDependency:sbt.SettingKey[sbt.librarymanagement.ModuleID]", "kind" : "val"}, {"label" : "sbtResolver", "tail" : ": SettingKey[Resolver]", "member" : "sbt.Keys.sbtResolver", "link" : "sbt\/Keys$.html#sbtResolver:sbt.SettingKey[sbt.librarymanagement.Resolver]", "kind" : "val"}, {"label" : "managedScalaInstance", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.managedScalaInstance", "link" : "sbt\/Keys$.html#managedScalaInstance:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "autoScalaLibrary", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.autoScalaLibrary", "link" : "sbt\/Keys$.html#autoScalaLibrary:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "conflictManager", "tail" : ": SettingKey[ConflictManager]", "member" : "sbt.Keys.conflictManager", "link" : "sbt\/Keys$.html#conflictManager:sbt.SettingKey[sbt.librarymanagement.ConflictManager]", "kind" : "val"}, {"label" : "conflictWarning", "tail" : ": SettingKey[ConflictWarning]", "member" : "sbt.Keys.conflictWarning", "link" : "sbt\/Keys$.html#conflictWarning:sbt.SettingKey[sbt.librarymanagement.ConflictWarning]", "kind" : "val"}, {"label" : "compatibilityWarningOptions", "tail" : ": SettingKey[CompatibilityWarningOptions]", "member" : "sbt.Keys.compatibilityWarningOptions", "link" : "sbt\/Keys$.html#compatibilityWarningOptions:sbt.SettingKey[sbt.internal.librarymanagement.CompatibilityWarningOptions]", "kind" : "val"}, {"label" : "classifiersModule", "tail" : ": TaskKey[GetClassifiersModule]", "member" : "sbt.Keys.classifiersModule", "link" : "sbt\/Keys$.html#classifiersModule:sbt.TaskKey[sbt.librarymanagement.GetClassifiersModule]", "kind" : "val"}, {"label" : "forceUpdatePeriod", "tail" : ": SettingKey[Option[FiniteDuration]]", "member" : "sbt.Keys.forceUpdatePeriod", "link" : "sbt\/Keys$.html#forceUpdatePeriod:sbt.SettingKey[Option[scala.concurrent.duration.FiniteDuration]]", "kind" : "val"}, {"label" : "checksums", "tail" : ": SettingKey[Seq[String]]", "member" : "sbt.Keys.checksums", "link" : "sbt\/Keys$.html#checksums:sbt.SettingKey[Seq[String]]", "kind" : "val"}, {"label" : "packagedArtifact", "tail" : ": TaskKey[(Artifact, File)]", "member" : "sbt.Keys.packagedArtifact", "link" : "sbt\/Keys$.html#packagedArtifact:sbt.TaskKey[(sbt.librarymanagement.Artifact,java.io.File)]", "kind" : "val"}, {"label" : "publishArtifact", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.publishArtifact", "link" : "sbt\/Keys$.html#publishArtifact:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "classpathTypes", "tail" : ": SettingKey[Set[String]]", "member" : "sbt.Keys.classpathTypes", "link" : "sbt\/Keys$.html#classpathTypes:sbt.SettingKey[Set[String]]", "kind" : "val"}, {"label" : "managedDirectory", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.managedDirectory", "link" : "sbt\/Keys$.html#managedDirectory:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "configurationsToRetrieve", "tail" : ": SettingKey[Option[Seq[ConfigRef]]]", "member" : "sbt.Keys.configurationsToRetrieve", "link" : "sbt\/Keys$.html#configurationsToRetrieve:sbt.SettingKey[Option[Seq[sbt.librarymanagement.ConfigRef]]]", "kind" : "val"}, {"label" : "retrieveManagedSync", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.retrieveManagedSync", "link" : "sbt\/Keys$.html#retrieveManagedSync:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "retrieveManaged", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.retrieveManaged", "link" : "sbt\/Keys$.html#retrieveManaged:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "autoUpdate", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.autoUpdate", "link" : "sbt\/Keys$.html#autoUpdate:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "projectDescriptors", "tail" : ": TaskKey[Map[ModuleRevisionId, ModuleDescriptor]]", "member" : "sbt.Keys.projectDescriptors", "link" : "sbt\/Keys$.html#projectDescriptors:sbt.TaskKey[Map[org.apache.ivy.core.module.id.ModuleRevisionId,org.apache.ivy.core.module.descriptor.ModuleDescriptor]]", "kind" : "val"}, {"label" : "artifacts", "tail" : ": SettingKey[Seq[Artifact]]", "member" : "sbt.Keys.artifacts", "link" : "sbt\/Keys$.html#artifacts:sbt.SettingKey[Seq[sbt.librarymanagement.Artifact]]", "kind" : "val"}, {"label" : "publishTo", "tail" : ": TaskKey[Option[Resolver]]", "member" : "sbt.Keys.publishTo", "link" : "sbt\/Keys$.html#publishTo:sbt.TaskKey[Option[sbt.librarymanagement.Resolver]]", "kind" : "val"}, {"label" : "ivyLoggingLevel", "tail" : ": SettingKey[UpdateLogging]", "member" : "sbt.Keys.ivyLoggingLevel", "link" : "sbt\/Keys$.html#ivyLoggingLevel:sbt.SettingKey[sbt.librarymanagement.UpdateLogging]", "kind" : "val"}, {"label" : "ivyValidate", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.ivyValidate", "link" : "sbt\/Keys$.html#ivyValidate:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "scalaModuleInfo", "tail" : ": SettingKey[Option[ScalaModuleInfo]]", "member" : "sbt.Keys.scalaModuleInfo", "link" : "sbt\/Keys$.html#scalaModuleInfo:sbt.SettingKey[Option[sbt.librarymanagement.ScalaModuleInfo]]", "kind" : "val"}, {"label" : "ivyXML", "tail" : ": SettingKey[NodeSeq]", "member" : "sbt.Keys.ivyXML", "link" : "sbt\/Keys$.html#ivyXML:sbt.SettingKey[scala.xml.NodeSeq]", "kind" : "val"}, {"label" : "projectDependencies", "tail" : ": TaskKey[Seq[ModuleID]]", "member" : "sbt.Keys.projectDependencies", "link" : "sbt\/Keys$.html#projectDependencies:sbt.TaskKey[Seq[sbt.librarymanagement.ModuleID]]", "kind" : "val"}, {"label" : "allDependencies", "tail" : ": TaskKey[Seq[ModuleID]]", "member" : "sbt.Keys.allDependencies", "link" : "sbt\/Keys$.html#allDependencies:sbt.TaskKey[Seq[sbt.librarymanagement.ModuleID]]", "kind" : "val"}, {"label" : "excludeDependencies", "tail" : ": SettingKey[Seq[InclExclRule]]", "member" : "sbt.Keys.excludeDependencies", "link" : "sbt\/Keys$.html#excludeDependencies:sbt.SettingKey[Seq[sbt.librarymanagement.InclExclRule]]", "kind" : "val"}, {"label" : "dependencyOverrides", "tail" : ": SettingKey[Seq[ModuleID]]", "member" : "sbt.Keys.dependencyOverrides", "link" : "sbt\/Keys$.html#dependencyOverrides:sbt.SettingKey[Seq[sbt.librarymanagement.ModuleID]]", "kind" : "val"}, {"label" : "libraryDependencies", "tail" : ": SettingKey[Seq[ModuleID]]", "member" : "sbt.Keys.libraryDependencies", "link" : "sbt\/Keys$.html#libraryDependencies:sbt.SettingKey[Seq[sbt.librarymanagement.ModuleID]]", "kind" : "val"}, {"label" : "dependencyCacheDirectory", "tail" : ": TaskKey[File]", "member" : "sbt.Keys.dependencyCacheDirectory", "link" : "sbt\/Keys$.html#dependencyCacheDirectory:sbt.TaskKey[java.io.File]", "kind" : "val"}, {"label" : "ivyPaths", "tail" : ": SettingKey[IvyPaths]", "member" : "sbt.Keys.ivyPaths", "link" : "sbt\/Keys$.html#ivyPaths:sbt.SettingKey[sbt.librarymanagement.ivy.IvyPaths]", "kind" : "val"}, {"label" : "offline", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.offline", "link" : "sbt\/Keys$.html#offline:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "retrieveConfiguration", "tail" : ": SettingKey[Option[RetrieveConfiguration]]", "member" : "sbt.Keys.retrieveConfiguration", "link" : "sbt\/Keys$.html#retrieveConfiguration:sbt.SettingKey[Option[sbt.librarymanagement.RetrieveConfiguration]]", "kind" : "val"}, {"label" : "retrievePattern", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.retrievePattern", "link" : "sbt\/Keys$.html#retrievePattern:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "moduleConfigurations", "tail" : ": SettingKey[Seq[ModuleConfiguration]]", "member" : "sbt.Keys.moduleConfigurations", "link" : "sbt\/Keys$.html#moduleConfigurations:sbt.SettingKey[Seq[sbt.librarymanagement.ModuleConfiguration]]", "kind" : "val"}, {"label" : "useJCenter", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.useJCenter", "link" : "sbt\/Keys$.html#useJCenter:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "otherResolvers", "tail" : ": TaskKey[Seq[Resolver]]", "member" : "sbt.Keys.otherResolvers", "link" : "sbt\/Keys$.html#otherResolvers:sbt.TaskKey[Seq[sbt.librarymanagement.Resolver]]", "kind" : "val"}, {"label" : "fullResolvers", "tail" : ": TaskKey[Seq[Resolver]]", "member" : "sbt.Keys.fullResolvers", "link" : "sbt\/Keys$.html#fullResolvers:sbt.TaskKey[Seq[sbt.librarymanagement.Resolver]]", "kind" : "val"}, {"label" : "projectResolver", "tail" : ": TaskKey[Resolver]", "member" : "sbt.Keys.projectResolver", "link" : "sbt\/Keys$.html#projectResolver:sbt.TaskKey[sbt.librarymanagement.Resolver]", "kind" : "val"}, {"label" : "resolvers", "tail" : ": SettingKey[Seq[Resolver]]", "member" : "sbt.Keys.resolvers", "link" : "sbt\/Keys$.html#resolvers:sbt.SettingKey[Seq[sbt.librarymanagement.Resolver]]", "kind" : "val"}, {"label" : "externalResolvers", "tail" : ": TaskKey[Seq[Resolver]]", "member" : "sbt.Keys.externalResolvers", "link" : "sbt\/Keys$.html#externalResolvers:sbt.TaskKey[Seq[sbt.librarymanagement.Resolver]]", "kind" : "val"}, {"label" : "appResolvers", "tail" : ": SettingKey[Option[Seq[Resolver]]]", "member" : "sbt.Keys.appResolvers", "link" : "sbt\/Keys$.html#appResolvers:sbt.SettingKey[Option[Seq[sbt.librarymanagement.Resolver]]]", "kind" : "val"}, {"label" : "bootResolvers", "tail" : ": TaskKey[Option[Seq[Resolver]]]", "member" : "sbt.Keys.bootResolvers", "link" : "sbt\/Keys$.html#bootResolvers:sbt.TaskKey[Option[Seq[sbt.librarymanagement.Resolver]]]", "kind" : "val"}, {"label" : "overrideBuildResolvers", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.overrideBuildResolvers", "link" : "sbt\/Keys$.html#overrideBuildResolvers:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "projectID", "tail" : ": SettingKey[ModuleID]", "member" : "sbt.Keys.projectID", "link" : "sbt\/Keys$.html#projectID:sbt.SettingKey[sbt.librarymanagement.ModuleID]", "kind" : "val"}, {"label" : "moduleID", "tail" : ": SettingKey[ModuleID]", "member" : "sbt.Keys.moduleID", "link" : "sbt\/Keys$.html#moduleID:sbt.SettingKey[sbt.librarymanagement.ModuleID]", "kind" : "val"}, {"label" : "isSnapshot", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.isSnapshot", "link" : "sbt\/Keys$.html#isSnapshot:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "version", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.version", "link" : "sbt\/Keys$.html#version:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "moduleName", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.moduleName", "link" : "sbt\/Keys$.html#moduleName:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "pomAllRepositories", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.pomAllRepositories", "link" : "sbt\/Keys$.html#pomAllRepositories:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "pomIncludeRepository", "tail" : ": SettingKey[(MavenRepository) ⇒ Boolean]", "member" : "sbt.Keys.pomIncludeRepository", "link" : "sbt\/Keys$.html#pomIncludeRepository:sbt.SettingKey[sbt.librarymanagement.MavenRepository=>Boolean]", "kind" : "val"}, {"label" : "pomPostProcess", "tail" : ": SettingKey[(scala.xml.Node) ⇒ scala.xml.Node]", "member" : "sbt.Keys.pomPostProcess", "link" : "sbt\/Keys$.html#pomPostProcess:sbt.SettingKey[scala.xml.Node=>scala.xml.Node]", "kind" : "val"}, {"label" : "pomExtra", "tail" : ": SettingKey[NodeSeq]", "member" : "sbt.Keys.pomExtra", "link" : "sbt\/Keys$.html#pomExtra:sbt.SettingKey[scala.xml.NodeSeq]", "kind" : "val"}, {"label" : "publishM2", "tail" : ": TaskKey[Unit]", "member" : "sbt.Keys.publishM2", "link" : "sbt\/Keys$.html#publishM2:sbt.TaskKey[Unit]", "kind" : "val"}, {"label" : "publishLocal", "tail" : ": TaskKey[Unit]", "member" : "sbt.Keys.publishLocal", "link" : "sbt\/Keys$.html#publishLocal:sbt.TaskKey[Unit]", "kind" : "val"}, {"label" : "publish", "tail" : ": TaskKey[Unit]", "member" : "sbt.Keys.publish", "link" : "sbt\/Keys$.html#publish:sbt.TaskKey[Unit]", "kind" : "val"}, {"label" : "makeIvyXml", "tail" : ": TaskKey[File]", "member" : "sbt.Keys.makeIvyXml", "link" : "sbt\/Keys$.html#makeIvyXml:sbt.TaskKey[java.io.File]", "kind" : "val"}, {"label" : "deliverLocal", "tail" : ": TaskKey[File]", "member" : "sbt.Keys.deliverLocal", "link" : "sbt\/Keys$.html#deliverLocal:sbt.TaskKey[java.io.File]", "kind" : "val"}, {"label" : "deliver", "tail" : ": TaskKey[File]", "member" : "sbt.Keys.deliver", "link" : "sbt\/Keys$.html#deliver:sbt.TaskKey[java.io.File]", "kind" : "val"}, {"label" : "makePom", "tail" : ": TaskKey[File]", "member" : "sbt.Keys.makePom", "link" : "sbt\/Keys$.html#makePom:sbt.TaskKey[java.io.File]", "kind" : "val"}, {"label" : "credentials", "tail" : ": TaskKey[Seq[Credentials]]", "member" : "sbt.Keys.credentials", "link" : "sbt\/Keys$.html#credentials:sbt.TaskKey[Seq[sbt.librarymanagement.ivy.Credentials]]", "kind" : "val"}, {"label" : "publishMavenStyle", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.publishMavenStyle", "link" : "sbt\/Keys$.html#publishMavenStyle:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "packagedArtifacts", "tail" : ": TaskKey[Map[Artifact, File]]", "member" : "sbt.Keys.packagedArtifacts", "link" : "sbt\/Keys$.html#packagedArtifacts:sbt.TaskKey[Map[sbt.librarymanagement.Artifact,java.io.File]]", "kind" : "val"}, {"label" : "makeIvyXmlLocalConfiguration", "tail" : ": TaskKey[PublishConfiguration]", "member" : "sbt.Keys.makeIvyXmlLocalConfiguration", "link" : "sbt\/Keys$.html#makeIvyXmlLocalConfiguration:sbt.TaskKey[sbt.librarymanagement.PublishConfiguration]", "kind" : "val"}, {"label" : "makeIvyXmlConfiguration", "tail" : ": TaskKey[PublishConfiguration]", "member" : "sbt.Keys.makeIvyXmlConfiguration", "link" : "sbt\/Keys$.html#makeIvyXmlConfiguration:sbt.TaskKey[sbt.librarymanagement.PublishConfiguration]", "kind" : "val"}, {"label" : "makePomConfiguration", "tail" : ": SettingKey[MakePomConfiguration]", "member" : "sbt.Keys.makePomConfiguration", "link" : "sbt\/Keys$.html#makePomConfiguration:sbt.SettingKey[sbt.librarymanagement.MakePomConfiguration]", "kind" : "val"}, {"label" : "publishM2Configuration", "tail" : ": TaskKey[PublishConfiguration]", "member" : "sbt.Keys.publishM2Configuration", "link" : "sbt\/Keys$.html#publishM2Configuration:sbt.TaskKey[sbt.librarymanagement.PublishConfiguration]", "kind" : "val"}, {"label" : "publishLocalConfiguration", "tail" : ": TaskKey[PublishConfiguration]", "member" : "sbt.Keys.publishLocalConfiguration", "link" : "sbt\/Keys$.html#publishLocalConfiguration:sbt.TaskKey[sbt.librarymanagement.PublishConfiguration]", "kind" : "val"}, {"label" : "publishConfiguration", "tail" : ": TaskKey[PublishConfiguration]", "member" : "sbt.Keys.publishConfiguration", "link" : "sbt\/Keys$.html#publishConfiguration:sbt.TaskKey[sbt.librarymanagement.PublishConfiguration]", "kind" : "val"}, {"label" : "docArtifactTypes", "tail" : ": SettingKey[Seq[String]]", "member" : "sbt.Keys.docArtifactTypes", "link" : "sbt\/Keys$.html#docArtifactTypes:sbt.SettingKey[Seq[String]]", "kind" : "val"}, {"label" : "sourceArtifactTypes", "tail" : ": SettingKey[Seq[String]]", "member" : "sbt.Keys.sourceArtifactTypes", "link" : "sbt\/Keys$.html#sourceArtifactTypes:sbt.SettingKey[Seq[String]]", "kind" : "val"}, {"label" : "updateSbtClassifiers", "tail" : ": TaskKey[UpdateReport]", "member" : "sbt.Keys.updateSbtClassifiers", "link" : "sbt\/Keys$.html#updateSbtClassifiers:sbt.TaskKey[sbt.librarymanagement.UpdateReport]", "kind" : "val"}, {"label" : "transitiveClassifiers", "tail" : ": SettingKey[Seq[String]]", "member" : "sbt.Keys.transitiveClassifiers", "link" : "sbt\/Keys$.html#transitiveClassifiers:sbt.SettingKey[Seq[String]]", "kind" : "val"}, {"label" : "updateClassifiers", "tail" : ": TaskKey[UpdateReport]", "member" : "sbt.Keys.updateClassifiers", "link" : "sbt\/Keys$.html#updateClassifiers:sbt.TaskKey[sbt.librarymanagement.UpdateReport]", "kind" : "val"}, {"label" : "transitiveUpdate", "tail" : ": TaskKey[Seq[UpdateReport]]", "member" : "sbt.Keys.transitiveUpdate", "link" : "sbt\/Keys$.html#transitiveUpdate:sbt.TaskKey[Seq[sbt.librarymanagement.UpdateReport]]", "kind" : "val"}, {"label" : "evictionWarningOptions", "tail" : ": SettingKey[EvictionWarningOptions]", "member" : "sbt.Keys.evictionWarningOptions", "link" : "sbt\/Keys$.html#evictionWarningOptions:sbt.SettingKey[sbt.librarymanagement.EvictionWarningOptions]", "kind" : "val"}, {"label" : "evicted", "tail" : ": TaskKey[EvictionWarning]", "member" : "sbt.Keys.evicted", "link" : "sbt\/Keys$.html#evicted:sbt.TaskKey[sbt.librarymanagement.EvictionWarning]", "kind" : "val"}, {"label" : "update", "tail" : ": TaskKey[UpdateReport]", "member" : "sbt.Keys.update", "link" : "sbt\/Keys$.html#update:sbt.TaskKey[sbt.librarymanagement.UpdateReport]", "kind" : "val"}, {"label" : "updateCacheName", "tail" : ": TaskKey[String]", "member" : "sbt.Keys.updateCacheName", "link" : "sbt\/Keys$.html#updateCacheName:sbt.TaskKey[String]", "kind" : "val"}, {"label" : "ivyModule", "tail" : ": TaskKey[Module]", "member" : "sbt.Keys.ivyModule", "link" : "sbt\/Keys$.html#ivyModule:sbt.TaskKey[sbt.internal.librarymanagement.IvySbt#Module]", "kind" : "val"}, {"label" : "ivySbt", "tail" : ": TaskKey[IvySbt]", "member" : "sbt.Keys.ivySbt", "link" : "sbt\/Keys$.html#ivySbt:sbt.TaskKey[sbt.internal.librarymanagement.IvySbt]", "kind" : "val"}, {"label" : "publisher", "tail" : ": TaskKey[Publisher]", "member" : "sbt.Keys.publisher", "link" : "sbt\/Keys$.html#publisher:sbt.TaskKey[sbt.librarymanagement.Publisher]", "kind" : "val"}, {"label" : "dependencyResolution", "tail" : ": TaskKey[DependencyResolution]", "member" : "sbt.Keys.dependencyResolution", "link" : "sbt\/Keys$.html#dependencyResolution:sbt.TaskKey[sbt.librarymanagement.DependencyResolution]", "kind" : "val"}, {"label" : "dependencyPositions", "tail" : ": TaskKey[Map[ModuleID, SourcePosition]]", "member" : "sbt.Keys.dependencyPositions", "link" : "sbt\/Keys$.html#dependencyPositions:sbt.TaskKey[Map[sbt.librarymanagement.ModuleID,sbt.internal.util.SourcePosition]]", "kind" : "val"}, {"label" : "unresolvedWarningConfiguration", "tail" : ": TaskKey[UnresolvedWarningConfiguration]", "member" : "sbt.Keys.unresolvedWarningConfiguration", "link" : "sbt\/Keys$.html#unresolvedWarningConfiguration:sbt.TaskKey[sbt.librarymanagement.UnresolvedWarningConfiguration]", "kind" : "val"}, {"label" : "updateOptions", "tail" : ": SettingKey[UpdateOptions]", "member" : "sbt.Keys.updateOptions", "link" : "sbt\/Keys$.html#updateOptions:sbt.SettingKey[sbt.librarymanagement.ivy.UpdateOptions]", "kind" : "val"}, {"label" : "updateConfiguration", "tail" : ": SettingKey[UpdateConfiguration]", "member" : "sbt.Keys.updateConfiguration", "link" : "sbt\/Keys$.html#updateConfiguration:sbt.SettingKey[sbt.librarymanagement.UpdateConfiguration]", "kind" : "val"}, {"label" : "unmanagedBase", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.unmanagedBase", "link" : "sbt\/Keys$.html#unmanagedBase:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "moduleSettings", "tail" : ": TaskKey[ModuleSettings]", "member" : "sbt.Keys.moduleSettings", "link" : "sbt\/Keys$.html#moduleSettings:sbt.TaskKey[sbt.librarymanagement.ModuleSettings]", "kind" : "val"}, {"label" : "bootIvyConfiguration", "tail" : ": TaskKey[IvyConfiguration]", "member" : "sbt.Keys.bootIvyConfiguration", "link" : "sbt\/Keys$.html#bootIvyConfiguration:sbt.TaskKey[sbt.librarymanagement.ivy.IvyConfiguration]", "kind" : "val"}, {"label" : "ivyConfigurations", "tail" : ": SettingKey[Seq[Configuration]]", "member" : "sbt.Keys.ivyConfigurations", "link" : "sbt\/Keys$.html#ivyConfigurations:sbt.SettingKey[Seq[sbt.librarymanagement.Configuration]]", "kind" : "val"}, {"label" : "ivyConfiguration", "tail" : ": TaskKey[IvyConfiguration]", "member" : "sbt.Keys.ivyConfiguration", "link" : "sbt\/Keys$.html#ivyConfiguration:sbt.TaskKey[sbt.librarymanagement.ivy.IvyConfiguration]", "kind" : "val"}, {"label" : "classpathConfiguration", "tail" : ": TaskKey[Configuration]", "member" : "sbt.Keys.classpathConfiguration", "link" : "sbt\/Keys$.html#classpathConfiguration:sbt.TaskKey[sbt.librarymanagement.Configuration]", "kind" : "val"}, {"label" : "internalConfigurationMap", "tail" : ": SettingKey[(Configuration) ⇒ Configuration]", "member" : "sbt.Keys.internalConfigurationMap", "link" : "sbt\/Keys$.html#internalConfigurationMap:sbt.SettingKey[sbt.librarymanagement.Configuration=>sbt.librarymanagement.Configuration]", "kind" : "val"}, {"label" : "fullClasspathAsJars", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.fullClasspathAsJars", "link" : "sbt\/Keys$.html#fullClasspathAsJars:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "dependencyClasspathAsJars", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.dependencyClasspathAsJars", "link" : "sbt\/Keys$.html#dependencyClasspathAsJars:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "internalDependencyAsJars", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.internalDependencyAsJars", "link" : "sbt\/Keys$.html#internalDependencyAsJars:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "exportedProductJarsNoTracking", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.exportedProductJarsNoTracking", "link" : "sbt\/Keys$.html#exportedProductJarsNoTracking:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "exportedProductJarsIfMissing", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.exportedProductJarsIfMissing", "link" : "sbt\/Keys$.html#exportedProductJarsIfMissing:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "exportedProductJars", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.exportedProductJars", "link" : "sbt\/Keys$.html#exportedProductJars:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "exportToInternal", "tail" : ": SettingKey[TrackLevel]", "member" : "sbt.Keys.exportToInternal", "link" : "sbt\/Keys$.html#exportToInternal:sbt.SettingKey[sbt.librarymanagement.TrackLevel]", "kind" : "val"}, {"label" : "trackInternalDependencies", "tail" : ": SettingKey[TrackLevel]", "member" : "sbt.Keys.trackInternalDependencies", "link" : "sbt\/Keys$.html#trackInternalDependencies:sbt.SettingKey[sbt.librarymanagement.TrackLevel]", "kind" : "val"}, {"label" : "fullClasspath", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.fullClasspath", "link" : "sbt\/Keys$.html#fullClasspath:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "dependencyClasspath", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.dependencyClasspath", "link" : "sbt\/Keys$.html#dependencyClasspath:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "externalDependencyClasspath", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.externalDependencyClasspath", "link" : "sbt\/Keys$.html#externalDependencyClasspath:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "internalDependencyClasspath", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.internalDependencyClasspath", "link" : "sbt\/Keys$.html#internalDependencyClasspath:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "managedClasspath", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.managedClasspath", "link" : "sbt\/Keys$.html#managedClasspath:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "unmanagedJars", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.unmanagedJars", "link" : "sbt\/Keys$.html#unmanagedJars:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "unmanagedClasspath", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.unmanagedClasspath", "link" : "sbt\/Keys$.html#unmanagedClasspath:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "exportedProductsNoTracking", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.exportedProductsNoTracking", "link" : "sbt\/Keys$.html#exportedProductsNoTracking:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "exportedProductsIfMissing", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.exportedProductsIfMissing", "link" : "sbt\/Keys$.html#exportedProductsIfMissing:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "exportedProducts", "tail" : ": TaskKey[Classpath]", "member" : "sbt.Keys.exportedProducts", "link" : "sbt\/Keys$.html#exportedProducts:sbt.TaskKey[sbt.Keys.Classpath]", "kind" : "val"}, {"label" : "exportJars", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.exportJars", "link" : "sbt\/Keys$.html#exportJars:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "productDirectories", "tail" : ": TaskKey[Seq[File]]", "member" : "sbt.Keys.productDirectories", "link" : "sbt\/Keys$.html#productDirectories:sbt.TaskKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "products", "tail" : ": TaskKey[Seq[File]]", "member" : "sbt.Keys.products", "link" : "sbt\/Keys$.html#products:sbt.TaskKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "defaultConfiguration", "tail" : ": SettingKey[Option[Configuration]]", "member" : "sbt.Keys.defaultConfiguration", "link" : "sbt\/Keys$.html#defaultConfiguration:sbt.SettingKey[Option[sbt.librarymanagement.Configuration]]", "kind" : "val"}, {"label" : "projectInfo", "tail" : ": SettingKey[ModuleInfo]", "member" : "sbt.Keys.projectInfo", "link" : "sbt\/Keys$.html#projectInfo:sbt.SettingKey[sbt.librarymanagement.ModuleInfo]", "kind" : "val"}, {"label" : "scmInfo", "tail" : ": SettingKey[Option[ScmInfo]]", "member" : "sbt.Keys.scmInfo", "link" : "sbt\/Keys$.html#scmInfo:sbt.SettingKey[Option[sbt.librarymanagement.ScmInfo]]", "kind" : "val"}, {"label" : "autoAPIMappings", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.autoAPIMappings", "link" : "sbt\/Keys$.html#autoAPIMappings:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "apiMappings", "tail" : ": TaskKey[Map[File, URL]]", "member" : "sbt.Keys.apiMappings", "link" : "sbt\/Keys$.html#apiMappings:sbt.TaskKey[Map[java.io.File,java.net.URL]]", "kind" : "val"}, {"label" : "entryApiURL", "tail" : ": AttributeKey[URL]", "member" : "sbt.Keys.entryApiURL", "link" : "sbt\/Keys$.html#entryApiURL:sbt.internal.util.AttributeKey[java.net.URL]", "kind" : "val"}, {"label" : "apiURL", "tail" : ": SettingKey[Option[URL]]", "member" : "sbt.Keys.apiURL", "link" : "sbt\/Keys$.html#apiURL:sbt.SettingKey[Option[java.net.URL]]", "kind" : "val"}, {"label" : "developers", "tail" : ": SettingKey[List[Developer]]", "member" : "sbt.Keys.developers", "link" : "sbt\/Keys$.html#developers:sbt.SettingKey[List[sbt.librarymanagement.Developer]]", "kind" : "val"}, {"label" : "organizationHomepage", "tail" : ": SettingKey[Option[URL]]", "member" : "sbt.Keys.organizationHomepage", "link" : "sbt\/Keys$.html#organizationHomepage:sbt.SettingKey[Option[java.net.URL]]", "kind" : "val"}, {"label" : "organizationName", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.organizationName", "link" : "sbt\/Keys$.html#organizationName:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "organization", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.organization", "link" : "sbt\/Keys$.html#organization:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "licenses", "tail" : ": SettingKey[Seq[(String, URL)]]", "member" : "sbt.Keys.licenses", "link" : "sbt\/Keys$.html#licenses:sbt.SettingKey[Seq[(String,java.net.URL)]]", "kind" : "val"}, {"label" : "startYear", "tail" : ": SettingKey[Option[Int]]", "member" : "sbt.Keys.startYear", "link" : "sbt\/Keys$.html#startYear:sbt.SettingKey[Option[Int]]", "kind" : "val"}, {"label" : "homepage", "tail" : ": SettingKey[Option[URL]]", "member" : "sbt.Keys.homepage", "link" : "sbt\/Keys$.html#homepage:sbt.SettingKey[Option[java.net.URL]]", "kind" : "val"}, {"label" : "description", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.description", "link" : "sbt\/Keys$.html#description:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "normalizedName", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.normalizedName", "link" : "sbt\/Keys$.html#normalizedName:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "name", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.name", "link" : "sbt\/Keys$.html#name:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "Classpath", "tail" : "", "member" : "sbt.Keys.Classpath", "link" : "sbt\/Keys$.html#Classpath=sbt.Def.Classpath", "kind" : "type"}, {"label" : "isModule", "tail" : ": AttributeKey[Boolean]", "member" : "sbt.Keys.isModule", "link" : "sbt\/Keys$.html#isModule:sbt.internal.util.AttributeKey[Boolean]", "kind" : "val"}, {"label" : "testGrouping", "tail" : ": TaskKey[Seq[Group]]", "member" : "sbt.Keys.testGrouping", "link" : "sbt\/Keys$.html#testGrouping:sbt.TaskKey[Seq[sbt.Tests.Group]]", "kind" : "val"}, {"label" : "testResultLogger", "tail" : ": SettingKey[TestResultLogger]", "member" : "sbt.Keys.testResultLogger", "link" : "sbt\/Keys$.html#testResultLogger:sbt.SettingKey[sbt.TestResultLogger]", "kind" : "val"}, {"label" : "testFilter", "tail" : ": TaskKey[(Seq[String]) ⇒ Seq[(String) ⇒ Boolean]]", "member" : "sbt.Keys.testFilter", "link" : "sbt\/Keys$.html#testFilter:sbt.TaskKey[Seq[String]=>Seq[String=>Boolean]]", "kind" : "val"}, {"label" : "testExecution", "tail" : ": TaskKey[Execution]", "member" : "sbt.Keys.testExecution", "link" : "sbt\/Keys$.html#testExecution:sbt.TaskKey[sbt.Tests.Execution]", "kind" : "val"}, {"label" : "testForkedParallel", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.testForkedParallel", "link" : "sbt\/Keys$.html#testForkedParallel:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "testListeners", "tail" : ": TaskKey[Seq[TestReportListener]]", "member" : "sbt.Keys.testListeners", "link" : "sbt\/Keys$.html#testListeners:sbt.TaskKey[Seq[sbt.TestReportListener]]", "kind" : "val"}, {"label" : "testFrameworks", "tail" : ": SettingKey[Seq[TestFramework]]", "member" : "sbt.Keys.testFrameworks", "link" : "sbt\/Keys$.html#testFrameworks:sbt.SettingKey[Seq[sbt.TestFramework]]", "kind" : "val"}, {"label" : "testOptions", "tail" : ": TaskKey[Seq[TestOption]]", "member" : "sbt.Keys.testOptions", "link" : "sbt\/Keys$.html#testOptions:sbt.TaskKey[Seq[sbt.TestOption]]", "kind" : "val"}, {"label" : "testQuick", "tail" : ": InputKey[Unit]", "member" : "sbt.Keys.testQuick", "link" : "sbt\/Keys$.html#testQuick:sbt.InputKey[Unit]", "kind" : "val"}, {"label" : "testOnly", "tail" : ": InputKey[Unit]", "member" : "sbt.Keys.testOnly", "link" : "sbt\/Keys$.html#testOnly:sbt.InputKey[Unit]", "kind" : "val"}, {"label" : "test", "tail" : ": TaskKey[Unit]", "member" : "sbt.Keys.test", "link" : "sbt\/Keys$.html#test:sbt.TaskKey[Unit]", "kind" : "val"}, {"label" : "executeTests", "tail" : ": TaskKey[Output]", "member" : "sbt.Keys.executeTests", "link" : "sbt\/Keys$.html#executeTests:sbt.TaskKey[sbt.Tests.Output]", "kind" : "val"}, {"label" : "definedTestNames", "tail" : ": TaskKey[Seq[String]]", "member" : "sbt.Keys.definedTestNames", "link" : "sbt\/Keys$.html#definedTestNames:sbt.TaskKey[Seq[String]]", "kind" : "val"}, {"label" : "definedTests", "tail" : ": TaskKey[Seq[TestDefinition]]", "member" : "sbt.Keys.definedTests", "link" : "sbt\/Keys$.html#definedTests:sbt.TaskKey[Seq[sbt.TestDefinition]]", "kind" : "val"}, {"label" : "loadedTestFrameworks", "tail" : ": TaskKey[Map[TestFramework, Framework]]", "member" : "sbt.Keys.loadedTestFrameworks", "link" : "sbt\/Keys$.html#loadedTestFrameworks:sbt.TaskKey[Map[sbt.TestFramework,sbt.testing.Framework]]", "kind" : "val"}, {"label" : "testLoader", "tail" : ": TaskKey[ClassLoader]", "member" : "sbt.Keys.testLoader", "link" : "sbt\/Keys$.html#testLoader:sbt.TaskKey[ClassLoader]", "kind" : "val"}, {"label" : "bgCopyClasspath", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.bgCopyClasspath", "link" : "sbt\/Keys$.html#bgCopyClasspath:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "bgRunMain", "tail" : ": InputKey[JobHandle]", "member" : "sbt.Keys.bgRunMain", "link" : "sbt\/Keys$.html#bgRunMain:sbt.InputKey[sbt.JobHandle]", "kind" : "val"}, {"label" : "bgRun", "tail" : ": InputKey[JobHandle]", "member" : "sbt.Keys.bgRun", "link" : "sbt\/Keys$.html#bgRun:sbt.InputKey[sbt.JobHandle]", "kind" : "val"}, {"label" : "bgWaitFor", "tail" : ": InputKey[Unit]", "member" : "sbt.Keys.bgWaitFor", "link" : "sbt\/Keys$.html#bgWaitFor:sbt.InputKey[Unit]", "kind" : "val"}, {"label" : "bgStop", "tail" : ": InputKey[Unit]", "member" : "sbt.Keys.bgStop", "link" : "sbt\/Keys$.html#bgStop:sbt.InputKey[Unit]", "kind" : "val"}, {"label" : "ps", "tail" : ": TaskKey[Seq[JobHandle]]", "member" : "sbt.Keys.ps", "link" : "sbt\/Keys$.html#ps:sbt.TaskKey[Seq[sbt.JobHandle]]", "kind" : "val"}, {"label" : "bgList", "tail" : ": TaskKey[Seq[JobHandle]]", "member" : "sbt.Keys.bgList", "link" : "sbt\/Keys$.html#bgList:sbt.TaskKey[Seq[sbt.JobHandle]]", "kind" : "val"}, {"label" : "bgJobService", "tail" : ": SettingKey[BackgroundJobService]", "member" : "sbt.Keys.bgJobService", "link" : "sbt\/Keys$.html#bgJobService:sbt.SettingKey[sbt.BackgroundJobService]", "kind" : "val"}, {"label" : "envVars", "tail" : ": TaskKey[Map[String, String]]", "member" : "sbt.Keys.envVars", "link" : "sbt\/Keys$.html#envVars:sbt.TaskKey[Map[String,String]]", "kind" : "val"}, {"label" : "javaOptions", "tail" : ": TaskKey[Seq[String]]", "member" : "sbt.Keys.javaOptions", "link" : "sbt\/Keys$.html#javaOptions:sbt.TaskKey[Seq[String]]", "kind" : "val"}, {"label" : "javaHome", "tail" : ": SettingKey[Option[File]]", "member" : "sbt.Keys.javaHome", "link" : "sbt\/Keys$.html#javaHome:sbt.SettingKey[Option[java.io.File]]", "kind" : "val"}, {"label" : "connectInput", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.connectInput", "link" : "sbt\/Keys$.html#connectInput:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "outputStrategy", "tail" : ": SettingKey[Option[OutputStrategy]]", "member" : "sbt.Keys.outputStrategy", "link" : "sbt\/Keys$.html#outputStrategy:sbt.SettingKey[Option[sbt.OutputStrategy]]", "kind" : "val"}, {"label" : "forkOptions", "tail" : ": TaskKey[ForkOptions]", "member" : "sbt.Keys.forkOptions", "link" : "sbt\/Keys$.html#forkOptions:sbt.TaskKey[sbt.ForkOptions]", "kind" : "val"}, {"label" : "fork", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.fork", "link" : "sbt\/Keys$.html#fork:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "trapExit", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.trapExit", "link" : "sbt\/Keys$.html#trapExit:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "runner", "tail" : ": TaskKey[ScalaRun]", "member" : "sbt.Keys.runner", "link" : "sbt\/Keys$.html#runner:sbt.TaskKey[sbt.ScalaRun]", "kind" : "val"}, {"label" : "discoveredMainClasses", "tail" : ": TaskKey[Seq[String]]", "member" : "sbt.Keys.discoveredMainClasses", "link" : "sbt\/Keys$.html#discoveredMainClasses:sbt.TaskKey[Seq[String]]", "kind" : "val"}, {"label" : "runMain", "tail" : ": InputKey[Unit]", "member" : "sbt.Keys.runMain", "link" : "sbt\/Keys$.html#runMain:sbt.InputKey[Unit]", "kind" : "val"}, {"label" : "run", "tail" : ": InputKey[Unit]", "member" : "sbt.Keys.run", "link" : "sbt\/Keys$.html#run:sbt.InputKey[Unit]", "kind" : "val"}, {"label" : "mainClass", "tail" : ": TaskKey[Option[String]]", "member" : "sbt.Keys.mainClass", "link" : "sbt\/Keys$.html#mainClass:sbt.TaskKey[Option[String]]", "kind" : "val"}, {"label" : "selectMainClass", "tail" : ": TaskKey[Option[String]]", "member" : "sbt.Keys.selectMainClass", "link" : "sbt\/Keys$.html#selectMainClass:sbt.TaskKey[Option[String]]", "kind" : "val"}, {"label" : "fileMappings", "tail" : ": TaskKey[Seq[(File, File)]]", "member" : "sbt.Keys.fileMappings", "link" : "sbt\/Keys$.html#fileMappings:sbt.TaskKey[Seq[(java.io.File,java.io.File)]]", "kind" : "val"}, {"label" : "mappings", "tail" : ": TaskKey[Seq[(File, String)]]", "member" : "sbt.Keys.mappings", "link" : "sbt\/Keys$.html#mappings:sbt.TaskKey[Seq[(java.io.File,String)]]", "kind" : "val"}, {"label" : "artifactName", "tail" : ": SettingKey[(ScalaVersion, ModuleID, Artifact) ⇒ String]", "member" : "sbt.Keys.artifactName", "link" : "sbt\/Keys$.html#artifactName:sbt.SettingKey[(sbt.librarymanagement.ScalaVersion,sbt.librarymanagement.ModuleID,sbt.librarymanagement.Artifact)=>String]", "kind" : "val"}, {"label" : "artifactClassifier", "tail" : ": SettingKey[Option[String]]", "member" : "sbt.Keys.artifactClassifier", "link" : "sbt\/Keys$.html#artifactClassifier:sbt.SettingKey[Option[String]]", "kind" : "val"}, {"label" : "artifact", "tail" : ": SettingKey[Artifact]", "member" : "sbt.Keys.artifact", "link" : "sbt\/Keys$.html#artifact:sbt.SettingKey[sbt.librarymanagement.Artifact]", "kind" : "val"}, {"label" : "artifactPath", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.artifactPath", "link" : "sbt\/Keys$.html#artifactPath:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "packageConfiguration", "tail" : ": TaskKey[Configuration]", "member" : "sbt.Keys.packageConfiguration", "link" : "sbt\/Keys$.html#packageConfiguration:sbt.TaskKey[sbt.Package.Configuration]", "kind" : "val"}, {"label" : "packageOptions", "tail" : ": TaskKey[Seq[PackageOption]]", "member" : "sbt.Keys.packageOptions", "link" : "sbt\/Keys$.html#packageOptions:sbt.TaskKey[Seq[sbt.PackageOption]]", "kind" : "val"}, {"label" : "packageSrc", "tail" : ": TaskKey[File]", "member" : "sbt.Keys.packageSrc", "link" : "sbt\/Keys$.html#packageSrc:sbt.TaskKey[java.io.File]", "kind" : "val"}, {"label" : "packageDoc", "tail" : ": TaskKey[File]", "member" : "sbt.Keys.packageDoc", "link" : "sbt\/Keys$.html#packageDoc:sbt.TaskKey[java.io.File]", "kind" : "val"}, {"label" : "package", "tail" : ": TaskKey[File]", "member" : "sbt.Keys.package", "link" : "sbt\/Keys$.html#package:sbt.TaskKey[java.io.File]", "kind" : "val"}, {"label" : "packageBin", "tail" : ": TaskKey[File]", "member" : "sbt.Keys.packageBin", "link" : "sbt\/Keys$.html#packageBin:sbt.TaskKey[java.io.File]", "kind" : "val"}, {"label" : "sourcePositionMappers", "tail" : ": TaskKey[Seq[(Position) ⇒ Option[Position]]]", "member" : "sbt.Keys.sourcePositionMappers", "link" : "sbt\/Keys$.html#sourcePositionMappers:sbt.TaskKey[Seq[xsbti.Position=>Option[xsbti.Position]]]", "kind" : "val"}, {"label" : "aggregate", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.aggregate", "link" : "sbt\/Keys$.html#aggregate:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "copyResources", "tail" : ": TaskKey[Seq[(File, File)]]", "member" : "sbt.Keys.copyResources", "link" : "sbt\/Keys$.html#copyResources:sbt.TaskKey[Seq[(java.io.File,java.io.File)]]", "kind" : "val"}, {"label" : "doc", "tail" : ": TaskKey[File]", "member" : "sbt.Keys.doc", "link" : "sbt\/Keys$.html#doc:sbt.TaskKey[java.io.File]", "kind" : "val"}, {"label" : "classpathEntryDefinesClass", "tail" : ": TaskKey[(File) ⇒ DefinesClass]", "member" : "sbt.Keys.classpathEntryDefinesClass", "link" : "sbt\/Keys$.html#classpathEntryDefinesClass:sbt.TaskKey[java.io.File=>xsbti.compile.DefinesClass]", "kind" : "val"}, {"label" : "stateCompilerCache", "tail" : ": AttributeKey[GlobalsCache]", "member" : "sbt.Keys.stateCompilerCache", "link" : "sbt\/Keys$.html#stateCompilerCache:sbt.internal.util.AttributeKey[xsbti.compile.GlobalsCache]", "kind" : "val"}, {"label" : "compilerCache", "tail" : ": TaskKey[GlobalsCache]", "member" : "sbt.Keys.compilerCache", "link" : "sbt\/Keys$.html#compilerCache:sbt.TaskKey[xsbti.compile.GlobalsCache]", "kind" : "val"}, {"label" : "compileIncSetup", "tail" : ": TaskKey[Setup]", "member" : "sbt.Keys.compileIncSetup", "link" : "sbt\/Keys$.html#compileIncSetup:sbt.TaskKey[xsbti.compile.Setup]", "kind" : "val"}, {"label" : "compileAnalysisFilename", "tail" : ": TaskKey[String]", "member" : "sbt.Keys.compileAnalysisFilename", "link" : "sbt\/Keys$.html#compileAnalysisFilename:sbt.TaskKey[String]", "kind" : "val"}, {"label" : "compilers", "tail" : ": TaskKey[Compilers]", "member" : "sbt.Keys.compilers", "link" : "sbt\/Keys$.html#compilers:sbt.TaskKey[xsbti.compile.Compilers]", "kind" : "val"}, {"label" : "previousCompile", "tail" : ": TaskKey[PreviousResult]", "member" : "sbt.Keys.previousCompile", "link" : "sbt\/Keys$.html#previousCompile:sbt.TaskKey[xsbti.compile.PreviousResult]", "kind" : "val"}, {"label" : "compileIncremental", "tail" : ": TaskKey[CompileResult]", "member" : "sbt.Keys.compileIncremental", "link" : "sbt\/Keys$.html#compileIncremental:sbt.TaskKey[xsbti.compile.CompileResult]", "kind" : "val"}, {"label" : "manipulateBytecode", "tail" : ": TaskKey[CompileResult]", "member" : "sbt.Keys.manipulateBytecode", "link" : "sbt\/Keys$.html#manipulateBytecode:sbt.TaskKey[xsbti.compile.CompileResult]", "kind" : "val"}, {"label" : "compile", "tail" : ": TaskKey[CompileAnalysis]", "member" : "sbt.Keys.compile", "link" : "sbt\/Keys$.html#compile:sbt.TaskKey[xsbti.compile.CompileAnalysis]", "kind" : "val"}, {"label" : "consoleProject", "tail" : ": TaskKey[Unit]", "member" : "sbt.Keys.consoleProject", "link" : "sbt\/Keys$.html#consoleProject:sbt.TaskKey[Unit]", "kind" : "val"}, {"label" : "consoleQuick", "tail" : ": TaskKey[Unit]", "member" : "sbt.Keys.consoleQuick", "link" : "sbt\/Keys$.html#consoleQuick:sbt.TaskKey[Unit]", "kind" : "val"}, {"label" : "console", "tail" : ": TaskKey[Unit]", "member" : "sbt.Keys.console", "link" : "sbt\/Keys$.html#console:sbt.TaskKey[Unit]", "kind" : "val"}, {"label" : "clean", "tail" : ": TaskKey[Unit]", "member" : "sbt.Keys.clean", "link" : "sbt\/Keys$.html#clean:sbt.TaskKey[Unit]", "kind" : "val"}, {"label" : "enableBinaryCompileAnalysis", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.enableBinaryCompileAnalysis", "link" : "sbt\/Keys$.html#enableBinaryCompileAnalysis:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "scalaArtifacts", "tail" : ": SettingKey[Seq[String]]", "member" : "sbt.Keys.scalaArtifacts", "link" : "sbt\/Keys$.html#scalaArtifacts:sbt.SettingKey[Seq[String]]", "kind" : "val"}, {"label" : "scalaCompilerBridgeSource", "tail" : ": SettingKey[ModuleID]", "member" : "sbt.Keys.scalaCompilerBridgeSource", "link" : "sbt\/Keys$.html#scalaCompilerBridgeSource:sbt.SettingKey[sbt.librarymanagement.ModuleID]", "kind" : "val"}, {"label" : "fileInputOptions", "tail" : ": SettingKey[Seq[String]]", "member" : "sbt.Keys.fileInputOptions", "link" : "sbt\/Keys$.html#fileInputOptions:sbt.SettingKey[Seq[String]]", "kind" : "val"}, {"label" : "printWarnings", "tail" : ": TaskKey[Unit]", "member" : "sbt.Keys.printWarnings", "link" : "sbt\/Keys$.html#printWarnings:sbt.TaskKey[Unit]", "kind" : "val"}, {"label" : "crossSbtVersions", "tail" : ": SettingKey[Seq[String]]", "member" : "sbt.Keys.crossSbtVersions", "link" : "sbt\/Keys$.html#crossSbtVersions:sbt.SettingKey[Seq[String]]", "kind" : "val"}, {"label" : "pluginCrossBuild", "tail" : ": TaskKey[Unit]", "member" : "sbt.Keys.pluginCrossBuild", "link" : "sbt\/Keys$.html#pluginCrossBuild:sbt.TaskKey[Unit]", "kind" : "val"}, {"label" : "sbtPlugin", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.sbtPlugin", "link" : "sbt\/Keys$.html#sbtPlugin:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "discoveredSbtPlugins", "tail" : ": TaskKey[DiscoveredNames]", "member" : "sbt.Keys.discoveredSbtPlugins", "link" : "sbt\/Keys$.html#discoveredSbtPlugins:sbt.TaskKey[sbt.internal.PluginDiscovery.DiscoveredNames]", "kind" : "val"}, {"label" : "classpathOptions", "tail" : ": SettingKey[ClasspathOptions]", "member" : "sbt.Keys.classpathOptions", "link" : "sbt\/Keys$.html#classpathOptions:sbt.SettingKey[xsbti.compile.ClasspathOptions]", "kind" : "val"}, {"label" : "crossVersion", "tail" : ": SettingKey[CrossVersion]", "member" : "sbt.Keys.crossVersion", "link" : "sbt\/Keys$.html#crossVersion:sbt.SettingKey[sbt.librarymanagement.CrossVersion]", "kind" : "val"}, {"label" : "crossScalaVersions", "tail" : ": SettingKey[Seq[String]]", "member" : "sbt.Keys.crossScalaVersions", "link" : "sbt\/Keys$.html#crossScalaVersions:sbt.SettingKey[Seq[String]]", "kind" : "val"}, {"label" : "scalaBinaryVersion", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.scalaBinaryVersion", "link" : "sbt\/Keys$.html#scalaBinaryVersion:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "scalaVersion", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.scalaVersion", "link" : "sbt\/Keys$.html#scalaVersion:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "scalaOrganization", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.scalaOrganization", "link" : "sbt\/Keys$.html#scalaOrganization:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "scalaInstance", "tail" : ": TaskKey[ScalaInstance]", "member" : "sbt.Keys.scalaInstance", "link" : "sbt\/Keys$.html#scalaInstance:sbt.TaskKey[sbt.internal.inc.ScalaInstance]", "kind" : "val"}, {"label" : "scalaHome", "tail" : ": SettingKey[Option[File]]", "member" : "sbt.Keys.scalaHome", "link" : "sbt\/Keys$.html#scalaHome:sbt.SettingKey[Option[java.io.File]]", "kind" : "val"}, {"label" : "compileInputs", "tail" : ": TaskKey[Inputs]", "member" : "sbt.Keys.compileInputs", "link" : "sbt\/Keys$.html#compileInputs:sbt.TaskKey[xsbti.compile.Inputs]", "kind" : "val"}, {"label" : "compileOptions", "tail" : ": TaskKey[CompileOptions]", "member" : "sbt.Keys.compileOptions", "link" : "sbt\/Keys$.html#compileOptions:sbt.TaskKey[xsbti.compile.CompileOptions]", "kind" : "val"}, {"label" : "asciiGraphWidth", "tail" : ": SettingKey[Int]", "member" : "sbt.Keys.asciiGraphWidth", "link" : "sbt\/Keys$.html#asciiGraphWidth:sbt.SettingKey[Int]", "kind" : "val"}, {"label" : "cleanupCommands", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.cleanupCommands", "link" : "sbt\/Keys$.html#cleanupCommands:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "initialCommands", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.initialCommands", "link" : "sbt\/Keys$.html#initialCommands:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "compileOrder", "tail" : ": SettingKey[CompileOrder]", "member" : "sbt.Keys.compileOrder", "link" : "sbt\/Keys$.html#compileOrder:sbt.SettingKey[xsbti.compile.CompileOrder]", "kind" : "val"}, {"label" : "incOptions", "tail" : ": TaskKey[IncOptions]", "member" : "sbt.Keys.incOptions", "link" : "sbt\/Keys$.html#incOptions:sbt.TaskKey[xsbti.compile.IncOptions]", "kind" : "val"}, {"label" : "javacOptions", "tail" : ": TaskKey[Seq[String]]", "member" : "sbt.Keys.javacOptions", "link" : "sbt\/Keys$.html#javacOptions:sbt.TaskKey[Seq[String]]", "kind" : "val"}, {"label" : "scalacOptions", "tail" : ": TaskKey[Seq[String]]", "member" : "sbt.Keys.scalacOptions", "link" : "sbt\/Keys$.html#scalacOptions:sbt.TaskKey[Seq[String]]", "kind" : "val"}, {"label" : "maxErrors", "tail" : ": SettingKey[Int]", "member" : "sbt.Keys.maxErrors", "link" : "sbt\/Keys$.html#maxErrors:sbt.SettingKey[Int]", "kind" : "val"}, {"label" : "autoCompilerPlugins", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.autoCompilerPlugins", "link" : "sbt\/Keys$.html#autoCompilerPlugins:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "resourceGenerators", "tail" : ": SettingKey[Seq[Task[Seq[File]]]]", "member" : "sbt.Keys.resourceGenerators", "link" : "sbt\/Keys$.html#resourceGenerators:sbt.SettingKey[Seq[sbt.Task[Seq[java.io.File]]]]", "kind" : "val"}, {"label" : "sourceGenerators", "tail" : ": SettingKey[Seq[Task[Seq[File]]]]", "member" : "sbt.Keys.sourceGenerators", "link" : "sbt\/Keys$.html#sourceGenerators:sbt.SettingKey[Seq[sbt.Task[Seq[java.io.File]]]]", "kind" : "val"}, {"label" : "taskTemporaryDirectory", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.taskTemporaryDirectory", "link" : "sbt\/Keys$.html#taskTemporaryDirectory:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "crossPaths", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.crossPaths", "link" : "sbt\/Keys$.html#crossPaths:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "cleanKeepFiles", "tail" : ": SettingKey[Seq[File]]", "member" : "sbt.Keys.cleanKeepFiles", "link" : "sbt\/Keys$.html#cleanKeepFiles:sbt.SettingKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "cleanFiles", "tail" : ": TaskKey[Seq[File]]", "member" : "sbt.Keys.cleanFiles", "link" : "sbt\/Keys$.html#cleanFiles:sbt.TaskKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "classDirectory", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.classDirectory", "link" : "sbt\/Keys$.html#classDirectory:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "resources", "tail" : ": TaskKey[Seq[File]]", "member" : "sbt.Keys.resources", "link" : "sbt\/Keys$.html#resources:sbt.TaskKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "resourceDirectories", "tail" : ": SettingKey[Seq[File]]", "member" : "sbt.Keys.resourceDirectories", "link" : "sbt\/Keys$.html#resourceDirectories:sbt.SettingKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "managedResources", "tail" : ": TaskKey[Seq[File]]", "member" : "sbt.Keys.managedResources", "link" : "sbt\/Keys$.html#managedResources:sbt.TaskKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "managedResourceDirectories", "tail" : ": SettingKey[Seq[File]]", "member" : "sbt.Keys.managedResourceDirectories", "link" : "sbt\/Keys$.html#managedResourceDirectories:sbt.SettingKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "unmanagedResources", "tail" : ": TaskKey[Seq[File]]", "member" : "sbt.Keys.unmanagedResources", "link" : "sbt\/Keys$.html#unmanagedResources:sbt.TaskKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "unmanagedResourceDirectories", "tail" : ": SettingKey[Seq[File]]", "member" : "sbt.Keys.unmanagedResourceDirectories", "link" : "sbt\/Keys$.html#unmanagedResourceDirectories:sbt.SettingKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "resourceManaged", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.resourceManaged", "link" : "sbt\/Keys$.html#resourceManaged:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "resourceDirectory", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.resourceDirectory", "link" : "sbt\/Keys$.html#resourceDirectory:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "excludeFilter", "tail" : ": SettingKey[FileFilter]", "member" : "sbt.Keys.excludeFilter", "link" : "sbt\/Keys$.html#excludeFilter:sbt.SettingKey[sbt.io.FileFilter]", "kind" : "val"}, {"label" : "includeFilter", "tail" : ": SettingKey[FileFilter]", "member" : "sbt.Keys.includeFilter", "link" : "sbt\/Keys$.html#includeFilter:sbt.SettingKey[sbt.io.FileFilter]", "kind" : "val"}, {"label" : "sourcesInBase", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.sourcesInBase", "link" : "sbt\/Keys$.html#sourcesInBase:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "sources", "tail" : ": TaskKey[Seq[File]]", "member" : "sbt.Keys.sources", "link" : "sbt\/Keys$.html#sources:sbt.TaskKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "managedSources", "tail" : ": TaskKey[Seq[File]]", "member" : "sbt.Keys.managedSources", "link" : "sbt\/Keys$.html#managedSources:sbt.TaskKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "managedSourceDirectories", "tail" : ": SettingKey[Seq[File]]", "member" : "sbt.Keys.managedSourceDirectories", "link" : "sbt\/Keys$.html#managedSourceDirectories:sbt.SettingKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "unmanagedSources", "tail" : ": TaskKey[Seq[File]]", "member" : "sbt.Keys.unmanagedSources", "link" : "sbt\/Keys$.html#unmanagedSources:sbt.TaskKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "unmanagedSourceDirectories", "tail" : ": SettingKey[Seq[File]]", "member" : "sbt.Keys.unmanagedSourceDirectories", "link" : "sbt\/Keys$.html#unmanagedSourceDirectories:sbt.SettingKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "sourceDirectories", "tail" : ": SettingKey[Seq[File]]", "member" : "sbt.Keys.sourceDirectories", "link" : "sbt\/Keys$.html#sourceDirectories:sbt.SettingKey[Seq[java.io.File]]", "kind" : "val"}, {"label" : "javaSource", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.javaSource", "link" : "sbt\/Keys$.html#javaSource:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "scalaSource", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.scalaSource", "link" : "sbt\/Keys$.html#scalaSource:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "sourceManaged", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.sourceManaged", "link" : "sbt\/Keys$.html#sourceManaged:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "sourceDirectory", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.sourceDirectory", "link" : "sbt\/Keys$.html#sourceDirectory:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "crossTarget", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.crossTarget", "link" : "sbt\/Keys$.html#crossTarget:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "target", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.target", "link" : "sbt\/Keys$.html#target:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "baseDirectory", "tail" : ": SettingKey[File]", "member" : "sbt.Keys.baseDirectory", "link" : "sbt\/Keys$.html#baseDirectory:sbt.SettingKey[java.io.File]", "kind" : "val"}, {"label" : "triggeredMessage", "tail" : ": SettingKey[(WatchState) ⇒ String]", "member" : "sbt.Keys.triggeredMessage", "link" : "sbt\/Keys$.html#triggeredMessage:sbt.SettingKey[sbt.internal.io.WatchState=>String]", "kind" : "val"}, {"label" : "watchingMessage", "tail" : ": SettingKey[(WatchState) ⇒ String]", "member" : "sbt.Keys.watchingMessage", "link" : "sbt\/Keys$.html#watchingMessage:sbt.SettingKey[sbt.internal.io.WatchState=>String]", "kind" : "val"}, {"label" : "watchTransitiveSources", "tail" : ": TaskKey[Seq[WatchSource]]", "member" : "sbt.Keys.watchTransitiveSources", "link" : "sbt\/Keys$.html#watchTransitiveSources:sbt.TaskKey[Seq[sbt.Watched.WatchSource]]", "kind" : "val"}, {"label" : "watchSources", "tail" : ": TaskKey[Seq[WatchSource]]", "member" : "sbt.Keys.watchSources", "link" : "sbt\/Keys$.html#watchSources:sbt.TaskKey[Seq[sbt.Watched.WatchSource]]", "kind" : "val"}, {"label" : "watchService", "tail" : ": SettingKey[() ⇒ WatchService]", "member" : "sbt.Keys.watchService", "link" : "sbt\/Keys$.html#watchService:sbt.SettingKey[()=>sbt.io.WatchService]", "kind" : "val"}, {"label" : "pollInterval", "tail" : ": SettingKey[FiniteDuration]", "member" : "sbt.Keys.pollInterval", "link" : "sbt\/Keys$.html#pollInterval:sbt.SettingKey[scala.concurrent.duration.FiniteDuration]", "kind" : "val"}, {"label" : "suppressSbtShellNotification", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.suppressSbtShellNotification", "link" : "sbt\/Keys$.html#suppressSbtShellNotification:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "watch", "tail" : ": SettingKey[Watched]", "member" : "sbt.Keys.watch", "link" : "sbt\/Keys$.html#watch:sbt.SettingKey[sbt.Watched]", "kind" : "val"}, {"label" : "analysis", "tail" : ": AttributeKey[CompileAnalysis]", "member" : "sbt.Keys.analysis", "link" : "sbt\/Keys$.html#analysis:sbt.internal.util.AttributeKey[xsbti.compile.CompileAnalysis]", "kind" : "val"}, {"label" : "serverPort", "tail" : ": SettingKey[Int]", "member" : "sbt.Keys.serverPort", "link" : "sbt\/Keys$.html#serverPort:sbt.SettingKey[Int]", "kind" : "val"}, {"label" : "shellPrompt", "tail" : ": SettingKey[(State) ⇒ String]", "member" : "sbt.Keys.shellPrompt", "link" : "sbt\/Keys$.html#shellPrompt:sbt.SettingKey[sbt.State=>String]", "kind" : "val"}, {"label" : "historyPath", "tail" : ": SettingKey[Option[File]]", "member" : "sbt.Keys.historyPath", "link" : "sbt\/Keys$.html#historyPath:sbt.SettingKey[Option[java.io.File]]", "kind" : "val"}, {"label" : "onComplete", "tail" : ": SettingKey[() ⇒ Unit]", "member" : "sbt.Keys.onComplete", "link" : "sbt\/Keys$.html#onComplete:sbt.SettingKey[()=>Unit]", "kind" : "val"}, {"label" : "transformState", "tail" : ": AttributeKey[(State) ⇒ State]", "member" : "sbt.Keys.transformState", "link" : "sbt\/Keys$.html#transformState:sbt.internal.util.AttributeKey[sbt.State=>sbt.State]", "kind" : "val"}, {"label" : "onLoadMessage", "tail" : ": SettingKey[String]", "member" : "sbt.Keys.onLoadMessage", "link" : "sbt\/Keys$.html#onLoadMessage:sbt.SettingKey[String]", "kind" : "val"}, {"label" : "onUnload", "tail" : ": SettingKey[(State) ⇒ State]", "member" : "sbt.Keys.onUnload", "link" : "sbt\/Keys$.html#onUnload:sbt.SettingKey[sbt.State=>sbt.State]", "kind" : "val"}, {"label" : "onLoad", "tail" : ": SettingKey[(State) ⇒ State]", "member" : "sbt.Keys.onLoad", "link" : "sbt\/Keys$.html#onLoad:sbt.SettingKey[sbt.State=>sbt.State]", "kind" : "val"}, {"label" : "initialize", "tail" : ": SettingKey[Unit]", "member" : "sbt.Keys.initialize", "link" : "sbt\/Keys$.html#initialize:sbt.SettingKey[Unit]", "kind" : "val"}, {"label" : "commands", "tail" : ": SettingKey[Seq[Command]]", "member" : "sbt.Keys.commands", "link" : "sbt\/Keys$.html#commands:sbt.SettingKey[Seq[sbt.Command]]", "kind" : "val"}, {"label" : "configuration", "tail" : ": SettingKey[Configuration]", "member" : "sbt.Keys.configuration", "link" : "sbt\/Keys$.html#configuration:sbt.SettingKey[sbt.librarymanagement.Configuration]", "kind" : "val"}, {"label" : "thisProjectRef", "tail" : ": SettingKey[ProjectRef]", "member" : "sbt.Keys.thisProjectRef", "link" : "sbt\/Keys$.html#thisProjectRef:sbt.SettingKey[sbt.ProjectRef]", "kind" : "val"}, {"label" : "thisProject", "tail" : ": SettingKey[ResolvedProject]", "member" : "sbt.Keys.thisProject", "link" : "sbt\/Keys$.html#thisProject:sbt.SettingKey[sbt.ResolvedProject]", "kind" : "val"}, {"label" : "appConfiguration", "tail" : ": SettingKey[AppConfiguration]", "member" : "sbt.Keys.appConfiguration", "link" : "sbt\/Keys$.html#appConfiguration:sbt.SettingKey[xsbti.AppConfiguration]", "kind" : "val"}, {"label" : "buildDependencies", "tail" : ": SettingKey[BuildDependencies]", "member" : "sbt.Keys.buildDependencies", "link" : "sbt\/Keys$.html#buildDependencies:sbt.SettingKey[sbt.internal.BuildDependencies]", "kind" : "val"}, {"label" : "loadedBuild", "tail" : ": SettingKey[LoadedBuild]", "member" : "sbt.Keys.loadedBuild", "link" : "sbt\/Keys$.html#loadedBuild:sbt.SettingKey[sbt.internal.LoadedBuild]", "kind" : "val"}, {"label" : "buildStructure", "tail" : ": TaskKey[BuildStructure]", "member" : "sbt.Keys.buildStructure", "link" : "sbt\/Keys$.html#buildStructure:sbt.TaskKey[sbt.internal.BuildStructure]", "kind" : "val"}, {"label" : "stateBuildStructure", "tail" : ": AttributeKey[BuildStructure]", "member" : "sbt.Keys.stateBuildStructure", "link" : "sbt\/Keys$.html#stateBuildStructure:sbt.internal.util.AttributeKey[sbt.internal.BuildStructure]", "kind" : "val"}, {"label" : "sessionSettings", "tail" : ": AttributeKey[SessionSettings]", "member" : "sbt.Keys.sessionSettings", "link" : "sbt\/Keys$.html#sessionSettings:sbt.internal.util.AttributeKey[sbt.internal.SessionSettings]", "kind" : "val"}, {"label" : "projectCommand", "tail" : ": AttributeKey[Boolean]", "member" : "sbt.Keys.projectCommand", "link" : "sbt\/Keys$.html#projectCommand:sbt.internal.util.AttributeKey[Boolean]", "kind" : "val"}, {"label" : "autoGeneratedProject", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.autoGeneratedProject", "link" : "sbt\/Keys$.html#autoGeneratedProject:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "sLog", "tail" : ": SettingKey[Logger]", "member" : "sbt.Keys.sLog", "link" : "sbt\/Keys$.html#sLog:sbt.SettingKey[sbt.util.Logger]", "kind" : "val"}, {"label" : "logBuffered", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.logBuffered", "link" : "sbt\/Keys$.html#logBuffered:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "logManager", "tail" : ": SettingKey[LogManager]", "member" : "sbt.Keys.logManager", "link" : "sbt\/Keys$.html#logManager:sbt.SettingKey[sbt.internal.LogManager]", "kind" : "val"}, {"label" : "extraLoggers", "tail" : ": SettingKey[(Def.ScopedKey[_]) ⇒ Seq[Appender]]", "member" : "sbt.Keys.extraLoggers", "link" : "sbt\/Keys$.html#extraLoggers:sbt.SettingKey[sbt.Def.ScopedKey[_]=>Seq[org.apache.logging.log4j.core.Appender]]", "kind" : "val"}, {"label" : "timingFormat", "tail" : ": SettingKey[DateFormat]", "member" : "sbt.Keys.timingFormat", "link" : "sbt\/Keys$.html#timingFormat:sbt.SettingKey[java.text.DateFormat]", "kind" : "val"}, {"label" : "showTiming", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.showTiming", "link" : "sbt\/Keys$.html#showTiming:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "showSuccess", "tail" : ": SettingKey[Boolean]", "member" : "sbt.Keys.showSuccess", "link" : "sbt\/Keys$.html#showSuccess:sbt.SettingKey[Boolean]", "kind" : "val"}, {"label" : "persistTraceLevel", "tail" : ": SettingKey[Int]", "member" : "sbt.Keys.persistTraceLevel", "link" : "sbt\/Keys$.html#persistTraceLevel:sbt.SettingKey[Int]", "kind" : "val"}, {"label" : "traceLevel", "tail" : ": SettingKey[Int]", "member" : "sbt.Keys.traceLevel", "link" : "sbt\/Keys$.html#traceLevel:sbt.SettingKey[Int]", "kind" : "val"}, {"label" : "persistLogLevel", "tail" : ": SettingKey[util.Level.Value]", "member" : "sbt.Keys.persistLogLevel", "link" : "sbt\/Keys$.html#persistLogLevel:sbt.SettingKey[sbt.util.Level.Value]", "kind" : "val"}, {"label" : "logLevel", "tail" : ": SettingKey[util.Level.Value]", "member" : "sbt.Keys.logLevel", "link" : "sbt\/Keys$.html#logLevel:sbt.SettingKey[sbt.util.Level.Value]", "kind" : "val"}, {"label" : "TraceValues", "tail" : ": String", "member" : "sbt.Keys.TraceValues", "link" : "sbt\/Keys$.html#TraceValues:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Keys$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Keys$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Keys$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Keys$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Keys$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Keys$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Keys$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Keys$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Keys$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Keys$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Keys$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Keys$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Keys$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Keys$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Keys$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Keys$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Keys$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Keys$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Keys$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.LocalProject", "shortDescription" : "Identifies a project in the current build context.", "members_case class" : [{"member" : "sbt.LocalProject#<init>", "error" : "unsupported entity"}, {"label" : "project", "tail" : ": String", "member" : "sbt.LocalProject.project", "link" : "sbt\/LocalProject.html#project:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/LocalProject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/LocalProject.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/LocalProject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/LocalProject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/LocalProject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/LocalProject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/LocalProject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/LocalProject.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/LocalProject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/LocalProject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/LocalProject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/LocalProject.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/LocalProject.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/LocalProject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/LocalProject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/LocalProject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/LocalProject.html", "kind" : "case class"}, {"name" : "sbt.LocalRootProject", "shortDescription" : "Identifies the root project in the current build context.", "object" : "sbt\/LocalRootProject$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/LocalRootProject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/LocalRootProject$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/LocalRootProject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/LocalRootProject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/LocalRootProject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/LocalRootProject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/LocalRootProject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/LocalRootProject$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/LocalRootProject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/LocalRootProject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/LocalRootProject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/LocalRootProject$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/LocalRootProject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/LocalRootProject$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/LocalRootProject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/LocalRootProject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/LocalRootProject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.MainLoop", "shortDescription" : "", "object" : "sbt\/MainLoop$.html", "members_object" : [{"label" : "logFullException", "tail" : "(e: Throwable, log: Logger): Unit", "member" : "sbt.MainLoop.logFullException", "link" : "sbt\/MainLoop$.html#logFullException(e:Throwable,log:sbt.util.Logger):Unit", "kind" : "def"}, {"label" : "processCommand", "tail" : "(exec: Exec, state: State): State", "member" : "sbt.MainLoop.processCommand", "link" : "sbt\/MainLoop$.html#processCommand(exec:sbt.Exec,state:sbt.State):sbt.State", "kind" : "def"}, {"label" : "next", "tail" : "(state: State): State", "member" : "sbt.MainLoop.next", "link" : "sbt\/MainLoop$.html#next(state:sbt.State):sbt.State", "kind" : "def"}, {"label" : "run", "tail" : "(state: State): RunNext", "member" : "sbt.MainLoop.run", "link" : "sbt\/MainLoop$.html#run(state:sbt.State):sbt.MainLoop.RunNext", "kind" : "def"}, {"label" : "Return", "tail" : "", "member" : "sbt.MainLoop.Return", "link" : "sbt\/MainLoop$.html#ReturnextendsMainLoop.RunNext", "kind" : "final class"}, {"label" : "KeepGlobalLog", "tail" : "", "member" : "sbt.MainLoop.KeepGlobalLog", "link" : "sbt\/MainLoop$.html#KeepGlobalLogextendsMainLoop.RunNext", "kind" : "final class"}, {"label" : "ClearGlobalLog", "tail" : "", "member" : "sbt.MainLoop.ClearGlobalLog", "link" : "sbt\/MainLoop$.html#ClearGlobalLogextendsMainLoop.RunNext", "kind" : "final class"}, {"label" : "RunNext", "tail" : "", "member" : "sbt.MainLoop.RunNext", "link" : "sbt\/MainLoop$.html#RunNextextendsAnyRef", "kind" : "sealed trait"}, {"label" : "runWithNewLog", "tail" : "(state: State, logBacking: GlobalLogBacking): RunNext", "member" : "sbt.MainLoop.runWithNewLog", "link" : "sbt\/MainLoop$.html#runWithNewLog(state:sbt.State,logBacking:sbt.internal.util.GlobalLogBacking):sbt.MainLoop.RunNext", "kind" : "def"}, {"label" : "deleteLastLog", "tail" : "(logBacking: GlobalLogBacking): Unit", "member" : "sbt.MainLoop.deleteLastLog", "link" : "sbt\/MainLoop$.html#deleteLastLog(logBacking:sbt.internal.util.GlobalLogBacking):Unit", "kind" : "def"}, {"label" : "runAndClearLast", "tail" : "(state: State, logBacking: GlobalLogBacking): RunNext", "member" : "sbt.MainLoop.runAndClearLast", "link" : "sbt\/MainLoop$.html#runAndClearLast(state:sbt.State,logBacking:sbt.internal.util.GlobalLogBacking):sbt.MainLoop.RunNext", "kind" : "def"}, {"label" : "runLoggedLoop", "tail" : "(state: State, logBacking: GlobalLogBacking): MainResult", "member" : "sbt.MainLoop.runLoggedLoop", "link" : "sbt\/MainLoop$.html#runLoggedLoop(state:sbt.State,logBacking:sbt.internal.util.GlobalLogBacking):xsbti.MainResult", "kind" : "def"}, {"label" : "runLogged", "tail" : "(state: State): MainResult", "member" : "sbt.MainLoop.runLogged", "link" : "sbt\/MainLoop$.html#runLogged(state:sbt.State):xsbti.MainResult", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/MainLoop$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/MainLoop$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/MainLoop$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/MainLoop$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/MainLoop$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/MainLoop$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/MainLoop$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/MainLoop$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/MainLoop$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/MainLoop$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/MainLoop$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/MainLoop$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/MainLoop$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/MainLoop$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/MainLoop$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/MainLoop$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/MainLoop$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/MainLoop$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/MainLoop$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.Mapped", "shortDescription" : "Applies a function to the result of evaluating a heterogeneous list of other tasks.", "members_case class" : [{"member" : "sbt.Mapped#<init>", "error" : "unsupported entity"}, {"label" : "alist", "tail" : ": AList[K]", "member" : "sbt.Mapped.alist", "link" : "sbt\/Mapped.html#alist:sbt.internal.util.AList[K]", "kind" : "val"}, {"label" : "f", "tail" : ": (K[Result]) ⇒ T", "member" : "sbt.Mapped.f", "link" : "sbt\/Mapped.html#f:K[sbt.Result]=>T", "kind" : "val"}, {"label" : "in", "tail" : ": K[Task]", "member" : "sbt.Mapped.in", "link" : "sbt\/Mapped.html#in:K[sbt.Task]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Mapped.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Mapped.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Mapped.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Mapped.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Mapped.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Mapped.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Mapped.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Mapped.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Mapped.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Mapped.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Mapped.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Mapped.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Mapped.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Mapped.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Mapped.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Mapped.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/Mapped.html", "kind" : "case class"}, {"name" : "sbt.Node", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Node.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Node.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Node.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Node.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Node.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Node.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Node.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Node.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Node.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Node.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Node.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Node.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Node.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Node.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Node.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Node.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Node.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Node.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Node.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "work", "tail" : "(inputs: K[Result]): Either[A[T], T]", "member" : "sbt.Node.work", "link" : "sbt\/Node.html#work(inputs:Node.this.K[sbt.Result]):Either[A[T],T]", "kind" : "abstract def"}, {"label" : "alist", "tail" : ": AList[K]", "member" : "sbt.Node.alist", "link" : "sbt\/Node.html#alist:sbt.internal.util.AList[Node.this.K]", "kind" : "abstract val"}, {"label" : "in", "tail" : ": K[A]", "member" : "sbt.Node.in", "link" : "sbt\/Node.html#in:Node.this.K[A]", "kind" : "abstract val"}, {"member" : "sbt.Node.K", "error" : "unsupported entity"}], "shortDescription" : "Represents a task node in a format understood by the task evaluation engine Execute.", "trait" : "sbt\/Node.html", "kind" : "trait"}, {"name" : "sbt.OptionSyntax", "members_trait" : [{"label" : "none", "tail" : "(): Option[A]", "member" : "sbt.OptionSyntax.none", "link" : "sbt\/OptionSyntax.html#none[A]:Option[A]", "kind" : "final def"}, {"label" : "sbtOptionSyntaxOptionIdOps", "tail" : "(a: A): OptionIdOps[A]", "member" : "sbt.OptionSyntax.sbtOptionSyntaxOptionIdOps", "link" : "sbt\/OptionSyntax.html#sbtOptionSyntaxOptionIdOps[A](a:A):sbt.OptionSyntax.OptionIdOps[A]", "kind" : "implicit def"}, {"label" : "sbtOptionSyntaxRichOption", "tail" : "(option: Option[A]): RichOption[A]", "member" : "sbt.OptionSyntax.sbtOptionSyntaxRichOption", "link" : "sbt\/OptionSyntax.html#sbtOptionSyntaxRichOption[A](option:Option[A]):sbt.OptionSyntax.RichOption[A]", "kind" : "implicit def"}, {"label" : "sbtOptionSyntaxRichOptional", "tail" : "(optional: Optional[A]): RichOptional[A]", "member" : "sbt.OptionSyntax.sbtOptionSyntaxRichOptional", "link" : "sbt\/OptionSyntax.html#sbtOptionSyntaxRichOptional[A](optional:java.util.Optional[A]):sbt.OptionSyntax.RichOptional[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/OptionSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/OptionSyntax.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/OptionSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/OptionSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/OptionSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/OptionSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/OptionSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/OptionSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/OptionSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/OptionSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/OptionSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/OptionSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/OptionSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/OptionSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/OptionSyntax.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/OptionSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/OptionSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/OptionSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/OptionSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/OptionSyntax$.html", "members_object" : [{"label" : "RichOption", "tail" : "", "member" : "sbt.OptionSyntax.RichOption", "link" : "sbt\/OptionSyntax$.html#RichOption[A]extendsAnyVal", "kind" : "final class"}, {"label" : "RichOptional", "tail" : "", "member" : "sbt.OptionSyntax.RichOptional", "link" : "sbt\/OptionSyntax$.html#RichOptional[A]extendsAnyVal", "kind" : "final class"}, {"label" : "OptionIdOps", "tail" : "", "member" : "sbt.OptionSyntax.OptionIdOps", "link" : "sbt\/OptionSyntax$.html#OptionIdOps[A]extendsAnyVal", "kind" : "final class"}, {"label" : "none", "tail" : "(): Option[A]", "member" : "sbt.OptionSyntax.none", "link" : "sbt\/OptionSyntax$.html#none[A]:Option[A]", "kind" : "final def"}, {"label" : "sbtOptionSyntaxOptionIdOps", "tail" : "(a: A): OptionIdOps[A]", "member" : "sbt.OptionSyntax.sbtOptionSyntaxOptionIdOps", "link" : "sbt\/OptionSyntax$.html#sbtOptionSyntaxOptionIdOps[A](a:A):sbt.OptionSyntax.OptionIdOps[A]", "kind" : "implicit def"}, {"label" : "sbtOptionSyntaxRichOption", "tail" : "(option: Option[A]): RichOption[A]", "member" : "sbt.OptionSyntax.sbtOptionSyntaxRichOption", "link" : "sbt\/OptionSyntax$.html#sbtOptionSyntaxRichOption[A](option:Option[A]):sbt.OptionSyntax.RichOption[A]", "kind" : "implicit def"}, {"label" : "sbtOptionSyntaxRichOptional", "tail" : "(optional: Optional[A]): RichOptional[A]", "member" : "sbt.OptionSyntax.sbtOptionSyntaxRichOptional", "link" : "sbt\/OptionSyntax$.html#sbtOptionSyntaxRichOptional[A](optional:java.util.Optional[A]):sbt.OptionSyntax.RichOptional[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/OptionSyntax$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/OptionSyntax$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/OptionSyntax$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/OptionSyntax$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/OptionSyntax$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/OptionSyntax$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/OptionSyntax$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/OptionSyntax$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/OptionSyntax$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/OptionSyntax$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/OptionSyntax$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/OptionSyntax$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/OptionSyntax$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/OptionSyntax$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/OptionSyntax$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/OptionSyntax$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/OptionSyntax$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/OptionSyntax$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/OptionSyntax$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/OptionSyntax.html", "kind" : "trait"}, {"name" : "sbt.Opts", "shortDescription" : "Options for well-known tasks.", "object" : "sbt\/Opts$.html", "members_object" : [{"label" : "resolver", "tail" : "", "member" : "sbt.Opts.resolver", "link" : "sbt\/Opts$.html#resolver", "kind" : "object"}, {"label" : "doc", "tail" : "", "member" : "sbt.Opts.doc", "link" : "sbt\/Opts$.html#doc", "kind" : "object"}, {"label" : "compile", "tail" : "", "member" : "sbt.Opts.compile", "link" : "sbt\/Opts$.html#compile", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Opts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Opts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Opts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Opts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Opts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Opts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Opts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Opts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Opts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Opts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Opts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Opts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Opts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Opts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Opts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Opts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Opts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Opts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Opts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.OutputStrategy", "shortDescription" : "Configures where the standard output and error streams from a forked process go.", "object" : "sbt\/OutputStrategy$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/OutputStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/OutputStrategy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/OutputStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/OutputStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/OutputStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/OutputStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/OutputStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/OutputStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/OutputStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/OutputStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/OutputStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/OutputStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/OutputStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/OutputStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/OutputStrategy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/OutputStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/OutputStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/OutputStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/OutputStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "CustomOutput", "tail" : "", "member" : "sbt.OutputStrategy.CustomOutput", "link" : "sbt\/OutputStrategy$.html#CustomOutput", "kind" : "object"}, {"label" : "CustomOutput", "tail" : "", "member" : "sbt.OutputStrategy.CustomOutput", "link" : "sbt\/OutputStrategy$.html#CustomOutputextendsOutputStrategywithSerializable", "kind" : "final class"}, {"label" : "LoggedOutput", "tail" : "", "member" : "sbt.OutputStrategy.LoggedOutput", "link" : "sbt\/OutputStrategy$.html#LoggedOutput", "kind" : "object"}, {"label" : "LoggedOutput", "tail" : "", "member" : "sbt.OutputStrategy.LoggedOutput", "link" : "sbt\/OutputStrategy$.html#LoggedOutputextendsOutputStrategywithSerializable", "kind" : "final class"}, {"label" : "BufferedOutput", "tail" : "", "member" : "sbt.OutputStrategy.BufferedOutput", "link" : "sbt\/OutputStrategy$.html#BufferedOutput", "kind" : "object"}, {"label" : "BufferedOutput", "tail" : "", "member" : "sbt.OutputStrategy.BufferedOutput", "link" : "sbt\/OutputStrategy$.html#BufferedOutputextendsOutputStrategywithSerializable", "kind" : "final class"}, {"label" : "StdoutOutput", "tail" : "", "member" : "sbt.OutputStrategy.StdoutOutput", "link" : "sbt\/OutputStrategy$.html#StdoutOutput", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/OutputStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/OutputStrategy$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/OutputStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/OutputStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/OutputStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/OutputStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/OutputStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/OutputStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/OutputStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/OutputStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/OutputStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/OutputStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/OutputStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/OutputStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/OutputStrategy$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/OutputStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/OutputStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/OutputStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/OutputStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/OutputStrategy.html", "kind" : "class"}, {"name" : "sbt.Package", "shortDescription" : "", "object" : "sbt\/Package$.html", "members_object" : [{"label" : "manifestFormat", "tail" : "(): JsonFormat[Manifest]", "member" : "sbt.Package.manifestFormat", "link" : "sbt\/Package$.html#manifestFormat:sjsonnew.JsonFormat[java.util.jar.Manifest]", "kind" : "implicit def"}, {"label" : "sourcesDebugString", "tail" : "(sources: Seq[(File, String)]): String", "member" : "sbt.Package.sourcesDebugString", "link" : "sbt\/Package$.html#sourcesDebugString(sources:Seq[(java.io.File,String)]):String", "kind" : "def"}, {"label" : "makeJar", "tail" : "(sources: Seq[(File, String)], jar: File, manifest: Manifest, log: Logger): Unit", "member" : "sbt.Package.makeJar", "link" : "sbt\/Package$.html#makeJar(sources:Seq[(java.io.File,String)],jar:java.io.File,manifest:java.util.jar.Manifest,log:sbt.util.Logger):Unit", "kind" : "def"}, {"label" : "addImplManifestAttributes", "tail" : "(name: String, version: String, homepage: Option[URL], org: String, orgName: String): PackageOption", "member" : "sbt.Package.addImplManifestAttributes", "link" : "sbt\/Package$.html#addImplManifestAttributes(name:String,version:String,homepage:Option[java.net.URL],org:String,orgName:String):sbt.PackageOption", "kind" : "def"}, {"label" : "addSpecManifestAttributes", "tail" : "(name: String, version: String, orgName: String): PackageOption", "member" : "sbt.Package.addSpecManifestAttributes", "link" : "sbt\/Package$.html#addSpecManifestAttributes(name:String,version:String,orgName:String):sbt.PackageOption", "kind" : "def"}, {"label" : "setVersion", "tail" : "(main: Attributes): Unit", "member" : "sbt.Package.setVersion", "link" : "sbt\/Package$.html#setVersion(main:java.util.jar.Attributes):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(conf: Configuration, cacheStoreFactory: CacheStoreFactory, log: Logger): Unit", "member" : "sbt.Package.apply", "link" : "sbt\/Package$.html#apply(conf:sbt.Package.Configuration,cacheStoreFactory:sbt.util.CacheStoreFactory,log:sbt.util.Logger):Unit", "kind" : "def"}, {"label" : "Configuration", "tail" : "", "member" : "sbt.Package.Configuration", "link" : "sbt\/Package$.html#ConfigurationextendsAnyRef", "kind" : "final class"}, {"label" : "mergeManifests", "tail" : "(manifest: Manifest, mergeManifest: Manifest): Unit", "member" : "sbt.Package.mergeManifests", "link" : "sbt\/Package$.html#mergeManifests(manifest:java.util.jar.Manifest,mergeManifest:java.util.jar.Manifest):Unit", "kind" : "def"}, {"label" : "mergeAttributes", "tail" : "(a1: Attributes, a2: Attributes): Map[AnyRef, AnyRef]", "member" : "sbt.Package.mergeAttributes", "link" : "sbt\/Package$.html#mergeAttributes(a1:java.util.jar.Attributes,a2:java.util.jar.Attributes):scala.collection.mutable.Map[Object,Object]", "kind" : "def"}, {"label" : "ManifestAttributes", "tail" : "(attributes: (String, String)*): ManifestAttributes", "member" : "sbt.Package.ManifestAttributes", "link" : "sbt\/Package$.html#ManifestAttributes(attributes:(String,String)*):sbt.Package.ManifestAttributes", "kind" : "def"}, {"label" : "ManifestAttributes", "tail" : "", "member" : "sbt.Package.ManifestAttributes", "link" : "sbt\/Package$.html#ManifestAttributesextendsPackageOptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "MainClass", "tail" : "", "member" : "sbt.Package.MainClass", "link" : "sbt\/Package$.html#MainClassextendsPackageOptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "JarManifest", "tail" : "", "member" : "sbt.Package.JarManifest", "link" : "sbt\/Package$.html#JarManifestextendsPackageOptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Package$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Package$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Package$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Package$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Package$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Package$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Package$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Package$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Package$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Package$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Package$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Package$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Package$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Package$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Package$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Package$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Package$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Package$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Package$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.PackageOption", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/PackageOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/PackageOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/PackageOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/PackageOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/PackageOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/PackageOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/PackageOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PackageOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PackageOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PackageOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/PackageOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/PackageOption.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/PackageOption.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/PackageOption.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/PackageOption.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/PackageOption.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/PackageOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/PackageOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/PackageOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/PackageOption.html", "kind" : "trait"}, {"name" : "sbt.PluginData", "shortDescription" : "", "object" : "sbt\/PluginData$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/PluginData$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/PluginData$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/PluginData$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/PluginData$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/PluginData$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/PluginData$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/PluginData$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginData$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginData$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginData$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/PluginData$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/PluginData$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/PluginData$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/PluginData$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/PluginData$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/PluginData$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/PluginData$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/PluginData$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/PluginData$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "classpath", "tail" : ": Seq[Attributed[File]]", "member" : "sbt.PluginData.classpath", "link" : "sbt\/PluginData.html#classpath:Seq[sbt.internal.util.Attributed[java.io.File]]", "kind" : "val"}, {"member" : "sbt.PluginData#<init>", "error" : "unsupported entity"}, {"label" : "scalacOptions", "tail" : ": Seq[String]", "member" : "sbt.PluginData.scalacOptions", "link" : "sbt\/PluginData.html#scalacOptions:Seq[String]", "kind" : "val"}, {"label" : "report", "tail" : ": Option[UpdateReport]", "member" : "sbt.PluginData.report", "link" : "sbt\/PluginData.html#report:Option[sbt.librarymanagement.UpdateReport]", "kind" : "val"}, {"label" : "resolvers", "tail" : ": Option[Vector[Resolver]]", "member" : "sbt.PluginData.resolvers", "link" : "sbt\/PluginData.html#resolvers:Option[Vector[sbt.librarymanagement.Resolver]]", "kind" : "val"}, {"label" : "definitionClasspath", "tail" : ": Seq[Attributed[File]]", "member" : "sbt.PluginData.definitionClasspath", "link" : "sbt\/PluginData.html#definitionClasspath:Seq[sbt.internal.util.Attributed[java.io.File]]", "kind" : "val"}, {"label" : "dependencyClasspath", "tail" : ": Seq[Attributed[File]]", "member" : "sbt.PluginData.dependencyClasspath", "link" : "sbt\/PluginData.html#dependencyClasspath:Seq[sbt.internal.util.Attributed[java.io.File]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/PluginData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/PluginData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/PluginData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/PluginData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/PluginData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/PluginData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/PluginData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/PluginData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/PluginData.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/PluginData.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/PluginData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/PluginData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/PluginData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/PluginData.html", "kind" : "case class"}, {"name" : "sbt.Plugins", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Plugins.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Plugins.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Plugins.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Plugins.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Plugins.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Plugins.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Plugins.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Plugins.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Plugins.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Plugins.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Plugins.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Plugins.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Plugins.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Plugins.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Plugins.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Plugins.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Plugins.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Plugins.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Plugins.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "&&", "tail" : "(o: Basic): Plugins", "member" : "sbt.Plugins.&&", "link" : "sbt\/Plugins.html#&&(o:sbt.Plugins.Basic):sbt.Plugins", "kind" : "abstract def"}], "shortDescription" : "An expression that matches AutoPlugins.", "object" : "sbt\/Plugins$.html", "members_object" : [{"label" : "satisfied", "tail" : "(n: Plugins, model: Set[AutoPlugin]): Boolean", "member" : "sbt.Plugins.satisfied", "link" : "sbt\/Plugins$.html#satisfied(n:sbt.Plugins,model:Set[sbt.AutoPlugin]):Boolean", "kind" : "def"}, {"label" : "Basic", "tail" : "", "member" : "sbt.Plugins.Basic", "link" : "sbt\/Plugins$.html#BasicextendsPlugins", "kind" : "sealed abstract class"}, {"label" : "deducer", "tail" : "(defined0: List[AutoPlugin]): (Plugins, Logger) ⇒ Seq[AutoPlugin]", "member" : "sbt.Plugins.deducer", "link" : "sbt\/Plugins$.html#deducer(defined0:List[sbt.AutoPlugin]):(sbt.Plugins,sbt.util.Logger)=>Seq[sbt.AutoPlugin]", "kind" : "def"}, {"label" : "noTrigger", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.noTrigger", "link" : "sbt\/Plugins$.html#noTrigger:sbt.PluginTrigger", "kind" : "def"}, {"label" : "allRequirements", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.allRequirements", "link" : "sbt\/Plugins$.html#allRequirements:sbt.PluginTrigger", "kind" : "def"}, {"label" : "empty", "tail" : "(): Plugins", "member" : "sbt.PluginsFunctions.empty", "link" : "sbt\/Plugins$.html#empty:sbt.Plugins", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Plugins$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Plugins$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Plugins$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Plugins$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Plugins$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Plugins$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Plugins$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Plugins$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Plugins$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Plugins$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Plugins$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Plugins$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Plugins$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Plugins$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Plugins$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Plugins$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Plugins$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Plugins$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Plugins$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/Plugins.html", "kind" : "trait"}, {"name" : "sbt.PluginsFunctions", "members_trait" : [{"label" : "noTrigger", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.noTrigger", "link" : "sbt\/PluginsFunctions.html#noTrigger:sbt.PluginTrigger", "kind" : "def"}, {"label" : "allRequirements", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.allRequirements", "link" : "sbt\/PluginsFunctions.html#allRequirements:sbt.PluginTrigger", "kind" : "def"}, {"label" : "empty", "tail" : "(): Plugins", "member" : "sbt.PluginsFunctions.empty", "link" : "sbt\/PluginsFunctions.html#empty:sbt.Plugins", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/PluginsFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/PluginsFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/PluginsFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/PluginsFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/PluginsFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/PluginsFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/PluginsFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginsFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginsFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginsFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/PluginsFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/PluginsFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/PluginsFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/PluginsFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/PluginsFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/PluginsFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/PluginsFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/PluginsFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/PluginsFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/PluginsFunctions.html", "kind" : "trait"}, {"name" : "sbt.PluginTrigger", "shortDescription" : "Type for AutoPlugin's trigger method.", "object" : "sbt\/PluginTrigger$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/PluginTrigger.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/PluginTrigger.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/PluginTrigger.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/PluginTrigger.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/PluginTrigger.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/PluginTrigger.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/PluginTrigger.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginTrigger.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginTrigger.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginTrigger.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/PluginTrigger.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/PluginTrigger.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/PluginTrigger.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/PluginTrigger.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/PluginTrigger.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/PluginTrigger.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/PluginTrigger.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/PluginTrigger.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/PluginTrigger.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "NoTrigger", "tail" : "", "member" : "sbt.PluginTrigger.NoTrigger", "link" : "sbt\/PluginTrigger$.html#NoTrigger", "kind" : "object"}, {"label" : "AllRequirements", "tail" : "", "member" : "sbt.PluginTrigger.AllRequirements", "link" : "sbt\/PluginTrigger$.html#AllRequirements", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/PluginTrigger$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/PluginTrigger$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/PluginTrigger$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/PluginTrigger$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/PluginTrigger$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/PluginTrigger$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/PluginTrigger$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginTrigger$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginTrigger$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/PluginTrigger$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/PluginTrigger$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/PluginTrigger$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/PluginTrigger$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/PluginTrigger$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/PluginTrigger$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/PluginTrigger$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/PluginTrigger$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/PluginTrigger$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/PluginTrigger$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/PluginTrigger.html", "kind" : "class"}, {"name" : "sbt.Previous", "shortDescription" : "", "object" : "sbt\/Previous$.html", "members_object" : [{"label" : "runtime", "tail" : "(skey: TaskKey[T])(format: JsonFormat[T]): Def.Initialize[Task[Option[T]]]", "member" : "sbt.Previous.runtime", "link" : "sbt\/Previous$.html#runtime[T](skey:sbt.TaskKey[T])(implicitformat:sjsonnew.JsonFormat[T]):sbt.Def.Initialize[sbt.Task[Option[T]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Previous$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Previous$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Previous$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Previous$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Previous$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Previous$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Previous$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Previous$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Previous$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Previous$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Previous$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Previous$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Previous$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Previous$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Previous$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Previous$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Previous$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Previous$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Previous$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.Project", "members_trait" : [{"label" : "disablePlugins", "tail" : "(ps: AutoPlugin*): Project", "member" : "sbt.Project.disablePlugins", "link" : "sbt\/Project.html#disablePlugins(ps:sbt.AutoPlugin*):sbt.Project", "kind" : "def"}, {"label" : "enablePlugins", "tail" : "(ns: Plugins*): Project", "member" : "sbt.Project.enablePlugins", "link" : "sbt\/Project.html#enablePlugins(ns:sbt.Plugins*):sbt.Project", "kind" : "def"}, {"label" : "settings", "tail" : "(ss: Def.SettingsDefinition*): Project", "member" : "sbt.Project.settings", "link" : "sbt\/Project.html#settings(ss:sbt.Def.SettingsDefinition*):sbt.Project", "kind" : "def"}, {"label" : "aggregate", "tail" : "(refs: ProjectReference*): Project", "member" : "sbt.Project.aggregate", "link" : "sbt\/Project.html#aggregate(refs:sbt.ProjectReference*):sbt.Project", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(deps: ClasspathDep[ProjectReference]*): Project", "member" : "sbt.Project.dependsOn", "link" : "sbt\/Project.html#dependsOn(deps:sbt.ClasspathDep[sbt.ProjectReference]*):sbt.Project", "kind" : "def"}, {"label" : "configs", "tail" : "(cs: Configuration*): Project", "member" : "sbt.Project.configs", "link" : "sbt\/Project.html#configs(cs:sbt.librarymanagement.Configuration*):sbt.Project", "kind" : "def"}, {"label" : "overrideConfigs", "tail" : "(cs: Configuration*): Project", "member" : "sbt.Project.overrideConfigs", "link" : "sbt\/Project.html#overrideConfigs(cs:sbt.librarymanagement.Configuration*):sbt.Project", "kind" : "def"}, {"label" : "in", "tail" : "(dir: File): Project", "member" : "sbt.Project.in", "link" : "sbt\/Project.html#in(dir:java.io.File):sbt.Project", "kind" : "def"}, {"label" : "configure", "tail" : "(transforms: (Project) ⇒ Project*): Project", "member" : "sbt.Project.configure", "link" : "sbt\/Project.html#configure(transforms:sbt.Project=>sbt.Project*):sbt.Project", "kind" : "def"}, {"label" : "resolveBuild", "tail" : "(resolveRef: (ProjectReference) ⇒ ProjectReference): Project", "member" : "sbt.Project.resolveBuild", "link" : "sbt\/Project.html#resolveBuild(resolveRef:sbt.ProjectReference=>sbt.ProjectReference):sbt.Project", "kind" : "def"}, {"label" : "resolve", "tail" : "(resolveRef: (ProjectReference) ⇒ ProjectRef): ResolvedProject", "member" : "sbt.Project.resolve", "link" : "sbt\/Project.html#resolve(resolveRef:sbt.ProjectReference=>sbt.ProjectRef):sbt.ResolvedProject", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.ProjectDefinition.toString", "link" : "sbt\/Project.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.ProjectDefinition.equals", "link" : "sbt\/Project.html#equals(o:Any):Boolean", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.ProjectDefinition.hashCode", "link" : "sbt\/Project.html#hashCode():Int", "kind" : "final def"}, {"label" : "referenced", "tail" : "(): Seq[ProjectReference]", "member" : "sbt.ProjectDefinition.referenced", "link" : "sbt\/Project.html#referenced:Seq[PR]", "kind" : "def"}, {"label" : "uses", "tail" : "(): Seq[ProjectReference]", "member" : "sbt.ProjectDefinition.uses", "link" : "sbt\/Project.html#uses:Seq[PR]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Project.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Project.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Project.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Project.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Project.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Project.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Project.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Project.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Project.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Project.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Project.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Project.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Project.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Project.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Project.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Project.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "projectOrigin", "tail" : "(): ProjectOrigin", "member" : "sbt.ProjectDefinition.projectOrigin", "link" : "sbt\/Project.html#projectOrigin:sbt.ProjectOrigin", "kind" : "abstract def"}, {"label" : "plugins", "tail" : "(): Plugins", "member" : "sbt.ProjectDefinition.plugins", "link" : "sbt\/Project.html#plugins:sbt.Plugins", "kind" : "abstract def"}, {"label" : "dependencies", "tail" : "(): Seq[ClasspathDep[ProjectReference]]", "member" : "sbt.ProjectDefinition.dependencies", "link" : "sbt\/Project.html#dependencies:Seq[sbt.ClasspathDep[PR]]", "kind" : "abstract def"}, {"label" : "aggregate", "tail" : "(): Seq[ProjectReference]", "member" : "sbt.ProjectDefinition.aggregate", "link" : "sbt\/Project.html#aggregate:Seq[PR]", "kind" : "abstract def"}, {"label" : "settings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.ProjectDefinition.settings", "link" : "sbt\/Project.html#settings:Seq[sbt.Def.Setting[_]]", "kind" : "abstract def"}, {"label" : "configurations", "tail" : "(): Seq[Configuration]", "member" : "sbt.ProjectDefinition.configurations", "link" : "sbt\/Project.html#configurations:Seq[sbt.librarymanagement.Configuration]", "kind" : "abstract def"}, {"label" : "base", "tail" : "(): File", "member" : "sbt.ProjectDefinition.base", "link" : "sbt\/Project.html#base:java.io.File", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): String", "member" : "sbt.ProjectDefinition.id", "link" : "sbt\/Project.html#id:String", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/Project$.html", "members_object" : [{"label" : "projectMacroImpl", "tail" : "(c: Context): scala.reflect.macros.blackbox.Context.Expr[Project]", "member" : "sbt.Project.projectMacroImpl", "link" : "sbt\/Project$.html#projectMacroImpl(c:scala.reflect.macros.blackbox.Context):c.Expr[sbt.Project]", "kind" : "def"}, {"label" : "RichTaskSessionVar", "tail" : "", "member" : "sbt.Project.RichTaskSessionVar", "link" : "sbt\/Project$.html#RichTaskSessionVar[S]extendsAnyRef", "kind" : "final class"}, {"label" : "projectToRef", "tail" : "(p: Project): ProjectReference", "member" : "sbt.Project.projectToRef", "link" : "sbt\/Project$.html#projectToRef(p:sbt.Project):sbt.ProjectReference", "kind" : "implicit def"}, {"label" : "runTask", "tail" : "(taskKey: Def.ScopedKey[Task[T]], state: State, config: EvaluateTaskConfig): Option[(State, Result[T])]", "member" : "sbt.Project.runTask", "link" : "sbt\/Project$.html#runTask[T](taskKey:sbt.Def.ScopedKey[sbt.Task[T]],state:sbt.State,config:sbt.EvaluateTaskConfig):Option[(sbt.State,sbt.Result[T])]", "kind" : "def"}, {"label" : "runTask", "tail" : "(taskKey: Def.ScopedKey[Task[T]], state: State, checkCycles: Boolean): Option[(State, Result[T])]", "member" : "sbt.Project.runTask", "link" : "sbt\/Project$.html#runTask[T](taskKey:sbt.Def.ScopedKey[sbt.Task[T]],state:sbt.State,checkCycles:Boolean):Option[(sbt.State,sbt.Result[T])]", "kind" : "def"}, {"label" : "loadAction", "tail" : "(s: State, action: Project.LoadAction.Value): (State, File)", "member" : "sbt.Project.loadAction", "link" : "sbt\/Project$.html#loadAction(s:sbt.State,action:sbt.Project.LoadAction.Value):(sbt.State,java.io.File)", "kind" : "def"}, {"label" : "setProjectReturn", "tail" : "(s: State, pr: List[File]): State", "member" : "sbt.Project.setProjectReturn", "link" : "sbt\/Project$.html#setProjectReturn(s:sbt.State,pr:List[java.io.File]):sbt.State", "kind" : "def"}, {"label" : "inPluginProject", "tail" : "(s: State): Boolean", "member" : "sbt.Project.inPluginProject", "link" : "sbt\/Project$.html#inPluginProject(s:sbt.State):Boolean", "kind" : "def"}, {"label" : "projectReturn", "tail" : "(s: State): List[File]", "member" : "sbt.Project.projectReturn", "link" : "sbt\/Project$.html#projectReturn(s:sbt.State):List[java.io.File]", "kind" : "def"}, {"label" : "ProjectReturn", "tail" : ": AttributeKey[List[File]]", "member" : "sbt.Project.ProjectReturn", "link" : "sbt\/Project$.html#ProjectReturn:sbt.internal.util.AttributeKey[List[java.io.File]]", "kind" : "val"}, {"label" : "loadActionParser", "tail" : ": Parser[Project.LoadAction.Value]", "member" : "sbt.Project.loadActionParser", "link" : "sbt\/Project$.html#loadActionParser:sbt.internal.util.complete.Parser[sbt.Project.LoadAction.Value]", "kind" : "val"}, {"label" : "LoadAction", "tail" : "", "member" : "sbt.Project.LoadAction", "link" : "sbt\/Project$.html#LoadAction", "kind" : "object"}, {"label" : "updateExtraBuilds", "tail" : "(s: State, f: (List[URI]) ⇒ List[URI]): State", "member" : "sbt.Project.updateExtraBuilds", "link" : "sbt\/Project$.html#updateExtraBuilds(s:sbt.State,f:List[java.net.URI]=>List[java.net.URI]):sbt.State", "kind" : "def"}, {"label" : "removeExtraBuilds", "tail" : "(s: State, remove: List[URI]): State", "member" : "sbt.Project.removeExtraBuilds", "link" : "sbt\/Project$.html#removeExtraBuilds(s:sbt.State,remove:List[java.net.URI]):sbt.State", "kind" : "def"}, {"label" : "addExtraBuilds", "tail" : "(s: State, extra: List[URI]): State", "member" : "sbt.Project.addExtraBuilds", "link" : "sbt\/Project$.html#addExtraBuilds(s:sbt.State,extra:List[java.net.URI]):sbt.State", "kind" : "def"}, {"label" : "setExtraBuilds", "tail" : "(s: State, extra: List[URI]): State", "member" : "sbt.Project.setExtraBuilds", "link" : "sbt\/Project$.html#setExtraBuilds(s:sbt.State,extra:List[java.net.URI]):sbt.State", "kind" : "def"}, {"label" : "getOrNil", "tail" : "(s: State, key: AttributeKey[List[T]]): List[T]", "member" : "sbt.Project.getOrNil", "link" : "sbt\/Project$.html#getOrNil[T](s:sbt.State,key:sbt.internal.util.AttributeKey[List[T]]):List[T]", "kind" : "def"}, {"label" : "extraBuilds", "tail" : "(s: State): List[URI]", "member" : "sbt.Project.extraBuilds", "link" : "sbt\/Project$.html#extraBuilds(s:sbt.State):List[java.net.URI]", "kind" : "def"}, {"label" : "ExtraBuilds", "tail" : ": AttributeKey[List[URI]]", "member" : "sbt.Project.ExtraBuilds", "link" : "sbt\/Project$.html#ExtraBuilds:sbt.internal.util.AttributeKey[List[java.net.URI]]", "kind" : "val"}, {"label" : "setAll", "tail" : "(extracted: Extracted, settings: Seq[Def.Setting[_]]): SessionSettings", "member" : "sbt.Project.setAll", "link" : "sbt\/Project$.html#setAll(extracted:sbt.Extracted,settings:Seq[sbt.Def.Setting[_]]):sbt.internal.SessionSettings", "kind" : "def"}, {"label" : "reverseDependencies", "tail" : "(cMap: Map[Def.ScopedKey[_], Def.Flattened], scoped: Def.ScopedKey[_]): Iterable[Def.ScopedKey[_]]", "member" : "sbt.Project.reverseDependencies", "link" : "sbt\/Project$.html#reverseDependencies(cMap:Map[sbt.Def.ScopedKey[_],sbt.Def.Flattened],scoped:sbt.Def.ScopedKey[_]):Iterable[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "usedBy", "tail" : "(structure: BuildStructure, actual: Boolean, key: AttributeKey[_])(display: Show[Def.ScopedKey[_]]): Seq[Def.ScopedKey[_]]", "member" : "sbt.Project.usedBy", "link" : "sbt\/Project$.html#usedBy(structure:sbt.internal.BuildStructure,actual:Boolean,key:sbt.internal.util.AttributeKey[_])(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):Seq[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "definitions", "tail" : "(structure: BuildStructure, actual: Boolean, key: AttributeKey[_])(display: Show[Def.ScopedKey[_]]): Seq[Scope]", "member" : "sbt.Project.definitions", "link" : "sbt\/Project$.html#definitions(structure:sbt.internal.BuildStructure,actual:Boolean,key:sbt.internal.util.AttributeKey[_])(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):Seq[sbt.Scope]", "kind" : "def"}, {"label" : "showUses", "tail" : "(defs: Seq[Def.ScopedKey[_]])(display: Show[Def.ScopedKey[_]]): String", "member" : "sbt.Project.showUses", "link" : "sbt\/Project$.html#showUses(defs:Seq[sbt.Def.ScopedKey[_]])(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):String", "kind" : "def"}, {"label" : "showDefinitions", "tail" : "(key: AttributeKey[_], defs: Seq[Scope])(display: Show[Def.ScopedKey[_]]): String", "member" : "sbt.Project.showDefinitions", "link" : "sbt\/Project$.html#showDefinitions(key:sbt.internal.util.AttributeKey[_],defs:Seq[sbt.Scope])(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):String", "kind" : "def"}, {"label" : "relation", "tail" : "(structure: BuildStructure, actual: Boolean)(display: Show[Def.ScopedKey[_]]): Relation[Def.ScopedKey[_], Def.ScopedKey[_]]", "member" : "sbt.Project.relation", "link" : "sbt\/Project$.html#relation(structure:sbt.internal.BuildStructure,actual:Boolean)(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):sbt.internal.util.Relation[sbt.Def.ScopedKey[_],sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "graphSettings", "tail" : "(structure: BuildStructure, actual: Boolean, graphName: String, file: File)(display: Show[Def.ScopedKey[_]]): Unit", "member" : "sbt.Project.graphSettings", "link" : "sbt\/Project$.html#graphSettings(structure:sbt.internal.BuildStructure,actual:Boolean,graphName:String,file:java.io.File)(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):Unit", "kind" : "def"}, {"label" : "graphSettings", "tail" : "(structure: BuildStructure, basedir: File)(display: Show[Def.ScopedKey[_]]): Unit", "member" : "sbt.Project.graphSettings", "link" : "sbt\/Project$.html#graphSettings(structure:sbt.internal.BuildStructure,basedir:java.io.File)(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):Unit", "kind" : "def"}, {"label" : "settingGraph", "tail" : "(structure: BuildStructure, basedir: File, scoped: Def.ScopedKey[_])(display: Show[Def.ScopedKey[_]]): SettingGraph", "member" : "sbt.Project.settingGraph", "link" : "sbt\/Project$.html#settingGraph(structure:sbt.internal.BuildStructure,basedir:java.io.File,scoped:sbt.Def.ScopedKey[_])(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):sbt.internal.SettingGraph", "kind" : "def"}, {"label" : "details", "tail" : "(structure: BuildStructure, actual: Boolean, scope: Scope, key: AttributeKey[_])(display: Show[Def.ScopedKey[_]]): String", "member" : "sbt.Project.details", "link" : "sbt\/Project$.html#details(structure:sbt.internal.BuildStructure,actual:Boolean,scope:sbt.Scope,key:sbt.internal.util.AttributeKey[_])(implicitdisplay:sbt.util.Show[sbt.Def.ScopedKey[_]]):String", "kind" : "def"}, {"label" : "scopedKeyData", "tail" : "(structure: BuildStructure, scope: Scope, key: AttributeKey[_]): Option[ScopedKeyData[_]]", "member" : "sbt.Project.scopedKeyData", "link" : "sbt\/Project$.html#scopedKeyData(structure:sbt.internal.BuildStructure,scope:sbt.Scope,key:sbt.internal.util.AttributeKey[_]):Option[sbt.ScopedKeyData[_]]", "kind" : "def"}, {"label" : "delegates", "tail" : "(structure: BuildStructure, scope: Scope, key: AttributeKey[_]): Seq[Def.ScopedKey[_]]", "member" : "sbt.Project.delegates", "link" : "sbt\/Project$.html#delegates(structure:sbt.internal.BuildStructure,scope:sbt.Scope,key:sbt.internal.util.AttributeKey[_]):Seq[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "transformRef", "tail" : "(g: (Scope) ⇒ Scope, ss: Seq[Def.Setting[_]]): Seq[Def.Setting[_]]", "member" : "sbt.Project.transformRef", "link" : "sbt\/Project$.html#transformRef(g:sbt.Scope=>sbt.Scope,ss:Seq[sbt.Def.Setting[_]]):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "transform", "tail" : "(g: (Scope) ⇒ Scope, ss: Seq[Def.Setting[_]]): Seq[Def.Setting[_]]", "member" : "sbt.Project.transform", "link" : "sbt\/Project$.html#transform(g:sbt.Scope=>sbt.Scope,ss:Seq[sbt.Def.Setting[_]]):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "mapScope", "tail" : "(f: (Scope) ⇒ Scope): ~>[Def.ScopedKey, Def.ScopedKey]", "member" : "sbt.Project.mapScope", "link" : "sbt\/Project$.html#mapScope(f:sbt.Scope=>sbt.Scope):sbt.Def.ScopedKey~>sbt.Def.ScopedKey", "kind" : "def"}, {"label" : "fillTaskAxis", "tail" : "(scoped: Def.ScopedKey[_]): Def.ScopedKey[_]", "member" : "sbt.Project.fillTaskAxis", "link" : "sbt\/Project$.html#fillTaskAxis(scoped:sbt.Def.ScopedKey[_]):sbt.Def.ScopedKey[_]", "kind" : "def"}, {"label" : "equal", "tail" : "(a: Def.ScopedKey[_], b: Def.ScopedKey[_], mask: ScopeMask): Boolean", "member" : "sbt.Project.equal", "link" : "sbt\/Project$.html#equal(a:sbt.Def.ScopedKey[_],b:sbt.Def.ScopedKey[_],mask:sbt.ScopeMask):Boolean", "kind" : "def"}, {"label" : "setCond", "tail" : "(key: AttributeKey[T], vopt: Option[T], attributes: AttributeMap): AttributeMap", "member" : "sbt.Project.setCond", "link" : "sbt\/Project$.html#setCond[T](key:sbt.internal.util.AttributeKey[T],vopt:Option[T],attributes:sbt.internal.util.AttributeMap):sbt.internal.util.AttributeMap", "kind" : "def"}, {"label" : "updateCurrent", "tail" : "(s: State): State", "member" : "sbt.Project.updateCurrent", "link" : "sbt\/Project$.html#updateCurrent(s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "current", "tail" : "(state: State): ProjectRef", "member" : "sbt.Project.current", "link" : "sbt\/Project$.html#current(state:sbt.State):sbt.ProjectRef", "kind" : "def"}, {"label" : "getHooks", "tail" : "(data: Settings[Scope]): ((State) ⇒ State, (State) ⇒ State)", "member" : "sbt.Project.getHooks", "link" : "sbt\/Project$.html#getHooks(data:sbt.internal.util.Settings[sbt.Scope]):(sbt.State=>sbt.State,sbt.State=>sbt.State)", "kind" : "def"}, {"label" : "getHook", "tail" : "(key: SettingKey[(T) ⇒ T], data: Settings[Scope]): (T) ⇒ T", "member" : "sbt.Project.getHook", "link" : "sbt\/Project$.html#getHook[T](key:sbt.SettingKey[T=>T],data:sbt.internal.util.Settings[sbt.Scope]):T=>T", "kind" : "def"}, {"label" : "orIdentity", "tail" : "(opt: Option[(T) ⇒ T]): (T) ⇒ T", "member" : "sbt.Project.orIdentity", "link" : "sbt\/Project$.html#orIdentity[T](opt:Option[T=>T]):T=>T", "kind" : "def"}, {"label" : "setProject", "tail" : "(session: SessionSettings, structure: BuildStructure, s: State): State", "member" : "sbt.Project.setProject", "link" : "sbt\/Project$.html#setProject(session:sbt.internal.SessionSettings,structure:sbt.internal.BuildStructure,s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "runUnloadHooks", "tail" : "(s: State): State", "member" : "sbt.Project.runUnloadHooks", "link" : "sbt\/Project$.html#runUnloadHooks(s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "getProject", "tail" : "(ref: ProjectRef, units: Map[URI, LoadedBuildUnit]): Option[ResolvedProject]", "member" : "sbt.Project.getProject", "link" : "sbt\/Project$.html#getProject(ref:sbt.ProjectRef,units:Map[java.net.URI,sbt.internal.LoadedBuildUnit]):Option[sbt.ResolvedProject]", "kind" : "def"}, {"label" : "getProject", "tail" : "(ref: ProjectRef, structure: LoadedBuild): Option[ResolvedProject]", "member" : "sbt.Project.getProject", "link" : "sbt\/Project$.html#getProject(ref:sbt.ProjectRef,structure:sbt.internal.LoadedBuild):Option[sbt.ResolvedProject]", "kind" : "def"}, {"label" : "getProject", "tail" : "(ref: ProjectRef, structure: BuildStructure): Option[ResolvedProject]", "member" : "sbt.Project.getProject", "link" : "sbt\/Project$.html#getProject(ref:sbt.ProjectRef,structure:sbt.internal.BuildStructure):Option[sbt.ResolvedProject]", "kind" : "def"}, {"label" : "getProjectForReference", "tail" : "(ref: Reference, structure: BuildStructure): Option[ResolvedProject]", "member" : "sbt.Project.getProjectForReference", "link" : "sbt\/Project$.html#getProjectForReference(ref:sbt.Reference,structure:sbt.internal.BuildStructure):Option[sbt.ResolvedProject]", "kind" : "def"}, {"label" : "extract", "tail" : "(state: State): Extracted", "member" : "sbt.Project.extract", "link" : "sbt\/Project$.html#extract(state:sbt.State):sbt.Extracted", "kind" : "def"}, {"label" : "isProjectLoaded", "tail" : "(state: State): Boolean", "member" : "sbt.Project.isProjectLoaded", "link" : "sbt\/Project$.html#isProjectLoaded(state:sbt.State):Boolean", "kind" : "def"}, {"label" : "session", "tail" : "(state: State): SessionSettings", "member" : "sbt.Project.session", "link" : "sbt\/Project$.html#session(state:sbt.State):sbt.internal.SessionSettings", "kind" : "def"}, {"label" : "structure", "tail" : "(state: State): BuildStructure", "member" : "sbt.Project.structure", "link" : "sbt\/Project$.html#structure(state:sbt.State):sbt.internal.BuildStructure", "kind" : "def"}, {"label" : "getOrError", "tail" : "(state: State, key: AttributeKey[T], msg: String): T", "member" : "sbt.Project.getOrError", "link" : "sbt\/Project$.html#getOrError[T](state:sbt.State,key:sbt.internal.util.AttributeKey[T],msg:String):T", "kind" : "def"}, {"label" : "Constructor", "tail" : "", "member" : "sbt.Project.Constructor", "link" : "sbt\/Project$.html#ConstructorextendsAnyRef", "kind" : "final class"}, {"label" : "normalizeModuleID", "tail" : "(id: String): String", "member" : "sbt.Project.normalizeModuleID", "link" : "sbt\/Project$.html#normalizeModuleID(id:String):String", "kind" : "def"}, {"label" : "normalizeProjectID", "tail" : "(id: String): Either[String, String]", "member" : "sbt.Project.normalizeProjectID", "link" : "sbt\/Project$.html#normalizeProjectID(id:String):Either[String,String]", "kind" : "def"}, {"label" : "validProjectID", "tail" : "(id: String): Option[String]", "member" : "sbt.Project.validProjectID", "link" : "sbt\/Project$.html#validProjectID(id:String):Option[String]", "kind" : "def"}, {"label" : "showLoadingKey", "tail" : "(loaded: LoadedBuild, keyNameColor: Option[String]): Show[Def.ScopedKey[_]]", "member" : "sbt.Project.showLoadingKey", "link" : "sbt\/Project$.html#showLoadingKey(loaded:sbt.internal.LoadedBuild,keyNameColor:Option[String]):sbt.util.Show[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "showContextKey", "tail" : "(session: SessionSettings, structure: BuildStructure, keyNameColor: Option[String]): Show[Def.ScopedKey[_]]", "member" : "sbt.Project.showContextKey", "link" : "sbt\/Project$.html#showContextKey(session:sbt.internal.SessionSettings,structure:sbt.internal.BuildStructure,keyNameColor:Option[String]):sbt.util.Show[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "showContextKey", "tail" : "(state: State, keyNameColor: Option[String]): Show[Def.ScopedKey[_]]", "member" : "sbt.Project.showContextKey", "link" : "sbt\/Project$.html#showContextKey(state:sbt.State,keyNameColor:Option[String]):sbt.util.Show[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "showContextKey", "tail" : "(state: State): Show[Def.ScopedKey[_]]", "member" : "sbt.Project.showContextKey", "link" : "sbt\/Project$.html#showContextKey(state:sbt.State):sbt.util.Show[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "apply", "tail" : "(id: String, base: File): Project", "member" : "sbt.Project.apply", "link" : "sbt\/Project$.html#apply(id:String,base:java.io.File):sbt.Project", "kind" : "def"}, {"label" : "project", "tail" : "(): Project", "member" : "sbt.ProjectExtra.project", "link" : "sbt\/Project$.html#project:sbt.Project", "kind" : "macro def"}, {"label" : "inScope", "tail" : "(scope: Scope)(ss: Seq[Def.Setting[_]]): Seq[Def.Setting[_]]", "member" : "sbt.ProjectExtra.inScope", "link" : "sbt\/Project$.html#inScope(scope:sbt.Scope)(ss:Seq[sbt.Def.Setting[_]]):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "inTask", "tail" : "(t: Scoped)(ss: Seq[Def.Setting[_]]): Seq[Def.Setting[_]]", "member" : "sbt.ProjectExtra.inTask", "link" : "sbt\/Project$.html#inTask(t:sbt.Scoped)(ss:Seq[sbt.Def.Setting[_]]):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "inConfig", "tail" : "(conf: Configuration)(ss: Seq[Def.Setting[_]]): Seq[Def.Setting[_]]", "member" : "sbt.ProjectExtra.inConfig", "link" : "sbt\/Project$.html#inConfig(conf:sbt.librarymanagement.Configuration)(ss:Seq[sbt.Def.Setting[_]]):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "inThisBuild", "tail" : "(ss: Seq[Def.Setting[_]]): Seq[Def.Setting[_]]", "member" : "sbt.ProjectExtra.inThisBuild", "link" : "sbt\/Project$.html#inThisBuild(ss:Seq[sbt.Def.Setting[_]]):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "richTaskSessionVar", "tail" : "(init: Def.Initialize[Task[T]]): RichTaskSessionVar[T]", "member" : "sbt.ProjectExtra.richTaskSessionVar", "link" : "sbt\/Project$.html#richTaskSessionVar[T](init:sbt.Def.Initialize[sbt.Task[T]]):sbt.Project.RichTaskSessionVar[T]", "kind" : "implicit def"}, {"label" : "richInitialize", "tail" : "(i: Def.Initialize[T]): RichInitialize[T]", "member" : "sbt.ProjectExtra.richInitialize", "link" : "sbt\/Project$.html#richInitialize[T](i:sbt.Def.Initialize[T]):sbt.Scoped.RichInitialize[T]", "kind" : "implicit def"}, {"label" : "richInitializeInputTask", "tail" : "(init: Def.Initialize[InputTask[T]]): RichInitializeInputTask[T]", "member" : "sbt.ProjectExtra.richInitializeInputTask", "link" : "sbt\/Project$.html#richInitializeInputTask[T](init:sbt.Def.Initialize[sbt.InputTask[T]]):sbt.Scoped.RichInitializeInputTask[T]", "kind" : "implicit def"}, {"label" : "richInitializeTask", "tail" : "(init: Def.Initialize[Task[T]]): RichInitializeTask[T]", "member" : "sbt.ProjectExtra.richInitializeTask", "link" : "sbt\/Project$.html#richInitializeTask[T](init:sbt.Def.Initialize[sbt.Task[T]]):sbt.Scoped.RichInitializeTask[T]", "kind" : "implicit def"}, {"label" : "classpathDependency", "tail" : "(p: T)(ev: (T) ⇒ ProjectReference): ClasspathDependency", "member" : "sbt.ProjectExtra.classpathDependency", "link" : "sbt\/Project$.html#classpathDependency[T](p:T)(implicitev:T=>sbt.ProjectReference):sbt.ClasspathDependency", "kind" : "implicit def"}, {"label" : "configDependencyConstructor", "tail" : "(p: T)(ev: (T) ⇒ ProjectReference): Constructor", "member" : "sbt.ProjectExtra.configDependencyConstructor", "link" : "sbt\/Project$.html#configDependencyConstructor[T](p:T)(implicitev:T=>sbt.ProjectReference):sbt.Project.Constructor", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Project$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Project$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Project$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Project$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Project$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Project$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Project$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Project$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Project$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Project$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Project$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Project$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Project$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Project$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Project$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Project$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Project$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Project$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Project$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/Project.html", "kind" : "trait"}, {"name" : "sbt.ProjectDefinition", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.ProjectDefinition.toString", "link" : "sbt\/ProjectDefinition.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.ProjectDefinition.equals", "link" : "sbt\/ProjectDefinition.html#equals(o:Any):Boolean", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.ProjectDefinition.hashCode", "link" : "sbt\/ProjectDefinition.html#hashCode():Int", "kind" : "final def"}, {"label" : "referenced", "tail" : "(): Seq[PR]", "member" : "sbt.ProjectDefinition.referenced", "link" : "sbt\/ProjectDefinition.html#referenced:Seq[PR]", "kind" : "def"}, {"label" : "uses", "tail" : "(): Seq[PR]", "member" : "sbt.ProjectDefinition.uses", "link" : "sbt\/ProjectDefinition.html#uses:Seq[PR]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ProjectDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ProjectDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ProjectDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ProjectDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ProjectDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ProjectDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ProjectDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ProjectDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ProjectDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ProjectDefinition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ProjectDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ProjectDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ProjectDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "projectOrigin", "tail" : "(): ProjectOrigin", "member" : "sbt.ProjectDefinition.projectOrigin", "link" : "sbt\/ProjectDefinition.html#projectOrigin:sbt.ProjectOrigin", "kind" : "abstract def"}, {"label" : "plugins", "tail" : "(): Plugins", "member" : "sbt.ProjectDefinition.plugins", "link" : "sbt\/ProjectDefinition.html#plugins:sbt.Plugins", "kind" : "abstract def"}, {"label" : "dependencies", "tail" : "(): Seq[ClasspathDep[PR]]", "member" : "sbt.ProjectDefinition.dependencies", "link" : "sbt\/ProjectDefinition.html#dependencies:Seq[sbt.ClasspathDep[PR]]", "kind" : "abstract def"}, {"label" : "aggregate", "tail" : "(): Seq[PR]", "member" : "sbt.ProjectDefinition.aggregate", "link" : "sbt\/ProjectDefinition.html#aggregate:Seq[PR]", "kind" : "abstract def"}, {"label" : "settings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.ProjectDefinition.settings", "link" : "sbt\/ProjectDefinition.html#settings:Seq[sbt.Def.Setting[_]]", "kind" : "abstract def"}, {"label" : "configurations", "tail" : "(): Seq[Configuration]", "member" : "sbt.ProjectDefinition.configurations", "link" : "sbt\/ProjectDefinition.html#configurations:Seq[sbt.librarymanagement.Configuration]", "kind" : "abstract def"}, {"label" : "base", "tail" : "(): File", "member" : "sbt.ProjectDefinition.base", "link" : "sbt\/ProjectDefinition.html#base:java.io.File", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): String", "member" : "sbt.ProjectDefinition.id", "link" : "sbt\/ProjectDefinition.html#id:String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/ProjectDefinition.html", "kind" : "trait"}, {"name" : "sbt.ProjectExtra", "members_trait" : [{"label" : "project", "tail" : "(): Project", "member" : "sbt.ProjectExtra.project", "link" : "sbt\/ProjectExtra.html#project:sbt.Project", "kind" : "macro def"}, {"label" : "inScope", "tail" : "(scope: Scope)(ss: Seq[Def.Setting[_]]): Seq[Def.Setting[_]]", "member" : "sbt.ProjectExtra.inScope", "link" : "sbt\/ProjectExtra.html#inScope(scope:sbt.Scope)(ss:Seq[sbt.Def.Setting[_]]):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "inTask", "tail" : "(t: Scoped)(ss: Seq[Def.Setting[_]]): Seq[Def.Setting[_]]", "member" : "sbt.ProjectExtra.inTask", "link" : "sbt\/ProjectExtra.html#inTask(t:sbt.Scoped)(ss:Seq[sbt.Def.Setting[_]]):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "inConfig", "tail" : "(conf: Configuration)(ss: Seq[Def.Setting[_]]): Seq[Def.Setting[_]]", "member" : "sbt.ProjectExtra.inConfig", "link" : "sbt\/ProjectExtra.html#inConfig(conf:sbt.librarymanagement.Configuration)(ss:Seq[sbt.Def.Setting[_]]):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "inThisBuild", "tail" : "(ss: Seq[Def.Setting[_]]): Seq[Def.Setting[_]]", "member" : "sbt.ProjectExtra.inThisBuild", "link" : "sbt\/ProjectExtra.html#inThisBuild(ss:Seq[sbt.Def.Setting[_]]):Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "richTaskSessionVar", "tail" : "(init: Def.Initialize[Task[T]]): RichTaskSessionVar[T]", "member" : "sbt.ProjectExtra.richTaskSessionVar", "link" : "sbt\/ProjectExtra.html#richTaskSessionVar[T](init:sbt.Def.Initialize[sbt.Task[T]]):sbt.Project.RichTaskSessionVar[T]", "kind" : "implicit def"}, {"label" : "richInitialize", "tail" : "(i: Def.Initialize[T]): RichInitialize[T]", "member" : "sbt.ProjectExtra.richInitialize", "link" : "sbt\/ProjectExtra.html#richInitialize[T](i:sbt.Def.Initialize[T]):sbt.Scoped.RichInitialize[T]", "kind" : "implicit def"}, {"label" : "richInitializeInputTask", "tail" : "(init: Def.Initialize[InputTask[T]]): RichInitializeInputTask[T]", "member" : "sbt.ProjectExtra.richInitializeInputTask", "link" : "sbt\/ProjectExtra.html#richInitializeInputTask[T](init:sbt.Def.Initialize[sbt.InputTask[T]]):sbt.Scoped.RichInitializeInputTask[T]", "kind" : "implicit def"}, {"label" : "richInitializeTask", "tail" : "(init: Def.Initialize[Task[T]]): RichInitializeTask[T]", "member" : "sbt.ProjectExtra.richInitializeTask", "link" : "sbt\/ProjectExtra.html#richInitializeTask[T](init:sbt.Def.Initialize[sbt.Task[T]]):sbt.Scoped.RichInitializeTask[T]", "kind" : "implicit def"}, {"label" : "classpathDependency", "tail" : "(p: T)(ev: (T) ⇒ ProjectReference): ClasspathDependency", "member" : "sbt.ProjectExtra.classpathDependency", "link" : "sbt\/ProjectExtra.html#classpathDependency[T](p:T)(implicitev:T=>sbt.ProjectReference):sbt.ClasspathDependency", "kind" : "implicit def"}, {"label" : "configDependencyConstructor", "tail" : "(p: T)(ev: (T) ⇒ ProjectReference): Constructor", "member" : "sbt.ProjectExtra.configDependencyConstructor", "link" : "sbt\/ProjectExtra.html#configDependencyConstructor[T](p:T)(implicitev:T=>sbt.ProjectReference):sbt.Project.Constructor", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ProjectExtra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ProjectExtra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ProjectExtra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ProjectExtra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ProjectExtra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ProjectExtra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ProjectExtra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectExtra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectExtra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectExtra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ProjectExtra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ProjectExtra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ProjectExtra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ProjectExtra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ProjectExtra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ProjectExtra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ProjectExtra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ProjectExtra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ProjectExtra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/ProjectExtra.html", "kind" : "trait"}, {"name" : "sbt.ProjectOrigin", "shortDescription" : "Indicate whether the project was created organically, synthesized by a plugin,or is a \"generic root\" project supplied by sbt when a project doesn't exist for file(\".\").", "object" : "sbt\/ProjectOrigin$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ProjectOrigin.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ProjectOrigin.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ProjectOrigin.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ProjectOrigin.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ProjectOrigin.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ProjectOrigin.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ProjectOrigin.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectOrigin.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectOrigin.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectOrigin.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ProjectOrigin.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ProjectOrigin.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ProjectOrigin.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ProjectOrigin.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ProjectOrigin.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ProjectOrigin.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ProjectOrigin.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ProjectOrigin.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ProjectOrigin.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "GenericRoot", "tail" : "", "member" : "sbt.ProjectOrigin.GenericRoot", "link" : "sbt\/ProjectOrigin$.html#GenericRoot", "kind" : "object"}, {"label" : "DerivedProject", "tail" : "", "member" : "sbt.ProjectOrigin.DerivedProject", "link" : "sbt\/ProjectOrigin$.html#DerivedProject", "kind" : "object"}, {"label" : "ExtraProject", "tail" : "", "member" : "sbt.ProjectOrigin.ExtraProject", "link" : "sbt\/ProjectOrigin$.html#ExtraProject", "kind" : "object"}, {"label" : "Organic", "tail" : "", "member" : "sbt.ProjectOrigin.Organic", "link" : "sbt\/ProjectOrigin$.html#Organic", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ProjectOrigin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ProjectOrigin$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ProjectOrigin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ProjectOrigin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ProjectOrigin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ProjectOrigin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ProjectOrigin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectOrigin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectOrigin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectOrigin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ProjectOrigin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ProjectOrigin$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ProjectOrigin$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ProjectOrigin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ProjectOrigin$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ProjectOrigin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ProjectOrigin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ProjectOrigin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ProjectOrigin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/ProjectOrigin.html", "kind" : "class"}, {"name" : "sbt.ProjectRef", "shortDescription" : "Uniquely references a project by a URI and a project identifier String.", "object" : "sbt\/ProjectRef$.html", "members_object" : [{"label" : "apply", "tail" : "(base: File, id: String): ProjectRef", "member" : "sbt.ProjectRef.apply", "link" : "sbt\/ProjectRef$.html#apply(base:java.io.File,id:String):sbt.ProjectRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ProjectRef$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ProjectRef$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ProjectRef$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ProjectRef$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ProjectRef$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ProjectRef$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ProjectRef$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectRef$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectRef$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectRef$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ProjectRef$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ProjectRef$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ProjectRef$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ProjectRef$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ProjectRef$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ProjectRef$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ProjectRef$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ProjectRef$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ProjectRef$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "sbt.ProjectRef#<init>", "error" : "unsupported entity"}, {"label" : "project", "tail" : ": String", "member" : "sbt.ProjectRef.project", "link" : "sbt\/ProjectRef.html#project:String", "kind" : "val"}, {"label" : "build", "tail" : ": URI", "member" : "sbt.ProjectRef.build", "link" : "sbt\/ProjectRef.html#build:java.net.URI", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ProjectRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ProjectRef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ProjectRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ProjectRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ProjectRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ProjectRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ProjectRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ProjectRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ProjectRef.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ProjectRef.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ProjectRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ProjectRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ProjectRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/ProjectRef.html", "kind" : "case class"}, {"name" : "sbt.ProjectReference", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ProjectReference.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ProjectReference.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ProjectReference.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ProjectReference.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ProjectReference.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ProjectReference.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ProjectReference.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectReference.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectReference.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ProjectReference.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ProjectReference.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ProjectReference.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ProjectReference.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ProjectReference.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ProjectReference.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ProjectReference.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ProjectReference.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ProjectReference.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ProjectReference.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Identifies a project.", "trait" : "sbt\/ProjectReference.html", "kind" : "trait"}, {"name" : "sbt.Pure", "shortDescription" : "A direct computation of a value.", "members_case class" : [{"member" : "sbt.Pure#<init>", "error" : "unsupported entity"}, {"label" : "inline", "tail" : ": Boolean", "member" : "sbt.Pure.inline", "link" : "sbt\/Pure.html#inline:Boolean", "kind" : "val"}, {"label" : "f", "tail" : ": () ⇒ T", "member" : "sbt.Pure.f", "link" : "sbt\/Pure.html#f:()=>T", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Pure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Pure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Pure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Pure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Pure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Pure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Pure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Pure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Pure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Pure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Pure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Pure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Pure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Pure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Pure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Pure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/Pure.html", "kind" : "case class"}, {"name" : "sbt.RawCompileLike", "shortDescription" : "", "object" : "sbt\/RawCompileLike$.html", "members_object" : [{"label" : "nop", "tail" : ": Gen", "member" : "sbt.RawCompileLike.nop", "link" : "sbt\/RawCompileLike$.html#nop:sbt.RawCompileLike.Gen", "kind" : "val"}, {"label" : "compile", "tail" : "(label: String, cacheStoreFactory: CacheStoreFactory, instance: ScalaInstance, cpOptions: ClasspathOptions): Gen", "member" : "sbt.RawCompileLike.compile", "link" : "sbt\/RawCompileLike$.html#compile(label:String,cacheStoreFactory:sbt.util.CacheStoreFactory,instance:sbt.internal.inc.ScalaInstance,cpOptions:xsbti.compile.ClasspathOptions):sbt.RawCompileLike.Gen", "kind" : "def"}, {"label" : "rawCompile", "tail" : "(instance: ScalaInstance, cpOptions: ClasspathOptions): Gen", "member" : "sbt.RawCompileLike.rawCompile", "link" : "sbt\/RawCompileLike$.html#rawCompile(instance:sbt.internal.inc.ScalaInstance,cpOptions:xsbti.compile.ClasspathOptions):sbt.RawCompileLike.Gen", "kind" : "def"}, {"label" : "filterSources", "tail" : "(f: (File) ⇒ Boolean, doCompile: Gen): Gen", "member" : "sbt.RawCompileLike.filterSources", "link" : "sbt\/RawCompileLike$.html#filterSources(f:java.io.File=>Boolean,doCompile:sbt.RawCompileLike.Gen):sbt.RawCompileLike.Gen", "kind" : "def"}, {"label" : "prepare", "tail" : "(description: String, doCompile: Gen): Gen", "member" : "sbt.RawCompileLike.prepare", "link" : "sbt\/RawCompileLike$.html#prepare(description:String,doCompile:sbt.RawCompileLike.Gen):sbt.RawCompileLike.Gen", "kind" : "def"}, {"label" : "cached", "tail" : "(cacheStoreFactory: CacheStoreFactory, fileInputOpts: Seq[String], doCompile: Gen): Gen", "member" : "sbt.RawCompileLike.cached", "link" : "sbt\/RawCompileLike$.html#cached(cacheStoreFactory:sbt.util.CacheStoreFactory,fileInputOpts:Seq[String],doCompile:sbt.RawCompileLike.Gen):sbt.RawCompileLike.Gen", "kind" : "def"}, {"label" : "cached", "tail" : "(cacheStoreFactory: CacheStoreFactory, doCompile: Gen): Gen", "member" : "sbt.RawCompileLike.cached", "link" : "sbt\/RawCompileLike$.html#cached(cacheStoreFactory:sbt.util.CacheStoreFactory,doCompile:sbt.RawCompileLike.Gen):sbt.RawCompileLike.Gen", "kind" : "def"}, {"label" : "Gen", "tail" : "", "member" : "sbt.RawCompileLike.Gen", "link" : "sbt\/RawCompileLike$.html#Gen=(Seq[java.io.File],Seq[java.io.File],java.io.File,Seq[String],Int,sbt.internal.util.ManagedLogger)=>Unit", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/RawCompileLike$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/RawCompileLike$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/RawCompileLike$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/RawCompileLike$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/RawCompileLike$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/RawCompileLike$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/RawCompileLike$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RawCompileLike$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RawCompileLike$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RawCompileLike$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/RawCompileLike$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/RawCompileLike$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/RawCompileLike$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/RawCompileLike$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/RawCompileLike$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/RawCompileLike$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/RawCompileLike$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/RawCompileLike$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/RawCompileLike$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.Reboot", "shortDescription" : "", "members_case class" : [{"label" : "arguments", "tail" : "(): Array[String]", "member" : "sbt.Reboot.arguments", "link" : "sbt\/Reboot.html#arguments():Array[String]", "kind" : "def"}, {"member" : "sbt.Reboot#<init>", "error" : "unsupported entity"}, {"label" : "baseDirectory", "tail" : ": File", "member" : "sbt.Reboot.baseDirectory", "link" : "sbt\/Reboot.html#baseDirectory:java.io.File", "kind" : "val"}, {"label" : "app", "tail" : ": xsbti.ApplicationID", "member" : "sbt.Reboot.app", "link" : "sbt\/Reboot.html#app:xsbti.ApplicationID", "kind" : "val"}, {"label" : "argsList", "tail" : ": Seq[String]", "member" : "sbt.Reboot.argsList", "link" : "sbt\/Reboot.html#argsList:Seq[String]", "kind" : "val"}, {"label" : "scalaVersion", "tail" : ": String", "member" : "sbt.Reboot.scalaVersion", "link" : "sbt\/Reboot.html#scalaVersion:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Reboot.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Reboot.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Reboot.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Reboot.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Reboot.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Reboot.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Reboot.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Reboot.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Reboot.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Reboot.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Reboot.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Reboot.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Reboot.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Reboot.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Reboot.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Reboot.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/Reboot.html", "kind" : "case class"}, {"name" : "sbt.Reference", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Reference.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Reference.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Reference.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Reference.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Reference.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Reference.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Reference.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Reference.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Reference.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Reference.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Reference.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Reference.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Reference.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Reference.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Reference.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Reference.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Reference.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Reference.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Reference.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Identifies a project or build.", "object" : "sbt\/Reference$.html", "members_object" : [{"label" : "uri", "tail" : "(ref: Reference): Option[URI]", "member" : "sbt.Reference.uri", "link" : "sbt\/Reference$.html#uri(ref:sbt.Reference):Option[java.net.URI]", "kind" : "def"}, {"label" : "buildURI", "tail" : "(ref: ResolvedReference): URI", "member" : "sbt.Reference.buildURI", "link" : "sbt\/Reference$.html#buildURI(ref:sbt.ResolvedReference):java.net.URI", "kind" : "def"}, {"label" : "display", "tail" : "(ref: ProjectReference): String", "member" : "sbt.Reference.display", "link" : "sbt\/Reference$.html#display(ref:sbt.ProjectReference):String", "kind" : "def"}, {"label" : "display", "tail" : "(ref: BuildReference): String", "member" : "sbt.Reference.display", "link" : "sbt\/Reference$.html#display(ref:sbt.BuildReference):String", "kind" : "def"}, {"label" : "display", "tail" : "(ref: Reference): String", "member" : "sbt.Reference.display", "link" : "sbt\/Reference$.html#display(ref:sbt.Reference):String", "kind" : "def"}, {"label" : "projectRefOrdering", "tail" : ": Ordering[ProjectRef]", "member" : "sbt.Reference.projectRefOrdering", "link" : "sbt\/Reference$.html#projectRefOrdering:Ordering[sbt.ProjectRef]", "kind" : "implicit val"}, {"label" : "buildRefOrdering", "tail" : ": Ordering[BuildRef]", "member" : "sbt.Reference.buildRefOrdering", "link" : "sbt\/Reference$.html#buildRefOrdering:Ordering[sbt.BuildRef]", "kind" : "implicit val"}, {"label" : "resolvedReferenceOrdering", "tail" : ": Ordering[ResolvedReference]", "member" : "sbt.Reference.resolvedReferenceOrdering", "link" : "sbt\/Reference$.html#resolvedReferenceOrdering:Ordering[sbt.ResolvedReference]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Reference$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Reference$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Reference$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Reference$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Reference$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Reference$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Reference$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Reference$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Reference$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Reference$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Reference$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Reference$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Reference$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Reference$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Reference$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Reference$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Reference$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Reference$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Reference$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/Reference.html", "kind" : "trait"}, {"name" : "sbt.Remove", "shortDescription" : "", "object" : "sbt\/Remove$.html", "members_object" : [{"label" : "removeOption", "tail" : "(): Sequence[Seq[T], Option[T], Option[T]]", "member" : "sbt.Remove.removeOption", "link" : "sbt\/Remove$.html#removeOption[T]:sbt.Remove.Sequence[Seq[T],Option[T],Option[T]]", "kind" : "implicit def"}, {"label" : "removeSeq", "tail" : "(): Sequence[Seq[T], Seq[V], V]", "member" : "sbt.Remove.removeSeq", "link" : "sbt\/Remove$.html#removeSeq[T,V<:T]:sbt.Remove.Sequence[Seq[T],Seq[V],V]", "kind" : "implicit def"}, {"label" : "Sequence", "tail" : "", "member" : "sbt.Remove.Sequence", "link" : "sbt\/Remove$.html#Sequence[A,-B,T]extendsRemove.Value[A,T]withRemove.Values[A,B]", "kind" : "trait"}, {"label" : "Values", "tail" : "", "member" : "sbt.Remove.Values", "link" : "sbt\/Remove$.html#Values[A,-B]extendsAny", "kind" : "trait"}, {"label" : "Value", "tail" : "", "member" : "sbt.Remove.Value", "link" : "sbt\/Remove$.html#Value[A,B]extendsAny", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Remove$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Remove$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Remove$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Remove$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Remove$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Remove$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Remove$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Remove$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Remove$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Remove$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Remove$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Remove$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Remove$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Remove$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Remove$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Remove$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Remove$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Remove$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Remove$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.ResolvedClasspathDependency", "shortDescription" : "", "members_case class" : [{"member" : "sbt.ResolvedClasspathDependency#<init>", "error" : "unsupported entity"}, {"label" : "configuration", "tail" : ": Option[String]", "member" : "sbt.ResolvedClasspathDependency.configuration", "link" : "sbt\/ResolvedClasspathDependency.html#configuration:Option[String]", "kind" : "val"}, {"label" : "project", "tail" : ": ProjectRef", "member" : "sbt.ResolvedClasspathDependency.project", "link" : "sbt\/ResolvedClasspathDependency.html#project:sbt.ProjectRef", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ResolvedClasspathDependency.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ResolvedClasspathDependency.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ResolvedClasspathDependency.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ResolvedClasspathDependency.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ResolvedClasspathDependency.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ResolvedClasspathDependency.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ResolvedClasspathDependency.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ResolvedClasspathDependency.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ResolvedClasspathDependency.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ResolvedClasspathDependency.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ResolvedClasspathDependency.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ResolvedClasspathDependency.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ResolvedClasspathDependency.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ResolvedClasspathDependency.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ResolvedClasspathDependency.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ResolvedClasspathDependency.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/ResolvedClasspathDependency.html", "kind" : "case class"}, {"name" : "sbt.ResolvedProject", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "sbt.ProjectDefinition.toString", "link" : "sbt\/ResolvedProject.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.ProjectDefinition.equals", "link" : "sbt\/ResolvedProject.html#equals(o:Any):Boolean", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.ProjectDefinition.hashCode", "link" : "sbt\/ResolvedProject.html#hashCode():Int", "kind" : "final def"}, {"label" : "referenced", "tail" : "(): Seq[ProjectRef]", "member" : "sbt.ProjectDefinition.referenced", "link" : "sbt\/ResolvedProject.html#referenced:Seq[PR]", "kind" : "def"}, {"label" : "uses", "tail" : "(): Seq[ProjectRef]", "member" : "sbt.ProjectDefinition.uses", "link" : "sbt\/ResolvedProject.html#uses:Seq[PR]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ResolvedProject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ResolvedProject.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ResolvedProject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ResolvedProject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ResolvedProject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ResolvedProject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ResolvedProject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ResolvedProject.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ResolvedProject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ResolvedProject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ResolvedProject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ResolvedProject.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ResolvedProject.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ResolvedProject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ResolvedProject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ResolvedProject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "autoPlugins", "tail" : "(): Seq[AutoPlugin]", "member" : "sbt.ResolvedProject.autoPlugins", "link" : "sbt\/ResolvedProject.html#autoPlugins:Seq[sbt.AutoPlugin]", "kind" : "abstract def"}, {"label" : "projectOrigin", "tail" : "(): ProjectOrigin", "member" : "sbt.ProjectDefinition.projectOrigin", "link" : "sbt\/ResolvedProject.html#projectOrigin:sbt.ProjectOrigin", "kind" : "abstract def"}, {"label" : "plugins", "tail" : "(): Plugins", "member" : "sbt.ProjectDefinition.plugins", "link" : "sbt\/ResolvedProject.html#plugins:sbt.Plugins", "kind" : "abstract def"}, {"label" : "dependencies", "tail" : "(): Seq[ClasspathDep[ProjectRef]]", "member" : "sbt.ProjectDefinition.dependencies", "link" : "sbt\/ResolvedProject.html#dependencies:Seq[sbt.ClasspathDep[PR]]", "kind" : "abstract def"}, {"label" : "aggregate", "tail" : "(): Seq[ProjectRef]", "member" : "sbt.ProjectDefinition.aggregate", "link" : "sbt\/ResolvedProject.html#aggregate:Seq[PR]", "kind" : "abstract def"}, {"label" : "settings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.ProjectDefinition.settings", "link" : "sbt\/ResolvedProject.html#settings:Seq[sbt.Def.Setting[_]]", "kind" : "abstract def"}, {"label" : "configurations", "tail" : "(): Seq[Configuration]", "member" : "sbt.ProjectDefinition.configurations", "link" : "sbt\/ResolvedProject.html#configurations:Seq[sbt.librarymanagement.Configuration]", "kind" : "abstract def"}, {"label" : "base", "tail" : "(): File", "member" : "sbt.ProjectDefinition.base", "link" : "sbt\/ResolvedProject.html#base:java.io.File", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): String", "member" : "sbt.ProjectDefinition.id", "link" : "sbt\/ResolvedProject.html#id:String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/ResolvedProject.html", "kind" : "trait"}, {"name" : "sbt.ResolvedReference", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ResolvedReference.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ResolvedReference.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ResolvedReference.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ResolvedReference.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ResolvedReference.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ResolvedReference.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ResolvedReference.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ResolvedReference.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ResolvedReference.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ResolvedReference.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ResolvedReference.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ResolvedReference.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ResolvedReference.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ResolvedReference.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ResolvedReference.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ResolvedReference.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ResolvedReference.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ResolvedReference.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ResolvedReference.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "A fully resolved, unique identifier for a project or build.", "trait" : "sbt\/ResolvedReference.html", "kind" : "trait"}, {"name" : "sbt.Resolvers", "shortDescription" : "", "object" : "sbt\/Resolvers$.html", "members_object" : [{"label" : "uniqueSubdirectoryFor", "tail" : "(uri: URI, in: File): File", "member" : "sbt.Resolvers.uniqueSubdirectoryFor", "link" : "sbt\/Resolvers$.html#uniqueSubdirectoryFor(uri:java.net.URI,in:java.io.File):java.io.File", "kind" : "def"}, {"label" : "creates", "tail" : "(file: File)(f: ⇒ Unit): File", "member" : "sbt.Resolvers.creates", "link" : "sbt\/Resolvers$.html#creates(file:java.io.File)(f:=>Unit):java.io.File", "kind" : "def"}, {"label" : "run", "tail" : "(cwd: Option[File], command: String*): Unit", "member" : "sbt.Resolvers.run", "link" : "sbt\/Resolvers$.html#run(cwd:Option[java.io.File],command:String*):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(command: String*): Unit", "member" : "sbt.Resolvers.run", "link" : "sbt\/Resolvers$.html#run(command:String*):Unit", "kind" : "def"}, {"label" : "DistributedVCS", "tail" : "", "member" : "sbt.Resolvers.DistributedVCS", "link" : "sbt\/Resolvers$.html#DistributedVCSextendsAnyRef", "kind" : "abstract class"}, {"label" : "git", "tail" : ": Resolver", "member" : "sbt.Resolvers.git", "link" : "sbt\/Resolvers$.html#git:sbt.Resolvers.Resolver", "kind" : "val"}, {"label" : "mercurial", "tail" : ": Resolver", "member" : "sbt.Resolvers.mercurial", "link" : "sbt\/Resolvers$.html#mercurial:sbt.Resolvers.Resolver", "kind" : "val"}, {"label" : "subversion", "tail" : ": Resolver", "member" : "sbt.Resolvers.subversion", "link" : "sbt\/Resolvers$.html#subversion:sbt.Resolvers.Resolver", "kind" : "val"}, {"label" : "remote", "tail" : ": Resolver", "member" : "sbt.Resolvers.remote", "link" : "sbt\/Resolvers$.html#remote:sbt.Resolvers.Resolver", "kind" : "val"}, {"label" : "local", "tail" : ": Resolver", "member" : "sbt.Resolvers.local", "link" : "sbt\/Resolvers$.html#local:sbt.Resolvers.Resolver", "kind" : "val"}, {"label" : "Resolver", "tail" : "", "member" : "sbt.Resolvers.Resolver", "link" : "sbt\/Resolvers$.html#Resolver=sbt.internal.BuildLoader.Resolver", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Resolvers$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Resolvers$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Resolvers$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Resolvers$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Resolvers$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Resolvers$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Resolvers$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Resolvers$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Resolvers$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Resolvers$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Resolvers$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Resolvers$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Resolvers$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Resolvers$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Resolvers$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Resolvers$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Resolvers$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Resolvers$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Resolvers$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.Result", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Result.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Result.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Result.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Result.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Result.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Result.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Result.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Result.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Result.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Result.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Result.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Result.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Result.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Result.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Result.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Result.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Result.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Result.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Result.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toEither", "tail" : "(): Either[Incomplete, T]", "member" : "sbt.Result.toEither", "link" : "sbt\/Result.html#toEither:Either[sbt.Incomplete,T]", "kind" : "abstract def"}], "shortDescription" : "Result of completely evaluating a task.", "object" : "sbt\/Result$.html", "members_object" : [{"label" : "fromEither", "tail" : "(e: Either[Incomplete, T]): Result[T]", "member" : "sbt.Result.fromEither", "link" : "sbt\/Result$.html#fromEither[T](e:Either[sbt.Incomplete,T]):sbt.Result[T]", "kind" : "implicit def"}, {"label" : "tryValues", "tail" : "(r: Seq[Result[Unit]], v: Result[S]): S", "member" : "sbt.Result.tryValues", "link" : "sbt\/Result$.html#tryValues[S](r:Seq[sbt.Result[Unit]],v:sbt.Result[S]):S", "kind" : "def"}, {"label" : "tryValue", "tail" : ": ~>[Result, Id]", "member" : "sbt.Result.tryValue", "link" : "sbt\/Result$.html#tryValue:sbt.Result~>sbt.Result.Id", "kind" : "val"}, {"label" : "Id", "tail" : "", "member" : "sbt.Result.Id", "link" : "sbt\/Result$.html#Id[X]=X", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Result$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Result$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Result$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Result$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Result$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Result$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Result$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Result$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Result$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Result$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Result$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Result$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Result$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Result$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Result$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Result$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Result$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Result$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Result$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/Result.html", "kind" : "trait"}, {"name" : "sbt.RichURI", "shortDescription" : "Extends URI with additional convenience methods.", "object" : "sbt\/RichURI$.html", "members_class" : [{"label" : "withoutMarkerScheme", "tail" : "(): URI", "member" : "sbt.RichURI.withoutMarkerScheme", "link" : "sbt\/RichURI.html#withoutMarkerScheme:java.net.URI", "kind" : "def"}, {"label" : "hasMarkerScheme", "tail" : "(): Boolean", "member" : "sbt.RichURI.hasMarkerScheme", "link" : "sbt\/RichURI.html#hasMarkerScheme:Boolean", "kind" : "def"}, {"label" : "withoutFragment", "tail" : "(): URI", "member" : "sbt.RichURI.withoutFragment", "link" : "sbt\/RichURI.html#withoutFragment:java.net.URI", "kind" : "def"}, {"label" : "hasFragment", "tail" : "(): Boolean", "member" : "sbt.RichURI.hasFragment", "link" : "sbt\/RichURI.html#hasFragment:Boolean", "kind" : "def"}, {"label" : "copy", "tail" : "(scheme: String, userInfo: String, host: String, port: Int, path: String, query: String, fragment: String): URI", "member" : "sbt.RichURI.copy", "link" : "sbt\/RichURI.html#copy(scheme:String,userInfo:String,host:String,port:Int,path:String,query:String,fragment:String):java.net.URI", "kind" : "def"}, {"member" : "sbt.RichURI#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/RichURI.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/RichURI.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/RichURI.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/RichURI.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/RichURI.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/RichURI.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/RichURI.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RichURI.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RichURI.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RichURI.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/RichURI.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/RichURI.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/RichURI.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/RichURI.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/RichURI.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/RichURI.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/RichURI.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/RichURI.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/RichURI.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fromURI", "tail" : "(uri: URI): RichURI", "member" : "sbt.RichURI.fromURI", "link" : "sbt\/RichURI$.html#fromURI(uri:java.net.URI):sbt.RichURI", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/RichURI$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/RichURI$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/RichURI$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/RichURI$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/RichURI$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/RichURI$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/RichURI$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RichURI$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RichURI$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RichURI$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/RichURI$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/RichURI$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/RichURI$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/RichURI$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/RichURI$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/RichURI$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/RichURI$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/RichURI$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/RichURI$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/RichURI.html", "kind" : "class"}, {"name" : "sbt.RootProject", "shortDescription" : "Identifies the root project in the specified build.", "object" : "sbt\/RootProject$.html", "members_object" : [{"label" : "apply", "tail" : "(base: File): RootProject", "member" : "sbt.RootProject.apply", "link" : "sbt\/RootProject$.html#apply(base:java.io.File):sbt.RootProject", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/RootProject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/RootProject$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/RootProject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/RootProject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/RootProject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/RootProject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/RootProject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RootProject$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RootProject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RootProject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/RootProject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/RootProject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/RootProject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/RootProject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/RootProject$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/RootProject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/RootProject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/RootProject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/RootProject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "sbt.RootProject#<init>", "error" : "unsupported entity"}, {"label" : "build", "tail" : ": URI", "member" : "sbt.RootProject.build", "link" : "sbt\/RootProject.html#build:java.net.URI", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/RootProject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/RootProject.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/RootProject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/RootProject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/RootProject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/RootProject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/RootProject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RootProject.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RootProject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RootProject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/RootProject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/RootProject.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/RootProject.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/RootProject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/RootProject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/RootProject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/RootProject.html", "kind" : "case class"}, {"name" : "sbt.Run", "shortDescription" : "", "object" : "sbt\/Run$.html", "members_class" : [{"label" : "getMainMethod", "tail" : "(mainClassName: String, loader: ClassLoader): Method", "member" : "sbt.Run.getMainMethod", "link" : "sbt\/Run.html#getMainMethod(mainClassName:String,loader:ClassLoader):java.lang.reflect.Method", "kind" : "def"}, {"label" : "run", "tail" : "(mainClass: String, classpath: Seq[File], options: Seq[String], log: Logger): Try[Unit]", "member" : "sbt.Run.run", "link" : "sbt\/Run.html#run(mainClass:String,classpath:Seq[java.io.File],options:Seq[String],log:sbt.util.Logger):scala.util.Try[Unit]", "kind" : "def"}, {"member" : "sbt.Run#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Run.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Run.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Run.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Run.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Run.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Run.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Run.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Run.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Run.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Run.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Run.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Run.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Run.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Run.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Run.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Run.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Run.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Run.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Run.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "executeTrapExit", "tail" : "(f: ⇒ Unit, log: Logger): Try[Unit]", "member" : "sbt.Run.executeTrapExit", "link" : "sbt\/Run$.html#executeTrapExit(f:=>Unit,log:sbt.util.Logger):scala.util.Try[Unit]", "kind" : "def"}, {"label" : "run", "tail" : "(mainClass: String, classpath: Seq[File], options: Seq[String], log: Logger)(runner: ScalaRun): Try[Unit]", "member" : "sbt.Run.run", "link" : "sbt\/Run$.html#run(mainClass:String,classpath:Seq[java.io.File],options:Seq[String],log:sbt.util.Logger)(implicitrunner:sbt.ScalaRun):scala.util.Try[Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Run$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Run$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Run$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Run$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Run$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Run$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Run$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Run$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Run$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Run$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Run$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Run$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Run$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Run$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Run$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Run$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Run$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Run$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Run$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/Run.html", "kind" : "class"}, {"name" : "sbt.RunningTaskEngine", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/RunningTaskEngine.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/RunningTaskEngine.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/RunningTaskEngine.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/RunningTaskEngine.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/RunningTaskEngine.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/RunningTaskEngine.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/RunningTaskEngine.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RunningTaskEngine.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RunningTaskEngine.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/RunningTaskEngine.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/RunningTaskEngine.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/RunningTaskEngine.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/RunningTaskEngine.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/RunningTaskEngine.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/RunningTaskEngine.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/RunningTaskEngine.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/RunningTaskEngine.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/RunningTaskEngine.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/RunningTaskEngine.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "cancelAndShutdown", "tail" : "(): Unit", "member" : "sbt.RunningTaskEngine.cancelAndShutdown", "link" : "sbt\/RunningTaskEngine.html#cancelAndShutdown():Unit", "kind" : "abstract def"}], "shortDescription" : "An API that allows you to cancel executing tasks upon some signal.", "trait" : "sbt\/RunningTaskEngine.html", "kind" : "trait"}, {"name" : "sbt.sbtUnchecked", "shortDescription" : "An annotation to designate that the annotated entity should not be considered for additional sbt compiler checks.", "members_class" : [{"member" : "sbt.sbtUnchecked#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/sbtUnchecked.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/sbtUnchecked.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/sbtUnchecked.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/sbtUnchecked.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/sbtUnchecked.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/sbtUnchecked.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/sbtUnchecked.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/sbtUnchecked.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/sbtUnchecked.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/sbtUnchecked.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/sbtUnchecked.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/sbtUnchecked.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/sbtUnchecked.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/sbtUnchecked.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/sbtUnchecked.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/sbtUnchecked.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/sbtUnchecked.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/sbtUnchecked.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/sbtUnchecked.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/sbtUnchecked.html", "kind" : "class"}, {"name" : "sbt.ScalaRun", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ScalaRun.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ScalaRun.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ScalaRun.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ScalaRun.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ScalaRun.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ScalaRun.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ScalaRun.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScalaRun.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScalaRun.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScalaRun.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ScalaRun.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ScalaRun.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ScalaRun.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ScalaRun.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ScalaRun.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ScalaRun.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ScalaRun.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ScalaRun.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ScalaRun.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(mainClass: String, classpath: Seq[File], options: Seq[String], log: Logger): Try[Unit]", "member" : "sbt.ScalaRun.run", "link" : "sbt\/ScalaRun.html#run(mainClass:String,classpath:Seq[java.io.File],options:Seq[String],log:sbt.util.Logger):scala.util.Try[Unit]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/ScalaRun.html", "kind" : "trait"}, {"name" : "sbt.Scope", "shortDescription" : "", "object" : "sbt\/Scope$.html", "members_object" : [{"label" : "globalProjectDelegates", "tail" : "(scope: Scope): Seq[Scope]", "member" : "sbt.Scope.globalProjectDelegates", "link" : "sbt\/Scope$.html#globalProjectDelegates(scope:sbt.Scope):Seq[sbt.Scope]", "kind" : "def"}, {"label" : "topologicalSort", "tail" : "(node: T, appendZero: Boolean)(dependencies: (T) ⇒ Seq[T]): Seq[ScopeAxis[T]]", "member" : "sbt.Scope.topologicalSort", "link" : "sbt\/Scope$.html#topologicalSort[T](node:T,appendZero:Boolean)(dependencies:T=>Seq[T]):Seq[sbt.ScopeAxis[T]]", "kind" : "def"}, {"label" : "linearize", "tail" : "(axis: ScopeAxis[T], appendZero: Boolean)(inherit: (T) ⇒ Seq[T]): Seq[ScopeAxis[T]]", "member" : "sbt.Scope.linearize", "link" : "sbt\/Scope$.html#linearize[T](axis:sbt.ScopeAxis[T],appendZero:Boolean)(inherit:T=>Seq[T]):Seq[sbt.ScopeAxis[T]]", "kind" : "def"}, {"label" : "axisDelegates", "tail" : "(direct: (ResolvedReference, T) ⇒ Seq[T], ref: ResolvedReference, init: T): (T, Seq[ScopeAxis[T]])", "member" : "sbt.Scope.axisDelegates", "link" : "sbt\/Scope$.html#axisDelegates[T](direct:(sbt.ResolvedReference,T)=>Seq[T],ref:sbt.ResolvedReference,init:T):(T,Seq[sbt.ScopeAxis[T]])", "kind" : "def"}, {"label" : "delegates", "tail" : "(refs: Seq[(ProjectRef, Proj)], configurations: (Proj) ⇒ Seq[ConfigKey], projectInherit: (ProjectRef) ⇒ Seq[ProjectRef], configInherit: (ResolvedReference, ConfigKey) ⇒ Seq[ConfigKey]): DelegateIndex", "member" : "sbt.Scope.delegates", "link" : "sbt\/Scope$.html#delegates[Proj](refs:Seq[(sbt.ProjectRef,Proj)],configurations:Proj=>Seq[sbt.ConfigKey],projectInherit:sbt.ProjectRef=>Seq[sbt.ProjectRef],configInherit:(sbt.ResolvedReference,sbt.ConfigKey)=>Seq[sbt.ConfigKey]):sbt.DelegateIndex", "kind" : "def"}, {"label" : "rawBuild", "tail" : "(ps: ScopeAxis[ProjectRef]): Seq[ScopeAxis[BuildRef]]", "member" : "sbt.Scope.rawBuild", "link" : "sbt\/Scope$.html#rawBuild(ps:sbt.ScopeAxis[sbt.ProjectRef]):Seq[sbt.ScopeAxis[sbt.BuildRef]]", "kind" : "def"}, {"label" : "withRawBuilds", "tail" : "(ps: Seq[ScopeAxis[ProjectRef]]): Seq[ScopeAxis[ResolvedReference]]", "member" : "sbt.Scope.withRawBuilds", "link" : "sbt\/Scope$.html#withRawBuilds(ps:Seq[sbt.ScopeAxis[sbt.ProjectRef]]):Seq[sbt.ScopeAxis[sbt.ResolvedReference]]", "kind" : "def"}, {"label" : "withGlobalScope", "tail" : "(base: Scope): Seq[Scope]", "member" : "sbt.Scope.withGlobalScope", "link" : "sbt\/Scope$.html#withGlobalScope(base:sbt.Scope):Seq[sbt.Scope]", "kind" : "def"}, {"label" : "withZeroAxis", "tail" : "(base: ScopeAxis[T]): Seq[ScopeAxis[T]]", "member" : "sbt.Scope.withZeroAxis", "link" : "sbt\/Scope$.html#withZeroAxis[T](base:sbt.ScopeAxis[T]):Seq[sbt.ScopeAxis[T]]", "kind" : "def"}, {"label" : "indexedDelegates", "tail" : "(resolve: (Reference) ⇒ ResolvedReference, index: DelegateIndex, rootProject: (URI) ⇒ String, taskInherit: (AttributeKey[_]) ⇒ Seq[AttributeKey[_]], extraInherit: (ResolvedReference, AttributeMap) ⇒ Seq[AttributeMap])(rawScope: Scope): Seq[Scope]", "member" : "sbt.Scope.indexedDelegates", "link" : "sbt\/Scope$.html#indexedDelegates(resolve:sbt.Reference=>sbt.ResolvedReference,index:sbt.DelegateIndex,rootProject:java.net.URI=>String,taskInherit:sbt.internal.util.AttributeKey[_]=>Seq[sbt.internal.util.AttributeKey[_]],extraInherit:(sbt.ResolvedReference,sbt.internal.util.AttributeMap)=>Seq[sbt.internal.util.AttributeMap])(rawScope:sbt.Scope):Seq[sbt.Scope]", "kind" : "def"}, {"label" : "delegates", "tail" : "(refs: Seq[(ProjectRef, Proj)], configurations: (Proj) ⇒ Seq[ConfigKey], resolve: (Reference) ⇒ ResolvedReference, rootProject: (URI) ⇒ String, projectInherit: (ProjectRef) ⇒ Seq[ProjectRef], configInherit: (ResolvedReference, ConfigKey) ⇒ Seq[ConfigKey], taskInherit: (AttributeKey[_]) ⇒ Seq[AttributeKey[_]], extraInherit: (ResolvedReference, AttributeMap) ⇒ Seq[AttributeMap]): (Scope) ⇒ Seq[Scope]", "member" : "sbt.Scope.delegates", "link" : "sbt\/Scope$.html#delegates[Proj](refs:Seq[(sbt.ProjectRef,Proj)],configurations:Proj=>Seq[sbt.ConfigKey],resolve:sbt.Reference=>sbt.ResolvedReference,rootProject:java.net.URI=>String,projectInherit:sbt.ProjectRef=>Seq[sbt.ProjectRef],configInherit:(sbt.ResolvedReference,sbt.ConfigKey)=>Seq[sbt.ConfigKey],taskInherit:sbt.internal.util.AttributeKey[_]=>Seq[sbt.internal.util.AttributeKey[_]],extraInherit:(sbt.ResolvedReference,sbt.internal.util.AttributeMap)=>Seq[sbt.internal.util.AttributeMap]):sbt.Scope=>Seq[sbt.Scope]", "kind" : "def"}, {"label" : "transformTaskName", "tail" : "(s: String): String", "member" : "sbt.Scope.transformTaskName", "link" : "sbt\/Scope$.html#transformTaskName(s:String):String", "kind" : "def"}, {"label" : "showProject", "tail" : "(): (Reference) ⇒ String", "member" : "sbt.Scope.showProject", "link" : "sbt\/Scope$.html#showProject:sbt.Reference=>String", "kind" : "def"}, {"label" : "projectPrefix", "tail" : "(project: ScopeAxis[Reference], show: (Reference) ⇒ String): String", "member" : "sbt.Scope.projectPrefix", "link" : "sbt\/Scope$.html#projectPrefix(project:sbt.ScopeAxis[sbt.Reference],show:sbt.Reference=>String):String", "kind" : "def"}, {"label" : "equal", "tail" : "(a: Scope, b: Scope, mask: ScopeMask): Boolean", "member" : "sbt.Scope.equal", "link" : "sbt\/Scope$.html#equal(a:sbt.Scope,b:sbt.Scope,mask:sbt.ScopeMask):Boolean", "kind" : "def"}, {"label" : "displayMasked", "tail" : "(scope: Scope, sep: String, showProject: (Reference) ⇒ String, mask: ScopeMask): String", "member" : "sbt.Scope.displayMasked", "link" : "sbt\/Scope$.html#displayMasked(scope:sbt.Scope,sep:String,showProject:sbt.Reference=>String,mask:sbt.ScopeMask):String", "kind" : "def"}, {"label" : "display", "tail" : "(scope: Scope, sep: String, showProject: (Reference) ⇒ String): String", "member" : "sbt.Scope.display", "link" : "sbt\/Scope$.html#display(scope:sbt.Scope,sep:String,showProject:sbt.Reference=>String):String", "kind" : "def"}, {"label" : "displayMasked", "tail" : "(scope: Scope, sep: String, mask: ScopeMask): String", "member" : "sbt.Scope.displayMasked", "link" : "sbt\/Scope$.html#displayMasked(scope:sbt.Scope,sep:String,mask:sbt.ScopeMask):String", "kind" : "def"}, {"label" : "display", "tail" : "(scope: Scope, sep: String): String", "member" : "sbt.Scope.display", "link" : "sbt\/Scope$.html#display(scope:sbt.Scope,sep:String):String", "kind" : "def"}, {"label" : "display", "tail" : "(config: ConfigKey): String", "member" : "sbt.Scope.display", "link" : "sbt\/Scope$.html#display(config:sbt.ConfigKey):String", "kind" : "def"}, {"label" : "resolveBuildRef", "tail" : "(current: URI, ref: BuildReference): BuildRef", "member" : "sbt.Scope.resolveBuildRef", "link" : "sbt\/Scope$.html#resolveBuildRef(current:java.net.URI,ref:sbt.BuildReference):sbt.BuildRef", "kind" : "def"}, {"label" : "resolveProjectRef", "tail" : "(current: URI, rootProject: (URI) ⇒ String, ref: ProjectReference): ProjectRef", "member" : "sbt.Scope.resolveProjectRef", "link" : "sbt\/Scope$.html#resolveProjectRef(current:java.net.URI,rootProject:java.net.URI=>String,ref:sbt.ProjectReference):sbt.ProjectRef", "kind" : "def"}, {"label" : "resolveReference", "tail" : "(current: URI, rootProject: (URI) ⇒ String, ref: Reference): ResolvedReference", "member" : "sbt.Scope.resolveReference", "link" : "sbt\/Scope$.html#resolveReference(current:java.net.URI,rootProject:java.net.URI=>String,ref:sbt.Reference):sbt.ResolvedReference", "kind" : "def"}, {"label" : "resolveBuild", "tail" : "(current: URI, uri: URI): URI", "member" : "sbt.Scope.resolveBuild", "link" : "sbt\/Scope$.html#resolveBuild(current:java.net.URI,uri:java.net.URI):java.net.URI", "kind" : "def"}, {"label" : "resolveProjectBuild", "tail" : "(current: URI, ref: ProjectReference): ProjectReference", "member" : "sbt.Scope.resolveProjectBuild", "link" : "sbt\/Scope$.html#resolveProjectBuild(current:java.net.URI,ref:sbt.ProjectReference):sbt.ProjectReference", "kind" : "def"}, {"label" : "resolveBuild", "tail" : "(current: URI, ref: BuildReference): BuildReference", "member" : "sbt.Scope.resolveBuild", "link" : "sbt\/Scope$.html#resolveBuild(current:java.net.URI,ref:sbt.BuildReference):sbt.BuildReference", "kind" : "def"}, {"label" : "resolveBuildOnly", "tail" : "(current: URI, ref: Reference): Reference", "member" : "sbt.Scope.resolveBuildOnly", "link" : "sbt\/Scope$.html#resolveBuildOnly(current:java.net.URI,ref:sbt.Reference):sbt.Reference", "kind" : "def"}, {"label" : "buildResolve", "tail" : "(uri: URI): (Scope) ⇒ Scope", "member" : "sbt.Scope.buildResolve", "link" : "sbt\/Scope$.html#buildResolve(uri:java.net.URI):sbt.Scope=>sbt.Scope", "kind" : "def"}, {"label" : "resolveProject", "tail" : "(uri: URI, rootProject: (URI) ⇒ String): (Scope) ⇒ Scope", "member" : "sbt.Scope.resolveProject", "link" : "sbt\/Scope$.html#resolveProject(uri:java.net.URI,rootProject:java.net.URI=>String):sbt.Scope=>sbt.Scope", "kind" : "def"}, {"label" : "mapReference", "tail" : "(f: (Reference) ⇒ Reference): (Scope) ⇒ Scope", "member" : "sbt.Scope.mapReference", "link" : "sbt\/Scope$.html#mapReference(f:sbt.Reference=>sbt.Reference):sbt.Scope=>sbt.Scope", "kind" : "def"}, {"label" : "fillTaskAxis", "tail" : "(scope: Scope, key: AttributeKey[_]): Scope", "member" : "sbt.Scope.fillTaskAxis", "link" : "sbt\/Scope$.html#fillTaskAxis(scope:sbt.Scope,key:sbt.internal.util.AttributeKey[_]):sbt.Scope", "kind" : "def"}, {"label" : "subThisProject", "tail" : "(): (Scope) ⇒ Scope", "member" : "sbt.Scope.subThisProject", "link" : "sbt\/Scope$.html#subThisProject:sbt.Scope=>sbt.Scope", "kind" : "def"}, {"label" : "subThis", "tail" : "(sub: ScopeAxis[T], into: ScopeAxis[T]): ScopeAxis[T]", "member" : "sbt.Scope.subThis", "link" : "sbt\/Scope$.html#subThis[T](sub:sbt.ScopeAxis[T],into:sbt.ScopeAxis[T]):sbt.ScopeAxis[T]", "kind" : "def"}, {"label" : "replaceThis", "tail" : "(thisScope: Scope): (Scope) ⇒ Scope", "member" : "sbt.Scope.replaceThis", "link" : "sbt\/Scope$.html#replaceThis(thisScope:sbt.Scope):sbt.Scope=>sbt.Scope", "kind" : "def"}, {"label" : "resolveBuildScope", "tail" : "(thisScope: Scope, current: URI): (Scope) ⇒ Scope", "member" : "sbt.Scope.resolveBuildScope", "link" : "sbt\/Scope$.html#resolveBuildScope(thisScope:sbt.Scope,current:java.net.URI):sbt.Scope=>sbt.Scope", "kind" : "def"}, {"label" : "resolveScope", "tail" : "(thisScope: Scope, current: URI, rootProject: (URI) ⇒ String): (Scope) ⇒ Scope", "member" : "sbt.Scope.resolveScope", "link" : "sbt\/Scope$.html#resolveScope(thisScope:sbt.Scope,current:java.net.URI,rootProject:java.net.URI=>String):sbt.Scope=>sbt.Scope", "kind" : "def"}, {"label" : "GlobalScope", "tail" : ": Scope", "member" : "sbt.Scope.GlobalScope", "link" : "sbt\/Scope$.html#GlobalScope:sbt.Scope", "kind" : "val"}, {"label" : "Global", "tail" : ": Scope", "member" : "sbt.Scope.Global", "link" : "sbt\/Scope$.html#Global:sbt.Scope", "kind" : "val"}, {"label" : "ThisScope", "tail" : ": Scope", "member" : "sbt.Scope.ThisScope", "link" : "sbt\/Scope$.html#ThisScope:sbt.Scope", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Scope$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Scope$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Scope$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Scope$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Scope$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Scope$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Scope$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Scope$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Scope$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Scope$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Scope$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Scope$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Scope$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Scope$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Scope$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Scope$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Scope$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Scope$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Scope$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "in", "tail" : "(task: AttributeKey[_]): Scope", "member" : "sbt.Scope.in", "link" : "sbt\/Scope.html#in(task:sbt.internal.util.AttributeKey[_]):sbt.Scope", "kind" : "def"}, {"label" : "in", "tail" : "(config: ConfigKey): Scope", "member" : "sbt.Scope.in", "link" : "sbt\/Scope.html#in(config:sbt.ConfigKey):sbt.Scope", "kind" : "def"}, {"label" : "in", "tail" : "(project: Reference): Scope", "member" : "sbt.Scope.in", "link" : "sbt\/Scope.html#in(project:sbt.Reference):sbt.Scope", "kind" : "def"}, {"label" : "in", "tail" : "(project: Reference, config: ConfigKey, task: AttributeKey[_]): Scope", "member" : "sbt.Scope.in", "link" : "sbt\/Scope.html#in(project:sbt.Reference,config:sbt.ConfigKey,task:sbt.internal.util.AttributeKey[_]):sbt.Scope", "kind" : "def"}, {"label" : "in", "tail" : "(project: Reference, task: AttributeKey[_]): Scope", "member" : "sbt.Scope.in", "link" : "sbt\/Scope.html#in(project:sbt.Reference,task:sbt.internal.util.AttributeKey[_]):sbt.Scope", "kind" : "def"}, {"label" : "in", "tail" : "(config: ConfigKey, task: AttributeKey[_]): Scope", "member" : "sbt.Scope.in", "link" : "sbt\/Scope.html#in(config:sbt.ConfigKey,task:sbt.internal.util.AttributeKey[_]):sbt.Scope", "kind" : "def"}, {"label" : "in", "tail" : "(project: Reference, config: ConfigKey): Scope", "member" : "sbt.Scope.in", "link" : "sbt\/Scope.html#in(project:sbt.Reference,config:sbt.ConfigKey):sbt.Scope", "kind" : "def"}, {"member" : "sbt.Scope#<init>", "error" : "unsupported entity"}, {"label" : "extra", "tail" : ": ScopeAxis[AttributeMap]", "member" : "sbt.Scope.extra", "link" : "sbt\/Scope.html#extra:sbt.ScopeAxis[sbt.internal.util.AttributeMap]", "kind" : "val"}, {"label" : "task", "tail" : ": ScopeAxis[AttributeKey[_]]", "member" : "sbt.Scope.task", "link" : "sbt\/Scope.html#task:sbt.ScopeAxis[sbt.internal.util.AttributeKey[_]]", "kind" : "val"}, {"label" : "config", "tail" : ": ScopeAxis[ConfigKey]", "member" : "sbt.Scope.config", "link" : "sbt\/Scope.html#config:sbt.ScopeAxis[sbt.ConfigKey]", "kind" : "val"}, {"label" : "project", "tail" : ": ScopeAxis[Reference]", "member" : "sbt.Scope.project", "link" : "sbt\/Scope.html#project:sbt.ScopeAxis[sbt.Reference]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Scope.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Scope.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Scope.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Scope.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Scope.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Scope.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Scope.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Scope.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Scope.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Scope.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Scope.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Scope.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Scope.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Scope.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Scope.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Scope.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/Scope.html", "kind" : "case class"}, {"name" : "sbt.ScopeAxis", "members_trait" : [{"label" : "isSelect", "tail" : "(): Boolean", "member" : "sbt.ScopeAxis.isSelect", "link" : "sbt\/ScopeAxis.html#isSelect:Boolean", "kind" : "def"}, {"label" : "map", "tail" : "(f: (S) ⇒ T): ScopeAxis[T]", "member" : "sbt.ScopeAxis.map", "link" : "sbt\/ScopeAxis.html#map[T](f:S=>T):sbt.ScopeAxis[T]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[S]", "member" : "sbt.ScopeAxis.toOption", "link" : "sbt\/ScopeAxis.html#toOption:Option[S]", "kind" : "def"}, {"label" : "fold", "tail" : "(f: (S) ⇒ T, ifZero: ⇒ T, ifThis: ⇒ T): T", "member" : "sbt.ScopeAxis.fold", "link" : "sbt\/ScopeAxis.html#fold[T](f:S=>T,ifZero:=>T,ifThis:=>T):T", "kind" : "def"}, {"label" : "foldStrict", "tail" : "(f: (S) ⇒ T, ifZero: T, ifThis: T): T", "member" : "sbt.ScopeAxis.foldStrict", "link" : "sbt\/ScopeAxis.html#foldStrict[T](f:S=>T,ifZero:T,ifThis:T):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ScopeAxis.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ScopeAxis.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ScopeAxis.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ScopeAxis.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ScopeAxis.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ScopeAxis.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ScopeAxis.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopeAxis.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopeAxis.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopeAxis.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ScopeAxis.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ScopeAxis.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ScopeAxis.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ScopeAxis.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ScopeAxis.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ScopeAxis.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ScopeAxis.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ScopeAxis.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ScopeAxis.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/ScopeAxis$.html", "members_object" : [{"label" : "fromOption", "tail" : "(o: Option[T]): ScopeAxis[T]", "member" : "sbt.ScopeAxis.fromOption", "link" : "sbt\/ScopeAxis$.html#fromOption[T](o:Option[T]):sbt.ScopeAxis[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ScopeAxis$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ScopeAxis$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ScopeAxis$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ScopeAxis$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ScopeAxis$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ScopeAxis$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ScopeAxis$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopeAxis$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopeAxis$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopeAxis$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ScopeAxis$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ScopeAxis$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ScopeAxis$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ScopeAxis$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ScopeAxis$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ScopeAxis$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ScopeAxis$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ScopeAxis$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ScopeAxis$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/ScopeAxis.html", "kind" : "trait"}, {"name" : "sbt.Scoped", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Scoped.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Scoped.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Scoped.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Scoped.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Scoped.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Scoped.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Scoped.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Scoped.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Scoped.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Scoped.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Scoped.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Scoped.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Scoped.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Scoped.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Scoped.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Scoped.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Scoped.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Scoped.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Scoped.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "key", "tail" : ": AttributeKey[_]", "member" : "sbt.Scoped.key", "link" : "sbt\/Scoped.html#key:sbt.internal.util.AttributeKey[_]", "kind" : "abstract val"}, {"label" : "scope", "tail" : "(): Scope", "member" : "sbt.Scoped.scope", "link" : "sbt\/Scoped.html#scope:sbt.Scope", "kind" : "abstract def"}], "shortDescription" : "An abstraction on top of Settings for build configuration and task definition.", "object" : "sbt\/Scoped$.html", "members_object" : [{"label" : "Apply11", "tail" : "", "member" : "sbt.Scoped.Apply11", "link" : "sbt\/Scoped$.html#Apply11[A,B,C,D,E,F,G,H,I,J,K]extendsAnyRef", "kind" : "final class"}, {"label" : "Apply10", "tail" : "", "member" : "sbt.Scoped.Apply10", "link" : "sbt\/Scoped$.html#Apply10[A,B,C,D,E,F,G,H,I,J]extendsAnyRef", "kind" : "final class"}, {"label" : "Apply9", "tail" : "", "member" : "sbt.Scoped.Apply9", "link" : "sbt\/Scoped$.html#Apply9[A,B,C,D,E,F,G,H,I]extendsAnyRef", "kind" : "final class"}, {"label" : "Apply8", "tail" : "", "member" : "sbt.Scoped.Apply8", "link" : "sbt\/Scoped$.html#Apply8[A,B,C,D,E,F,G,H]extendsAnyRef", "kind" : "final class"}, {"label" : "Apply7", "tail" : "", "member" : "sbt.Scoped.Apply7", "link" : "sbt\/Scoped$.html#Apply7[A,B,C,D,E,F,G]extendsAnyRef", "kind" : "final class"}, {"label" : "Apply6", "tail" : "", "member" : "sbt.Scoped.Apply6", "link" : "sbt\/Scoped$.html#Apply6[A,B,C,D,E,F]extendsAnyRef", "kind" : "final class"}, {"label" : "Apply5", "tail" : "", "member" : "sbt.Scoped.Apply5", "link" : "sbt\/Scoped$.html#Apply5[A,B,C,D,E]extendsAnyRef", "kind" : "final class"}, {"label" : "Apply4", "tail" : "", "member" : "sbt.Scoped.Apply4", "link" : "sbt\/Scoped$.html#Apply4[A,B,C,D]extendsAnyRef", "kind" : "final class"}, {"label" : "Apply3", "tail" : "", "member" : "sbt.Scoped.Apply3", "link" : "sbt\/Scoped$.html#Apply3[A,B,C]extendsAnyRef", "kind" : "final class"}, {"label" : "Apply2", "tail" : "", "member" : "sbt.Scoped.Apply2", "link" : "sbt\/Scoped$.html#Apply2[A,B]extendsAnyRef", "kind" : "final class"}, {"label" : "mkTuple15", "tail" : "(): (A, B, C, D, E, F, G, H, I, J, K, L, N, O, P) ⇒ (A, B, C, D, E, F, G, H, I, J, K, L, N, O, P)", "member" : "sbt.Scoped.mkTuple15", "link" : "sbt\/Scoped$.html#mkTuple15[A,B,C,D,E,F,G,H,I,J,K,L,N,O,P]:(A,B,C,D,E,F,G,H,I,J,K,L,N,O,P)=>(A,B,C,D,E,F,G,H,I,J,K,L,N,O,P)", "kind" : "def"}, {"label" : "mkTuple14", "tail" : "(): (A, B, C, D, E, F, G, H, I, J, K, L, N, O) ⇒ (A, B, C, D, E, F, G, H, I, J, K, L, N, O)", "member" : "sbt.Scoped.mkTuple14", "link" : "sbt\/Scoped$.html#mkTuple14[A,B,C,D,E,F,G,H,I,J,K,L,N,O]:(A,B,C,D,E,F,G,H,I,J,K,L,N,O)=>(A,B,C,D,E,F,G,H,I,J,K,L,N,O)", "kind" : "def"}, {"label" : "mkTuple13", "tail" : "(): (A, B, C, D, E, F, G, H, I, J, K, L, N) ⇒ (A, B, C, D, E, F, G, H, I, J, K, L, N)", "member" : "sbt.Scoped.mkTuple13", "link" : "sbt\/Scoped$.html#mkTuple13[A,B,C,D,E,F,G,H,I,J,K,L,N]:(A,B,C,D,E,F,G,H,I,J,K,L,N)=>(A,B,C,D,E,F,G,H,I,J,K,L,N)", "kind" : "def"}, {"label" : "mkTuple12", "tail" : "(): (A, B, C, D, E, F, G, H, I, J, K, L) ⇒ (A, B, C, D, E, F, G, H, I, J, K, L)", "member" : "sbt.Scoped.mkTuple12", "link" : "sbt\/Scoped$.html#mkTuple12[A,B,C,D,E,F,G,H,I,J,K,L]:(A,B,C,D,E,F,G,H,I,J,K,L)=>(A,B,C,D,E,F,G,H,I,J,K,L)", "kind" : "def"}, {"label" : "mkTuple11", "tail" : "(): (A, B, C, D, E, F, G, H, I, J, K) ⇒ (A, B, C, D, E, F, G, H, I, J, K)", "member" : "sbt.Scoped.mkTuple11", "link" : "sbt\/Scoped$.html#mkTuple11[A,B,C,D,E,F,G,H,I,J,K]:(A,B,C,D,E,F,G,H,I,J,K)=>(A,B,C,D,E,F,G,H,I,J,K)", "kind" : "def"}, {"label" : "mkTuple10", "tail" : "(): (A, B, C, D, E, F, G, H, I, J) ⇒ (A, B, C, D, E, F, G, H, I, J)", "member" : "sbt.Scoped.mkTuple10", "link" : "sbt\/Scoped$.html#mkTuple10[A,B,C,D,E,F,G,H,I,J]:(A,B,C,D,E,F,G,H,I,J)=>(A,B,C,D,E,F,G,H,I,J)", "kind" : "def"}, {"label" : "mkTuple9", "tail" : "(): (A, B, C, D, E, F, G, H, I) ⇒ (A, B, C, D, E, F, G, H, I)", "member" : "sbt.Scoped.mkTuple9", "link" : "sbt\/Scoped$.html#mkTuple9[A,B,C,D,E,F,G,H,I]:(A,B,C,D,E,F,G,H,I)=>(A,B,C,D,E,F,G,H,I)", "kind" : "def"}, {"label" : "mkTuple8", "tail" : "(): (A, B, C, D, E, F, G, H) ⇒ (A, B, C, D, E, F, G, H)", "member" : "sbt.Scoped.mkTuple8", "link" : "sbt\/Scoped$.html#mkTuple8[A,B,C,D,E,F,G,H]:(A,B,C,D,E,F,G,H)=>(A,B,C,D,E,F,G,H)", "kind" : "def"}, {"label" : "mkTuple7", "tail" : "(): (A, B, C, D, E, F, G) ⇒ (A, B, C, D, E, F, G)", "member" : "sbt.Scoped.mkTuple7", "link" : "sbt\/Scoped$.html#mkTuple7[A,B,C,D,E,F,G]:(A,B,C,D,E,F,G)=>(A,B,C,D,E,F,G)", "kind" : "def"}, {"label" : "mkTuple6", "tail" : "(): (A, B, C, D, E, F) ⇒ (A, B, C, D, E, F)", "member" : "sbt.Scoped.mkTuple6", "link" : "sbt\/Scoped$.html#mkTuple6[A,B,C,D,E,F]:(A,B,C,D,E,F)=>(A,B,C,D,E,F)", "kind" : "def"}, {"label" : "mkTuple5", "tail" : "(): (A, B, C, D, E) ⇒ (A, B, C, D, E)", "member" : "sbt.Scoped.mkTuple5", "link" : "sbt\/Scoped$.html#mkTuple5[A,B,C,D,E]:(A,B,C,D,E)=>(A,B,C,D,E)", "kind" : "def"}, {"label" : "mkTuple4", "tail" : "(): (A, B, C, D) ⇒ (A, B, C, D)", "member" : "sbt.Scoped.mkTuple4", "link" : "sbt\/Scoped$.html#mkTuple4[A,B,C,D]:(A,B,C,D)=>(A,B,C,D)", "kind" : "def"}, {"label" : "mkTuple3", "tail" : "(): (A, B, C) ⇒ (A, B, C)", "member" : "sbt.Scoped.mkTuple3", "link" : "sbt\/Scoped$.html#mkTuple3[A,B,C]:(A,B,C)=>(A,B,C)", "kind" : "def"}, {"label" : "mkTuple2", "tail" : "(): (A, B) ⇒ (A, B)", "member" : "sbt.Scoped.mkTuple2", "link" : "sbt\/Scoped$.html#mkTuple2[A,B]:(A,B)=>(A,B)", "kind" : "def"}, {"label" : "RichTaskable11", "tail" : "", "member" : "sbt.Scoped.RichTaskable11", "link" : "sbt\/Scoped$.html#RichTaskable11[A,B,C,D,E,F,G,H,I,J,K]extendsScoped.RichTaskables[[L[x]](L[A],L[B],L[C],L[D],L[E],L[F],L[G],L[H],L[I],L[J],L[K])]", "kind" : "final class"}, {"label" : "RichTaskable10", "tail" : "", "member" : "sbt.Scoped.RichTaskable10", "link" : "sbt\/Scoped$.html#RichTaskable10[A,B,C,D,E,F,G,H,I,J]extendsScoped.RichTaskables[[L[x]](L[A],L[B],L[C],L[D],L[E],L[F],L[G],L[H],L[I],L[J])]", "kind" : "final class"}, {"label" : "RichTaskable9", "tail" : "", "member" : "sbt.Scoped.RichTaskable9", "link" : "sbt\/Scoped$.html#RichTaskable9[A,B,C,D,E,F,G,H,I]extendsScoped.RichTaskables[[L[x]](L[A],L[B],L[C],L[D],L[E],L[F],L[G],L[H],L[I])]", "kind" : "final class"}, {"label" : "RichTaskable8", "tail" : "", "member" : "sbt.Scoped.RichTaskable8", "link" : "sbt\/Scoped$.html#RichTaskable8[A,B,C,D,E,F,G,H]extendsScoped.RichTaskables[[L[x]](L[A],L[B],L[C],L[D],L[E],L[F],L[G],L[H])]", "kind" : "final class"}, {"label" : "RichTaskable7", "tail" : "", "member" : "sbt.Scoped.RichTaskable7", "link" : "sbt\/Scoped$.html#RichTaskable7[A,B,C,D,E,F,G]extendsScoped.RichTaskables[[L[x]](L[A],L[B],L[C],L[D],L[E],L[F],L[G])]", "kind" : "final class"}, {"label" : "RichTaskable6", "tail" : "", "member" : "sbt.Scoped.RichTaskable6", "link" : "sbt\/Scoped$.html#RichTaskable6[A,B,C,D,E,F]extendsScoped.RichTaskables[[L[x]](L[A],L[B],L[C],L[D],L[E],L[F])]", "kind" : "final class"}, {"label" : "RichTaskable5", "tail" : "", "member" : "sbt.Scoped.RichTaskable5", "link" : "sbt\/Scoped$.html#RichTaskable5[A,B,C,D,E]extendsScoped.RichTaskables[[L[x]](L[A],L[B],L[C],L[D],L[E])]", "kind" : "final class"}, {"label" : "RichTaskable4", "tail" : "", "member" : "sbt.Scoped.RichTaskable4", "link" : "sbt\/Scoped$.html#RichTaskable4[A,B,C,D]extendsScoped.RichTaskables[[L[x]](L[A],L[B],L[C],L[D])]", "kind" : "final class"}, {"label" : "RichTaskable3", "tail" : "", "member" : "sbt.Scoped.RichTaskable3", "link" : "sbt\/Scoped$.html#RichTaskable3[A,B,C]extendsScoped.RichTaskables[[L[x]](L[A],L[B],L[C])]", "kind" : "final class"}, {"label" : "RichTaskable2", "tail" : "", "member" : "sbt.Scoped.RichTaskable2", "link" : "sbt\/Scoped$.html#RichTaskable2[A,B]extendsScoped.RichTaskables[[L[x]](L[A],L[B])]", "kind" : "final class"}, {"label" : "ST", "tail" : "", "member" : "sbt.Scoped.ST", "link" : "sbt\/Scoped$.html#ST[X]=sbt.ScopedTaskable[X]", "kind" : "type"}, {"label" : "RichTaskables", "tail" : "", "member" : "sbt.Scoped.RichTaskables", "link" : "sbt\/Scoped$.html#RichTaskables[K[L[x]]]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "RichAnyTaskSeq", "tail" : "", "member" : "sbt.Scoped.RichAnyTaskSeq", "link" : "sbt\/Scoped$.html#RichAnyTaskSeqextendsAnyRef", "kind" : "final class"}, {"label" : "richAnyTaskSeq", "tail" : "(in: Seq[AnyInitTask]): RichAnyTaskSeq", "member" : "sbt.Scoped.richAnyTaskSeq", "link" : "sbt\/Scoped$.html#richAnyTaskSeq(in:Seq[sbt.Scoped.AnyInitTask]):sbt.Scoped.RichAnyTaskSeq", "kind" : "implicit def"}, {"label" : "RichTaskSeq", "tail" : "", "member" : "sbt.Scoped.RichTaskSeq", "link" : "sbt\/Scoped$.html#RichTaskSeq[T]extendsAnyRef", "kind" : "final class"}, {"label" : "richTaskSeq", "tail" : "(in: Seq[Def.Initialize[Task[T]]]): RichTaskSeq[T]", "member" : "sbt.Scoped.richTaskSeq", "link" : "sbt\/Scoped$.html#richTaskSeq[T](in:Seq[sbt.Def.Initialize[sbt.Task[T]]]):sbt.Scoped.RichTaskSeq[T]", "kind" : "implicit def"}, {"label" : "AnyInitTask", "tail" : "", "member" : "sbt.Scoped.AnyInitTask", "link" : "sbt\/Scoped$.html#AnyInitTask=sbt.Def.Initialize[sbt.Task[T]]forSome{typeT}", "kind" : "type"}, {"label" : "RichInitTaskBase", "tail" : "", "member" : "sbt.Scoped.RichInitTaskBase", "link" : "sbt\/Scoped$.html#RichInitTaskBase[S,R[_]]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "RichInitializeInputTask", "tail" : "", "member" : "sbt.Scoped.RichInitializeInputTask", "link" : "sbt\/Scoped$.html#RichInitializeInputTask[S]extendsScoped.RichInitTaskBase[S,sbt.InputTask]", "kind" : "final class"}, {"label" : "RichInitializeTask", "tail" : "", "member" : "sbt.Scoped.RichInitializeTask", "link" : "sbt\/Scoped$.html#RichInitializeTask[S]extendsScoped.RichInitTaskBase[S,sbt.Task]", "kind" : "final class"}, {"label" : "DefinableTask", "tail" : "", "member" : "sbt.Scoped.DefinableTask", "link" : "sbt\/Scoped$.html#DefinableTask[S]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "RichInitialize", "tail" : "", "member" : "sbt.Scoped.RichInitialize", "link" : "sbt\/Scoped$.html#RichInitialize[S]extendsAnyRef", "kind" : "final class"}, {"label" : "DefinableSetting", "tail" : "", "member" : "sbt.Scoped.DefinableSetting", "link" : "sbt\/Scoped$.html#DefinableSetting[S]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "scopedTask", "tail" : "(s: Scope, k: AttributeKey[Task[T]]): TaskKey[T]", "member" : "sbt.Scoped.scopedTask", "link" : "sbt\/Scoped$.html#scopedTask[T](s:sbt.Scope,k:sbt.internal.util.AttributeKey[sbt.Task[T]]):sbt.TaskKey[T]", "kind" : "def"}, {"label" : "scopedInput", "tail" : "(s: Scope, k: AttributeKey[InputTask[T]]): InputKey[T]", "member" : "sbt.Scoped.scopedInput", "link" : "sbt\/Scoped$.html#scopedInput[T](s:sbt.Scope,k:sbt.internal.util.AttributeKey[sbt.InputTask[T]]):sbt.InputKey[T]", "kind" : "def"}, {"label" : "scopedSetting", "tail" : "(s: Scope, k: AttributeKey[T]): SettingKey[T]", "member" : "sbt.Scoped.scopedSetting", "link" : "sbt\/Scoped$.html#scopedSetting[T](s:sbt.Scope,k:sbt.internal.util.AttributeKey[T]):sbt.SettingKey[T]", "kind" : "def"}, {"label" : "ScopingSetting", "tail" : "", "member" : "sbt.Scoped.ScopingSetting", "link" : "sbt\/Scoped$.html#ScopingSetting[ResultType]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "inputScopedToKey", "tail" : "(s: InputKey[T]): Def.ScopedKey[InputTask[T]]", "member" : "sbt.Scoped.inputScopedToKey", "link" : "sbt\/Scoped$.html#inputScopedToKey[T](s:sbt.InputKey[T]):sbt.Def.ScopedKey[sbt.InputTask[T]]", "kind" : "implicit def"}, {"label" : "taskScopedToKey", "tail" : "(s: TaskKey[T]): Def.ScopedKey[Task[T]]", "member" : "sbt.Scoped.taskScopedToKey", "link" : "sbt\/Scoped$.html#taskScopedToKey[T](s:sbt.TaskKey[T]):sbt.Def.ScopedKey[sbt.Task[T]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Scoped$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Scoped$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Scoped$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Scoped$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Scoped$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Scoped$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Scoped$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Scoped$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Scoped$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Scoped$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Scoped$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Scoped$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Scoped$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Scoped$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Scoped$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Scoped$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Scoped$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Scoped$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Scoped$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/Scoped.html", "kind" : "trait"}, {"name" : "sbt.ScopedKeyData", "shortDescription" : "", "members_case class" : [{"label" : "fmtMf", "tail" : "(s: String): (OptManifest[_]) ⇒ String", "member" : "sbt.ScopedKeyData.fmtMf", "link" : "sbt\/ScopedKeyData.html#fmtMf(s:String):OptManifest[_]=>String", "kind" : "def"}, {"label" : "fold", "tail" : "(targ: (OptManifest[_]) ⇒ T, itarg: (OptManifest[_]) ⇒ T, s: ⇒ T): T", "member" : "sbt.ScopedKeyData.fold", "link" : "sbt\/ScopedKeyData.html#fold[T](targ:OptManifest[_]=>T,itarg:OptManifest[_]=>T,s:=>T):T", "kind" : "def"}, {"label" : "description", "tail" : "(): String", "member" : "sbt.ScopedKeyData.description", "link" : "sbt\/ScopedKeyData.html#description:String", "kind" : "def"}, {"label" : "settingValue", "tail" : "(): Option[Any]", "member" : "sbt.ScopedKeyData.settingValue", "link" : "sbt\/ScopedKeyData.html#settingValue:Option[Any]", "kind" : "def"}, {"label" : "typeName", "tail" : "(): String", "member" : "sbt.ScopedKeyData.typeName", "link" : "sbt\/ScopedKeyData.html#typeName:String", "kind" : "def"}, {"label" : "scope", "tail" : ": Scope", "member" : "sbt.ScopedKeyData.scope", "link" : "sbt\/ScopedKeyData.html#scope:sbt.Scope", "kind" : "val"}, {"label" : "key", "tail" : ": AttributeKey[A]", "member" : "sbt.ScopedKeyData.key", "link" : "sbt\/ScopedKeyData.html#key:sbt.internal.util.AttributeKey[A]", "kind" : "val"}, {"member" : "sbt.ScopedKeyData#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Any", "member" : "sbt.ScopedKeyData.value", "link" : "sbt\/ScopedKeyData.html#value:Any", "kind" : "val"}, {"label" : "scoped", "tail" : ": Def.ScopedKey[A]", "member" : "sbt.ScopedKeyData.scoped", "link" : "sbt\/ScopedKeyData.html#scoped:sbt.Def.ScopedKey[A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ScopedKeyData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ScopedKeyData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ScopedKeyData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ScopedKeyData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ScopedKeyData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ScopedKeyData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ScopedKeyData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopedKeyData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopedKeyData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopedKeyData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ScopedKeyData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ScopedKeyData.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ScopedKeyData.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ScopedKeyData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ScopedKeyData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ScopedKeyData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/ScopedKeyData.html", "kind" : "case class"}, {"name" : "sbt.ScopedTaskable", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ScopedTaskable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ScopedTaskable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ScopedTaskable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ScopedTaskable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ScopedTaskable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ScopedTaskable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ScopedTaskable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopedTaskable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopedTaskable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopedTaskable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ScopedTaskable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ScopedTaskable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ScopedTaskable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ScopedTaskable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ScopedTaskable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ScopedTaskable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ScopedTaskable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ScopedTaskable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ScopedTaskable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toTask", "tail" : "(): Def.Initialize[Task[T]]", "member" : "sbt.ScopedTaskable.toTask", "link" : "sbt\/ScopedTaskable.html#toTask:sbt.Def.Initialize[sbt.Task[T]]", "kind" : "abstract def"}, {"label" : "key", "tail" : ": AttributeKey[_]", "member" : "sbt.Scoped.key", "link" : "sbt\/ScopedTaskable.html#key:sbt.internal.util.AttributeKey[_]", "kind" : "abstract val"}, {"label" : "scope", "tail" : "(): Scope", "member" : "sbt.Scoped.scope", "link" : "sbt\/ScopedTaskable.html#scope:sbt.Scope", "kind" : "abstract def"}], "shortDescription" : "A common type for SettingKey and TaskKey so that both can be used as inputs to tasks.", "trait" : "sbt\/ScopedTaskable.html", "kind" : "trait"}, {"name" : "sbt.ScopeFilter", "shortDescription" : "", "object" : "sbt\/ScopeFilter$.html", "members_object" : [{"label" : "Base", "tail" : "", "member" : "sbt.ScopeFilter.Base", "link" : "sbt\/ScopeFilter$.html#Base[In]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "Make", "tail" : "", "member" : "sbt.ScopeFilter.Make", "link" : "sbt\/ScopeFilter$.html#MakeextendsAnyRef", "kind" : "trait"}, {"label" : "TaskKeyAll", "tail" : "", "member" : "sbt.ScopeFilter.TaskKeyAll", "link" : "sbt\/ScopeFilter$.html#TaskKeyAll[T]extendsAnyRef", "kind" : "final class"}, {"label" : "SettingKeyAll", "tail" : "", "member" : "sbt.ScopeFilter.SettingKeyAll", "link" : "sbt\/ScopeFilter$.html#SettingKeyAll[T]extendsAnyRef", "kind" : "final class"}, {"label" : "debug", "tail" : "(delegate: ScopeFilter): ScopeFilter", "member" : "sbt.ScopeFilter.debug", "link" : "sbt\/ScopeFilter$.html#debug(delegate:sbt.ScopeFilter.ScopeFilter):sbt.ScopeFilter.ScopeFilter", "kind" : "def"}, {"label" : "apply", "tail" : "(projects: ProjectFilter, configurations: ConfigurationFilter, tasks: TaskFilter): ScopeFilter", "member" : "sbt.ScopeFilter.apply", "link" : "sbt\/ScopeFilter$.html#apply(projects:sbt.ScopeFilter.ProjectFilter,configurations:sbt.ScopeFilter.ConfigurationFilter,tasks:sbt.ScopeFilter.TaskFilter):sbt.ScopeFilter.ScopeFilter", "kind" : "def"}, {"label" : "TaskFilter", "tail" : "", "member" : "sbt.ScopeFilter.TaskFilter", "link" : "sbt\/ScopeFilter$.html#TaskFilter=sbt.ScopeFilter.AxisFilter[sbt.internal.util.AttributeKey[_]]", "kind" : "type"}, {"label" : "ConfigurationFilter", "tail" : "", "member" : "sbt.ScopeFilter.ConfigurationFilter", "link" : "sbt\/ScopeFilter$.html#ConfigurationFilter=sbt.ScopeFilter.AxisFilter[sbt.ConfigKey]", "kind" : "type"}, {"label" : "ProjectFilter", "tail" : "", "member" : "sbt.ScopeFilter.ProjectFilter", "link" : "sbt\/ScopeFilter$.html#ProjectFilter=sbt.ScopeFilter.AxisFilter[sbt.Reference]", "kind" : "type"}, {"label" : "AxisFilter", "tail" : "", "member" : "sbt.ScopeFilter.AxisFilter", "link" : "sbt\/ScopeFilter$.html#AxisFilter[T]=sbt.ScopeFilter.Base[sbt.ScopeAxis[T]]", "kind" : "type"}, {"label" : "ScopeFilter", "tail" : "", "member" : "sbt.ScopeFilter.ScopeFilter", "link" : "sbt\/ScopeFilter$.html#ScopeFilter=sbt.ScopeFilter.Base[sbt.Scope]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ScopeFilter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ScopeFilter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ScopeFilter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ScopeFilter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ScopeFilter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ScopeFilter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ScopeFilter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopeFilter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopeFilter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopeFilter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ScopeFilter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ScopeFilter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ScopeFilter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ScopeFilter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ScopeFilter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ScopeFilter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ScopeFilter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ScopeFilter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ScopeFilter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.ScopeMask", "shortDescription" : "Specifies the Scope axes that should be used for an operation.", "members_case class" : [{"label" : "concatShow", "tail" : "(p: String, c: String, t: String, sep: String, x: String): String", "member" : "sbt.ScopeMask.concatShow", "link" : "sbt\/ScopeMask.html#concatShow(p:String,c:String,t:String,sep:String,x:String):String", "kind" : "def"}, {"member" : "sbt.ScopeMask#<init>", "error" : "unsupported entity"}, {"label" : "extra", "tail" : ": Boolean", "member" : "sbt.ScopeMask.extra", "link" : "sbt\/ScopeMask.html#extra:Boolean", "kind" : "val"}, {"label" : "task", "tail" : ": Boolean", "member" : "sbt.ScopeMask.task", "link" : "sbt\/ScopeMask.html#task:Boolean", "kind" : "val"}, {"label" : "config", "tail" : ": Boolean", "member" : "sbt.ScopeMask.config", "link" : "sbt\/ScopeMask.html#config:Boolean", "kind" : "val"}, {"label" : "project", "tail" : ": Boolean", "member" : "sbt.ScopeMask.project", "link" : "sbt\/ScopeMask.html#project:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ScopeMask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ScopeMask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ScopeMask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ScopeMask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ScopeMask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ScopeMask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ScopeMask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopeMask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopeMask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScopeMask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ScopeMask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ScopeMask.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ScopeMask.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ScopeMask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ScopeMask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ScopeMask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/ScopeMask.html", "kind" : "case class"}, {"name" : "sbt.ScriptMain", "shortDescription" : "", "members_class" : [{"label" : "run", "tail" : "(configuration: AppConfiguration): MainResult", "member" : "sbt.ScriptMain.run", "link" : "sbt\/ScriptMain.html#run(configuration:xsbti.AppConfiguration):xsbti.MainResult", "kind" : "def"}, {"member" : "sbt.ScriptMain#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ScriptMain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ScriptMain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ScriptMain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ScriptMain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ScriptMain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ScriptMain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ScriptMain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScriptMain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScriptMain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ScriptMain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ScriptMain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ScriptMain.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/ScriptMain.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ScriptMain.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ScriptMain.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/ScriptMain.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ScriptMain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ScriptMain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ScriptMain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/ScriptMain.html", "kind" : "class"}, {"name" : "sbt.Select", "shortDescription" : "Select is a type constructor that is used to wrap type Sto make a scope component, equivalent of Some in Option.", "members_case class" : [{"label" : "isSelect", "tail" : "(): Boolean", "member" : "sbt.Select.isSelect", "link" : "sbt\/Select.html#isSelect:Boolean", "kind" : "def"}, {"member" : "sbt.Select#<init>", "error" : "unsupported entity"}, {"label" : "s", "tail" : ": S", "member" : "sbt.Select.s", "link" : "sbt\/Select.html#s:S", "kind" : "val"}, {"label" : "map", "tail" : "(f: (S) ⇒ T): ScopeAxis[T]", "member" : "sbt.ScopeAxis.map", "link" : "sbt\/Select.html#map[T](f:S=>T):sbt.ScopeAxis[T]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[S]", "member" : "sbt.ScopeAxis.toOption", "link" : "sbt\/Select.html#toOption:Option[S]", "kind" : "def"}, {"label" : "fold", "tail" : "(f: (S) ⇒ T, ifZero: ⇒ T, ifThis: ⇒ T): T", "member" : "sbt.ScopeAxis.fold", "link" : "sbt\/Select.html#fold[T](f:S=>T,ifZero:=>T,ifThis:=>T):T", "kind" : "def"}, {"label" : "foldStrict", "tail" : "(f: (S) ⇒ T, ifZero: T, ifThis: T): T", "member" : "sbt.ScopeAxis.foldStrict", "link" : "sbt\/Select.html#foldStrict[T](f:S=>T,ifZero:T,ifThis:T):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Select.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Select.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Select.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Select.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Select.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Select.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Select.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Select.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Select.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Select.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Select.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Select.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Select.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Select.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Select.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Select.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/Select.html", "kind" : "case class"}, {"name" : "sbt.SelectMainClass", "shortDescription" : "", "object" : "sbt\/SelectMainClass$.html", "members_object" : [{"label" : "apply", "tail" : "(promptIfMultipleChoices: Option[(String) ⇒ Option[String]], mainClasses: Seq[String]): Option[String]", "member" : "sbt.SelectMainClass.apply", "link" : "sbt\/SelectMainClass$.html#apply(promptIfMultipleChoices:Option[String=>Option[String]],mainClasses:Seq[String]):Option[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/SelectMainClass$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/SelectMainClass$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/SelectMainClass$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/SelectMainClass$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/SelectMainClass$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/SelectMainClass$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/SelectMainClass$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SelectMainClass$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SelectMainClass$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SelectMainClass$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/SelectMainClass$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/SelectMainClass$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/SelectMainClass$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/SelectMainClass$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/SelectMainClass$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/SelectMainClass$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/SelectMainClass$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/SelectMainClass$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/SelectMainClass$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.SessionVar", "shortDescription" : "", "object" : "sbt\/SessionVar$.html", "members_object" : [{"label" : "loadAndSet", "tail" : "(key: Def.ScopedKey[Task[T]], state: State, setIfUnset: Boolean)(f: JsonFormat[T]): (State, Option[T])", "member" : "sbt.SessionVar.loadAndSet", "link" : "sbt\/SessionVar$.html#loadAndSet[T](key:sbt.Def.ScopedKey[sbt.Task[T]],state:sbt.State,setIfUnset:Boolean)(implicitf:sjsonnew.JsonFormat[T]):(sbt.State,Option[T])", "kind" : "def"}, {"label" : "load", "tail" : "(key: Def.ScopedKey[Task[T]], state: State)(f: JsonFormat[T]): Option[T]", "member" : "sbt.SessionVar.load", "link" : "sbt\/SessionVar$.html#load[T](key:sbt.Def.ScopedKey[sbt.Task[T]],state:sbt.State)(implicitf:sjsonnew.JsonFormat[T]):Option[T]", "kind" : "def"}, {"label" : "read", "tail" : "(key: Def.ScopedKey[Task[T]], state: State)(f: JsonFormat[T]): Option[T]", "member" : "sbt.SessionVar.read", "link" : "sbt\/SessionVar$.html#read[T](key:sbt.Def.ScopedKey[sbt.Task[T]],state:sbt.State)(implicitf:sjsonnew.JsonFormat[T]):Option[T]", "kind" : "def"}, {"label" : "resolveContext", "tail" : "(key: Def.ScopedKey[Task[T]], context: Scope, state: State): Def.ScopedKey[Task[T]]", "member" : "sbt.SessionVar.resolveContext", "link" : "sbt\/SessionVar$.html#resolveContext[T](key:sbt.Def.ScopedKey[sbt.Task[T]],context:sbt.Scope,state:sbt.State):sbt.Def.ScopedKey[sbt.Task[T]]", "kind" : "def"}, {"label" : "transform", "tail" : "(task: Task[S], f: (State, S) ⇒ State): Task[S]", "member" : "sbt.SessionVar.transform", "link" : "sbt\/SessionVar$.html#transform[S](task:sbt.Task[S],f:(sbt.State,S)=>sbt.State):sbt.Task[S]", "kind" : "def"}, {"label" : "orEmpty", "tail" : "(opt: Option[Map]): Map", "member" : "sbt.SessionVar.orEmpty", "link" : "sbt\/SessionVar$.html#orEmpty(opt:Option[sbt.SessionVar.Map]):sbt.SessionVar.Map", "kind" : "def"}, {"label" : "set", "tail" : "(key: Def.ScopedKey[Task[T]], state: State, value: T): State", "member" : "sbt.SessionVar.set", "link" : "sbt\/SessionVar$.html#set[T](key:sbt.Def.ScopedKey[sbt.Task[T]],state:sbt.State,value:T):sbt.State", "kind" : "def"}, {"label" : "get", "tail" : "(key: Def.ScopedKey[Task[T]], state: State): Option[T]", "member" : "sbt.SessionVar.get", "link" : "sbt\/SessionVar$.html#get[T](key:sbt.Def.ScopedKey[sbt.Task[T]],state:sbt.State):Option[T]", "kind" : "def"}, {"label" : "clear", "tail" : "(s: State): State", "member" : "sbt.SessionVar.clear", "link" : "sbt\/SessionVar$.html#clear(s:sbt.State):sbt.State", "kind" : "def"}, {"label" : "persist", "tail" : "(key: Def.ScopedKey[Task[T]], state: State, value: T)(f: JsonFormat[T]): Unit", "member" : "sbt.SessionVar.persist", "link" : "sbt\/SessionVar$.html#persist[T](key:sbt.Def.ScopedKey[sbt.Task[T]],state:sbt.State,value:T)(implicitf:sjsonnew.JsonFormat[T]):Unit", "kind" : "def"}, {"label" : "persistAndSet", "tail" : "(key: Def.ScopedKey[Task[T]], state: State, value: T)(f: JsonFormat[T]): State", "member" : "sbt.SessionVar.persistAndSet", "link" : "sbt\/SessionVar$.html#persistAndSet[T](key:sbt.Def.ScopedKey[sbt.Task[T]],state:sbt.State,value:T)(implicitf:sjsonnew.JsonFormat[T]):sbt.State", "kind" : "def"}, {"label" : "emptyMap", "tail" : "(): Map", "member" : "sbt.SessionVar.emptyMap", "link" : "sbt\/SessionVar$.html#emptyMap:sbt.SessionVar.Map", "kind" : "def"}, {"label" : "Map", "tail" : "", "member" : "sbt.SessionVar.Map", "link" : "sbt\/SessionVar$.html#MapextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "Key", "tail" : "", "member" : "sbt.SessionVar.Key", "link" : "sbt\/SessionVar$.html#Key[T]extendsProductwithSerializable", "kind" : "final case class"}, {"label" : "DefaultDataID", "tail" : ": String", "member" : "sbt.SessionVar.DefaultDataID", "link" : "sbt\/SessionVar$.html#DefaultDataID:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/SessionVar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/SessionVar$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/SessionVar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/SessionVar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/SessionVar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/SessionVar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/SessionVar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SessionVar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SessionVar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SessionVar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/SessionVar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/SessionVar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/SessionVar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/SessionVar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/SessionVar$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/SessionVar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/SessionVar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/SessionVar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/SessionVar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.SettingKey", "shortDescription" : "Identifies a setting.", "object" : "sbt\/SettingKey$.html", "members_class" : [{"label" : "withRank", "tail" : "(rank: Int): SettingKey[T]", "member" : "sbt.SettingKey.withRank", "link" : "sbt\/SettingKey.html#withRank(rank:Int):sbt.SettingKey[T]", "kind" : "final def"}, {"label" : "make", "tail" : "(other: Def.Initialize[S], source: SourcePosition)(f: (T, S) ⇒ T): Def.Setting[T]", "member" : "sbt.SettingKey.make", "link" : "sbt\/SettingKey.html#make[S](other:sbt.Def.Initialize[S],source:sbt.internal.util.SourcePosition)(f:(T,S)=>T):sbt.Def.Setting[T]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (T) ⇒ T, source: SourcePosition): Def.Setting[T]", "member" : "sbt.SettingKey.transform", "link" : "sbt\/SettingKey.html#transform(f:T=>T,source:sbt.internal.util.SourcePosition):sbt.Def.Setting[T]", "kind" : "final def"}, {"label" : "removeN", "tail" : "(vs: Def.Initialize[V], source: SourcePosition)(r: Values[T, V]): Def.Setting[T]", "member" : "sbt.SettingKey.removeN", "link" : "sbt\/SettingKey.html#removeN[V](vs:sbt.Def.Initialize[V],source:sbt.internal.util.SourcePosition)(implicitr:sbt.Remove.Values[T,V]):sbt.Def.Setting[T]", "kind" : "final def"}, {"label" : "remove1", "tail" : "(v: Def.Initialize[V], source: SourcePosition)(r: Remove.Value[T, V]): Def.Setting[T]", "member" : "sbt.SettingKey.remove1", "link" : "sbt\/SettingKey.html#remove1[V](v:sbt.Def.Initialize[V],source:sbt.internal.util.SourcePosition)(implicitr:sbt.Remove.Value[T,V]):sbt.Def.Setting[T]", "kind" : "final def"}, {"label" : "appendN", "tail" : "(vs: Def.Initialize[V], source: SourcePosition)(a: Values[T, V]): Def.Setting[T]", "member" : "sbt.SettingKey.appendN", "link" : "sbt\/SettingKey.html#appendN[V](vs:sbt.Def.Initialize[V],source:sbt.internal.util.SourcePosition)(implicita:sbt.Append.Values[T,V]):sbt.Def.Setting[T]", "kind" : "final def"}, {"label" : "append1", "tail" : "(v: Def.Initialize[V], source: SourcePosition)(a: Append.Value[T, V]): Def.Setting[T]", "member" : "sbt.SettingKey.append1", "link" : "sbt\/SettingKey.html#append1[V](v:sbt.Def.Initialize[V],source:sbt.internal.util.SourcePosition)(implicita:sbt.Append.Value[T,V]):sbt.Def.Setting[T]", "kind" : "final def"}, {"label" : "~=", "tail" : "(f: (T) ⇒ T): Def.Setting[T]", "member" : "sbt.SettingKey.~=", "link" : "sbt\/SettingKey.html#~=(f:T=>T):sbt.Def.Setting[T]", "kind" : "final macro def"}, {"label" : "--=", "tail" : "(vs: U)(r: Values[T, U]): Def.Setting[T]", "member" : "sbt.SettingKey.--=", "link" : "sbt\/SettingKey.html#--=[U](vs:U)(implicitr:sbt.Remove.Values[T,U]):sbt.Def.Setting[T]", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(v: U)(r: Remove.Value[T, U]): Def.Setting[T]", "member" : "sbt.SettingKey.-=", "link" : "sbt\/SettingKey.html#-=[U](v:U)(implicitr:sbt.Remove.Value[T,U]):sbt.Def.Setting[T]", "kind" : "final macro def"}, {"label" : "<++=", "tail" : "(vs: Def.Initialize[V])(a: Values[T, V]): Def.Setting[T]", "member" : "sbt.SettingKey.<++=", "link" : "sbt\/SettingKey.html#<++=[V](vs:sbt.Def.Initialize[V])(implicita:sbt.Append.Values[T,V]):sbt.Def.Setting[T]", "kind" : "final macro def"}, {"label" : "<+=", "tail" : "(v: Def.Initialize[V])(a: Append.Value[T, V]): Def.Setting[T]", "member" : "sbt.SettingKey.<+=", "link" : "sbt\/SettingKey.html#<+=[V](v:sbt.Def.Initialize[V])(implicita:sbt.Append.Value[T,V]):sbt.Def.Setting[T]", "kind" : "final macro def"}, {"label" : "++=", "tail" : "(vs: U)(a: Values[T, U]): Def.Setting[T]", "member" : "sbt.SettingKey.++=", "link" : "sbt\/SettingKey.html#++=[U](vs:U)(implicita:sbt.Append.Values[T,U]):sbt.Def.Setting[T]", "kind" : "final macro def"}, {"label" : "+=", "tail" : "(v: U)(a: Append.Value[T, U]): Def.Setting[T]", "member" : "sbt.SettingKey.+=", "link" : "sbt\/SettingKey.html#+=[U](v:U)(implicita:sbt.Append.Value[T,U]):sbt.Def.Setting[T]", "kind" : "final macro def"}, {"label" : ":=", "tail" : "(v: T): Def.Setting[T]", "member" : "sbt.SettingKey.:=", "link" : "sbt\/SettingKey.html#:=(v:T):sbt.Def.Setting[T]", "kind" : "final macro def"}, {"label" : "in", "tail" : "(scope: Scope): SettingKey[T]", "member" : "sbt.SettingKey.in", "link" : "sbt\/SettingKey.html#in(scope:sbt.Scope):sbt.SettingKey[T]", "kind" : "final def"}, {"label" : "scopedKey", "tail" : "(): Def.ScopedKey[T]", "member" : "sbt.SettingKey.scopedKey", "link" : "sbt\/SettingKey.html#scopedKey:sbt.Def.ScopedKey[T]", "kind" : "final def"}, {"label" : "toTask", "tail" : "(): Def.Initialize[Task[T]]", "member" : "sbt.SettingKey.toTask", "link" : "sbt\/SettingKey.html#toTask:sbt.Def.Initialize[sbt.Task[T]]", "kind" : "final def"}, {"label" : "??", "tail" : "(or: ⇒ T): Def.Initialize[T]", "member" : "sbt.Scoped.DefinableSetting.??", "link" : "sbt\/SettingKey.html#??[T>:S](or:=>T):sbt.Def.Initialize[T]", "kind" : "final def"}, {"label" : "or", "tail" : "(i: Def.Initialize[T]): Def.Initialize[T]", "member" : "sbt.Scoped.DefinableSetting.or", "link" : "sbt\/SettingKey.html#or[T>:S](i:sbt.Def.Initialize[T]):sbt.Def.Initialize[T]", "kind" : "final def"}, {"label" : "?", "tail" : "(): Def.Initialize[Option[T]]", "member" : "sbt.Scoped.DefinableSetting.?", "link" : "sbt\/SettingKey.html#?:sbt.Def.Initialize[Option[S]]", "kind" : "final def"}, {"label" : "get", "tail" : "(settings: Settings[Scope]): Option[T]", "member" : "sbt.Scoped.DefinableSetting.get", "link" : "sbt\/SettingKey.html#get(settings:sbt.internal.util.Settings[sbt.Scope]):Option[S]", "kind" : "final def"}, {"label" : "set", "tail" : "(app: Def.Initialize[T], source: SourcePosition): Def.Setting[T]", "member" : "sbt.Scoped.DefinableSetting.set", "link" : "sbt\/SettingKey.html#set(app:sbt.Def.Initialize[S],source:sbt.internal.util.SourcePosition):sbt.Def.Setting[S]", "kind" : "final def"}, {"label" : "<<=", "tail" : "(app: Def.Initialize[T]): Def.Setting[T]", "member" : "sbt.Scoped.DefinableSetting.<<=", "link" : "sbt\/SettingKey.html#<<=(app:sbt.Def.Initialize[S]):sbt.Def.Setting[S]", "kind" : "final macro def"}, {"label" : "in", "tail" : "(p: ScopeAxis[Reference], c: ScopeAxis[ConfigKey], t: ScopeAxis[AttributeKey[_]]): SettingKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/SettingKey.html#in(p:sbt.ScopeAxis[sbt.Reference],c:sbt.ScopeAxis[sbt.ConfigKey],t:sbt.ScopeAxis[sbt.internal.util.AttributeKey[_]]):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(p: Reference, c: ConfigKey, t: Scoped): SettingKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/SettingKey.html#in(p:sbt.Reference,c:sbt.ConfigKey,t:sbt.Scoped):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(p: Reference, t: Scoped): SettingKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/SettingKey.html#in(p:sbt.Reference,t:sbt.Scoped):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(p: Reference, c: ConfigKey): SettingKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/SettingKey.html#in(p:sbt.Reference,c:sbt.ConfigKey):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(c: ConfigKey, t: Scoped): SettingKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/SettingKey.html#in(c:sbt.ConfigKey,t:sbt.Scoped):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(c: ConfigKey): SettingKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/SettingKey.html#in(c:sbt.ConfigKey):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(t: Scoped): SettingKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/SettingKey.html#in(t:sbt.Scoped):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(p: Reference): SettingKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/SettingKey.html#in(p:sbt.Reference):ResultType", "kind" : "def"}, {"label" : "transform", "tail" : ": (T) ⇒ T", "member" : "sbt.internal.util.Init.KeyedInitialize.transform", "link" : "sbt\/SettingKey.html#transform:T=>T", "kind" : "final val"}, {"label" : "mapConstant", "tail" : "(g: Def.MapConstant): Def.Initialize[T]", "member" : "sbt.internal.util.Init.Keyed.mapConstant", "link" : "sbt\/SettingKey.html#mapConstant(g:Init.this.MapConstant):Init.this.Initialize[T]", "kind" : "final def"}, {"label" : "mapReferenced", "tail" : "(g: Def.MapScoped): Def.Initialize[T]", "member" : "sbt.internal.util.Init.Keyed.mapReferenced", "link" : "sbt\/SettingKey.html#mapReferenced(g:Init.this.MapScoped):Init.this.Initialize[T]", "kind" : "final def"}, {"label" : "evaluate", "tail" : "(ss: Settings[Scope]): T", "member" : "sbt.internal.util.Init.Keyed.evaluate", "link" : "sbt\/SettingKey.html#evaluate(ss:sbt.internal.util.Settings[Scope]):T", "kind" : "final def"}, {"label" : "apply", "tail" : "(g: (T) ⇒ Z): Def.Initialize[Z]", "member" : "sbt.internal.util.Init.Keyed.apply", "link" : "sbt\/SettingKey.html#apply[Z](g:T=>Z):Init.this.Initialize[Z]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): List[Def.ScopedKey[T]]", "member" : "sbt.internal.util.Init.Keyed.dependencies", "link" : "sbt\/SettingKey.html#dependencies:List[Init.this.ScopedKey[S]]", "kind" : "final def"}, {"label" : "zipWith", "tail" : "(o: Def.Initialize[S])(f: (T, S) ⇒ U): Def.Initialize[U]", "member" : "sbt.internal.util.Init.Initialize.zipWith", "link" : "sbt\/SettingKey.html#zipWith[S,U](o:Init.this.Initialize[S])(f:(T,S)=>U):Init.this.Initialize[U]", "kind" : "def"}, {"label" : "zip", "tail" : "(o: Def.Initialize[S]): Def.Initialize[(T, S)]", "member" : "sbt.internal.util.Init.Initialize.zip", "link" : "sbt\/SettingKey.html#zip[S](o:Init.this.Initialize[S]):Init.this.Initialize[(T,S)]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/SettingKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/SettingKey.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/SettingKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/SettingKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/SettingKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/SettingKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/SettingKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SettingKey.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SettingKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SettingKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/SettingKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/SettingKey.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/SettingKey.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/SettingKey.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/SettingKey.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/SettingKey.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/SettingKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/SettingKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/SettingKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "key", "tail" : ": AttributeKey[T]", "member" : "sbt.SettingKey.key", "link" : "sbt\/SettingKey.html#key:sbt.internal.util.AttributeKey[T]", "kind" : "abstract val"}, {"label" : "scope", "tail" : "(): Scope", "member" : "sbt.Scoped.scope", "link" : "sbt\/SettingKey.html#scope:sbt.Scope", "kind" : "abstract def"}], "members_object" : [{"label" : "local", "tail" : "(arg0: Manifest[T], arg1: OptJsonWriter[T]): SettingKey[T]", "member" : "sbt.SettingKey.local", "link" : "sbt\/SettingKey$.html#local[T](implicitevidence$14:Manifest[T],implicitevidence$15:sbt.util.OptJsonWriter[T]):sbt.SettingKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(akey: AttributeKey[T]): SettingKey[T]", "member" : "sbt.SettingKey.apply", "link" : "sbt\/SettingKey$.html#apply[T](akey:sbt.internal.util.AttributeKey[T]):sbt.SettingKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(label: String, description: String, rank: Int, extend1: Scoped, extendN: Scoped*)(arg0: Manifest[T], arg1: OptJsonWriter[T]): SettingKey[T]", "member" : "sbt.SettingKey.apply", "link" : "sbt\/SettingKey$.html#apply[T](label:String,description:String,rank:Int,extend1:sbt.Scoped,extendN:sbt.Scoped*)(implicitevidence$12:Manifest[T],implicitevidence$13:sbt.util.OptJsonWriter[T]):sbt.SettingKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(label: String, description: String, extend1: Scoped, extendN: Scoped*)(arg0: Manifest[T], arg1: OptJsonWriter[T]): SettingKey[T]", "member" : "sbt.SettingKey.apply", "link" : "sbt\/SettingKey$.html#apply[T](label:String,description:String,extend1:sbt.Scoped,extendN:sbt.Scoped*)(implicitevidence$10:Manifest[T],implicitevidence$11:sbt.util.OptJsonWriter[T]):sbt.SettingKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(label: String, description: String, rank: Int)(arg0: Manifest[T], arg1: OptJsonWriter[T]): SettingKey[T]", "member" : "sbt.SettingKey.apply", "link" : "sbt\/SettingKey$.html#apply[T](label:String,description:String,rank:Int)(implicitevidence$8:Manifest[T],implicitevidence$9:sbt.util.OptJsonWriter[T]):sbt.SettingKey[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/SettingKey$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/SettingKey$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/SettingKey$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/SettingKey$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/SettingKey$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/SettingKey$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/SettingKey$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SettingKey$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SettingKey$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SettingKey$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/SettingKey$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/SettingKey$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/SettingKey$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/SettingKey$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/SettingKey$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/SettingKey$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/SettingKey$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/SettingKey$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/SettingKey$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/SettingKey.html", "kind" : "class"}, {"name" : "sbt.StandardMain", "shortDescription" : "", "object" : "sbt\/StandardMain$.html", "members_object" : [{"label" : "initialState", "tail" : "(configuration: AppConfiguration, initialDefinitions: Seq[Command], preCommands: Seq[String]): State", "member" : "sbt.StandardMain.initialState", "link" : "sbt\/StandardMain$.html#initialState(configuration:xsbti.AppConfiguration,initialDefinitions:Seq[sbt.Command],preCommands:Seq[String]):sbt.State", "kind" : "def"}, {"label" : "initialGlobalLogging", "tail" : "(): GlobalLogging", "member" : "sbt.StandardMain.initialGlobalLogging", "link" : "sbt\/StandardMain$.html#initialGlobalLogging:sbt.internal.util.GlobalLogging", "kind" : "def"}, {"label" : "console", "tail" : ": ConsoleOut", "member" : "sbt.StandardMain.console", "link" : "sbt\/StandardMain$.html#console:sbt.internal.util.ConsoleOut", "kind" : "val"}, {"label" : "runManaged", "tail" : "(s: State): MainResult", "member" : "sbt.StandardMain.runManaged", "link" : "sbt\/StandardMain$.html#runManaged(s:sbt.State):xsbti.MainResult", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/StandardMain$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/StandardMain$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/StandardMain$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/StandardMain$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/StandardMain$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/StandardMain$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/StandardMain$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/StandardMain$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/StandardMain$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/StandardMain$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/StandardMain$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/StandardMain$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/StandardMain$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/StandardMain$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/StandardMain$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/StandardMain$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/StandardMain$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/StandardMain$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/StandardMain$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.State", "shortDescription" : "Data structure representing all command execution information.", "object" : "sbt\/State$.html", "members_object" : [{"label" : "stateOps", "tail" : "(s: State): StateOps", "member" : "sbt.State.stateOps", "link" : "sbt\/State$.html#stateOps(s:sbt.State):sbt.StateOps", "kind" : "implicit def"}, {"label" : "defaultReload", "tail" : "(state: State): Reboot", "member" : "sbt.State.defaultReload", "link" : "sbt\/State$.html#defaultReload(state:sbt.State):sbt.Reboot", "kind" : "def"}, {"label" : "newHistory", "tail" : "(): History", "member" : "sbt.State.newHistory", "link" : "sbt\/State$.html#newHistory:sbt.State.History", "kind" : "def"}, {"label" : "History", "tail" : "", "member" : "sbt.State.History", "link" : "sbt\/State$.html#HistoryextendsAnyRef", "kind" : "final class"}, {"label" : "KeepLastLog", "tail" : "", "member" : "sbt.State.KeepLastLog", "link" : "sbt\/State$.html#KeepLastLog", "kind" : "object"}, {"label" : "ClearGlobalLog", "tail" : "", "member" : "sbt.State.ClearGlobalLog", "link" : "sbt\/State$.html#ClearGlobalLog", "kind" : "object"}, {"label" : "Return", "tail" : "", "member" : "sbt.State.Return", "link" : "sbt\/State$.html#ReturnextendsState.Next", "kind" : "final class"}, {"label" : "Continue", "tail" : "", "member" : "sbt.State.Continue", "link" : "sbt\/State$.html#Continue", "kind" : "object"}, {"label" : "Next", "tail" : "", "member" : "sbt.State.Next", "link" : "sbt\/State$.html#NextextendsAnyRef", "kind" : "sealed trait"}, {"label" : "FailureWall", "tail" : ": String", "member" : "sbt.State.FailureWall", "link" : "sbt\/State$.html#FailureWall:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/State$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/State$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/State$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/State$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/State$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/State$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/State$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/State$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/State$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/State$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/State$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/State$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/State$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/State$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/State$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/State$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/State$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/State$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/State$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "source", "tail" : "(): Option[CommandSource]", "member" : "sbt.State.source", "link" : "sbt\/State.html#source:Option[sbt.CommandSource]", "kind" : "def"}, {"label" : "combinedParser", "tail" : ": Parser[() ⇒ State]", "member" : "sbt.State.combinedParser", "link" : "sbt\/State.html#combinedParser:sbt.internal.util.complete.Parser[()=>sbt.State]", "kind" : "lazy val"}, {"member" : "sbt.State#<init>", "error" : "unsupported entity"}, {"label" : "next", "tail" : ": Next", "member" : "sbt.State.next", "link" : "sbt\/State.html#next:sbt.State.Next", "kind" : "val"}, {"label" : "currentCommand", "tail" : ": Option[Exec]", "member" : "sbt.State.currentCommand", "link" : "sbt\/State.html#currentCommand:Option[sbt.Exec]", "kind" : "val"}, {"label" : "globalLogging", "tail" : ": GlobalLogging", "member" : "sbt.State.globalLogging", "link" : "sbt\/State.html#globalLogging:sbt.internal.util.GlobalLogging", "kind" : "val"}, {"label" : "attributes", "tail" : ": AttributeMap", "member" : "sbt.State.attributes", "link" : "sbt\/State.html#attributes:sbt.internal.util.AttributeMap", "kind" : "val"}, {"label" : "history", "tail" : ": History", "member" : "sbt.State.history", "link" : "sbt\/State.html#history:sbt.State.History", "kind" : "val"}, {"label" : "remainingCommands", "tail" : ": List[Exec]", "member" : "sbt.State.remainingCommands", "link" : "sbt\/State.html#remainingCommands:List[sbt.Exec]", "kind" : "val"}, {"label" : "onFailure", "tail" : ": Option[Exec]", "member" : "sbt.State.onFailure", "link" : "sbt\/State.html#onFailure:Option[sbt.Exec]", "kind" : "val"}, {"label" : "exitHooks", "tail" : ": Set[ExitHook]", "member" : "sbt.State.exitHooks", "link" : "sbt\/State.html#exitHooks:Set[sbt.internal.util.ExitHook]", "kind" : "val"}, {"label" : "definedCommands", "tail" : ": Seq[Command]", "member" : "sbt.State.definedCommands", "link" : "sbt\/State.html#definedCommands:Seq[sbt.Command]", "kind" : "val"}, {"label" : "configuration", "tail" : ": AppConfiguration", "member" : "sbt.State.configuration", "link" : "sbt\/State.html#configuration:xsbti.AppConfiguration", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.Identity.toString", "link" : "sbt\/State.html#toString():String", "kind" : "final def"}, {"label" : "equals", "tail" : "(a: Any): Boolean", "member" : "sbt.Identity.equals", "link" : "sbt\/State.html#equals(a:Any):Boolean", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.Identity.hashCode", "link" : "sbt\/State.html#hashCode():Int", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/State.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/State.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/State.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/State.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/State.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/State.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/State.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/State.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/State.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/State.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/State.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/State.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/State.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/State.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/State.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/State.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/State.html", "kind" : "case class"}, {"name" : "sbt.StateOps", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/StateOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/StateOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/StateOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/StateOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/StateOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/StateOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/StateOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/StateOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/StateOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/StateOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/StateOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/StateOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/StateOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/StateOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/StateOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/StateOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/StateOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/StateOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/StateOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "initializeClassLoaderCache", "tail" : "(): State", "member" : "sbt.StateOps.initializeClassLoaderCache", "link" : "sbt\/StateOps.html#initializeClassLoaderCache:sbt.State", "kind" : "abstract def"}, {"label" : "classLoaderCache", "tail" : "(): ClassLoaderCache", "member" : "sbt.StateOps.classLoaderCache", "link" : "sbt\/StateOps.html#classLoaderCache:sbt.internal.inc.classpath.ClassLoaderCache", "kind" : "abstract def"}, {"label" : "setInteractive", "tail" : "(flag: Boolean): State", "member" : "sbt.StateOps.setInteractive", "link" : "sbt\/StateOps.html#setInteractive(flag:Boolean):sbt.State", "kind" : "abstract def"}, {"label" : "interactive", "tail" : "(): Boolean", "member" : "sbt.StateOps.interactive", "link" : "sbt\/StateOps.html#interactive:Boolean", "kind" : "abstract def"}, {"label" : "addExitHook", "tail" : "(f: ⇒ Unit): State", "member" : "sbt.StateOps.addExitHook", "link" : "sbt\/StateOps.html#addExitHook(f:=>Unit):sbt.State", "kind" : "abstract def"}, {"label" : "runExitHooks", "tail" : "(): State", "member" : "sbt.StateOps.runExitHooks", "link" : "sbt\/StateOps.html#runExitHooks():sbt.State", "kind" : "abstract def"}, {"label" : "locked", "tail" : "(file: File)(t: ⇒ T): T", "member" : "sbt.StateOps.locked", "link" : "sbt\/StateOps.html#locked[T](file:java.io.File)(t:=>T):T", "kind" : "abstract def"}, {"label" : "log", "tail" : "(): Logger", "member" : "sbt.StateOps.log", "link" : "sbt\/StateOps.html#log:sbt.util.Logger", "kind" : "abstract def"}, {"label" : "baseDir", "tail" : "(): File", "member" : "sbt.StateOps.baseDir", "link" : "sbt\/StateOps.html#baseDir:java.io.File", "kind" : "abstract def"}, {"label" : "has", "tail" : "(key: AttributeKey[_]): Boolean", "member" : "sbt.StateOps.has", "link" : "sbt\/StateOps.html#has(key:sbt.internal.util.AttributeKey[_]):Boolean", "kind" : "abstract def"}, {"label" : "update", "tail" : "(key: AttributeKey[T])(f: (Option[T]) ⇒ T): State", "member" : "sbt.StateOps.update", "link" : "sbt\/StateOps.html#update[T](key:sbt.internal.util.AttributeKey[T])(f:Option[T]=>T):sbt.State", "kind" : "abstract def"}, {"label" : "remove", "tail" : "(key: AttributeKey[_]): State", "member" : "sbt.StateOps.remove", "link" : "sbt\/StateOps.html#remove(key:sbt.internal.util.AttributeKey[_]):sbt.State", "kind" : "abstract def"}, {"label" : "put", "tail" : "(key: AttributeKey[T], value: T): State", "member" : "sbt.StateOps.put", "link" : "sbt\/StateOps.html#put[T](key:sbt.internal.util.AttributeKey[T],value:T):sbt.State", "kind" : "abstract def"}, {"label" : "get", "tail" : "(key: AttributeKey[T]): Option[T]", "member" : "sbt.StateOps.get", "link" : "sbt\/StateOps.html#get[T](key:sbt.internal.util.AttributeKey[T]):Option[T]", "kind" : "abstract def"}, {"label" : "+", "tail" : "(newCommand: Command): State", "member" : "sbt.StateOps.+", "link" : "sbt\/StateOps.html#+(newCommand:sbt.Command):sbt.State", "kind" : "abstract def"}, {"label" : "++", "tail" : "(newCommands: Seq[Command]): State", "member" : "sbt.StateOps.++", "link" : "sbt\/StateOps.html#++(newCommands:Seq[sbt.Command]):sbt.State", "kind" : "abstract def"}, {"label" : "handleError", "tail" : "(t: Throwable): State", "member" : "sbt.StateOps.handleError", "link" : "sbt\/StateOps.html#handleError(t:Throwable):sbt.State", "kind" : "abstract def"}, {"label" : "fail", "tail" : "(): State", "member" : "sbt.StateOps.fail", "link" : "sbt\/StateOps.html#fail:sbt.State", "kind" : "abstract def"}, {"label" : "exit", "tail" : "(ok: Boolean): State", "member" : "sbt.StateOps.exit", "link" : "sbt\/StateOps.html#exit(ok:Boolean):sbt.State", "kind" : "abstract def"}, {"label" : "keepLastLog", "tail" : "(): State", "member" : "sbt.StateOps.keepLastLog", "link" : "sbt\/StateOps.html#keepLastLog:sbt.State", "kind" : "abstract def"}, {"label" : "clearGlobalLog", "tail" : "(): State", "member" : "sbt.StateOps.clearGlobalLog", "link" : "sbt\/StateOps.html#clearGlobalLog:sbt.State", "kind" : "abstract def"}, {"label" : "reload", "tail" : "(): State", "member" : "sbt.StateOps.reload", "link" : "sbt\/StateOps.html#reload:sbt.State", "kind" : "abstract def"}, {"label" : "setNext", "tail" : "(n: Next): State", "member" : "sbt.StateOps.setNext", "link" : "sbt\/StateOps.html#setNext(n:sbt.State.Next):sbt.State", "kind" : "abstract def"}, {"label" : "reboot", "tail" : "(full: Boolean): State", "member" : "sbt.StateOps.reboot", "link" : "sbt\/StateOps.html#reboot(full:Boolean):sbt.State", "kind" : "abstract def"}, {"label" : "continue", "tail" : "(): State", "member" : "sbt.StateOps.continue", "link" : "sbt\/StateOps.html#continue:sbt.State", "kind" : "abstract def"}, {"label" : "+:", "tail" : "(command: Exec): State", "member" : "sbt.StateOps.+:", "link" : "sbt\/StateOps.html#+:(command:sbt.Exec):sbt.State", "kind" : "abstract def"}, {"label" : "::", "tail" : "(command: String): State", "member" : "sbt.StateOps.::", "link" : "sbt\/StateOps.html#::(command:String):sbt.State", "kind" : "abstract def"}, {"label" : "++:", "tail" : "(newCommands: List[Exec]): State", "member" : "sbt.StateOps.++:", "link" : "sbt\/StateOps.html#++:(newCommands:List[sbt.Exec]):sbt.State", "kind" : "abstract def"}, {"label" : ":::", "tail" : "(newCommands: List[String]): State", "member" : "sbt.StateOps.:::", "link" : "sbt\/StateOps.html#:::(newCommands:List[String]):sbt.State", "kind" : "abstract def"}, {"label" : "process", "tail" : "(f: (Exec, State) ⇒ State): State", "member" : "sbt.StateOps.process", "link" : "sbt\/StateOps.html#process(f:(sbt.Exec,sbt.State)=>sbt.State):sbt.State", "kind" : "abstract def"}], "shortDescription" : "Convenience methods for State transformations and operations.", "trait" : "sbt\/StateOps.html", "kind" : "trait"}, {"name" : "sbt.SuiteResult", "shortDescription" : "Provides the overall result of a group of tests (a suite) and test counts for each result type.", "object" : "sbt\/SuiteResult$.html", "members_class" : [{"label" : "+", "tail" : "(other: SuiteResult): SuiteResult", "member" : "sbt.SuiteResult.+", "link" : "sbt\/SuiteResult.html#+(other:sbt.SuiteResult):sbt.SuiteResult", "kind" : "def"}, {"member" : "sbt.SuiteResult#<init>", "error" : "unsupported entity"}, {"label" : "pendingCount", "tail" : ": Int", "member" : "sbt.SuiteResult.pendingCount", "link" : "sbt\/SuiteResult.html#pendingCount:Int", "kind" : "val"}, {"label" : "canceledCount", "tail" : ": Int", "member" : "sbt.SuiteResult.canceledCount", "link" : "sbt\/SuiteResult.html#canceledCount:Int", "kind" : "val"}, {"label" : "ignoredCount", "tail" : ": Int", "member" : "sbt.SuiteResult.ignoredCount", "link" : "sbt\/SuiteResult.html#ignoredCount:Int", "kind" : "val"}, {"label" : "skippedCount", "tail" : ": Int", "member" : "sbt.SuiteResult.skippedCount", "link" : "sbt\/SuiteResult.html#skippedCount:Int", "kind" : "val"}, {"label" : "errorCount", "tail" : ": Int", "member" : "sbt.SuiteResult.errorCount", "link" : "sbt\/SuiteResult.html#errorCount:Int", "kind" : "val"}, {"label" : "failureCount", "tail" : ": Int", "member" : "sbt.SuiteResult.failureCount", "link" : "sbt\/SuiteResult.html#failureCount:Int", "kind" : "val"}, {"label" : "passedCount", "tail" : ": Int", "member" : "sbt.SuiteResult.passedCount", "link" : "sbt\/SuiteResult.html#passedCount:Int", "kind" : "val"}, {"label" : "result", "tail" : ": TestResult", "member" : "sbt.SuiteResult.result", "link" : "sbt\/SuiteResult.html#result:sbt.protocol.testing.TestResult", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/SuiteResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/SuiteResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/SuiteResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/SuiteResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/SuiteResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/SuiteResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/SuiteResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SuiteResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SuiteResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SuiteResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/SuiteResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/SuiteResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/SuiteResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/SuiteResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/SuiteResult.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/SuiteResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/SuiteResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/SuiteResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/SuiteResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Empty", "tail" : ": SuiteResult", "member" : "sbt.SuiteResult.Empty", "link" : "sbt\/SuiteResult$.html#Empty:sbt.SuiteResult", "kind" : "val"}, {"label" : "Error", "tail" : ": SuiteResult", "member" : "sbt.SuiteResult.Error", "link" : "sbt\/SuiteResult$.html#Error:sbt.SuiteResult", "kind" : "val"}, {"label" : "apply", "tail" : "(events: Seq[Event]): SuiteResult", "member" : "sbt.SuiteResult.apply", "link" : "sbt\/SuiteResult$.html#apply(events:Seq[sbt.testing.Event]):sbt.SuiteResult", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/SuiteResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/SuiteResult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/SuiteResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/SuiteResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/SuiteResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/SuiteResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/SuiteResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SuiteResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SuiteResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/SuiteResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/SuiteResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/SuiteResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/SuiteResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/SuiteResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/SuiteResult$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/SuiteResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/SuiteResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/SuiteResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/SuiteResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/SuiteResult.html", "kind" : "class"}, {"name" : "sbt.Sync", "shortDescription" : "Maintains a set of mappings so that they are uptodate.", "object" : "sbt\/Sync$.html", "members_object" : [{"label" : "readInfo", "tail" : "(store: CacheStore)(infoFormat: JsonFormat[F]): RelationInfo[F]", "member" : "sbt.Sync.readInfo", "link" : "sbt\/Sync$.html#readInfo[F<:sbt.util.FileInfo](store:sbt.util.CacheStore)(implicitinfoFormat:sjsonnew.JsonFormat[F]):sbt.Sync.RelationInfo[F]", "kind" : "def"}, {"label" : "RelationInfo", "tail" : "", "member" : "sbt.Sync.RelationInfo", "link" : "sbt\/Sync$.html#RelationInfo[F]=(sbt.internal.util.Relation[java.io.File,java.io.File],Map[java.io.File,F])", "kind" : "type"}, {"label" : "writeInfo", "tail" : "(store: CacheStore, relation: Relation[File, File], info: Map[File, F])(infoFormat: JsonFormat[F]): Unit", "member" : "sbt.Sync.writeInfo", "link" : "sbt\/Sync$.html#writeInfo[F<:sbt.util.FileInfo](store:sbt.util.CacheStore,relation:sbt.internal.util.Relation[java.io.File,java.io.File],info:Map[java.io.File,F])(implicitinfoFormat:sjsonnew.JsonFormat[F]):Unit", "kind" : "def"}, {"label" : "relationFormat", "tail" : "(af: JsonFormat[Map[A, Set[B]]], bf: JsonFormat[Map[B, Set[A]]]): JsonFormat[Relation[A, B]]", "member" : "sbt.Sync.relationFormat", "link" : "sbt\/Sync$.html#relationFormat[A,B](implicitaf:sjsonnew.JsonFormat[Map[A,Set[B]]],implicitbf:sjsonnew.JsonFormat[Map[B,Set[A]]]):sjsonnew.JsonFormat[sbt.internal.util.Relation[A,B]]", "kind" : "implicit def"}, {"label" : "noDuplicateTargets", "tail" : "(relation: Relation[File, File]): Unit", "member" : "sbt.Sync.noDuplicateTargets", "link" : "sbt\/Sync$.html#noDuplicateTargets(relation:sbt.internal.util.Relation[java.io.File,java.io.File]):Unit", "kind" : "def"}, {"label" : "copy", "tail" : "(source: File, target: File): Unit", "member" : "sbt.Sync.copy", "link" : "sbt\/Sync$.html#copy(source:java.io.File,target:java.io.File):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(store: CacheStore, inStyle: Style, outStyle: Style): (Traversable[(File, File)]) ⇒ Relation[File, File]", "member" : "sbt.Sync.apply", "link" : "sbt\/Sync$.html#apply(store:sbt.util.CacheStore,inStyle:sbt.util.FileInfo.Style,outStyle:sbt.util.FileInfo.Style):Traversable[(java.io.File,java.io.File)]=>sbt.internal.util.Relation[java.io.File,java.io.File]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Sync$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Sync$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Sync$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Sync$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Sync$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Sync$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Sync$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Sync$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Sync$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Sync$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Sync$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Sync$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Sync$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Sync$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Sync$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Sync$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Sync$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Sync$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Sync$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.Tags", "shortDescription" : "", "object" : "sbt\/Tags$.html", "members_object" : [{"label" : "exclusiveGroups", "tail" : "(exclusiveTags: Tag*): Rule", "member" : "sbt.Tags.exclusiveGroups", "link" : "sbt\/Tags$.html#exclusiveGroups(exclusiveTags:sbt.Tags.Tag*):sbt.Tags.Rule", "kind" : "def"}, {"label" : "exclusiveGroup", "tail" : "(exclusiveTag: Tag): Rule", "member" : "sbt.Tags.exclusiveGroup", "link" : "sbt\/Tags$.html#exclusiveGroup(exclusiveTag:sbt.Tags.Tag):sbt.Tags.Rule", "kind" : "def"}, {"label" : "exclusive", "tail" : "(exclusiveTag: Tag): Rule", "member" : "sbt.Tags.exclusive", "link" : "sbt\/Tags$.html#exclusive(exclusiveTag:sbt.Tags.Tag):sbt.Tags.Rule", "kind" : "def"}, {"label" : "limitSum", "tail" : "(max: Int, tags: Tag*): Rule", "member" : "sbt.Tags.limitSum", "link" : "sbt\/Tags$.html#limitSum(max:Int,tags:sbt.Tags.Tag*):sbt.Tags.Rule", "kind" : "def"}, {"label" : "limit", "tail" : "(tag: Tag, max: Int): Rule", "member" : "sbt.Tags.limit", "link" : "sbt\/Tags$.html#limit(tag:sbt.Tags.Tag,max:Int):sbt.Tags.Rule", "kind" : "def"}, {"label" : "limitUntagged", "tail" : "(max: Int): Rule", "member" : "sbt.Tags.limitUntagged", "link" : "sbt\/Tags$.html#limitUntagged(max:Int):sbt.Tags.Rule", "kind" : "def"}, {"label" : "limitAll", "tail" : "(max: Int): Rule", "member" : "sbt.Tags.limitAll", "link" : "sbt\/Tags$.html#limitAll(max:Int):sbt.Tags.Rule", "kind" : "def"}, {"label" : "customLimit", "tail" : "(f: (TagMap) ⇒ Boolean): Rule", "member" : "sbt.Tags.customLimit", "link" : "sbt\/Tags$.html#customLimit(f:sbt.Tags.TagMap=>Boolean):sbt.Tags.Rule", "kind" : "def"}, {"label" : "getInt", "tail" : "(m: TagMap, tag: Tag): Int", "member" : "sbt.Tags.getInt", "link" : "sbt\/Tags$.html#getInt(m:sbt.Tags.TagMap,tag:sbt.Tags.Tag):Int", "kind" : "def"}, {"label" : "predicate", "tail" : "(rules: Seq[Rule]): (TagMap) ⇒ Boolean", "member" : "sbt.Tags.predicate", "link" : "sbt\/Tags$.html#predicate(rules:Seq[sbt.Tags.Rule]):sbt.Tags.TagMap=>Boolean", "kind" : "def"}, {"label" : "Rule", "tail" : "", "member" : "sbt.Tags.Rule", "link" : "sbt\/Tags$.html#RuleextendsAnyRef", "kind" : "abstract class"}, {"label" : "ForkedTestGroup", "tail" : ": Tag", "member" : "sbt.Tags.ForkedTestGroup", "link" : "sbt\/Tags$.html#ForkedTestGroup:sbt.Tags.Tag", "kind" : "val"}, {"label" : "Disk", "tail" : ": Tag", "member" : "sbt.Tags.Disk", "link" : "sbt\/Tags$.html#Disk:sbt.Tags.Tag", "kind" : "val"}, {"label" : "Network", "tail" : ": Tag", "member" : "sbt.Tags.Network", "link" : "sbt\/Tags$.html#Network:sbt.Tags.Tag", "kind" : "val"}, {"label" : "CPU", "tail" : ": Tag", "member" : "sbt.Tags.CPU", "link" : "sbt\/Tags$.html#CPU:sbt.Tags.Tag", "kind" : "val"}, {"label" : "Clean", "tail" : ": Tag", "member" : "sbt.Tags.Clean", "link" : "sbt\/Tags$.html#Clean:sbt.Tags.Tag", "kind" : "val"}, {"label" : "Publish", "tail" : ": Tag", "member" : "sbt.Tags.Publish", "link" : "sbt\/Tags$.html#Publish:sbt.Tags.Tag", "kind" : "val"}, {"label" : "Update", "tail" : ": Tag", "member" : "sbt.Tags.Update", "link" : "sbt\/Tags$.html#Update:sbt.Tags.Tag", "kind" : "val"}, {"label" : "Test", "tail" : ": Tag", "member" : "sbt.Tags.Test", "link" : "sbt\/Tags$.html#Test:sbt.Tags.Tag", "kind" : "val"}, {"label" : "Compile", "tail" : ": Tag", "member" : "sbt.Tags.Compile", "link" : "sbt\/Tags$.html#Compile:sbt.Tags.Tag", "kind" : "val"}, {"label" : "Untagged", "tail" : ": ConcurrentRestrictions.Tag", "member" : "sbt.Tags.Untagged", "link" : "sbt\/Tags$.html#Untagged:sbt.ConcurrentRestrictions.Tag", "kind" : "val"}, {"label" : "All", "tail" : ": ConcurrentRestrictions.Tag", "member" : "sbt.Tags.All", "link" : "sbt\/Tags$.html#All:sbt.ConcurrentRestrictions.Tag", "kind" : "val"}, {"label" : "Tag", "tail" : "(s: String): Tag", "member" : "sbt.Tags.Tag", "link" : "sbt\/Tags$.html#Tag(s:String):sbt.Tags.Tag", "kind" : "def"}, {"label" : "TagMap", "tail" : "", "member" : "sbt.Tags.TagMap", "link" : "sbt\/Tags$.html#TagMap=sbt.ConcurrentRestrictions.TagMap", "kind" : "type"}, {"label" : "Tag", "tail" : "", "member" : "sbt.Tags.Tag", "link" : "sbt\/Tags$.html#Tag=sbt.ConcurrentRestrictions.Tag", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Tags$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Tags$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Tags$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Tags$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Tags$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Tags$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Tags$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Tags$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Tags$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Tags$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Tags$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Tags$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Tags$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Tags$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Tags$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Tags$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Tags$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Tags$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Tags$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.Task", "shortDescription" : "Combines metadata info and a computation work to define a task.", "members_case class" : [{"label" : "tags", "tail" : "(): TagMap", "member" : "sbt.Task.tags", "link" : "sbt\/Task.html#tags:sbt.ConcurrentRestrictions.TagMap", "kind" : "def"}, {"label" : "tagw", "tail" : "(tags: (Tag, Int)*): Task[T]", "member" : "sbt.Task.tagw", "link" : "sbt\/Task.html#tagw(tags:(sbt.ConcurrentRestrictions.Tag,Int)*):sbt.Task[T]", "kind" : "def"}, {"label" : "tag", "tail" : "(tags: Tag*): Task[T]", "member" : "sbt.Task.tag", "link" : "sbt\/Task.html#tag(tags:sbt.ConcurrentRestrictions.Tag*):sbt.Task[T]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.Task.hashCode", "link" : "sbt\/Task.html#hashCode():Int", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.Task.toString", "link" : "sbt\/Task.html#toString():String", "kind" : "def"}, {"member" : "sbt.Task#<init>", "error" : "unsupported entity"}, {"label" : "work", "tail" : ": Action[T]", "member" : "sbt.Task.work", "link" : "sbt\/Task.html#work:sbt.Action[T]", "kind" : "val"}, {"label" : "info", "tail" : ": Info[T]", "member" : "sbt.Task.info", "link" : "sbt\/Task.html#info:sbt.Info[T]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Task.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Task.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Task.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Task.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Task.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Task.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Task.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Task.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Task.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Task.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Task.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Task.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Task.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Task.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Task.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Task.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/Task.html", "kind" : "case class"}, {"name" : "sbt.TaskCancellationStrategy", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TaskCancellationStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TaskCancellationStrategy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TaskCancellationStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TaskCancellationStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TaskCancellationStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TaskCancellationStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TaskCancellationStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskCancellationStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskCancellationStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskCancellationStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TaskCancellationStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TaskCancellationStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TaskCancellationStrategy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TaskCancellationStrategy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TaskCancellationStrategy.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TaskCancellationStrategy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TaskCancellationStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TaskCancellationStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TaskCancellationStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onTaskEngineFinish", "tail" : "(state: State): Unit", "member" : "sbt.TaskCancellationStrategy.onTaskEngineFinish", "link" : "sbt\/TaskCancellationStrategy.html#onTaskEngineFinish(state:TaskCancellationStrategy.this.State):Unit", "kind" : "abstract def"}, {"label" : "onTaskEngineStart", "tail" : "(canceller: RunningTaskEngine): State", "member" : "sbt.TaskCancellationStrategy.onTaskEngineStart", "link" : "sbt\/TaskCancellationStrategy.html#onTaskEngineStart(canceller:sbt.RunningTaskEngine):TaskCancellationStrategy.this.State", "kind" : "abstract def"}, {"member" : "sbt.TaskCancellationStrategy.State", "error" : "unsupported entity"}], "shortDescription" : "A strategy for being able to cancel tasks.", "object" : "sbt\/TaskCancellationStrategy$.html", "members_object" : [{"label" : "Signal", "tail" : "", "member" : "sbt.TaskCancellationStrategy.Signal", "link" : "sbt\/TaskCancellationStrategy$.html#Signal", "kind" : "object"}, {"label" : "Null", "tail" : "", "member" : "sbt.TaskCancellationStrategy.Null", "link" : "sbt\/TaskCancellationStrategy$.html#Null", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TaskCancellationStrategy$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TaskCancellationStrategy$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TaskCancellationStrategy$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TaskCancellationStrategy$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TaskCancellationStrategy$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TaskCancellationStrategy$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TaskCancellationStrategy$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskCancellationStrategy$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskCancellationStrategy$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskCancellationStrategy$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TaskCancellationStrategy$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TaskCancellationStrategy$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TaskCancellationStrategy$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TaskCancellationStrategy$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TaskCancellationStrategy$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TaskCancellationStrategy$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TaskCancellationStrategy$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TaskCancellationStrategy$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TaskCancellationStrategy$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/TaskCancellationStrategy.html", "kind" : "trait"}, {"name" : "sbt.TaskKey", "shortDescription" : "Identifies a task.", "object" : "sbt\/TaskKey$.html", "members_class" : [{"label" : "withRank", "tail" : "(rank: Int): TaskKey[T]", "member" : "sbt.TaskKey.withRank", "link" : "sbt\/TaskKey.html#withRank(rank:Int):sbt.TaskKey[T]", "kind" : "final def"}, {"label" : "removeN", "tail" : "(vs: Def.Initialize[Task[V]], source: SourcePosition)(r: Values[T, V]): Def.Setting[Task[T]]", "member" : "sbt.TaskKey.removeN", "link" : "sbt\/TaskKey.html#removeN[V](vs:sbt.Def.Initialize[sbt.Task[V]],source:sbt.internal.util.SourcePosition)(implicitr:sbt.Remove.Values[T,V]):sbt.Def.Setting[sbt.Task[T]]", "kind" : "final def"}, {"label" : "remove1", "tail" : "(v: Def.Initialize[Task[V]], source: SourcePosition)(r: Remove.Value[T, V]): Def.Setting[Task[T]]", "member" : "sbt.TaskKey.remove1", "link" : "sbt\/TaskKey.html#remove1[V](v:sbt.Def.Initialize[sbt.Task[V]],source:sbt.internal.util.SourcePosition)(implicitr:sbt.Remove.Value[T,V]):sbt.Def.Setting[sbt.Task[T]]", "kind" : "final def"}, {"label" : "appendN", "tail" : "(vs: Def.Initialize[Task[V]], source: SourcePosition)(a: Values[T, V]): Def.Setting[Task[T]]", "member" : "sbt.TaskKey.appendN", "link" : "sbt\/TaskKey.html#appendN[V](vs:sbt.Def.Initialize[sbt.Task[V]],source:sbt.internal.util.SourcePosition)(implicita:sbt.Append.Values[T,V]):sbt.Def.Setting[sbt.Task[T]]", "kind" : "def"}, {"label" : "append1", "tail" : "(v: Def.Initialize[Task[V]], source: SourcePosition)(a: Append.Value[T, V]): Def.Setting[Task[T]]", "member" : "sbt.TaskKey.append1", "link" : "sbt\/TaskKey.html#append1[V](v:sbt.Def.Initialize[sbt.Task[V]],source:sbt.internal.util.SourcePosition)(implicita:sbt.Append.Value[T,V]):sbt.Def.Setting[sbt.Task[T]]", "kind" : "def"}, {"label" : "--=", "tail" : "(vs: U)(r: Values[T, U]): Def.Setting[Task[T]]", "member" : "sbt.TaskKey.--=", "link" : "sbt\/TaskKey.html#--=[U](vs:U)(implicitr:sbt.Remove.Values[T,U]):sbt.Def.Setting[sbt.Task[T]]", "kind" : "final macro def"}, {"label" : "-=", "tail" : "(v: U)(r: Remove.Value[T, U]): Def.Setting[Task[T]]", "member" : "sbt.TaskKey.-=", "link" : "sbt\/TaskKey.html#-=[U](v:U)(implicitr:sbt.Remove.Value[T,U]):sbt.Def.Setting[sbt.Task[T]]", "kind" : "final macro def"}, {"label" : "<++=", "tail" : "(vs: Def.Initialize[Task[V]])(a: Values[T, V]): Def.Setting[Task[T]]", "member" : "sbt.TaskKey.<++=", "link" : "sbt\/TaskKey.html#<++=[V](vs:sbt.Def.Initialize[sbt.Task[V]])(implicita:sbt.Append.Values[T,V]):sbt.Def.Setting[sbt.Task[T]]", "kind" : "macro def"}, {"label" : "<+=", "tail" : "(v: Def.Initialize[Task[V]])(a: Append.Value[T, V]): Def.Setting[Task[T]]", "member" : "sbt.TaskKey.<+=", "link" : "sbt\/TaskKey.html#<+=[V](v:sbt.Def.Initialize[sbt.Task[V]])(implicita:sbt.Append.Value[T,V]):sbt.Def.Setting[sbt.Task[T]]", "kind" : "macro def"}, {"label" : "++=", "tail" : "(vs: U)(a: Values[T, U]): Def.Setting[Task[T]]", "member" : "sbt.TaskKey.++=", "link" : "sbt\/TaskKey.html#++=[U](vs:U)(implicita:sbt.Append.Values[T,U]):sbt.Def.Setting[sbt.Task[T]]", "kind" : "macro def"}, {"label" : "+=", "tail" : "(v: U)(a: Append.Value[T, U]): Def.Setting[Task[T]]", "member" : "sbt.TaskKey.+=", "link" : "sbt\/TaskKey.html#+=[U](v:U)(implicita:sbt.Append.Value[T,U]):sbt.Def.Setting[sbt.Task[T]]", "kind" : "macro def"}, {"label" : "in", "tail" : "(scope: Scope): TaskKey[T]", "member" : "sbt.TaskKey.in", "link" : "sbt\/TaskKey.html#in(scope:sbt.Scope):sbt.TaskKey[T]", "kind" : "def"}, {"label" : "scopedKey", "tail" : "(): Def.ScopedKey[Task[T]]", "member" : "sbt.TaskKey.scopedKey", "link" : "sbt\/TaskKey.html#scopedKey:sbt.Def.ScopedKey[sbt.Task[T]]", "kind" : "def"}, {"label" : "toTask", "tail" : "(): Def.Initialize[Task[T]]", "member" : "sbt.TaskKey.toTask", "link" : "sbt\/TaskKey.html#toTask:sbt.Def.Initialize[sbt.Task[T]]", "kind" : "def"}, {"label" : "or", "tail" : "(i: Def.Initialize[Task[T]]): Def.Initialize[Task[T]]", "member" : "sbt.Scoped.DefinableTask.or", "link" : "sbt\/TaskKey.html#or[T>:S](i:sbt.Def.Initialize[sbt.Task[T]]):sbt.Def.Initialize[sbt.Task[T]]", "kind" : "def"}, {"label" : "??", "tail" : "(or: ⇒ T): Def.Initialize[Task[T]]", "member" : "sbt.Scoped.DefinableTask.??", "link" : "sbt\/TaskKey.html#??[T>:S](or:=>T):sbt.Def.Initialize[sbt.Task[T]]", "kind" : "def"}, {"label" : "?", "tail" : "(): Def.Initialize[Task[Option[T]]]", "member" : "sbt.Scoped.DefinableTask.?", "link" : "sbt\/TaskKey.html#?:sbt.Def.Initialize[sbt.Task[Option[S]]]", "kind" : "def"}, {"label" : "get", "tail" : "(settings: Settings[Scope]): Option[Task[T]]", "member" : "sbt.Scoped.DefinableTask.get", "link" : "sbt\/TaskKey.html#get(settings:sbt.internal.util.Settings[sbt.Scope]):Option[sbt.Task[S]]", "kind" : "def"}, {"label" : "task", "tail" : "(): SettingKey[Task[T]]", "member" : "sbt.Scoped.DefinableTask.task", "link" : "sbt\/TaskKey.html#task:sbt.SettingKey[sbt.Task[S]]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (T) ⇒ T, source: SourcePosition): Def.Setting[Task[T]]", "member" : "sbt.Scoped.DefinableTask.transform", "link" : "sbt\/TaskKey.html#transform(f:S=>S,source:sbt.internal.util.SourcePosition):sbt.Def.Setting[sbt.Task[S]]", "kind" : "def"}, {"label" : "set", "tail" : "(app: Def.Initialize[Task[T]], source: SourcePosition): Def.Setting[Task[T]]", "member" : "sbt.Scoped.DefinableTask.set", "link" : "sbt\/TaskKey.html#set(app:sbt.Def.Initialize[sbt.Task[S]],source:sbt.internal.util.SourcePosition):sbt.Def.Setting[sbt.Task[S]]", "kind" : "def"}, {"label" : "<<=", "tail" : "(app: Def.Initialize[Task[T]]): Def.Setting[Task[T]]", "member" : "sbt.Scoped.DefinableTask.<<=", "link" : "sbt\/TaskKey.html#<<=(app:sbt.Def.Initialize[sbt.Task[S]]):sbt.Def.Setting[sbt.Task[S]]", "kind" : "macro def"}, {"label" : "~=", "tail" : "(f: (T) ⇒ T): Def.Setting[Task[T]]", "member" : "sbt.Scoped.DefinableTask.~=", "link" : "sbt\/TaskKey.html#~=(f:S=>S):sbt.Def.Setting[sbt.Task[S]]", "kind" : "macro def"}, {"label" : ":=", "tail" : "(v: T): Def.Setting[Task[T]]", "member" : "sbt.Scoped.DefinableTask.:=", "link" : "sbt\/TaskKey.html#:=(v:S):sbt.Def.Setting[sbt.Task[S]]", "kind" : "macro def"}, {"label" : "in", "tail" : "(p: ScopeAxis[Reference], c: ScopeAxis[ConfigKey], t: ScopeAxis[AttributeKey[_]]): TaskKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/TaskKey.html#in(p:sbt.ScopeAxis[sbt.Reference],c:sbt.ScopeAxis[sbt.ConfigKey],t:sbt.ScopeAxis[sbt.internal.util.AttributeKey[_]]):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(p: Reference, c: ConfigKey, t: Scoped): TaskKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/TaskKey.html#in(p:sbt.Reference,c:sbt.ConfigKey,t:sbt.Scoped):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(p: Reference, t: Scoped): TaskKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/TaskKey.html#in(p:sbt.Reference,t:sbt.Scoped):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(p: Reference, c: ConfigKey): TaskKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/TaskKey.html#in(p:sbt.Reference,c:sbt.ConfigKey):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(c: ConfigKey, t: Scoped): TaskKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/TaskKey.html#in(c:sbt.ConfigKey,t:sbt.Scoped):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(c: ConfigKey): TaskKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/TaskKey.html#in(c:sbt.ConfigKey):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(t: Scoped): TaskKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/TaskKey.html#in(t:sbt.Scoped):ResultType", "kind" : "def"}, {"label" : "in", "tail" : "(p: Reference): TaskKey[T]", "member" : "sbt.Scoped.ScopingSetting.in", "link" : "sbt\/TaskKey.html#in(p:sbt.Reference):ResultType", "kind" : "def"}, {"label" : "transform", "tail" : ": (Task[T]) ⇒ Task[T]", "member" : "sbt.internal.util.Init.KeyedInitialize.transform", "link" : "sbt\/TaskKey.html#transform:T=>T", "kind" : "final val"}, {"label" : "mapConstant", "tail" : "(g: Def.MapConstant): Def.Initialize[Task[T]]", "member" : "sbt.internal.util.Init.Keyed.mapConstant", "link" : "sbt\/TaskKey.html#mapConstant(g:Init.this.MapConstant):Init.this.Initialize[T]", "kind" : "final def"}, {"label" : "mapReferenced", "tail" : "(g: Def.MapScoped): Def.Initialize[Task[T]]", "member" : "sbt.internal.util.Init.Keyed.mapReferenced", "link" : "sbt\/TaskKey.html#mapReferenced(g:Init.this.MapScoped):Init.this.Initialize[T]", "kind" : "final def"}, {"label" : "evaluate", "tail" : "(ss: Settings[Scope]): Task[T]", "member" : "sbt.internal.util.Init.Keyed.evaluate", "link" : "sbt\/TaskKey.html#evaluate(ss:sbt.internal.util.Settings[Scope]):T", "kind" : "final def"}, {"label" : "apply", "tail" : "(g: (Task[T]) ⇒ Z): Def.Initialize[Z]", "member" : "sbt.internal.util.Init.Keyed.apply", "link" : "sbt\/TaskKey.html#apply[Z](g:T=>Z):Init.this.Initialize[Z]", "kind" : "final def"}, {"label" : "dependencies", "tail" : "(): List[Def.ScopedKey[Task[T]]]", "member" : "sbt.internal.util.Init.Keyed.dependencies", "link" : "sbt\/TaskKey.html#dependencies:List[Init.this.ScopedKey[S]]", "kind" : "final def"}, {"label" : "zipWith", "tail" : "(o: Def.Initialize[S])(f: (Task[T], S) ⇒ U): Def.Initialize[U]", "member" : "sbt.internal.util.Init.Initialize.zipWith", "link" : "sbt\/TaskKey.html#zipWith[S,U](o:Init.this.Initialize[S])(f:(T,S)=>U):Init.this.Initialize[U]", "kind" : "def"}, {"label" : "zip", "tail" : "(o: Def.Initialize[S]): Def.Initialize[(Task[T], S)]", "member" : "sbt.internal.util.Init.Initialize.zip", "link" : "sbt\/TaskKey.html#zip[S](o:Init.this.Initialize[S]):Init.this.Initialize[(T,S)]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TaskKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TaskKey.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TaskKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TaskKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TaskKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TaskKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TaskKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskKey.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TaskKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TaskKey.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TaskKey.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TaskKey.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TaskKey.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TaskKey.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TaskKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TaskKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TaskKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "key", "tail" : ": AttributeKey[Task[T]]", "member" : "sbt.TaskKey.key", "link" : "sbt\/TaskKey.html#key:sbt.internal.util.AttributeKey[sbt.Task[T]]", "kind" : "abstract val"}, {"label" : "scope", "tail" : "(): Scope", "member" : "sbt.Scoped.scope", "link" : "sbt\/TaskKey.html#scope:sbt.Scope", "kind" : "abstract def"}], "members_object" : [{"label" : "local", "tail" : "(arg0: Manifest[T]): TaskKey[T]", "member" : "sbt.TaskKey.local", "link" : "sbt\/TaskKey$.html#local[T](implicitevidence$7:Manifest[T]):sbt.TaskKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(akey: AttributeKey[Task[T]]): TaskKey[T]", "member" : "sbt.TaskKey.apply", "link" : "sbt\/TaskKey$.html#apply[T](akey:sbt.internal.util.AttributeKey[sbt.Task[T]]):sbt.TaskKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(label: String, description: String, rank: Int, extend1: Scoped, extendN: Scoped*)(arg0: Manifest[T]): TaskKey[T]", "member" : "sbt.TaskKey.apply", "link" : "sbt\/TaskKey$.html#apply[T](label:String,description:String,rank:Int,extend1:sbt.Scoped,extendN:sbt.Scoped*)(implicitevidence$6:Manifest[T]):sbt.TaskKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(label: String, description: String, extend1: Scoped, extendN: Scoped*)(arg0: Manifest[T]): TaskKey[T]", "member" : "sbt.TaskKey.apply", "link" : "sbt\/TaskKey$.html#apply[T](label:String,description:String,extend1:sbt.Scoped,extendN:sbt.Scoped*)(implicitevidence$5:Manifest[T]):sbt.TaskKey[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(label: String, description: String, rank: Int)(arg0: Manifest[T]): TaskKey[T]", "member" : "sbt.TaskKey.apply", "link" : "sbt\/TaskKey$.html#apply[T](label:String,description:String,rank:Int)(implicitevidence$4:Manifest[T]):sbt.TaskKey[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TaskKey$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TaskKey$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TaskKey$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TaskKey$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TaskKey$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TaskKey$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TaskKey$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskKey$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskKey$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskKey$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TaskKey$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TaskKey$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TaskKey$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TaskKey$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TaskKey$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TaskKey$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TaskKey$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TaskKey$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TaskKey$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/TaskKey.html", "kind" : "class"}, {"name" : "sbt.TaskMacroExtra", "members_trait" : [{"label" : "stateParserToInput", "tail" : "(in: (State) ⇒ Parser[T]): ParserInput[T]", "member" : "sbt.TaskMacroExtra.stateParserToInput", "link" : "sbt\/TaskMacroExtra.html#stateParserToInput[T](in:sbt.State=>sbt.internal.util.complete.Parser[T]):sbt.std.ParserInput[T]", "kind" : "implicit def"}, {"label" : "parserToInput", "tail" : "(in: Parser[T]): ParserInput[T]", "member" : "sbt.TaskMacroExtra.parserToInput", "link" : "sbt\/TaskMacroExtra.html#parserToInput[T](in:sbt.internal.util.complete.Parser[T]):sbt.std.ParserInput[T]", "kind" : "implicit def"}, {"label" : "macroValueIn", "tail" : "(in: InputTask[T]): InputEvaluated[T]", "member" : "sbt.TaskMacroExtra.macroValueIn", "link" : "sbt\/TaskMacroExtra.html#macroValueIn[T](in:sbt.InputTask[T]):sbt.std.InputEvaluated[T]", "kind" : "implicit def"}, {"label" : "macroValueT", "tail" : "(in: Task[T]): MacroValue[T]", "member" : "sbt.TaskMacroExtra.macroValueT", "link" : "sbt\/TaskMacroExtra.html#macroValueT[T](in:sbt.Task[T]):sbt.std.MacroValue[T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TaskMacroExtra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TaskMacroExtra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TaskMacroExtra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TaskMacroExtra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TaskMacroExtra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TaskMacroExtra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TaskMacroExtra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskMacroExtra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskMacroExtra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TaskMacroExtra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TaskMacroExtra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TaskMacroExtra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TaskMacroExtra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TaskMacroExtra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TaskMacroExtra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TaskMacroExtra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TaskMacroExtra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TaskMacroExtra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TaskMacroExtra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/TaskMacroExtra.html", "kind" : "trait"}, {"name" : "sbt.TemplateResolverInfo", "shortDescription" : "", "members_case class" : [{"member" : "sbt.TemplateResolverInfo#<init>", "error" : "unsupported entity"}, {"label" : "implementationClass", "tail" : ": String", "member" : "sbt.TemplateResolverInfo.implementationClass", "link" : "sbt\/TemplateResolverInfo.html#implementationClass:String", "kind" : "val"}, {"label" : "module", "tail" : ": ModuleID", "member" : "sbt.TemplateResolverInfo.module", "link" : "sbt\/TemplateResolverInfo.html#module:sbt.librarymanagement.ModuleID", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TemplateResolverInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TemplateResolverInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TemplateResolverInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TemplateResolverInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TemplateResolverInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TemplateResolverInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TemplateResolverInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TemplateResolverInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TemplateResolverInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TemplateResolverInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TemplateResolverInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TemplateResolverInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TemplateResolverInfo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TemplateResolverInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TemplateResolverInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TemplateResolverInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/TemplateResolverInfo.html", "kind" : "case class"}, {"name" : "sbt.TestDefinition", "shortDescription" : "", "members_class" : [{"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.TestDefinition.hashCode", "link" : "sbt\/TestDefinition.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(t: Any): Boolean", "member" : "sbt.TestDefinition.equals", "link" : "sbt\/TestDefinition.html#equals(t:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.TestDefinition.toString", "link" : "sbt\/TestDefinition.html#toString():String", "kind" : "def"}, {"member" : "sbt.TestDefinition#<init>", "error" : "unsupported entity"}, {"label" : "selectors", "tail" : ": Array[Selector]", "member" : "sbt.TestDefinition.selectors", "link" : "sbt\/TestDefinition.html#selectors:Array[sbt.testing.Selector]", "kind" : "val"}, {"label" : "explicitlySpecified", "tail" : ": Boolean", "member" : "sbt.TestDefinition.explicitlySpecified", "link" : "sbt\/TestDefinition.html#explicitlySpecified:Boolean", "kind" : "val"}, {"label" : "fingerprint", "tail" : ": Fingerprint", "member" : "sbt.TestDefinition.fingerprint", "link" : "sbt\/TestDefinition.html#fingerprint:sbt.testing.Fingerprint", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "sbt.TestDefinition.name", "link" : "sbt\/TestDefinition.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestDefinition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/TestDefinition.html", "kind" : "class"}, {"name" : "sbt.TestEvent", "shortDescription" : "", "object" : "sbt\/TestEvent$.html", "members_class" : [{"label" : "detail", "tail" : "(): Seq[Event]", "member" : "sbt.TestEvent.detail", "link" : "sbt\/TestEvent.html#detail:Seq[sbt.testing.Event]", "kind" : "def"}, {"member" : "sbt.TestEvent#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestEvent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestEvent.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestEvent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestEvent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestEvent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestEvent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestEvent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestEvent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestEvent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestEvent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestEvent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestEvent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TestEvent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestEvent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TestEvent.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TestEvent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestEvent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestEvent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestEvent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "result", "tail" : "(): Option[TestResult]", "member" : "sbt.TestEvent.result", "link" : "sbt\/TestEvent.html#result:Option[sbt.protocol.testing.TestResult]", "kind" : "abstract def"}], "members_object" : [{"label" : "apply", "tail" : "(events: Seq[Event]): TestEvent", "member" : "sbt.TestEvent.apply", "link" : "sbt\/TestEvent$.html#apply(events:Seq[sbt.testing.Event]):sbt.TestEvent", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestEvent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestEvent$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestEvent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestEvent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestEvent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestEvent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestEvent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestEvent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestEvent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestEvent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestEvent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestEvent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TestEvent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestEvent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TestEvent$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TestEvent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestEvent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestEvent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestEvent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/TestEvent.html", "kind" : "class"}, {"name" : "sbt.TestFramework", "shortDescription" : "", "object" : "sbt\/TestFramework$.html", "members_class" : [{"label" : "create", "tail" : "(loader: ClassLoader, log: ManagedLogger): Option[Framework]", "member" : "sbt.TestFramework.create", "link" : "sbt\/TestFramework.html#create(loader:ClassLoader,log:sbt.internal.util.ManagedLogger):Option[sbt.testing.Framework]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.TestFramework.toString", "link" : "sbt\/TestFramework.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "sbt.TestFramework.hashCode", "link" : "sbt\/TestFramework.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "sbt.TestFramework.equals", "link" : "sbt\/TestFramework.html#equals(o:Any):Boolean", "kind" : "def"}, {"member" : "sbt.TestFramework#<init>", "error" : "unsupported entity"}, {"label" : "implClassNames", "tail" : ": String*", "member" : "sbt.TestFramework.implClassNames", "link" : "sbt\/TestFramework.html#implClassNames:String*", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestFramework.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestFramework.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestFramework.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestFramework.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestFramework.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestFramework.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestFramework.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestFramework.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestFramework.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestFramework.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestFramework.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestFramework.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestFramework.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestFramework.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestFramework.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestFramework.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "createTestFunction", "tail" : "(loader: ClassLoader, taskDef: TaskDef, runner: TestRunner, testTask: testing.Task): TestFunction", "member" : "sbt.TestFramework.createTestFunction", "link" : "sbt\/TestFramework$.html#createTestFunction(loader:ClassLoader,taskDef:sbt.testing.TaskDef,runner:sbt.TestRunner,testTask:sbt.testing.Task):sbt.TestFunction", "kind" : "def"}, {"label" : "createTestLoader", "tail" : "(classpath: Seq[File], scalaInstance: ScalaInstance, tempDir: File): ClassLoader", "member" : "sbt.TestFramework.createTestLoader", "link" : "sbt\/TestFramework$.html#createTestLoader(classpath:Seq[java.io.File],scalaInstance:sbt.internal.inc.ScalaInstance,tempDir:java.io.File):ClassLoader", "kind" : "def"}, {"label" : "testTasks", "tail" : "(frameworks: Map[TestFramework, Framework], runners: Map[TestFramework, Runner], testLoader: ClassLoader, tests: Vector[TestDefinition], log: ManagedLogger, listeners: Vector[TestReportListener]): (() ⇒ Unit, Vector[(String, TestFunction)], (TestResult) ⇒ () ⇒ Unit)", "member" : "sbt.TestFramework.testTasks", "link" : "sbt\/TestFramework$.html#testTasks(frameworks:Map[sbt.TestFramework,sbt.testing.Framework],runners:Map[sbt.TestFramework,sbt.testing.Runner],testLoader:ClassLoader,tests:Vector[sbt.TestDefinition],log:sbt.internal.util.ManagedLogger,listeners:Vector[sbt.TestReportListener]):(()=>Unit,Vector[(String,sbt.TestFunction)],sbt.protocol.testing.TestResult=>(()=>Unit))", "kind" : "def"}, {"label" : "toString", "tail" : "(f: Fingerprint): String", "member" : "sbt.TestFramework.toString", "link" : "sbt\/TestFramework$.html#toString(f:sbt.testing.Fingerprint):String", "kind" : "def"}, {"label" : "matches", "tail" : "(a: Fingerprint, b: Fingerprint): Boolean", "member" : "sbt.TestFramework.matches", "link" : "sbt\/TestFramework$.html#matches(a:sbt.testing.Fingerprint,b:sbt.testing.Fingerprint):Boolean", "kind" : "def"}, {"label" : "getFingerprints", "tail" : "(framework: Framework): Seq[Fingerprint]", "member" : "sbt.TestFramework.getFingerprints", "link" : "sbt\/TestFramework$.html#getFingerprints(framework:sbt.testing.Framework):Seq[sbt.testing.Fingerprint]", "kind" : "def"}, {"label" : "apply", "tail" : "(implClassNames: String*): TestFramework", "member" : "sbt.TestFramework.apply", "link" : "sbt\/TestFramework$.html#apply(implClassNames:String*):sbt.TestFramework", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestFramework$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestFramework$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestFramework$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestFramework$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestFramework$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestFramework$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestFramework$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestFramework$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestFramework$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestFramework$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestFramework$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestFramework$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TestFramework$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestFramework$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TestFramework$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TestFramework$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestFramework$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestFramework$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestFramework$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/TestFramework.html", "kind" : "class"}, {"name" : "sbt.TestFrameworks", "shortDescription" : "", "object" : "sbt\/TestFrameworks$.html", "members_object" : [{"label" : "JUnit", "tail" : ": TestFramework", "member" : "sbt.TestFrameworks.JUnit", "link" : "sbt\/TestFrameworks$.html#JUnit:sbt.TestFramework", "kind" : "val"}, {"label" : "Specs2", "tail" : ": TestFramework", "member" : "sbt.TestFrameworks.Specs2", "link" : "sbt\/TestFrameworks$.html#Specs2:sbt.TestFramework", "kind" : "val"}, {"label" : "Specs", "tail" : ": TestFramework", "member" : "sbt.TestFrameworks.Specs", "link" : "sbt\/TestFrameworks$.html#Specs:sbt.TestFramework", "kind" : "val"}, {"label" : "ScalaTest", "tail" : ": TestFramework", "member" : "sbt.TestFrameworks.ScalaTest", "link" : "sbt\/TestFrameworks$.html#ScalaTest:sbt.TestFramework", "kind" : "val"}, {"label" : "ScalaCheck", "tail" : ": TestFramework", "member" : "sbt.TestFrameworks.ScalaCheck", "link" : "sbt\/TestFrameworks$.html#ScalaCheck:sbt.TestFramework", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestFrameworks$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestFrameworks$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestFrameworks$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestFrameworks$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestFrameworks$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestFrameworks$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestFrameworks$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestFrameworks$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestFrameworks$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestFrameworks$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestFrameworks$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestFrameworks$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TestFrameworks$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestFrameworks$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TestFrameworks$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TestFrameworks$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestFrameworks$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestFrameworks$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestFrameworks$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.TestFunction", "shortDescription" : "", "members_class" : [{"label" : "apply", "tail" : "(): (SuiteResult, Seq[testing.Task])", "member" : "sbt.TestFunction.apply", "link" : "sbt\/TestFunction.html#apply():(sbt.SuiteResult,Seq[sbt.testing.Task])", "kind" : "def"}, {"member" : "sbt.TestFunction#<init>", "error" : "unsupported entity"}, {"label" : "runner", "tail" : ": TestRunner", "member" : "sbt.TestFunction.runner", "link" : "sbt\/TestFunction.html#runner:sbt.TestRunner", "kind" : "val"}, {"label" : "taskDef", "tail" : ": TaskDef", "member" : "sbt.TestFunction.taskDef", "link" : "sbt\/TestFunction.html#taskDef:sbt.testing.TaskDef", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TestFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TestFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TestFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tags", "tail" : "(): Seq[String]", "member" : "sbt.TestFunction.tags", "link" : "sbt\/TestFunction.html#tags:Seq[String]", "kind" : "abstract def"}], "class" : "sbt\/TestFunction.html", "kind" : "class"}, {"name" : "sbt.TestOption", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestOption.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestOption.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestOption.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestOption.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestOption.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestOption.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestOption.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestOption.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestOption.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestOption.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestOption.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestOption.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TestOption.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestOption.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TestOption.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TestOption.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestOption.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestOption.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestOption.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/TestOption.html", "kind" : "trait"}, {"name" : "sbt.TestReportListener", "members_trait" : [{"label" : "contentLogger", "tail" : "(test: TestDefinition): Option[ContentLogger]", "member" : "sbt.TestReportListener.contentLogger", "link" : "sbt\/TestReportListener.html#contentLogger(test:sbt.TestDefinition):Option[sbt.ContentLogger]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestReportListener.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestReportListener.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestReportListener.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestReportListener.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestReportListener.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestReportListener.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestReportListener.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestReportListener.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestReportListener.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestReportListener.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestReportListener.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestReportListener.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TestReportListener.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestReportListener.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TestReportListener.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TestReportListener.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestReportListener.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestReportListener.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestReportListener.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "endGroup", "tail" : "(name: String, result: TestResult): Unit", "member" : "sbt.TestReportListener.endGroup", "link" : "sbt\/TestReportListener.html#endGroup(name:String,result:sbt.protocol.testing.TestResult):Unit", "kind" : "abstract def"}, {"label" : "endGroup", "tail" : "(name: String, t: Throwable): Unit", "member" : "sbt.TestReportListener.endGroup", "link" : "sbt\/TestReportListener.html#endGroup(name:String,t:Throwable):Unit", "kind" : "abstract def"}, {"label" : "testEvent", "tail" : "(event: TestEvent): Unit", "member" : "sbt.TestReportListener.testEvent", "link" : "sbt\/TestReportListener.html#testEvent(event:sbt.TestEvent):Unit", "kind" : "abstract def"}, {"label" : "startGroup", "tail" : "(name: String): Unit", "member" : "sbt.TestReportListener.startGroup", "link" : "sbt\/TestReportListener.html#startGroup(name:String):Unit", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/TestReportListener.html", "kind" : "trait"}, {"name" : "sbt.TestResultLogger", "members_trait" : [{"label" : "unless", "tail" : "(f: (Output, String) ⇒ Boolean, otherwise: TestResultLogger): TestResultLogger", "member" : "sbt.TestResultLogger.unless", "link" : "sbt\/TestResultLogger.html#unless(f:(sbt.Tests.Output,String)=>Boolean,otherwise:sbt.TestResultLogger):sbt.TestResultLogger", "kind" : "final def"}, {"label" : "onlyIf", "tail" : "(f: (Output, String) ⇒ Boolean, otherwise: TestResultLogger): TestResultLogger", "member" : "sbt.TestResultLogger.onlyIf", "link" : "sbt\/TestResultLogger.html#onlyIf(f:(sbt.Tests.Output,String)=>Boolean,otherwise:sbt.TestResultLogger):sbt.TestResultLogger", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestResultLogger.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestResultLogger.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestResultLogger.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestResultLogger.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestResultLogger.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestResultLogger.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestResultLogger.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestResultLogger.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestResultLogger.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestResultLogger.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestResultLogger.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestResultLogger.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TestResultLogger.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestResultLogger.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TestResultLogger.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TestResultLogger.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestResultLogger.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestResultLogger.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestResultLogger.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(log: Logger, results: Output, taskName: String): Unit", "member" : "sbt.TestResultLogger.run", "link" : "sbt\/TestResultLogger.html#run(log:sbt.util.Logger,results:sbt.Tests.Output,taskName:String):Unit", "kind" : "abstract def"}], "shortDescription" : "Logs information about tests after they finish.", "object" : "sbt\/TestResultLogger$.html", "members_object" : [{"label" : "Defaults", "tail" : "", "member" : "sbt.TestResultLogger.Defaults", "link" : "sbt\/TestResultLogger$.html#Defaults", "kind" : "object"}, {"label" : "silenceWhenNoTests", "tail" : "(d: Main): Main", "member" : "sbt.TestResultLogger.silenceWhenNoTests", "link" : "sbt\/TestResultLogger$.html#silenceWhenNoTests(d:sbt.TestResultLogger.Defaults.Main):sbt.TestResultLogger.Defaults.Main", "kind" : "def"}, {"label" : "choose", "tail" : "(cond: (Output, String) ⇒ Boolean, t: TestResultLogger, f: TestResultLogger): TestResultLogger", "member" : "sbt.TestResultLogger.choose", "link" : "sbt\/TestResultLogger$.html#choose(cond:(sbt.Tests.Output,String)=>Boolean,t:sbt.TestResultLogger,f:sbt.TestResultLogger):sbt.TestResultLogger", "kind" : "def"}, {"label" : "const", "tail" : "(f: (Logger) ⇒ Unit): TestResultLogger", "member" : "sbt.TestResultLogger.const", "link" : "sbt\/TestResultLogger$.html#const(f:sbt.util.Logger=>Unit):sbt.TestResultLogger", "kind" : "def"}, {"label" : "apply", "tail" : "(f: (Logger, Output, String) ⇒ Unit): TestResultLogger", "member" : "sbt.TestResultLogger.apply", "link" : "sbt\/TestResultLogger$.html#apply(f:(sbt.util.Logger,sbt.Tests.Output,String)=>Unit):sbt.TestResultLogger", "kind" : "def"}, {"label" : "SilentWhenNoTests", "tail" : "(): Main", "member" : "sbt.TestResultLogger.SilentWhenNoTests", "link" : "sbt\/TestResultLogger$.html#SilentWhenNoTests:sbt.TestResultLogger.Defaults.Main", "kind" : "def"}, {"label" : "Default", "tail" : ": Main", "member" : "sbt.TestResultLogger.Default", "link" : "sbt\/TestResultLogger$.html#Default:sbt.TestResultLogger.Defaults.Main", "kind" : "val"}, {"label" : "Null", "tail" : ": TestResultLogger", "member" : "sbt.TestResultLogger.Null", "link" : "sbt\/TestResultLogger$.html#Null:sbt.TestResultLogger", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestResultLogger$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestResultLogger$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestResultLogger$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestResultLogger$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestResultLogger$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestResultLogger$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestResultLogger$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestResultLogger$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestResultLogger$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestResultLogger$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestResultLogger$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestResultLogger$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TestResultLogger$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestResultLogger$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TestResultLogger$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TestResultLogger$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestResultLogger$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestResultLogger$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestResultLogger$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/TestResultLogger.html", "kind" : "trait"}, {"name" : "sbt.TestRunner", "shortDescription" : "", "members_class" : [{"label" : "safeListenersCall", "tail" : "(call: (TestReportListener) ⇒ Unit): Unit", "member" : "sbt.TestRunner.safeListenersCall", "link" : "sbt\/TestRunner.html#safeListenersCall(call:sbt.TestReportListener=>Unit):Unit", "kind" : "def"}, {"label" : "run", "tail" : "(taskDef: TaskDef, testTask: testing.Task): (SuiteResult, Seq[testing.Task])", "member" : "sbt.TestRunner.run", "link" : "sbt\/TestRunner.html#run(taskDef:sbt.testing.TaskDef,testTask:sbt.testing.Task):(sbt.SuiteResult,Seq[sbt.testing.Task])", "kind" : "final def"}, {"label" : "tasks", "tail" : "(testDefs: Set[TestDefinition]): Array[testing.Task]", "member" : "sbt.TestRunner.tasks", "link" : "sbt\/TestRunner.html#tasks(testDefs:Set[sbt.TestDefinition]):Array[sbt.testing.Task]", "kind" : "final def"}, {"member" : "sbt.TestRunner#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestRunner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestRunner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestRunner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestRunner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestRunner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestRunner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestRunner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestRunner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestRunner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestRunner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestRunner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestRunner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TestRunner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestRunner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TestRunner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TestRunner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestRunner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestRunner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestRunner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/TestRunner.html", "kind" : "class"}, {"name" : "sbt.Tests", "shortDescription" : "", "object" : "sbt\/Tests$.html", "members_object" : [{"label" : "discover", "tail" : "(fingerprints: Seq[Fingerprint], definitions: Seq[Definition], log: Logger): (Seq[TestDefinition], Set[String])", "member" : "sbt.Tests.discover", "link" : "sbt\/Tests$.html#discover(fingerprints:Seq[sbt.testing.Fingerprint],definitions:Seq[xsbti.api.Definition],log:sbt.util.Logger):(Seq[sbt.TestDefinition],Set[String])", "kind" : "def"}, {"label" : "allDefs", "tail" : "(analysis: CompileAnalysis): Seq[Definition]", "member" : "sbt.Tests.allDefs", "link" : "sbt\/Tests$.html#allDefs(analysis:xsbti.compile.CompileAnalysis):Seq[xsbti.api.Definition]", "kind" : "def"}, {"label" : "discover", "tail" : "(frameworks: Seq[Framework], analysis: CompileAnalysis, log: Logger): (Seq[TestDefinition], Set[String])", "member" : "sbt.Tests.discover", "link" : "sbt\/Tests$.html#discover(frameworks:Seq[sbt.testing.Framework],analysis:xsbti.compile.CompileAnalysis,log:sbt.util.Logger):(Seq[sbt.TestDefinition],Set[String])", "kind" : "def"}, {"label" : "overall", "tail" : "(results: Iterable[TestResult]): TestResult", "member" : "sbt.Tests.overall", "link" : "sbt\/Tests$.html#overall(results:Iterable[sbt.protocol.testing.TestResult]):sbt.protocol.testing.TestResult", "kind" : "def"}, {"label" : "foldTasks", "tail" : "(results: Seq[Task[Output]], parallel: Boolean): Task[Output]", "member" : "sbt.Tests.foldTasks", "link" : "sbt\/Tests$.html#foldTasks(results:Seq[sbt.Task[sbt.Tests.Output]],parallel:Boolean):sbt.Task[sbt.Tests.Output]", "kind" : "def"}, {"label" : "processResults", "tail" : "(results: Iterable[(String, SuiteResult)]): Output", "member" : "sbt.Tests.processResults", "link" : "sbt\/Tests$.html#processResults(results:Iterable[(String,sbt.SuiteResult)]):sbt.Tests.Output", "kind" : "def"}, {"label" : "makeSerial", "tail" : "(loader: ClassLoader, runnables: Seq[TestRunnable], setupTasks: Task[Unit], tags: Seq[(Tag, Int)]): Task[List[(String, SuiteResult)]]", "member" : "sbt.Tests.makeSerial", "link" : "sbt\/Tests$.html#makeSerial(loader:ClassLoader,runnables:Seq[sbt.Tests.TestRunnable],setupTasks:sbt.Task[Unit],tags:Seq[(sbt.ConcurrentRestrictions.Tag,Int)]):sbt.Task[List[(String,sbt.SuiteResult)]]", "kind" : "def"}, {"label" : "toTask", "tail" : "(loader: ClassLoader, name: String, fun: TestFunction, tags: Seq[(Tag, Int)]): Task[Map[String, SuiteResult]]", "member" : "sbt.Tests.toTask", "link" : "sbt\/Tests$.html#toTask(loader:ClassLoader,name:String,fun:sbt.TestFunction,tags:Seq[(sbt.ConcurrentRestrictions.Tag,Int)]):sbt.Task[Map[String,sbt.SuiteResult]]", "kind" : "def"}, {"label" : "toTasks", "tail" : "(loader: ClassLoader, runnables: Seq[TestRunnable], tags: Seq[(Tag, Int)]): Task[Map[String, SuiteResult]]", "member" : "sbt.Tests.toTasks", "link" : "sbt\/Tests$.html#toTasks(loader:ClassLoader,runnables:Seq[sbt.Tests.TestRunnable],tags:Seq[(sbt.ConcurrentRestrictions.Tag,Int)]):sbt.Task[Map[String,sbt.SuiteResult]]", "kind" : "def"}, {"label" : "makeParallel", "tail" : "(loader: ClassLoader, runnables: Iterable[TestRunnable], setupTasks: Task[Unit], tags: Seq[(Tag, Int)]): Task[Map[String, SuiteResult]]", "member" : "sbt.Tests.makeParallel", "link" : "sbt\/Tests$.html#makeParallel(loader:ClassLoader,runnables:Iterable[sbt.Tests.TestRunnable],setupTasks:sbt.Task[Unit],tags:Seq[(sbt.ConcurrentRestrictions.Tag,Int)]):sbt.Task[Map[String,sbt.SuiteResult]]", "kind" : "def"}, {"label" : "TestRunnable", "tail" : "", "member" : "sbt.Tests.TestRunnable", "link" : "sbt\/Tests$.html#TestRunnable=(String,sbt.TestFunction)", "kind" : "type"}, {"label" : "testTask", "tail" : "(loader: ClassLoader, frameworks: Map[TestFramework, Framework], runners: Map[TestFramework, Runner], tests: Vector[TestDefinition], userSetup: Iterable[(ClassLoader) ⇒ Unit], userCleanup: Iterable[(ClassLoader) ⇒ Unit], log: ManagedLogger, testListeners: Vector[TestReportListener], config: Execution): Task[Output]", "member" : "sbt.Tests.testTask", "link" : "sbt\/Tests$.html#testTask(loader:ClassLoader,frameworks:Map[sbt.TestFramework,sbt.testing.Framework],runners:Map[sbt.TestFramework,sbt.testing.Runner],tests:Vector[sbt.TestDefinition],userSetup:Iterable[ClassLoader=>Unit],userCleanup:Iterable[ClassLoader=>Unit],log:sbt.internal.util.ManagedLogger,testListeners:Vector[sbt.TestReportListener],config:sbt.Tests.Execution):sbt.Task[sbt.Tests.Output]", "kind" : "def"}, {"label" : "apply", "tail" : "(frameworks: Map[TestFramework, Framework], testLoader: ClassLoader, runners: Map[TestFramework, Runner], discovered: Vector[TestDefinition], config: Execution, log: ManagedLogger): Task[Output]", "member" : "sbt.Tests.apply", "link" : "sbt\/Tests$.html#apply(frameworks:Map[sbt.TestFramework,sbt.testing.Framework],testLoader:ClassLoader,runners:Map[sbt.TestFramework,sbt.testing.Runner],discovered:Vector[sbt.TestDefinition],config:sbt.Tests.Execution,log:sbt.internal.util.ManagedLogger):sbt.Task[sbt.Tests.Output]", "kind" : "def"}, {"label" : "Group", "tail" : "", "member" : "sbt.Tests.Group", "link" : "sbt\/Tests$.html#GroupextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "SubProcess", "tail" : "", "member" : "sbt.Tests.SubProcess", "link" : "sbt\/Tests$.html#SubProcessextendsTests.TestRunPolicywithProductwithSerializable", "kind" : "final case class"}, {"label" : "InProcess", "tail" : "", "member" : "sbt.Tests.InProcess", "link" : "sbt\/Tests$.html#InProcess", "kind" : "object"}, {"label" : "TestRunPolicy", "tail" : "", "member" : "sbt.Tests.TestRunPolicy", "link" : "sbt\/Tests$.html#TestRunPolicyextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Execution", "tail" : "", "member" : "sbt.Tests.Execution", "link" : "sbt\/Tests$.html#ExecutionextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "Argument", "tail" : "", "member" : "sbt.Tests.Argument", "link" : "sbt\/Tests$.html#ArgumentextendsTestOptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Argument", "tail" : "(tf: TestFramework, args: String*): Argument", "member" : "sbt.Tests.Argument", "link" : "sbt\/Tests$.html#Argument(tf:sbt.TestFramework,args:String*):sbt.Tests.Argument", "kind" : "def"}, {"label" : "Argument", "tail" : "(args: String*): Argument", "member" : "sbt.Tests.Argument", "link" : "sbt\/Tests$.html#Argument(args:String*):sbt.Tests.Argument", "kind" : "def"}, {"label" : "Filters", "tail" : "", "member" : "sbt.Tests.Filters", "link" : "sbt\/Tests$.html#FiltersextendsTestOptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Filter", "tail" : "", "member" : "sbt.Tests.Filter", "link" : "sbt\/Tests$.html#FilterextendsTestOptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Listeners", "tail" : "", "member" : "sbt.Tests.Listeners", "link" : "sbt\/Tests$.html#ListenersextendsTestOptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Exclude", "tail" : "", "member" : "sbt.Tests.Exclude", "link" : "sbt\/Tests$.html#ExcludeextendsTestOptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Cleanup", "tail" : "(cleanup: () ⇒ Unit): Cleanup", "member" : "sbt.Tests.Cleanup", "link" : "sbt\/Tests$.html#Cleanup(cleanup:()=>Unit):sbt.Tests.Cleanup", "kind" : "def"}, {"label" : "Cleanup", "tail" : "", "member" : "sbt.Tests.Cleanup", "link" : "sbt\/Tests$.html#CleanupextendsTestOptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Setup", "tail" : "(setup: () ⇒ Unit): Setup", "member" : "sbt.Tests.Setup", "link" : "sbt\/Tests$.html#Setup(setup:()=>Unit):sbt.Tests.Setup", "kind" : "def"}, {"label" : "Setup", "tail" : "", "member" : "sbt.Tests.Setup", "link" : "sbt\/Tests$.html#SetupextendsTestOptionwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Summary", "tail" : "", "member" : "sbt.Tests.Summary", "link" : "sbt\/Tests$.html#SummaryextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "Output", "tail" : "", "member" : "sbt.Tests.Output", "link" : "sbt\/Tests$.html#OutputextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Tests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Tests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Tests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Tests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Tests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Tests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Tests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Tests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Tests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Tests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Tests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Tests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Tests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Tests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Tests$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Tests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Tests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Tests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Tests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.TestsFailedException", "shortDescription" : "", "members_class" : [{"member" : "sbt.TestsFailedException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "sbt\/TestsFailedException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "sbt\/TestsFailedException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "sbt\/TestsFailedException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "sbt\/TestsFailedException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "sbt\/TestsFailedException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/TestsFailedException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/TestsFailedException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "sbt\/TestsFailedException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "sbt\/TestsFailedException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "sbt\/TestsFailedException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "sbt\/TestsFailedException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "sbt\/TestsFailedException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "sbt\/TestsFailedException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestsFailedException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestsFailedException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestsFailedException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestsFailedException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestsFailedException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestsFailedException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestsFailedException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestsFailedException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestsFailedException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestsFailedException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestsFailedException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestsFailedException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestsFailedException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TestsFailedException.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TestsFailedException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestsFailedException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestsFailedException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestsFailedException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/TestsFailedException.html", "kind" : "class"}, {"name" : "sbt.TestsListener", "members_trait" : [{"label" : "contentLogger", "tail" : "(test: TestDefinition): Option[ContentLogger]", "member" : "sbt.TestReportListener.contentLogger", "link" : "sbt\/TestsListener.html#contentLogger(test:sbt.TestDefinition):Option[sbt.ContentLogger]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TestsListener.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TestsListener.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TestsListener.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TestsListener.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TestsListener.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TestsListener.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TestsListener.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestsListener.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestsListener.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TestsListener.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TestsListener.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TestsListener.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TestsListener.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TestsListener.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TestsListener.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TestsListener.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TestsListener.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TestsListener.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TestsListener.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "doComplete", "tail" : "(finalResult: TestResult): Unit", "member" : "sbt.TestsListener.doComplete", "link" : "sbt\/TestsListener.html#doComplete(finalResult:sbt.protocol.testing.TestResult):Unit", "kind" : "abstract def"}, {"label" : "doInit", "tail" : "(): Unit", "member" : "sbt.TestsListener.doInit", "link" : "sbt\/TestsListener.html#doInit():Unit", "kind" : "abstract def"}, {"label" : "endGroup", "tail" : "(name: String, result: TestResult): Unit", "member" : "sbt.TestReportListener.endGroup", "link" : "sbt\/TestsListener.html#endGroup(name:String,result:sbt.protocol.testing.TestResult):Unit", "kind" : "abstract def"}, {"label" : "endGroup", "tail" : "(name: String, t: Throwable): Unit", "member" : "sbt.TestReportListener.endGroup", "link" : "sbt\/TestsListener.html#endGroup(name:String,t:Throwable):Unit", "kind" : "abstract def"}, {"label" : "testEvent", "tail" : "(event: TestEvent): Unit", "member" : "sbt.TestReportListener.testEvent", "link" : "sbt\/TestsListener.html#testEvent(event:sbt.TestEvent):Unit", "kind" : "abstract def"}, {"label" : "startGroup", "tail" : "(name: String): Unit", "member" : "sbt.TestReportListener.startGroup", "link" : "sbt\/TestsListener.html#startGroup(name:String):Unit", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/TestsListener.html", "kind" : "trait"}, {"name" : "sbt.This", "shortDescription" : "This is a scope component that represents not beingscoped by the user, which later could be further scoped automaticallyby sbt.", "object" : "sbt\/This$.html", "members_object" : [{"label" : "isSelect", "tail" : "(): Boolean", "member" : "sbt.ScopeAxis.isSelect", "link" : "sbt\/This$.html#isSelect:Boolean", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Nothing) ⇒ T): ScopeAxis[T]", "member" : "sbt.ScopeAxis.map", "link" : "sbt\/This$.html#map[T](f:S=>T):sbt.ScopeAxis[T]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[Nothing]", "member" : "sbt.ScopeAxis.toOption", "link" : "sbt\/This$.html#toOption:Option[S]", "kind" : "def"}, {"label" : "fold", "tail" : "(f: (Nothing) ⇒ T, ifZero: ⇒ T, ifThis: ⇒ T): T", "member" : "sbt.ScopeAxis.fold", "link" : "sbt\/This$.html#fold[T](f:S=>T,ifZero:=>T,ifThis:=>T):T", "kind" : "def"}, {"label" : "foldStrict", "tail" : "(f: (Nothing) ⇒ T, ifZero: T, ifThis: T): T", "member" : "sbt.ScopeAxis.foldStrict", "link" : "sbt\/This$.html#foldStrict[T](f:S=>T,ifZero:T,ifThis:T):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/This$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/This$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/This$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/This$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/This$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/This$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/This$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/This$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/This$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/This$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/This$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/This$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/This$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/This$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/This$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/This$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/This$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.ThisBuild", "shortDescription" : "Identifies the build for the current context.", "object" : "sbt\/ThisBuild$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ThisBuild$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ThisBuild$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ThisBuild$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ThisBuild$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ThisBuild$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ThisBuild$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ThisBuild$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ThisBuild$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ThisBuild$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ThisBuild$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ThisBuild$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ThisBuild$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ThisBuild$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ThisBuild$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ThisBuild$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ThisBuild$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ThisBuild$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.ThisProject", "shortDescription" : "Identifies the project for the current context.", "object" : "sbt\/ThisProject$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/ThisProject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/ThisProject$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/ThisProject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/ThisProject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/ThisProject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/ThisProject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/ThisProject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ThisProject$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ThisProject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/ThisProject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/ThisProject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/ThisProject$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/ThisProject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/ThisProject$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/ThisProject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/ThisProject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/ThisProject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.TrapExit", "shortDescription" : "Provides an approximation to isolated execution within a single JVM.", "object" : "sbt\/TrapExit$.html", "members_object" : [{"label" : "uninstallManager", "tail" : "(previous: SecurityManager): Unit", "member" : "sbt.TrapExit.uninstallManager", "link" : "sbt\/TrapExit$.html#uninstallManager(previous:SecurityManager):Unit", "kind" : "def"}, {"label" : "installManager", "tail" : "(): SecurityManager", "member" : "sbt.TrapExit.installManager", "link" : "sbt\/TrapExit$.html#installManager():SecurityManager", "kind" : "def"}, {"label" : "apply", "tail" : "(execute: ⇒ Unit, log: Logger): Int", "member" : "sbt.TrapExit.apply", "link" : "sbt\/TrapExit$.html#apply(execute:=>Unit,log:sbt.util.Logger):Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TrapExit$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TrapExit$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TrapExit$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TrapExit$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TrapExit$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TrapExit$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TrapExit$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TrapExit$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TrapExit$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TrapExit$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TrapExit$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TrapExit$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TrapExit$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TrapExit$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TrapExit$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TrapExit$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TrapExit$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TrapExit$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TrapExit$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.Triggers", "shortDescription" : "", "members_class" : [{"member" : "sbt.Triggers#<init>", "error" : "unsupported entity"}, {"label" : "onComplete", "tail" : ": (RMap[A, Result]) ⇒ RMap[A, Result]", "member" : "sbt.Triggers.onComplete", "link" : "sbt\/Triggers.html#onComplete:sbt.internal.util.RMap[A,sbt.Result]=>sbt.internal.util.RMap[A,sbt.Result]", "kind" : "val"}, {"label" : "injectFor", "tail" : ": Map[A[_], Seq[A[_]]]", "member" : "sbt.Triggers.injectFor", "link" : "sbt\/Triggers.html#injectFor:scala.collection.Map[A[_],Seq[A[_]]]", "kind" : "val"}, {"label" : "runBefore", "tail" : ": Map[A[_], Seq[A[_]]]", "member" : "sbt.Triggers.runBefore", "link" : "sbt\/Triggers.html#runBefore:scala.collection.Map[A[_],Seq[A[_]]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Triggers.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Triggers.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Triggers.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Triggers.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Triggers.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Triggers.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Triggers.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Triggers.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Triggers.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Triggers.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Triggers.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Triggers.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Triggers.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Triggers.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Triggers.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Triggers.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Triggers.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Triggers.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Triggers.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/Triggers.html", "kind" : "class"}, {"name" : "sbt.TupleSyntax", "members_trait" : [{"label" : "t11ToApp11", "tail" : "(t11: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E], Def.Initialize[F], Def.Initialize[G], Def.Initialize[H], Def.Initialize[I], Def.Initialize[J], Def.Initialize[K])): Apply11[A, B, C, D, E, F, G, H, I, J, K]", "member" : "sbt.TupleSyntax.t11ToApp11", "link" : "sbt\/TupleSyntax.html#t11ToApp11[A,B,C,D,E,F,G,H,I,J,K](t11:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E],sbt.Def.Initialize[F],sbt.Def.Initialize[G],sbt.Def.Initialize[H],sbt.Def.Initialize[I],sbt.Def.Initialize[J],sbt.Def.Initialize[K])):sbt.Scoped.Apply11[A,B,C,D,E,F,G,H,I,J,K]", "kind" : "implicit def"}, {"label" : "t10ToApp10", "tail" : "(t10: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E], Def.Initialize[F], Def.Initialize[G], Def.Initialize[H], Def.Initialize[I], Def.Initialize[J])): Apply10[A, B, C, D, E, F, G, H, I, J]", "member" : "sbt.TupleSyntax.t10ToApp10", "link" : "sbt\/TupleSyntax.html#t10ToApp10[A,B,C,D,E,F,G,H,I,J](t10:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E],sbt.Def.Initialize[F],sbt.Def.Initialize[G],sbt.Def.Initialize[H],sbt.Def.Initialize[I],sbt.Def.Initialize[J])):sbt.Scoped.Apply10[A,B,C,D,E,F,G,H,I,J]", "kind" : "implicit def"}, {"label" : "t9ToApp9", "tail" : "(t9: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E], Def.Initialize[F], Def.Initialize[G], Def.Initialize[H], Def.Initialize[I])): Apply9[A, B, C, D, E, F, G, H, I]", "member" : "sbt.TupleSyntax.t9ToApp9", "link" : "sbt\/TupleSyntax.html#t9ToApp9[A,B,C,D,E,F,G,H,I](t9:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E],sbt.Def.Initialize[F],sbt.Def.Initialize[G],sbt.Def.Initialize[H],sbt.Def.Initialize[I])):sbt.Scoped.Apply9[A,B,C,D,E,F,G,H,I]", "kind" : "implicit def"}, {"label" : "t8ToApp8", "tail" : "(t8: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E], Def.Initialize[F], Def.Initialize[G], Def.Initialize[H])): Apply8[A, B, C, D, E, F, G, H]", "member" : "sbt.TupleSyntax.t8ToApp8", "link" : "sbt\/TupleSyntax.html#t8ToApp8[A,B,C,D,E,F,G,H](t8:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E],sbt.Def.Initialize[F],sbt.Def.Initialize[G],sbt.Def.Initialize[H])):sbt.Scoped.Apply8[A,B,C,D,E,F,G,H]", "kind" : "implicit def"}, {"label" : "t7ToApp7", "tail" : "(t7: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E], Def.Initialize[F], Def.Initialize[G])): Apply7[A, B, C, D, E, F, G]", "member" : "sbt.TupleSyntax.t7ToApp7", "link" : "sbt\/TupleSyntax.html#t7ToApp7[A,B,C,D,E,F,G](t7:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E],sbt.Def.Initialize[F],sbt.Def.Initialize[G])):sbt.Scoped.Apply7[A,B,C,D,E,F,G]", "kind" : "implicit def"}, {"label" : "t6ToApp6", "tail" : "(t6: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E], Def.Initialize[F])): Apply6[A, B, C, D, E, F]", "member" : "sbt.TupleSyntax.t6ToApp6", "link" : "sbt\/TupleSyntax.html#t6ToApp6[A,B,C,D,E,F](t6:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E],sbt.Def.Initialize[F])):sbt.Scoped.Apply6[A,B,C,D,E,F]", "kind" : "implicit def"}, {"label" : "t5ToApp5", "tail" : "(t5: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E])): Apply5[A, B, C, D, E]", "member" : "sbt.TupleSyntax.t5ToApp5", "link" : "sbt\/TupleSyntax.html#t5ToApp5[A,B,C,D,E](t5:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E])):sbt.Scoped.Apply5[A,B,C,D,E]", "kind" : "implicit def"}, {"label" : "t4ToApp4", "tail" : "(t4: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D])): Apply4[A, B, C, D]", "member" : "sbt.TupleSyntax.t4ToApp4", "link" : "sbt\/TupleSyntax.html#t4ToApp4[A,B,C,D](t4:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D])):sbt.Scoped.Apply4[A,B,C,D]", "kind" : "implicit def"}, {"label" : "t3ToApp3", "tail" : "(t3: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C])): Apply3[A, B, C]", "member" : "sbt.TupleSyntax.t3ToApp3", "link" : "sbt\/TupleSyntax.html#t3ToApp3[A,B,C](t3:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C])):sbt.Scoped.Apply3[A,B,C]", "kind" : "implicit def"}, {"label" : "t2ToApp2", "tail" : "(t2: (Def.Initialize[A], Def.Initialize[B])): Apply2[A, B]", "member" : "sbt.TupleSyntax.t2ToApp2", "link" : "sbt\/TupleSyntax.html#t2ToApp2[A,B](t2:(sbt.Def.Initialize[A],sbt.Def.Initialize[B])):sbt.Scoped.Apply2[A,B]", "kind" : "implicit def"}, {"label" : "t11ToTable11", "tail" : "(t11: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E], ScopedTaskable[F], ScopedTaskable[G], ScopedTaskable[H], ScopedTaskable[I], ScopedTaskable[J], ScopedTaskable[K])): RichTaskable11[A, B, C, D, E, F, G, H, I, J, K]", "member" : "sbt.TupleSyntax.t11ToTable11", "link" : "sbt\/TupleSyntax.html#t11ToTable11[A,B,C,D,E,F,G,H,I,J,K](t11:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E],sbt.ScopedTaskable[F],sbt.ScopedTaskable[G],sbt.ScopedTaskable[H],sbt.ScopedTaskable[I],sbt.ScopedTaskable[J],sbt.ScopedTaskable[K])):sbt.Scoped.RichTaskable11[A,B,C,D,E,F,G,H,I,J,K]", "kind" : "implicit def"}, {"label" : "t10ToTable10", "tail" : "(t10: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E], ScopedTaskable[F], ScopedTaskable[G], ScopedTaskable[H], ScopedTaskable[I], ScopedTaskable[J])): RichTaskable10[A, B, C, D, E, F, G, H, I, J]", "member" : "sbt.TupleSyntax.t10ToTable10", "link" : "sbt\/TupleSyntax.html#t10ToTable10[A,B,C,D,E,F,G,H,I,J](t10:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E],sbt.ScopedTaskable[F],sbt.ScopedTaskable[G],sbt.ScopedTaskable[H],sbt.ScopedTaskable[I],sbt.ScopedTaskable[J])):sbt.Scoped.RichTaskable10[A,B,C,D,E,F,G,H,I,J]", "kind" : "implicit def"}, {"label" : "t9ToTable9", "tail" : "(t9: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E], ScopedTaskable[F], ScopedTaskable[G], ScopedTaskable[H], ScopedTaskable[I])): RichTaskable9[A, B, C, D, E, F, G, H, I]", "member" : "sbt.TupleSyntax.t9ToTable9", "link" : "sbt\/TupleSyntax.html#t9ToTable9[A,B,C,D,E,F,G,H,I](t9:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E],sbt.ScopedTaskable[F],sbt.ScopedTaskable[G],sbt.ScopedTaskable[H],sbt.ScopedTaskable[I])):sbt.Scoped.RichTaskable9[A,B,C,D,E,F,G,H,I]", "kind" : "implicit def"}, {"label" : "t8ToTable8", "tail" : "(t8: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E], ScopedTaskable[F], ScopedTaskable[G], ScopedTaskable[H])): RichTaskable8[A, B, C, D, E, F, G, H]", "member" : "sbt.TupleSyntax.t8ToTable8", "link" : "sbt\/TupleSyntax.html#t8ToTable8[A,B,C,D,E,F,G,H](t8:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E],sbt.ScopedTaskable[F],sbt.ScopedTaskable[G],sbt.ScopedTaskable[H])):sbt.Scoped.RichTaskable8[A,B,C,D,E,F,G,H]", "kind" : "implicit def"}, {"label" : "t7ToTable7", "tail" : "(t7: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E], ScopedTaskable[F], ScopedTaskable[G])): RichTaskable7[A, B, C, D, E, F, G]", "member" : "sbt.TupleSyntax.t7ToTable7", "link" : "sbt\/TupleSyntax.html#t7ToTable7[A,B,C,D,E,F,G](t7:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E],sbt.ScopedTaskable[F],sbt.ScopedTaskable[G])):sbt.Scoped.RichTaskable7[A,B,C,D,E,F,G]", "kind" : "implicit def"}, {"label" : "t6ToTable6", "tail" : "(t6: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E], ScopedTaskable[F])): RichTaskable6[A, B, C, D, E, F]", "member" : "sbt.TupleSyntax.t6ToTable6", "link" : "sbt\/TupleSyntax.html#t6ToTable6[A,B,C,D,E,F](t6:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E],sbt.ScopedTaskable[F])):sbt.Scoped.RichTaskable6[A,B,C,D,E,F]", "kind" : "implicit def"}, {"label" : "t5ToTable5", "tail" : "(t5: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E])): RichTaskable5[A, B, C, D, E]", "member" : "sbt.TupleSyntax.t5ToTable5", "link" : "sbt\/TupleSyntax.html#t5ToTable5[A,B,C,D,E](t5:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E])):sbt.Scoped.RichTaskable5[A,B,C,D,E]", "kind" : "implicit def"}, {"label" : "t4ToTable4", "tail" : "(t4: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D])): RichTaskable4[A, B, C, D]", "member" : "sbt.TupleSyntax.t4ToTable4", "link" : "sbt\/TupleSyntax.html#t4ToTable4[A,B,C,D](t4:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D])):sbt.Scoped.RichTaskable4[A,B,C,D]", "kind" : "implicit def"}, {"label" : "t3ToTable3", "tail" : "(t3: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C])): RichTaskable3[A, B, C]", "member" : "sbt.TupleSyntax.t3ToTable3", "link" : "sbt\/TupleSyntax.html#t3ToTable3[A,B,C](t3:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C])):sbt.Scoped.RichTaskable3[A,B,C]", "kind" : "implicit def"}, {"label" : "t2ToTable2", "tail" : "(t2: (ScopedTaskable[A], ScopedTaskable[B])): RichTaskable2[A, B]", "member" : "sbt.TupleSyntax.t2ToTable2", "link" : "sbt\/TupleSyntax.html#t2ToTable2[A,B](t2:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B])):sbt.Scoped.RichTaskable2[A,B]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TupleSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TupleSyntax.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TupleSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TupleSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TupleSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TupleSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TupleSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TupleSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TupleSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TupleSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TupleSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TupleSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TupleSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TupleSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TupleSyntax.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TupleSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TupleSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TupleSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TupleSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "The sbt 0.10 style DSL was deprecated in 0.13.13, favouring the use of the '.value' macro.", "object" : "sbt\/TupleSyntax$.html", "members_object" : [{"label" : "t11ToApp11", "tail" : "(t11: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E], Def.Initialize[F], Def.Initialize[G], Def.Initialize[H], Def.Initialize[I], Def.Initialize[J], Def.Initialize[K])): Apply11[A, B, C, D, E, F, G, H, I, J, K]", "member" : "sbt.TupleSyntax.t11ToApp11", "link" : "sbt\/TupleSyntax$.html#t11ToApp11[A,B,C,D,E,F,G,H,I,J,K](t11:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E],sbt.Def.Initialize[F],sbt.Def.Initialize[G],sbt.Def.Initialize[H],sbt.Def.Initialize[I],sbt.Def.Initialize[J],sbt.Def.Initialize[K])):sbt.Scoped.Apply11[A,B,C,D,E,F,G,H,I,J,K]", "kind" : "implicit def"}, {"label" : "t10ToApp10", "tail" : "(t10: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E], Def.Initialize[F], Def.Initialize[G], Def.Initialize[H], Def.Initialize[I], Def.Initialize[J])): Apply10[A, B, C, D, E, F, G, H, I, J]", "member" : "sbt.TupleSyntax.t10ToApp10", "link" : "sbt\/TupleSyntax$.html#t10ToApp10[A,B,C,D,E,F,G,H,I,J](t10:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E],sbt.Def.Initialize[F],sbt.Def.Initialize[G],sbt.Def.Initialize[H],sbt.Def.Initialize[I],sbt.Def.Initialize[J])):sbt.Scoped.Apply10[A,B,C,D,E,F,G,H,I,J]", "kind" : "implicit def"}, {"label" : "t9ToApp9", "tail" : "(t9: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E], Def.Initialize[F], Def.Initialize[G], Def.Initialize[H], Def.Initialize[I])): Apply9[A, B, C, D, E, F, G, H, I]", "member" : "sbt.TupleSyntax.t9ToApp9", "link" : "sbt\/TupleSyntax$.html#t9ToApp9[A,B,C,D,E,F,G,H,I](t9:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E],sbt.Def.Initialize[F],sbt.Def.Initialize[G],sbt.Def.Initialize[H],sbt.Def.Initialize[I])):sbt.Scoped.Apply9[A,B,C,D,E,F,G,H,I]", "kind" : "implicit def"}, {"label" : "t8ToApp8", "tail" : "(t8: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E], Def.Initialize[F], Def.Initialize[G], Def.Initialize[H])): Apply8[A, B, C, D, E, F, G, H]", "member" : "sbt.TupleSyntax.t8ToApp8", "link" : "sbt\/TupleSyntax$.html#t8ToApp8[A,B,C,D,E,F,G,H](t8:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E],sbt.Def.Initialize[F],sbt.Def.Initialize[G],sbt.Def.Initialize[H])):sbt.Scoped.Apply8[A,B,C,D,E,F,G,H]", "kind" : "implicit def"}, {"label" : "t7ToApp7", "tail" : "(t7: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E], Def.Initialize[F], Def.Initialize[G])): Apply7[A, B, C, D, E, F, G]", "member" : "sbt.TupleSyntax.t7ToApp7", "link" : "sbt\/TupleSyntax$.html#t7ToApp7[A,B,C,D,E,F,G](t7:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E],sbt.Def.Initialize[F],sbt.Def.Initialize[G])):sbt.Scoped.Apply7[A,B,C,D,E,F,G]", "kind" : "implicit def"}, {"label" : "t6ToApp6", "tail" : "(t6: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E], Def.Initialize[F])): Apply6[A, B, C, D, E, F]", "member" : "sbt.TupleSyntax.t6ToApp6", "link" : "sbt\/TupleSyntax$.html#t6ToApp6[A,B,C,D,E,F](t6:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E],sbt.Def.Initialize[F])):sbt.Scoped.Apply6[A,B,C,D,E,F]", "kind" : "implicit def"}, {"label" : "t5ToApp5", "tail" : "(t5: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D], Def.Initialize[E])): Apply5[A, B, C, D, E]", "member" : "sbt.TupleSyntax.t5ToApp5", "link" : "sbt\/TupleSyntax$.html#t5ToApp5[A,B,C,D,E](t5:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D],sbt.Def.Initialize[E])):sbt.Scoped.Apply5[A,B,C,D,E]", "kind" : "implicit def"}, {"label" : "t4ToApp4", "tail" : "(t4: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C], Def.Initialize[D])): Apply4[A, B, C, D]", "member" : "sbt.TupleSyntax.t4ToApp4", "link" : "sbt\/TupleSyntax$.html#t4ToApp4[A,B,C,D](t4:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C],sbt.Def.Initialize[D])):sbt.Scoped.Apply4[A,B,C,D]", "kind" : "implicit def"}, {"label" : "t3ToApp3", "tail" : "(t3: (Def.Initialize[A], Def.Initialize[B], Def.Initialize[C])): Apply3[A, B, C]", "member" : "sbt.TupleSyntax.t3ToApp3", "link" : "sbt\/TupleSyntax$.html#t3ToApp3[A,B,C](t3:(sbt.Def.Initialize[A],sbt.Def.Initialize[B],sbt.Def.Initialize[C])):sbt.Scoped.Apply3[A,B,C]", "kind" : "implicit def"}, {"label" : "t2ToApp2", "tail" : "(t2: (Def.Initialize[A], Def.Initialize[B])): Apply2[A, B]", "member" : "sbt.TupleSyntax.t2ToApp2", "link" : "sbt\/TupleSyntax$.html#t2ToApp2[A,B](t2:(sbt.Def.Initialize[A],sbt.Def.Initialize[B])):sbt.Scoped.Apply2[A,B]", "kind" : "implicit def"}, {"label" : "t11ToTable11", "tail" : "(t11: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E], ScopedTaskable[F], ScopedTaskable[G], ScopedTaskable[H], ScopedTaskable[I], ScopedTaskable[J], ScopedTaskable[K])): RichTaskable11[A, B, C, D, E, F, G, H, I, J, K]", "member" : "sbt.TupleSyntax.t11ToTable11", "link" : "sbt\/TupleSyntax$.html#t11ToTable11[A,B,C,D,E,F,G,H,I,J,K](t11:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E],sbt.ScopedTaskable[F],sbt.ScopedTaskable[G],sbt.ScopedTaskable[H],sbt.ScopedTaskable[I],sbt.ScopedTaskable[J],sbt.ScopedTaskable[K])):sbt.Scoped.RichTaskable11[A,B,C,D,E,F,G,H,I,J,K]", "kind" : "implicit def"}, {"label" : "t10ToTable10", "tail" : "(t10: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E], ScopedTaskable[F], ScopedTaskable[G], ScopedTaskable[H], ScopedTaskable[I], ScopedTaskable[J])): RichTaskable10[A, B, C, D, E, F, G, H, I, J]", "member" : "sbt.TupleSyntax.t10ToTable10", "link" : "sbt\/TupleSyntax$.html#t10ToTable10[A,B,C,D,E,F,G,H,I,J](t10:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E],sbt.ScopedTaskable[F],sbt.ScopedTaskable[G],sbt.ScopedTaskable[H],sbt.ScopedTaskable[I],sbt.ScopedTaskable[J])):sbt.Scoped.RichTaskable10[A,B,C,D,E,F,G,H,I,J]", "kind" : "implicit def"}, {"label" : "t9ToTable9", "tail" : "(t9: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E], ScopedTaskable[F], ScopedTaskable[G], ScopedTaskable[H], ScopedTaskable[I])): RichTaskable9[A, B, C, D, E, F, G, H, I]", "member" : "sbt.TupleSyntax.t9ToTable9", "link" : "sbt\/TupleSyntax$.html#t9ToTable9[A,B,C,D,E,F,G,H,I](t9:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E],sbt.ScopedTaskable[F],sbt.ScopedTaskable[G],sbt.ScopedTaskable[H],sbt.ScopedTaskable[I])):sbt.Scoped.RichTaskable9[A,B,C,D,E,F,G,H,I]", "kind" : "implicit def"}, {"label" : "t8ToTable8", "tail" : "(t8: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E], ScopedTaskable[F], ScopedTaskable[G], ScopedTaskable[H])): RichTaskable8[A, B, C, D, E, F, G, H]", "member" : "sbt.TupleSyntax.t8ToTable8", "link" : "sbt\/TupleSyntax$.html#t8ToTable8[A,B,C,D,E,F,G,H](t8:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E],sbt.ScopedTaskable[F],sbt.ScopedTaskable[G],sbt.ScopedTaskable[H])):sbt.Scoped.RichTaskable8[A,B,C,D,E,F,G,H]", "kind" : "implicit def"}, {"label" : "t7ToTable7", "tail" : "(t7: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E], ScopedTaskable[F], ScopedTaskable[G])): RichTaskable7[A, B, C, D, E, F, G]", "member" : "sbt.TupleSyntax.t7ToTable7", "link" : "sbt\/TupleSyntax$.html#t7ToTable7[A,B,C,D,E,F,G](t7:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E],sbt.ScopedTaskable[F],sbt.ScopedTaskable[G])):sbt.Scoped.RichTaskable7[A,B,C,D,E,F,G]", "kind" : "implicit def"}, {"label" : "t6ToTable6", "tail" : "(t6: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E], ScopedTaskable[F])): RichTaskable6[A, B, C, D, E, F]", "member" : "sbt.TupleSyntax.t6ToTable6", "link" : "sbt\/TupleSyntax$.html#t6ToTable6[A,B,C,D,E,F](t6:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E],sbt.ScopedTaskable[F])):sbt.Scoped.RichTaskable6[A,B,C,D,E,F]", "kind" : "implicit def"}, {"label" : "t5ToTable5", "tail" : "(t5: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D], ScopedTaskable[E])): RichTaskable5[A, B, C, D, E]", "member" : "sbt.TupleSyntax.t5ToTable5", "link" : "sbt\/TupleSyntax$.html#t5ToTable5[A,B,C,D,E](t5:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D],sbt.ScopedTaskable[E])):sbt.Scoped.RichTaskable5[A,B,C,D,E]", "kind" : "implicit def"}, {"label" : "t4ToTable4", "tail" : "(t4: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C], ScopedTaskable[D])): RichTaskable4[A, B, C, D]", "member" : "sbt.TupleSyntax.t4ToTable4", "link" : "sbt\/TupleSyntax$.html#t4ToTable4[A,B,C,D](t4:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C],sbt.ScopedTaskable[D])):sbt.Scoped.RichTaskable4[A,B,C,D]", "kind" : "implicit def"}, {"label" : "t3ToTable3", "tail" : "(t3: (ScopedTaskable[A], ScopedTaskable[B], ScopedTaskable[C])): RichTaskable3[A, B, C]", "member" : "sbt.TupleSyntax.t3ToTable3", "link" : "sbt\/TupleSyntax$.html#t3ToTable3[A,B,C](t3:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B],sbt.ScopedTaskable[C])):sbt.Scoped.RichTaskable3[A,B,C]", "kind" : "implicit def"}, {"label" : "t2ToTable2", "tail" : "(t2: (ScopedTaskable[A], ScopedTaskable[B])): RichTaskable2[A, B]", "member" : "sbt.TupleSyntax.t2ToTable2", "link" : "sbt\/TupleSyntax$.html#t2ToTable2[A,B](t2:(sbt.ScopedTaskable[A],sbt.ScopedTaskable[B])):sbt.Scoped.RichTaskable2[A,B]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/TupleSyntax$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/TupleSyntax$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/TupleSyntax$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/TupleSyntax$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/TupleSyntax$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/TupleSyntax$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/TupleSyntax$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TupleSyntax$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TupleSyntax$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/TupleSyntax$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/TupleSyntax$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/TupleSyntax$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/TupleSyntax$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/TupleSyntax$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/TupleSyntax$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/TupleSyntax$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/TupleSyntax$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/TupleSyntax$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/TupleSyntax$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/TupleSyntax.html", "kind" : "trait"}, {"name" : "sbt.Value", "shortDescription" : "Indicates the task completed normally and produced the given value.", "members_case class" : [{"label" : "toEither", "tail" : "(): Either[Incomplete, T]", "member" : "sbt.Value.toEither", "link" : "sbt\/Value.html#toEither:Either[sbt.Incomplete,T]", "kind" : "def"}, {"member" : "sbt.Value#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": T", "member" : "sbt.Value.value", "link" : "sbt\/Value.html#value:T", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Value.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Value.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Value.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Value.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Value.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Value.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Value.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Value.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Value.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Value.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Value.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Value.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Value.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Value.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Value.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Value.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/Value.html", "kind" : "case class"}, {"name" : "sbt.Watched", "members_trait" : [{"label" : "pollInterval", "tail" : "(): FiniteDuration", "member" : "sbt.Watched.pollInterval", "link" : "sbt\/Watched.html#pollInterval:scala.concurrent.duration.FiniteDuration", "kind" : "def"}, {"label" : "terminateWatch", "tail" : "(key: Int): Boolean", "member" : "sbt.Watched.terminateWatch", "link" : "sbt\/Watched.html#terminateWatch(key:Int):Boolean", "kind" : "def"}, {"label" : "watchSources", "tail" : "(s: State): Seq[WatchSource]", "member" : "sbt.Watched.watchSources", "link" : "sbt\/Watched.html#watchSources(s:sbt.State):Seq[sbt.Watched.WatchSource]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Watched.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Watched.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Watched.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Watched.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Watched.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Watched.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Watched.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Watched.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Watched.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Watched.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Watched.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Watched.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Watched.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Watched.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Watched.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Watched.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Watched.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Watched.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Watched.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/Watched$.html", "members_object" : [{"label" : "Configuration", "tail" : ": AttributeKey[Watched]", "member" : "sbt.Watched.Configuration", "link" : "sbt\/Watched$.html#Configuration:sbt.internal.util.AttributeKey[sbt.Watched]", "kind" : "val"}, {"label" : "ContinuousState", "tail" : ": AttributeKey[WatchState]", "member" : "sbt.Watched.ContinuousState", "link" : "sbt\/Watched$.html#ContinuousState:sbt.internal.util.AttributeKey[sbt.internal.io.WatchState]", "kind" : "val"}, {"label" : "executeContinuously", "tail" : "(watched: Watched, s: State, next: String, repeat: String): State", "member" : "sbt.Watched.executeContinuously", "link" : "sbt\/Watched$.html#executeContinuously(watched:sbt.Watched,s:sbt.State,next:String,repeat:String):sbt.State", "kind" : "def"}, {"label" : "printIfDefined", "tail" : "(msg: String): Unit", "member" : "sbt.Watched.printIfDefined", "link" : "sbt\/Watched$.html#printIfDefined(msg:String):Unit", "kind" : "def"}, {"label" : "isEnter", "tail" : "(key: Int): Boolean", "member" : "sbt.Watched.isEnter", "link" : "sbt\/Watched$.html#isEnter(key:Int):Boolean", "kind" : "def"}, {"label" : "PollDelay", "tail" : ": FiniteDuration", "member" : "sbt.Watched.PollDelay", "link" : "sbt\/Watched$.html#PollDelay:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "empty", "tail" : "(): Watched", "member" : "sbt.Watched.empty", "link" : "sbt\/Watched$.html#empty:sbt.Watched", "kind" : "def"}, {"label" : "multi", "tail" : "(base: Watched, paths: Seq[Watched]): Watched", "member" : "sbt.Watched.multi", "link" : "sbt\/Watched$.html#multi(base:sbt.Watched,paths:Seq[sbt.Watched]):sbt.Watched", "kind" : "def"}, {"label" : "WatchSource", "tail" : "", "member" : "sbt.Watched.WatchSource", "link" : "sbt\/Watched$.html#WatchSource", "kind" : "object"}, {"label" : "WatchSource", "tail" : "", "member" : "sbt.Watched.WatchSource", "link" : "sbt\/Watched$.html#WatchSource=sbt.internal.io.Source", "kind" : "type"}, {"label" : "clearScreen", "tail" : "(): String", "member" : "sbt.Watched.clearScreen", "link" : "sbt\/Watched$.html#clearScreen:String", "kind" : "def"}, {"label" : "clearWhenTriggered", "tail" : ": (WatchState) ⇒ String", "member" : "sbt.Watched.clearWhenTriggered", "link" : "sbt\/Watched$.html#clearWhenTriggered:sbt.internal.io.WatchState=>String", "kind" : "val"}, {"label" : "defaultTriggeredMessage", "tail" : ": (WatchState) ⇒ String", "member" : "sbt.Watched.defaultTriggeredMessage", "link" : "sbt\/Watched$.html#defaultTriggeredMessage:sbt.internal.io.WatchState=>String", "kind" : "val"}, {"label" : "defaultWatchingMessage", "tail" : ": (WatchState) ⇒ String", "member" : "sbt.Watched.defaultWatchingMessage", "link" : "sbt\/Watched$.html#defaultWatchingMessage:sbt.internal.io.WatchState=>String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Watched$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Watched$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Watched$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Watched$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Watched$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Watched$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Watched$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Watched$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Watched$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Watched$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Watched$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Watched$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/Watched$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Watched$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Watched$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/Watched$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Watched$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Watched$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Watched$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/Watched.html", "kind" : "trait"}, {"name" : "sbt.xMain", "shortDescription" : "This class is the entry point for sbt.", "members_class" : [{"label" : "run", "tail" : "(configuration: AppConfiguration): MainResult", "member" : "sbt.xMain.run", "link" : "sbt\/xMain.html#run(configuration:xsbti.AppConfiguration):xsbti.MainResult", "kind" : "def"}, {"member" : "sbt.xMain#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/xMain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/xMain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/xMain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/xMain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/xMain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/xMain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/xMain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/xMain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/xMain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/xMain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/xMain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/xMain.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/xMain.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/xMain.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/xMain.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/xMain.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/xMain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/xMain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/xMain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/xMain.html", "kind" : "class"}, {"name" : "sbt.Zero", "shortDescription" : "Zero is a scope component that represents not scoping.", "object" : "sbt\/Zero$.html", "members_object" : [{"label" : "isSelect", "tail" : "(): Boolean", "member" : "sbt.ScopeAxis.isSelect", "link" : "sbt\/Zero$.html#isSelect:Boolean", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Nothing) ⇒ T): ScopeAxis[T]", "member" : "sbt.ScopeAxis.map", "link" : "sbt\/Zero$.html#map[T](f:S=>T):sbt.ScopeAxis[T]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[Nothing]", "member" : "sbt.ScopeAxis.toOption", "link" : "sbt\/Zero$.html#toOption:Option[S]", "kind" : "def"}, {"label" : "fold", "tail" : "(f: (Nothing) ⇒ T, ifZero: ⇒ T, ifThis: ⇒ T): T", "member" : "sbt.ScopeAxis.fold", "link" : "sbt\/Zero$.html#fold[T](f:S=>T,ifZero:=>T,ifThis:=>T):T", "kind" : "def"}, {"label" : "foldStrict", "tail" : "(f: (Nothing) ⇒ T, ifZero: T, ifThis: T): T", "member" : "sbt.ScopeAxis.foldStrict", "link" : "sbt\/Zero$.html#foldStrict[T](f:S=>T,ifZero:T,ifThis:T):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/Zero$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/Zero$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/Zero$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/Zero$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/Zero$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/Zero$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/Zero$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Zero$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Zero$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/Zero$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/Zero$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/Zero$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/Zero$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/Zero$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/Zero$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/Zero$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/Zero$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "sbt.internal.util.appmacro" : [{"name" : "sbt.internal.util.appmacro.BuilderResult", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "extract", "tail" : "(param: scala.reflect.macros.Universe.ValDef): List[scala.reflect.macros.Universe.ValDef]", "member" : "sbt.internal.util.appmacro.BuilderResult.extract", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#extract(param:BuilderResult.this.ctx.universe.ValDef):List[BuilderResult.this.ctx.universe.ValDef]", "kind" : "abstract def"}, {"label" : "input", "tail" : "(): scala.reflect.macros.Universe.Tree", "member" : "sbt.internal.util.appmacro.BuilderResult.input", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#input:BuilderResult.this.ctx.universe.Tree", "kind" : "abstract def"}, {"label" : "alistInstance", "tail" : "(): scala.reflect.macros.Universe.Tree", "member" : "sbt.internal.util.appmacro.BuilderResult.alistInstance", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#alistInstance:BuilderResult.this.ctx.universe.Tree", "kind" : "abstract def"}, {"label" : "representationC", "tail" : "(): scala.reflect.macros.Universe.PolyType", "member" : "sbt.internal.util.appmacro.BuilderResult.representationC", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#representationC:BuilderResult.this.ctx.universe.PolyType", "kind" : "abstract def"}, {"label" : "ctx", "tail" : ": C", "member" : "sbt.internal.util.appmacro.BuilderResult.ctx", "link" : "sbt\/internal\/util\/appmacro\/BuilderResult.html#ctx:C", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "sbt\/internal\/util\/appmacro\/BuilderResult.html", "kind" : "trait"}, {"name" : "sbt.internal.util.appmacro.ContextUtil", "shortDescription" : "", "object" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html", "members_class" : [{"label" : "transformWrappers", "tail" : "(t: scala.reflect.macros.Universe.Tree, subWrapper: (String, scala.reflect.macros.Universe.Type, scala.reflect.macros.Universe.Tree, scala.reflect.macros.Universe.Tree) ⇒ Converted[ctx.type]): scala.reflect.macros.Universe.Tree", "member" : "sbt.internal.util.appmacro.ContextUtil.transformWrappers", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#transformWrappers(t:ContextUtil.this.ctx.universe.Tree,subWrapper:(String,ContextUtil.this.ctx.universe.Type,ContextUtil.this.ctx.universe.Tree,ContextUtil.this.ctx.universe.Tree)=>sbt.internal.util.appmacro.Converted[ContextUtil.this.ctx.type]):ContextUtil.this.ctx.universe.Tree", "kind" : "def"}, {"label" : "extractTC", "tail" : "(tcp: Singleton, name: String)(it: C.TypeTag[tcp]): C.Type", "member" : "sbt.internal.util.appmacro.ContextUtil.extractTC", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#extractTC(tcp:Singleton,name:String)(implicitit:ContextUtil.this.ctx.TypeTag[sbt.internal.util.appmacro.ContextUtil.<refinement>.type]):ContextUtil.this.ctx.Type", "kind" : "def"}, {"label" : "method", "tail" : "(obj: scala.reflect.macros.Universe.Symbol, name: String): scala.reflect.macros.Universe.Symbol", "member" : "sbt.internal.util.appmacro.ContextUtil.method", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#method(obj:ContextUtil.this.ctx.universe.Symbol,name:String):ContextUtil.this.ctx.universe.Symbol", "kind" : "def"}, {"label" : "select", "tail" : "(t: scala.reflect.macros.Universe.Tree, name: String): scala.reflect.macros.Universe.Tree", "member" : "sbt.internal.util.appmacro.ContextUtil.select", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#select(t:ContextUtil.this.ctx.universe.Tree,name:String):ContextUtil.this.ctx.universe.Tree", "kind" : "def"}, {"label" : "singleton", "tail" : "(i: T)(it: C.TypeTag[i.type]): scala.reflect.macros.Universe.Symbol", "member" : "sbt.internal.util.appmacro.ContextUtil.singleton", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#singleton[T<:Singleton](i:T)(implicitit:ContextUtil.this.ctx.TypeTag[i.type]):ContextUtil.this.ctx.universe.Symbol", "kind" : "def"}, {"label" : "changeOwner", "tail" : "(tree: scala.reflect.macros.Universe.Tree, prev: scala.reflect.macros.Universe.Symbol, next: scala.reflect.macros.Universe.Symbol): Unit", "member" : "sbt.internal.util.appmacro.ContextUtil.changeOwner", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#changeOwner(tree:ContextUtil.this.ctx.universe.Tree,prev:ContextUtil.this.ctx.universe.Symbol,next:ContextUtil.this.ctx.universe.Symbol):Unit", "kind" : "def"}, {"label" : "createFunction", "tail" : "(params: List[scala.reflect.macros.Universe.ValDef], body: scala.reflect.macros.Universe.Tree, functionSym: scala.reflect.macros.Universe.Symbol): scala.reflect.macros.Universe.Tree", "member" : "sbt.internal.util.appmacro.ContextUtil.createFunction", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#createFunction(params:List[ContextUtil.this.ctx.universe.ValDef],body:ContextUtil.this.ctx.universe.Tree,functionSym:ContextUtil.this.ctx.universe.Symbol):ContextUtil.this.ctx.universe.Tree", "kind" : "def"}, {"label" : "refVal", "tail" : "(replaced: scala.reflect.macros.Universe.Tree, vd: scala.reflect.macros.Universe.ValDef): scala.reflect.macros.Universe.Tree", "member" : "sbt.internal.util.appmacro.ContextUtil.refVal", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#refVal(replaced:ContextUtil.this.ctx.universe.Tree,vd:ContextUtil.this.ctx.universe.ValDef):ContextUtil.this.ctx.universe.Tree", "kind" : "def"}, {"label" : "functionType", "tail" : "(args: List[scala.reflect.macros.Universe.Type], result: scala.reflect.macros.Universe.Type): scala.reflect.macros.Universe.Type", "member" : "sbt.internal.util.appmacro.ContextUtil.functionType", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#functionType(args:List[ContextUtil.this.ctx.universe.Type],result:ContextUtil.this.ctx.universe.Type):ContextUtil.this.ctx.universe.Type", "kind" : "def"}, {"label" : "functionSymbol", "tail" : "(pos: scala.reflect.macros.Universe.Position): scala.reflect.macros.Universe.Symbol", "member" : "sbt.internal.util.appmacro.ContextUtil.functionSymbol", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#functionSymbol(pos:ContextUtil.this.ctx.universe.Position):ContextUtil.this.ctx.universe.Symbol", "kind" : "def"}, {"label" : "emptyTypeBounds", "tail" : "(): scala.reflect.macros.Universe.TypeBounds", "member" : "sbt.internal.util.appmacro.ContextUtil.emptyTypeBounds", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#emptyTypeBounds:ContextUtil.this.ctx.universe.TypeBounds", "kind" : "def"}, {"label" : "newTCVariable", "tail" : "(owner: scala.reflect.macros.Universe.Symbol): scala.reflect.macros.Universe.TypeSymbol", "member" : "sbt.internal.util.appmacro.ContextUtil.newTCVariable", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#newTCVariable(owner:ContextUtil.this.ctx.universe.Symbol):ContextUtil.this.ctx.universe.TypeSymbol", "kind" : "def"}, {"label" : "refVar", "tail" : "(variable: scala.reflect.macros.Universe.TypeSymbol): scala.reflect.macros.Universe.Type", "member" : "sbt.internal.util.appmacro.ContextUtil.refVar", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#refVar(variable:ContextUtil.this.ctx.universe.TypeSymbol):ContextUtil.this.ctx.universe.Type", "kind" : "def"}, {"label" : "idTC", "tail" : ": scala.reflect.macros.Universe.Type", "member" : "sbt.internal.util.appmacro.ContextUtil.idTC", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#idTC:ContextUtil.this.ctx.universe.Type", "kind" : "lazy val"}, {"label" : "newTypeVariable", "tail" : "(owner: scala.reflect.macros.Universe.Symbol, prefix: String): scala.reflect.macros.Universe.TypeSymbol", "member" : "sbt.internal.util.appmacro.ContextUtil.newTypeVariable", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#newTypeVariable(owner:ContextUtil.this.ctx.universe.Symbol,prefix:String):ContextUtil.this.ctx.universe.TypeSymbol", "kind" : "def"}, {"label" : "setInfo", "tail" : "(sym: scala.reflect.macros.Universe.Symbol, tpe: scala.reflect.macros.Universe.Type): Unit", "member" : "sbt.internal.util.appmacro.ContextUtil.setInfo", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#setInfo(sym:ContextUtil.this.ctx.universe.Symbol,tpe:ContextUtil.this.ctx.universe.Type):Unit", "kind" : "def"}, {"label" : "setSymbol", "tail" : "(t: _Tree, sym: scala.reflect.macros.Universe.Symbol): Unit", "member" : "sbt.internal.util.appmacro.ContextUtil.setSymbol", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#setSymbol[_Tree](t:_Tree,sym:ContextUtil.this.ctx.universe.Symbol):Unit", "kind" : "def"}, {"label" : "mkTuple", "tail" : "(args: List[scala.reflect.macros.Universe.Tree]): scala.reflect.macros.Universe.Tree", "member" : "sbt.internal.util.appmacro.ContextUtil.mkTuple", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#mkTuple(args:List[ContextUtil.this.ctx.universe.Tree]):ContextUtil.this.ctx.universe.Tree", "kind" : "def"}, {"label" : "localValDef", "tail" : "(tpt: scala.reflect.macros.Universe.Tree, rhs: scala.reflect.macros.Universe.Tree): scala.reflect.macros.Universe.ValDef", "member" : "sbt.internal.util.appmacro.ContextUtil.localValDef", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#localValDef(tpt:ContextUtil.this.ctx.universe.Tree,rhs:ContextUtil.this.ctx.universe.Tree):ContextUtil.this.ctx.universe.ValDef", "kind" : "def"}, {"label" : "freshMethodParameter", "tail" : "(tpe: scala.reflect.macros.Universe.Type): scala.reflect.macros.Universe.ValDef", "member" : "sbt.internal.util.appmacro.ContextUtil.freshMethodParameter", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#freshMethodParameter(tpe:ContextUtil.this.ctx.universe.Type):ContextUtil.this.ctx.universe.ValDef", "kind" : "def"}, {"label" : "checkReferences", "tail" : "(defs: Set[scala.reflect.macros.Universe.Symbol], isWrapper: PropertyChecker): (scala.reflect.macros.Universe.Tree) ⇒ Unit", "member" : "sbt.internal.util.appmacro.ContextUtil.checkReferences", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#checkReferences(defs:scala.collection.Set[ContextUtil.this.ctx.universe.Symbol],isWrapper:ContextUtil.this.PropertyChecker):ContextUtil.this.ctx.universe.Tree=>Unit", "kind" : "def"}, {"label" : "PropertyChecker", "tail" : "", "member" : "sbt.internal.util.appmacro.ContextUtil.PropertyChecker", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#PropertyChecker=(String,ContextUtil.this.ctx.universe.Type,ContextUtil.this.ctx.universe.Tree)=>Boolean", "kind" : "type"}, {"label" : "illegalReference", "tail" : "(defs: Set[scala.reflect.macros.Universe.Symbol], sym: scala.reflect.macros.Universe.Symbol): Boolean", "member" : "sbt.internal.util.appmacro.ContextUtil.illegalReference", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#illegalReference(defs:scala.collection.Set[ContextUtil.this.ctx.universe.Symbol],sym:ContextUtil.this.ctx.universe.Symbol):Boolean", "kind" : "def"}, {"label" : "collectDefs", "tail" : "(tree: scala.reflect.macros.Universe.Tree, isWrapper: (String, scala.reflect.macros.Universe.Type, scala.reflect.macros.Universe.Tree) ⇒ Boolean): Set[scala.reflect.macros.Universe.Symbol]", "member" : "sbt.internal.util.appmacro.ContextUtil.collectDefs", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#collectDefs(tree:ContextUtil.this.ctx.universe.Tree,isWrapper:(String,ContextUtil.this.ctx.universe.Type,ContextUtil.this.ctx.universe.Tree)=>Boolean):scala.collection.Set[ContextUtil.this.ctx.universe.Symbol]", "kind" : "def"}, {"label" : "parameterModifiers", "tail" : ": scala.reflect.macros.Universe.Modifiers", "member" : "sbt.internal.util.appmacro.ContextUtil.parameterModifiers", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#parameterModifiers:ContextUtil.this.ctx.universe.Modifiers", "kind" : "lazy val"}, {"label" : "freshValDef", "tail" : "(tpe: scala.reflect.macros.Universe.Type, pos: scala.reflect.macros.Universe.Position, owner: scala.reflect.macros.Universe.Symbol): scala.reflect.macros.Universe.ValDef", "member" : "sbt.internal.util.appmacro.ContextUtil.freshValDef", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#freshValDef(tpe:ContextUtil.this.ctx.universe.Type,pos:ContextUtil.this.ctx.universe.Position,owner:ContextUtil.this.ctx.universe.Symbol):ContextUtil.this.ctx.universe.ValDef", "kind" : "def"}, {"label" : "freshTermName", "tail" : "(prefix: String): scala.reflect.macros.Universe.TermName", "member" : "sbt.internal.util.appmacro.ContextUtil.freshTermName", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#freshTermName(prefix:String):ContextUtil.this.ctx.universe.TermName", "kind" : "def"}, {"label" : "getPos", "tail" : "(sym: scala.reflect.macros.Universe.Symbol): scala.reflect.macros.Universe.Position", "member" : "sbt.internal.util.appmacro.ContextUtil.getPos", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#getPos(sym:ContextUtil.this.ctx.universe.Symbol):ContextUtil.this.ctx.universe.Position", "kind" : "def"}, {"label" : "localModifiers", "tail" : ": scala.reflect.macros.Universe.Modifiers", "member" : "sbt.internal.util.appmacro.ContextUtil.localModifiers", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#localModifiers:ContextUtil.this.ctx.universe.Modifiers", "kind" : "lazy val"}, {"label" : "alistTC", "tail" : ": scala.reflect.macros.Universe.Type", "member" : "sbt.internal.util.appmacro.ContextUtil.alistTC", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#alistTC:ContextUtil.this.ctx.universe.Type", "kind" : "lazy val"}, {"label" : "alist", "tail" : ": scala.reflect.macros.Universe.Symbol", "member" : "sbt.internal.util.appmacro.ContextUtil.alist", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#alist:ContextUtil.this.ctx.universe.Symbol", "kind" : "lazy val"}, {"label" : "alistType", "tail" : ": C.Type", "member" : "sbt.internal.util.appmacro.ContextUtil.alistType", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#alistType:ContextUtil.this.ctx.Type", "kind" : "lazy val"}, {"label" : "initialOwner", "tail" : ": scala.reflect.macros.Universe.Symbol", "member" : "sbt.internal.util.appmacro.ContextUtil.initialOwner", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#initialOwner:ContextUtil.this.ctx.universe.Symbol", "kind" : "val"}, {"label" : "callsiteTyper", "tail" : "(): (analyzer)#Typer", "member" : "sbt.internal.util.appmacro.ContextUtil.callsiteTyper", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#callsiteTyper:ContextUtil.this.global.analyzer.Typer", "kind" : "def"}, {"label" : "global", "tail" : ": universe.type", "member" : "sbt.internal.util.appmacro.ContextUtil.global", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#global:ContextUtil.this.powerContext.universe.type", "kind" : "val"}, {"label" : "powerContext", "tail" : ": Context", "member" : "sbt.internal.util.appmacro.ContextUtil.powerContext", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#powerContext:reflect.macros.runtime.Context", "kind" : "val"}, {"member" : "sbt.internal.util.appmacro.ContextUtil#<init>", "error" : "unsupported entity"}, {"label" : "ctx", "tail" : ": C", "member" : "sbt.internal.util.appmacro.ContextUtil.ctx", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#ctx:C", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "unexpectedTree", "tail" : "(tree: scala.reflect.macros.Universe.Tree forSome {val _1: C}): Nothing", "member" : "sbt.internal.util.appmacro.ContextUtil.unexpectedTree", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#unexpectedTree[C<:scala.reflect.macros.blackbox.Context](tree:_1.universe.TreeforSome{val_1:C}):Nothing", "kind" : "def"}, {"label" : "selectMacroImpl", "tail" : "(c: Context)(f: (scala.reflect.macros.blackbox.Context.Expr[Any], scala.reflect.macros.blackbox.Context.Position) ⇒ scala.reflect.macros.blackbox.Context.Expr[T])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[T]", "member" : "sbt.internal.util.appmacro.ContextUtil.selectMacroImpl", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#selectMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(f:(c.Expr[Any],c.Position)=>c.Expr[T])(implicitevidence$1:c.WeakTypeTag[T]):c.Expr[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(c: C): ContextUtil[C]", "member" : "sbt.internal.util.appmacro.ContextUtil.apply", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#apply[C<:scala.reflect.macros.blackbox.ContextwithSingleton](c:C):sbt.internal.util.appmacro.ContextUtil[C]", "kind" : "def"}, {"label" : "DynamicReferenceError", "tail" : ": String(\"Illegal dynamic reference\")", "member" : "sbt.internal.util.appmacro.ContextUtil.DynamicReferenceError", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#DynamicReferenceError:String(\"Illegaldynamicreference\")", "kind" : "final val"}, {"label" : "DynamicDependencyError", "tail" : ": String(\"Illegal dynamic dependency\")", "member" : "sbt.internal.util.appmacro.ContextUtil.DynamicDependencyError", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#DynamicDependencyError:String(\"Illegaldynamicdependency\")", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/ContextUtil$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/util\/appmacro\/ContextUtil.html", "kind" : "object"}, {"name" : "sbt.internal.util.appmacro.Convert", "shortDescription" : "", "members_class" : [{"label" : "asPredicate", "tail" : "(c: Context): (String, scala.reflect.macros.blackbox.Context.Type, scala.reflect.macros.blackbox.Context.Tree) ⇒ Boolean", "member" : "sbt.internal.util.appmacro.Convert.asPredicate", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#asPredicate(c:scala.reflect.macros.blackbox.Context):(String,c.Type,c.Tree)=>Boolean", "kind" : "def"}, {"member" : "sbt.internal.util.appmacro.Convert#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/Convert.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(c: Context)(nme: String, in: scala.reflect.macros.blackbox.Context.Tree)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): Converted[c.type]", "member" : "sbt.internal.util.appmacro.Convert.apply", "link" : "sbt\/internal\/util\/appmacro\/Convert.html#apply[T](c:scala.reflect.macros.blackbox.Context)(nme:String,in:c.Tree)(implicitevidence$1:c.WeakTypeTag[T]):sbt.internal.util.appmacro.Converted[c.type]", "kind" : "abstract def"}], "class" : "sbt\/internal\/util\/appmacro\/Convert.html", "kind" : "class"}, {"name" : "sbt.internal.util.appmacro.Converted", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/Converted.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "transform", "tail" : "(f: (C.Tree) ⇒ C.Tree): Converted[C]", "member" : "sbt.internal.util.appmacro.Converted.transform", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#transform(f:C#Tree=>C#Tree):sbt.internal.util.appmacro.Converted[C]", "kind" : "abstract def"}, {"label" : "isSuccess", "tail" : "(): Boolean", "member" : "sbt.internal.util.appmacro.Converted.isSuccess", "link" : "sbt\/internal\/util\/appmacro\/Converted.html#isSuccess:Boolean", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/internal\/util\/appmacro\/Converted$.html", "members_object" : [{"label" : "Success", "tail" : "", "member" : "sbt.internal.util.appmacro.Converted.Success", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#Success", "kind" : "object"}, {"label" : "Success", "tail" : "", "member" : "sbt.internal.util.appmacro.Converted.Success", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#Success[C<:scala.reflect.macros.blackbox.ContextwithSingleton]extendsConverted[C]withProductwithSerializable", "kind" : "final case class"}, {"label" : "NotApplicable", "tail" : "", "member" : "sbt.internal.util.appmacro.Converted.NotApplicable", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#NotApplicable[C<:scala.reflect.macros.blackbox.ContextwithSingleton]extendsConverted[C]", "kind" : "final class"}, {"label" : "Failure", "tail" : "", "member" : "sbt.internal.util.appmacro.Converted.Failure", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#Failure[C<:scala.reflect.macros.blackbox.ContextwithSingleton]extendsConverted[C]withProductwithSerializable", "kind" : "final case class"}, {"label" : "NotApplicable", "tail" : "(): NotApplicable[C]", "member" : "sbt.internal.util.appmacro.Converted.NotApplicable", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#NotApplicable[C<:scala.reflect.macros.blackbox.ContextwithSingleton]:sbt.internal.util.appmacro.Converted.NotApplicable[C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/Converted$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/appmacro\/Converted.html", "kind" : "trait"}, {"name" : "sbt.internal.util.appmacro.Instance", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/Instance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "pure", "tail" : "(t: () ⇒ T): M[T]", "member" : "sbt.internal.util.appmacro.Instance.pure", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#pure[T](t:()=>T):Instance.this.M[T]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(in: M[S], f: (S) ⇒ T): M[T]", "member" : "sbt.internal.util.appmacro.Instance.map", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#map[S,T](in:Instance.this.M[S],f:S=>T):Instance.this.M[T]", "kind" : "abstract def"}, {"label" : "app", "tail" : "(in: K[M], f: (K[Types.Id]) ⇒ Z)(a: AList[K]): M[Z]", "member" : "sbt.internal.util.appmacro.Instance.app", "link" : "sbt\/internal\/util\/appmacro\/Instance.html#app[K[L[x]],Z](in:K[Instance.this.M],f:K[sbt.internal.util.Types.Id]=>Z)(implicita:sbt.internal.util.AList[K]):Instance.this.M[Z]", "kind" : "abstract def"}, {"member" : "sbt.internal.util.appmacro.Instance.M", "error" : "unsupported entity"}], "shortDescription" : "The separate hierarchy from Applicative\/Monad is for two reasons.", "object" : "sbt\/internal\/util\/appmacro\/Instance$.html", "members_object" : [{"label" : "Composed", "tail" : "", "member" : "sbt.internal.util.appmacro.Instance.Composed", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#Composed[A[_],B[_]]extendsInstance", "kind" : "class"}, {"label" : "compose", "tail" : "(a: AI[A], b: AI[B]): Instance { type M[x] = A[B[x]] }", "member" : "sbt.internal.util.appmacro.Instance.compose", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#compose[A[_],B[_]](implicita:sbt.internal.util.appmacro.Instance.AI[A],implicitb:sbt.internal.util.appmacro.Instance.AI[B]):sbt.internal.util.appmacro.Instance{typeM[x]=A[B[x]]}", "kind" : "def"}, {"label" : "AI", "tail" : "", "member" : "sbt.internal.util.appmacro.Instance.AI", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#AI[A[_]]=sbt.internal.util.appmacro.Instance{typeM[x]=A[x]}", "kind" : "type"}, {"label" : "applicativeInstance", "tail" : "(ap: Applicative[A]): Instance { type M[x] = A[x] }", "member" : "sbt.internal.util.appmacro.Instance.applicativeInstance", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#applicativeInstance[A[_]](implicitap:sbt.internal.util.Classes.Applicative[A]):sbt.internal.util.appmacro.Instance{typeM[x]=A[x]}", "kind" : "implicit def"}, {"label" : "contImpl", "tail" : "(c: Context, i: Instance with Singleton, convert: Convert, builder: TupleBuilder, linter: LinterDSL)(t: Either[scala.reflect.macros.blackbox.Context.Expr[T], scala.reflect.macros.blackbox.Context.Expr[(i)#M[T]]], inner: Transform[c.type, N])(tt: scala.reflect.macros.blackbox.Context.WeakTypeTag[T], nt: scala.reflect.macros.blackbox.Context.WeakTypeTag[N[T]], it: scala.reflect.macros.blackbox.Context.TypeTag[i]): scala.reflect.macros.blackbox.Context.Expr[(i)#M[N[T]]]", "member" : "sbt.internal.util.appmacro.Instance.contImpl", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#contImpl[T,N[_]](c:scala.reflect.macros.blackbox.Context,i:sbt.internal.util.appmacro.InstancewithSingleton,convert:sbt.internal.util.appmacro.Convert,builder:sbt.internal.util.appmacro.TupleBuilder,linter:sbt.internal.util.appmacro.LinterDSL)(t:Either[c.Expr[T],c.Expr[i.M[T]]],inner:sbt.internal.util.appmacro.Instance.Transform[c.type,N])(implicittt:c.WeakTypeTag[T],implicitnt:c.WeakTypeTag[N[T]],implicitit:c.TypeTag[sbt.internal.util.appmacro.Instance.<refinement>.type]):c.Expr[i.M[N[T]]]", "kind" : "def"}, {"label" : "idTransform", "tail" : "(): Transform[C, Types.Id]", "member" : "sbt.internal.util.appmacro.Instance.idTransform", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#idTransform[C<:scala.reflect.macros.blackbox.ContextwithSingleton]:sbt.internal.util.appmacro.Instance.Transform[C,sbt.internal.util.Types.Id]", "kind" : "def"}, {"label" : "Transform", "tail" : "", "member" : "sbt.internal.util.appmacro.Instance.Transform", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#Transform[C<:scala.reflect.macros.blackbox.ContextwithSingleton,N[_]]extendsAnyRef", "kind" : "trait"}, {"label" : "Input", "tail" : "", "member" : "sbt.internal.util.appmacro.Instance.Input", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#Input[U<:scala.reflect.macros.UniversewithSingleton]extendsAnyRef", "kind" : "final class"}, {"label" : "InstanceTCName", "tail" : ": String(\"M\")", "member" : "sbt.internal.util.appmacro.Instance.InstanceTCName", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#InstanceTCName:String(\"M\")", "kind" : "final val"}, {"label" : "MapName", "tail" : ": String(\"map\")", "member" : "sbt.internal.util.appmacro.Instance.MapName", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#MapName:String(\"map\")", "kind" : "final val"}, {"label" : "PureName", "tail" : ": String(\"pure\")", "member" : "sbt.internal.util.appmacro.Instance.PureName", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#PureName:String(\"pure\")", "kind" : "final val"}, {"label" : "FlattenName", "tail" : ": String(\"flatten\")", "member" : "sbt.internal.util.appmacro.Instance.FlattenName", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#FlattenName:String(\"flatten\")", "kind" : "final val"}, {"label" : "ApplyName", "tail" : ": String(\"app\")", "member" : "sbt.internal.util.appmacro.Instance.ApplyName", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#ApplyName:String(\"app\")", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/Instance$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/appmacro\/Instance.html", "kind" : "trait"}, {"name" : "sbt.internal.util.appmacro.KListBuilder", "shortDescription" : "A TupleBuilder that uses a KList as the tuple representation.", "object" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html", "members_object" : [{"label" : "make", "tail" : "(c: Context)(mt: scala.reflect.macros.blackbox.Context.Type, inputs: Inputs[universe.type]): BuilderResult[c.type]", "member" : "sbt.internal.util.appmacro.KListBuilder.make", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#make(c:scala.reflect.macros.blackbox.Context)(mt:c.Type,inputs:sbt.internal.util.appmacro.KListBuilder.Inputs[c.universe.type]):sbt.internal.util.appmacro.BuilderResult[c.type]", "kind" : "def"}, {"label" : "Inputs", "tail" : "", "member" : "sbt.internal.util.appmacro.TupleBuilder.Inputs", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#Inputs[U<:scala.reflect.macros.UniversewithSingleton]=List[sbt.internal.util.appmacro.Instance.Input[U]]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/KListBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.appmacro.LinterDSL", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "runLinter", "tail" : "(ctx: Context)(tree: scala.reflect.macros.blackbox.Context.Tree): Unit", "member" : "sbt.internal.util.appmacro.LinterDSL.runLinter", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL.html#runLinter(ctx:scala.reflect.macros.blackbox.Context)(tree:ctx.Tree):Unit", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html", "members_object" : [{"label" : "Empty", "tail" : "", "member" : "sbt.internal.util.appmacro.LinterDSL.Empty", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#Empty", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/LinterDSL$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/internal\/util\/appmacro\/LinterDSL.html", "kind" : "trait"}, {"name" : "sbt.internal.util.appmacro.MixedBuilder", "shortDescription" : "A builder that uses TupleN as the representation for small numbers of inputs (up to TupleNBuilder.MaxInputs)and KList for larger numbers of inputs.", "object" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html", "members_object" : [{"label" : "make", "tail" : "(c: Context)(mt: scala.reflect.macros.blackbox.Context.Type, inputs: Inputs[universe.type]): BuilderResult[c.type]", "member" : "sbt.internal.util.appmacro.MixedBuilder.make", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#make(c:scala.reflect.macros.blackbox.Context)(mt:c.Type,inputs:sbt.internal.util.appmacro.MixedBuilder.Inputs[c.universe.type]):sbt.internal.util.appmacro.BuilderResult[c.type]", "kind" : "def"}, {"label" : "Inputs", "tail" : "", "member" : "sbt.internal.util.appmacro.TupleBuilder.Inputs", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#Inputs[U<:scala.reflect.macros.UniversewithSingleton]=List[sbt.internal.util.appmacro.Instance.Input[U]]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/MixedBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.appmacro.MonadInstance", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "flatten", "tail" : "(in: M[M[T]]): M[T]", "member" : "sbt.internal.util.appmacro.MonadInstance.flatten", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#flatten[T](in:MonadInstance.this.M[MonadInstance.this.M[T]]):MonadInstance.this.M[T]", "kind" : "abstract def"}, {"label" : "pure", "tail" : "(t: () ⇒ T): M[T]", "member" : "sbt.internal.util.appmacro.Instance.pure", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#pure[T](t:()=>T):Instance.this.M[T]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(in: M[S], f: (S) ⇒ T): M[T]", "member" : "sbt.internal.util.appmacro.Instance.map", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#map[S,T](in:Instance.this.M[S],f:S=>T):Instance.this.M[T]", "kind" : "abstract def"}, {"label" : "app", "tail" : "(in: K[M], f: (K[Types.Id]) ⇒ Z)(a: AList[K]): M[Z]", "member" : "sbt.internal.util.appmacro.Instance.app", "link" : "sbt\/internal\/util\/appmacro\/MonadInstance.html#app[K[L[x]],Z](in:K[Instance.this.M],f:K[sbt.internal.util.Types.Id]=>Z)(implicita:sbt.internal.util.AList[K]):Instance.this.M[Z]", "kind" : "abstract def"}, {"member" : "sbt.internal.util.appmacro.Instance.M", "error" : "unsupported entity"}], "shortDescription" : "", "trait" : "sbt\/internal\/util\/appmacro\/MonadInstance.html", "kind" : "trait"}, {"name" : "sbt.internal.util.appmacro.TupleBuilder", "members_trait" : [{"label" : "Inputs", "tail" : "", "member" : "sbt.internal.util.appmacro.TupleBuilder.Inputs", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#Inputs[U<:scala.reflect.macros.UniversewithSingleton]=List[sbt.internal.util.appmacro.Instance.Input[U]]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "make", "tail" : "(c: Context)(tcType: scala.reflect.macros.blackbox.Context.Type, inputs: Inputs[universe.type]): BuilderResult[c.type]", "member" : "sbt.internal.util.appmacro.TupleBuilder.make", "link" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html#make(c:scala.reflect.macros.blackbox.Context)(tcType:c.Type,inputs:TupleBuilder.this.Inputs[c.universe.type]):sbt.internal.util.appmacro.BuilderResult[c.type]", "kind" : "abstract def"}], "shortDescription" : "A TupleBuilder abstracts the work of constructing a tuple data structure such as a TupleN or KListand extracting values from it.", "trait" : "sbt\/internal\/util\/appmacro\/TupleBuilder.html", "kind" : "trait"}, {"name" : "sbt.internal.util.appmacro.TupleNBuilder", "shortDescription" : "A builder that uses a TupleN as the tuple representation.", "object" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html", "members_object" : [{"label" : "make", "tail" : "(c: Context)(mt: scala.reflect.macros.blackbox.Context.Type, inputs: Inputs[universe.type]): BuilderResult[c.type]", "member" : "sbt.internal.util.appmacro.TupleNBuilder.make", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#make(c:scala.reflect.macros.blackbox.Context)(mt:c.Type,inputs:sbt.internal.util.appmacro.TupleNBuilder.Inputs[c.universe.type]):sbt.internal.util.appmacro.BuilderResult[c.type]", "kind" : "def"}, {"label" : "TupleMethodName", "tail" : ": String(\"tuple\")", "member" : "sbt.internal.util.appmacro.TupleNBuilder.TupleMethodName", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#TupleMethodName:String(\"tuple\")", "kind" : "final val"}, {"label" : "MaxInputs", "tail" : ": Int(11)", "member" : "sbt.internal.util.appmacro.TupleNBuilder.MaxInputs", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#MaxInputs:Int(11)", "kind" : "final val"}, {"label" : "Inputs", "tail" : "", "member" : "sbt.internal.util.appmacro.TupleBuilder.Inputs", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#Inputs[U<:scala.reflect.macros.UniversewithSingleton]=List[sbt.internal.util.appmacro.Instance.Input[U]]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/appmacro\/TupleNBuilder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "xsbt" : [{"name" : "xsbt.IPC", "shortDescription" : "", "object" : "xsbt\/IPC$.html", "members_class" : [{"label" : "receive", "tail" : "(): String", "member" : "xsbt.IPC.receive", "link" : "xsbt\/IPC.html#receive:String", "kind" : "def"}, {"label" : "send", "tail" : "(s: String): Unit", "member" : "xsbt.IPC.send", "link" : "xsbt\/IPC.html#send(s:String):Unit", "kind" : "def"}, {"label" : "port", "tail" : "(): Int", "member" : "xsbt.IPC.port", "link" : "xsbt\/IPC.html#port:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "xsbt\/IPC.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "xsbt\/IPC.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "xsbt\/IPC.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "xsbt\/IPC.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "xsbt\/IPC.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "xsbt\/IPC.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "xsbt\/IPC.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "xsbt\/IPC.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "xsbt\/IPC.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "xsbt\/IPC.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "xsbt\/IPC.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "xsbt\/IPC.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "xsbt\/IPC.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "xsbt\/IPC.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "xsbt\/IPC.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "xsbt\/IPC.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "xsbt\/IPC.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "xsbt\/IPC.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "xsbt\/IPC.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Server", "tail" : "", "member" : "xsbt.IPC.Server", "link" : "xsbt\/IPC$.html#ServerextendsAnyRef", "kind" : "final class"}, {"label" : "server", "tail" : "(port: Int)(f: (IPC) ⇒ Option[T]): T", "member" : "xsbt.IPC.server", "link" : "xsbt\/IPC$.html#server[T](port:Int)(f:xsbt.IPC=>Option[T]):T", "kind" : "def"}, {"label" : "server", "tail" : "(f: (IPC) ⇒ Option[T]): T", "member" : "xsbt.IPC.server", "link" : "xsbt\/IPC$.html#server[T](f:xsbt.IPC=>Option[T]):T", "kind" : "def"}, {"label" : "makeServer", "tail" : "(): ServerSocket", "member" : "xsbt.IPC.makeServer", "link" : "xsbt\/IPC$.html#makeServer:java.net.ServerSocket", "kind" : "def"}, {"label" : "unmanagedServer", "tail" : "(): Server", "member" : "xsbt.IPC.unmanagedServer", "link" : "xsbt\/IPC$.html#unmanagedServer:xsbt.IPC.Server", "kind" : "def"}, {"label" : "pullServer", "tail" : "(f: (Server) ⇒ T): T", "member" : "xsbt.IPC.pullServer", "link" : "xsbt\/IPC$.html#pullServer[T](f:xsbt.IPC.Server=>T):T", "kind" : "def"}, {"label" : "client", "tail" : "(port: Int)(f: (IPC) ⇒ T): T", "member" : "xsbt.IPC.client", "link" : "xsbt\/IPC$.html#client[T](port:Int)(f:xsbt.IPC=>T):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "xsbt\/IPC$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "xsbt\/IPC$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "xsbt\/IPC$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "xsbt\/IPC$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "xsbt\/IPC$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "xsbt\/IPC$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "xsbt\/IPC$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "xsbt\/IPC$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "xsbt\/IPC$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "xsbt\/IPC$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "xsbt\/IPC$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "xsbt\/IPC$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "xsbt\/IPC$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "xsbt\/IPC$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "xsbt\/IPC$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "xsbt\/IPC$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "xsbt\/IPC$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "xsbt\/IPC$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "xsbt\/IPC$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "xsbt\/IPC.html", "kind" : "object"}], "sbt.internal.server" : [{"name" : "sbt.internal.server.NetworkChannel", "shortDescription" : "", "members_class" : [{"label" : "shutdown", "tail" : "(): Unit", "member" : "sbt.internal.server.NetworkChannel.shutdown", "link" : "sbt\/internal\/server\/NetworkChannel.html#shutdown():Unit", "kind" : "def"}, {"label" : "onCommand", "tail" : "(command: CommandMessage): Unit", "member" : "sbt.internal.server.NetworkChannel.onCommand", "link" : "sbt\/internal\/server\/NetworkChannel.html#onCommand(command:sbt.protocol.CommandMessage):Unit", "kind" : "def"}, {"label" : "publishBytes", "tail" : "(event: Array[Byte]): Unit", "member" : "sbt.internal.server.NetworkChannel.publishBytes", "link" : "sbt\/internal\/server\/NetworkChannel.html#publishBytes(event:Array[Byte]):Unit", "kind" : "def"}, {"label" : "publishEventMessage", "tail" : "(event: EventMessage): Unit", "member" : "sbt.internal.server.NetworkChannel.publishEventMessage", "link" : "sbt\/internal\/server\/NetworkChannel.html#publishEventMessage(event:sbt.protocol.EventMessage):Unit", "kind" : "def"}, {"label" : "publishEvent", "tail" : "(event: A)(arg0: JsonFormat[A]): Unit", "member" : "sbt.internal.server.NetworkChannel.publishEvent", "link" : "sbt\/internal\/server\/NetworkChannel.html#publishEvent[A](event:A)(implicitevidence$1:sjsonnew.JsonFormat[A]):Unit", "kind" : "def"}, {"label" : "thread", "tail" : ": Thread", "member" : "sbt.internal.server.NetworkChannel.thread", "link" : "sbt\/internal\/server\/NetworkChannel.html#thread:Thread", "kind" : "val"}, {"member" : "sbt.internal.server.NetworkChannel#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "sbt.internal.server.NetworkChannel.name", "link" : "sbt\/internal\/server\/NetworkChannel.html#name:String", "kind" : "val"}, {"label" : "poll", "tail" : "(): Option[Exec]", "member" : "sbt.internal.CommandChannel.poll", "link" : "sbt\/internal\/server\/NetworkChannel.html#poll:Option[sbt.Exec]", "kind" : "def"}, {"label" : "append", "tail" : "(exec: Exec): Boolean", "member" : "sbt.internal.CommandChannel.append", "link" : "sbt\/internal\/server\/NetworkChannel.html#append(exec:sbt.Exec):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/server\/NetworkChannel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/server\/NetworkChannel.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/server\/NetworkChannel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/server\/NetworkChannel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/server\/NetworkChannel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/server\/NetworkChannel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/server\/NetworkChannel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/server\/NetworkChannel.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/server\/NetworkChannel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/server\/NetworkChannel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/server\/NetworkChannel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/server\/NetworkChannel.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/server\/NetworkChannel.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/server\/NetworkChannel.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/server\/NetworkChannel.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/server\/NetworkChannel.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/server\/NetworkChannel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/server\/NetworkChannel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/server\/NetworkChannel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/server\/NetworkChannel.html", "kind" : "class"}, {"name" : "sbt.internal.server.SettingQuery", "shortDescription" : "", "object" : "sbt\/internal\/server\/SettingQuery$.html", "members_object" : [{"label" : "handleSettingQuery", "tail" : "(req: SettingQuery, structure: BuildStructure): SettingQueryResponse", "member" : "sbt.internal.server.SettingQuery.handleSettingQuery", "link" : "sbt\/internal\/server\/SettingQuery$.html#handleSettingQuery(req:sbt.protocol.SettingQuery,structure:sbt.internal.BuildStructure):sbt.protocol.SettingQueryResponse", "kind" : "def"}, {"label" : "getSettingJsonValue", "tail" : "(structure: BuildStructure, key: Def.ScopedKey[A]): Either[String, JValue]", "member" : "sbt.internal.server.SettingQuery.getSettingJsonValue", "link" : "sbt\/internal\/server\/SettingQuery$.html#getSettingJsonValue[A](structure:sbt.internal.BuildStructure,key:sbt.Def.ScopedKey[A]):Either[String,sjsonnew.shaded.scalajson.ast.unsafe.JValue]", "kind" : "def"}, {"label" : "toJson", "tail" : "(x: A)(arg0: JsonWriter[A]): JValue", "member" : "sbt.internal.server.SettingQuery.toJson", "link" : "sbt\/internal\/server\/SettingQuery$.html#toJson[A](x:A)(implicitevidence$1:sjsonnew.JsonWriter[A]):sjsonnew.shaded.scalajson.ast.unsafe.JValue", "kind" : "def"}, {"label" : "getJsonWriter", "tail" : "(key: AttributeKey[A]): Either[String, JsonWriter[A]]", "member" : "sbt.internal.server.SettingQuery.getJsonWriter", "link" : "sbt\/internal\/server\/SettingQuery$.html#getJsonWriter[A](key:sbt.internal.util.AttributeKey[A]):Either[String,sjsonnew.JsonWriter[A]]", "kind" : "def"}, {"label" : "getSettingValue", "tail" : "(structure: BuildStructure, key: Def.ScopedKey[A]): Either[String, A]", "member" : "sbt.internal.server.SettingQuery.getSettingValue", "link" : "sbt\/internal\/server\/SettingQuery$.html#getSettingValue[A](structure:sbt.internal.BuildStructure,key:sbt.Def.ScopedKey[A]):Either[String,A]", "kind" : "def"}, {"label" : "scopedKeyParser", "tail" : "(structure: BuildStructure): Parser[Def.ScopedKey[_]]", "member" : "sbt.internal.server.SettingQuery.scopedKeyParser", "link" : "sbt\/internal\/server\/SettingQuery$.html#scopedKeyParser(structure:sbt.internal.BuildStructure):sbt.internal.util.complete.Parser[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "scopedKey", "tail" : "(index: KeyIndex, currentBuild: URI, defaultConfigs: (Option[ResolvedReference]) ⇒ Seq[String], keyMap: Map[String, AttributeKey[_]], data: Settings[Scope]): Parser[Def.ScopedKey[_]]", "member" : "sbt.internal.server.SettingQuery.scopedKey", "link" : "sbt\/internal\/server\/SettingQuery$.html#scopedKey(index:sbt.internal.KeyIndex,currentBuild:java.net.URI,defaultConfigs:Option[sbt.ResolvedReference]=>Seq[String],keyMap:Map[String,sbt.internal.util.AttributeKey[_]],data:sbt.internal.util.Settings[sbt.Scope]):sbt.internal.util.complete.Parser[sbt.Def.ScopedKey[_]]", "kind" : "def"}, {"label" : "scopedKeySelected", "tail" : "(index: KeyIndex, currentBuild: URI, defaultConfigs: (Option[ResolvedReference]) ⇒ Seq[String], keyMap: Map[String, AttributeKey[_]], data: Settings[Scope]): Parser[ParsedKey]", "member" : "sbt.internal.server.SettingQuery.scopedKeySelected", "link" : "sbt\/internal\/server\/SettingQuery$.html#scopedKeySelected(index:sbt.internal.KeyIndex,currentBuild:java.net.URI,defaultConfigs:Option[sbt.ResolvedReference]=>Seq[String],keyMap:Map[String,sbt.internal.util.AttributeKey[_]],data:sbt.internal.util.Settings[sbt.Scope]):sbt.internal.util.complete.Parser[sbt.internal.ParsedKey]", "kind" : "def"}, {"label" : "scopedKeyFull", "tail" : "(index: KeyIndex, currentBuild: URI, defaultConfigs: (Option[ResolvedReference]) ⇒ Seq[String], keyMap: Map[String, AttributeKey[_]]): Parser[Seq[Parser[ParsedKey]]]", "member" : "sbt.internal.server.SettingQuery.scopedKeyFull", "link" : "sbt\/internal\/server\/SettingQuery$.html#scopedKeyFull(index:sbt.internal.KeyIndex,currentBuild:java.net.URI,defaultConfigs:Option[sbt.ResolvedReference]=>Seq[String],keyMap:Map[String,sbt.internal.util.AttributeKey[_]]):sbt.internal.util.complete.Parser[Seq[sbt.internal.util.complete.Parser[sbt.internal.ParsedKey]]]", "kind" : "def"}, {"label" : "resolveProject", "tail" : "(parsed: ParsedExplicitAxis[ResolvedReference]): Option[ResolvedReference]", "member" : "sbt.internal.server.SettingQuery.resolveProject", "link" : "sbt\/internal\/server\/SettingQuery$.html#resolveProject(parsed:sbt.internal.server.SettingQuery.ParsedExplicitAxis[sbt.ResolvedReference]):Option[sbt.ResolvedReference]", "kind" : "def"}, {"label" : "projectRef", "tail" : "(index: KeyIndex, currentBuild: URI): Parser[ParsedExplicitAxis[ResolvedReference]]", "member" : "sbt.internal.server.SettingQuery.projectRef", "link" : "sbt\/internal\/server\/SettingQuery$.html#projectRef(index:sbt.internal.KeyIndex,currentBuild:java.net.URI):sbt.internal.util.complete.Parser[sbt.internal.server.SettingQuery.ParsedExplicitAxis[sbt.ResolvedReference]]", "kind" : "def"}, {"label" : "explicitValue", "tail" : "(t: Parser[T]): Parser[ParsedExplicitAxis[T]]", "member" : "sbt.internal.server.SettingQuery.explicitValue", "link" : "sbt\/internal\/server\/SettingQuery$.html#explicitValue[T](t:sbt.internal.util.complete.Parser[T]):sbt.internal.util.complete.Parser[sbt.internal.server.SettingQuery.ParsedExplicitAxis[T]]", "kind" : "def"}, {"label" : "ParsedExplicitValue", "tail" : "", "member" : "sbt.internal.server.SettingQuery.ParsedExplicitValue", "link" : "sbt\/internal\/server\/SettingQuery$.html#ParsedExplicitValue[T]extendsSettingQuery.ParsedExplicitAxis[T]", "kind" : "final class"}, {"label" : "ParsedExplicitGlobal", "tail" : "", "member" : "sbt.internal.server.SettingQuery.ParsedExplicitGlobal", "link" : "sbt\/internal\/server\/SettingQuery$.html#ParsedExplicitGlobal", "kind" : "object"}, {"label" : "ParsedExplicitAxis", "tail" : "", "member" : "sbt.internal.server.SettingQuery.ParsedExplicitAxis", "link" : "sbt\/internal\/server\/SettingQuery$.html#ParsedExplicitAxis[+T]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/server\/SettingQuery$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/server\/SettingQuery$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/server\/SettingQuery$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/server\/SettingQuery$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/server\/SettingQuery$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/server\/SettingQuery$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/server\/SettingQuery$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/server\/SettingQuery$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/server\/SettingQuery$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/server\/SettingQuery$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/server\/SettingQuery$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/server\/SettingQuery$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/server\/SettingQuery$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/server\/SettingQuery$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/server\/SettingQuery$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/server\/SettingQuery$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/server\/SettingQuery$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/server\/SettingQuery$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/server\/SettingQuery$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "sbt.util" : [{"name" : "sbt.util.NoJsonWriter", "shortDescription" : "", "members_case class" : [{"member" : "sbt.util.NoJsonWriter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/util\/NoJsonWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/util\/NoJsonWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/util\/NoJsonWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/util\/NoJsonWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/util\/NoJsonWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/util\/NoJsonWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/util\/NoJsonWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/NoJsonWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/NoJsonWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/NoJsonWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/util\/NoJsonWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/util\/NoJsonWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/util\/NoJsonWriter.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/util\/NoJsonWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/util\/NoJsonWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/util\/NoJsonWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/util\/NoJsonWriter.html", "kind" : "case class"}, {"name" : "sbt.util.OptJsonWriter", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/util\/OptJsonWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/util\/OptJsonWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/util\/OptJsonWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/util\/OptJsonWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/util\/OptJsonWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/util\/OptJsonWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/util\/OptJsonWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/OptJsonWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/OptJsonWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/OptJsonWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/util\/OptJsonWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/util\/OptJsonWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/util\/OptJsonWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/util\/OptJsonWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/util\/OptJsonWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/util\/OptJsonWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/util\/OptJsonWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/util\/OptJsonWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/util\/OptJsonWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/util\/OptJsonWriter$.html", "members_object" : [{"label" : "StrictMode", "tail" : "", "member" : "sbt.util.OptJsonWriter.StrictMode", "link" : "sbt\/util\/OptJsonWriter$.html#StrictMode", "kind" : "object"}, {"label" : "StrictMode0", "tail" : "", "member" : "sbt.util.OptJsonWriter.StrictMode0", "link" : "sbt\/util\/OptJsonWriter$.html#StrictMode0extendsAnyRef", "kind" : "trait"}, {"label" : "lift", "tail" : "(z: JsonWriter[A]): SomeJsonWriter[A]", "member" : "sbt.util.OptJsonWriter.lift", "link" : "sbt\/util\/OptJsonWriter$.html#lift[A](implicitz:sjsonnew.JsonWriter[A]):sbt.util.SomeJsonWriter[A]", "kind" : "implicit def"}, {"label" : "fallback", "tail" : "(): NoJsonWriter[A]", "member" : "sbt.util.OptJsonWriter0.fallback", "link" : "sbt\/util\/OptJsonWriter$.html#fallback[A]:sbt.util.NoJsonWriter[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/util\/OptJsonWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/util\/OptJsonWriter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/util\/OptJsonWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/util\/OptJsonWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/util\/OptJsonWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/util\/OptJsonWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/util\/OptJsonWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/OptJsonWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/OptJsonWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/OptJsonWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/util\/OptJsonWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/util\/OptJsonWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/util\/OptJsonWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/util\/OptJsonWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/util\/OptJsonWriter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/util\/OptJsonWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/util\/OptJsonWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/util\/OptJsonWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/util\/OptJsonWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/util\/OptJsonWriter.html", "kind" : "trait"}, {"name" : "sbt.util.OptJsonWriter0", "members_trait" : [{"label" : "fallback", "tail" : "(): NoJsonWriter[A]", "member" : "sbt.util.OptJsonWriter0.fallback", "link" : "sbt\/util\/OptJsonWriter0.html#fallback[A]:sbt.util.NoJsonWriter[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/util\/OptJsonWriter0.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/util\/OptJsonWriter0.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/util\/OptJsonWriter0.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/util\/OptJsonWriter0.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/util\/OptJsonWriter0.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/util\/OptJsonWriter0.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/util\/OptJsonWriter0.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/OptJsonWriter0.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/OptJsonWriter0.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/OptJsonWriter0.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/util\/OptJsonWriter0.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/util\/OptJsonWriter0.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/util\/OptJsonWriter0.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/util\/OptJsonWriter0.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/util\/OptJsonWriter0.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/util\/OptJsonWriter0.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/util\/OptJsonWriter0.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/util\/OptJsonWriter0.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/util\/OptJsonWriter0.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/util\/OptJsonWriter0.html", "kind" : "trait"}, {"name" : "sbt.util.Show", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/util\/Show.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/util\/Show.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/util\/Show.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/util\/Show.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/util\/Show.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/util\/Show.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/util\/Show.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/Show.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/Show.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/Show.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/util\/Show.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/util\/Show.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/util\/Show.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/util\/Show.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/util\/Show.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/util\/Show.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/util\/Show.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/util\/Show.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/util\/Show.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "show", "tail" : "(a: A): String", "member" : "sbt.util.Show.show", "link" : "sbt\/util\/Show.html#show(a:A):String", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/util\/Show$.html", "members_object" : [{"label" : "fromToString", "tail" : "(): Show[A]", "member" : "sbt.util.Show.fromToString", "link" : "sbt\/util\/Show$.html#fromToString[A]:sbt.util.Show[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(f: (A) ⇒ String): Show[A]", "member" : "sbt.util.Show.apply", "link" : "sbt\/util\/Show$.html#apply[A](f:A=>String):sbt.util.Show[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/util\/Show$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/util\/Show$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/util\/Show$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/util\/Show$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/util\/Show$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/util\/Show$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/util\/Show$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/Show$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/Show$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/Show$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/util\/Show$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/util\/Show$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/util\/Show$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/util\/Show$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/util\/Show$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/util\/Show$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/util\/Show$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/util\/Show$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/util\/Show$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/util\/Show.html", "kind" : "trait"}, {"name" : "sbt.util.SomeJsonWriter", "shortDescription" : "", "members_case class" : [{"member" : "sbt.util.SomeJsonWriter#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": JsonWriter[A]", "member" : "sbt.util.SomeJsonWriter.value", "link" : "sbt\/util\/SomeJsonWriter.html#value:sjsonnew.JsonWriter[A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/util\/SomeJsonWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/util\/SomeJsonWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/util\/SomeJsonWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/util\/SomeJsonWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/util\/SomeJsonWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/util\/SomeJsonWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/util\/SomeJsonWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/SomeJsonWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/SomeJsonWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/util\/SomeJsonWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/util\/SomeJsonWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/util\/SomeJsonWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/util\/SomeJsonWriter.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/util\/SomeJsonWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/util\/SomeJsonWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/util\/SomeJsonWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/util\/SomeJsonWriter.html", "kind" : "case class"}], "sbt.plugins" : [{"name" : "sbt.plugins.CorePlugin", "shortDescription" : "Plugin for core sbt-isms.", "object" : "sbt\/plugins\/CorePlugin$.html", "members_object" : [{"label" : "globalSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.plugins.CorePlugin.globalSettings", "link" : "sbt\/plugins\/CorePlugin$.html#globalSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "projectSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.plugins.CorePlugin.projectSettings", "link" : "sbt\/plugins\/CorePlugin$.html#projectSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "requires", "tail" : "(): Plugins", "member" : "sbt.plugins.CorePlugin.requires", "link" : "sbt\/plugins\/CorePlugin$.html#requires:sbt.Plugins", "kind" : "def"}, {"label" : "trigger", "tail" : "(): PluginTrigger", "member" : "sbt.plugins.CorePlugin.trigger", "link" : "sbt\/plugins\/CorePlugin$.html#trigger:sbt.PluginTrigger", "kind" : "def"}, {"label" : "derivedProjects", "tail" : "(proj: ProjectDefinition[_]): Seq[Project]", "member" : "sbt.AutoPlugin.derivedProjects", "link" : "sbt\/plugins\/CorePlugin$.html#derivedProjects(proj:sbt.ProjectDefinition[_]):Seq[sbt.Project]", "kind" : "def"}, {"label" : "extraProjects", "tail" : "(): Seq[Project]", "member" : "sbt.AutoPlugin.extraProjects", "link" : "sbt\/plugins\/CorePlugin$.html#extraProjects:Seq[sbt.Project]", "kind" : "def"}, {"label" : "buildSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.AutoPlugin.buildSettings", "link" : "sbt\/plugins\/CorePlugin$.html#buildSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "projectConfigurations", "tail" : "(): Seq[Configuration]", "member" : "sbt.AutoPlugin.projectConfigurations", "link" : "sbt\/plugins\/CorePlugin$.html#projectConfigurations:Seq[sbt.librarymanagement.Configuration]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.AutoPlugin.toString", "link" : "sbt\/plugins\/CorePlugin$.html#toString():String", "kind" : "def"}, {"label" : "label", "tail" : ": String", "member" : "sbt.AutoPlugin.label", "link" : "sbt\/plugins\/CorePlugin$.html#label:String", "kind" : "val"}, {"label" : "noTrigger", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.noTrigger", "link" : "sbt\/plugins\/CorePlugin$.html#noTrigger:sbt.PluginTrigger", "kind" : "def"}, {"label" : "allRequirements", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.allRequirements", "link" : "sbt\/plugins\/CorePlugin$.html#allRequirements:sbt.PluginTrigger", "kind" : "def"}, {"label" : "empty", "tail" : "(): Plugins", "member" : "sbt.PluginsFunctions.empty", "link" : "sbt\/plugins\/CorePlugin$.html#empty:sbt.Plugins", "kind" : "def"}, {"label" : "&&", "tail" : "(o: Basic): Plugins", "member" : "sbt.Plugins.Basic.&&", "link" : "sbt\/plugins\/CorePlugin$.html#&&(o:sbt.Plugins.Basic):sbt.Plugins", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/plugins\/CorePlugin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/plugins\/CorePlugin$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/plugins\/CorePlugin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/plugins\/CorePlugin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/plugins\/CorePlugin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/plugins\/CorePlugin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/plugins\/CorePlugin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/CorePlugin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/CorePlugin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/CorePlugin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/plugins\/CorePlugin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/plugins\/CorePlugin$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/plugins\/CorePlugin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/plugins\/CorePlugin$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/plugins\/CorePlugin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/plugins\/CorePlugin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/plugins\/CorePlugin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/plugins\/CorePlugin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.plugins.Giter8TemplatePlugin", "shortDescription" : "An experimental plugin that adds the ability for Giter8 templates to be resolved", "object" : "sbt\/plugins\/Giter8TemplatePlugin$.html", "members_object" : [{"label" : "globalSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.plugins.Giter8TemplatePlugin.globalSettings", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#globalSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "trigger", "tail" : "(): PluginTrigger", "member" : "sbt.plugins.Giter8TemplatePlugin.trigger", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#trigger:sbt.PluginTrigger", "kind" : "def"}, {"label" : "requires", "tail" : "(): CorePlugin.type", "member" : "sbt.plugins.Giter8TemplatePlugin.requires", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#requires:sbt.plugins.CorePlugin.type", "kind" : "def"}, {"label" : "derivedProjects", "tail" : "(proj: ProjectDefinition[_]): Seq[Project]", "member" : "sbt.AutoPlugin.derivedProjects", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#derivedProjects(proj:sbt.ProjectDefinition[_]):Seq[sbt.Project]", "kind" : "def"}, {"label" : "extraProjects", "tail" : "(): Seq[Project]", "member" : "sbt.AutoPlugin.extraProjects", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#extraProjects:Seq[sbt.Project]", "kind" : "def"}, {"label" : "buildSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.AutoPlugin.buildSettings", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#buildSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "projectSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.AutoPlugin.projectSettings", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#projectSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "projectConfigurations", "tail" : "(): Seq[Configuration]", "member" : "sbt.AutoPlugin.projectConfigurations", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#projectConfigurations:Seq[sbt.librarymanagement.Configuration]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.AutoPlugin.toString", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#toString():String", "kind" : "def"}, {"label" : "label", "tail" : ": String", "member" : "sbt.AutoPlugin.label", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#label:String", "kind" : "val"}, {"label" : "noTrigger", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.noTrigger", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#noTrigger:sbt.PluginTrigger", "kind" : "def"}, {"label" : "allRequirements", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.allRequirements", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#allRequirements:sbt.PluginTrigger", "kind" : "def"}, {"label" : "empty", "tail" : "(): Plugins", "member" : "sbt.PluginsFunctions.empty", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#empty:sbt.Plugins", "kind" : "def"}, {"label" : "&&", "tail" : "(o: Basic): Plugins", "member" : "sbt.Plugins.Basic.&&", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#&&(o:sbt.Plugins.Basic):sbt.Plugins", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/plugins\/Giter8TemplatePlugin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.plugins.IvyPlugin", "shortDescription" : "Plugin that enables resolving artifacts via ivy.", "object" : "sbt\/plugins\/IvyPlugin$.html", "members_object" : [{"label" : "globalSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.plugins.IvyPlugin.globalSettings", "link" : "sbt\/plugins\/IvyPlugin$.html#globalSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "projectSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.plugins.IvyPlugin.projectSettings", "link" : "sbt\/plugins\/IvyPlugin$.html#projectSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "trigger", "tail" : "(): PluginTrigger", "member" : "sbt.plugins.IvyPlugin.trigger", "link" : "sbt\/plugins\/IvyPlugin$.html#trigger:sbt.PluginTrigger", "kind" : "def"}, {"label" : "requires", "tail" : "(): CorePlugin.type", "member" : "sbt.plugins.IvyPlugin.requires", "link" : "sbt\/plugins\/IvyPlugin$.html#requires:sbt.plugins.CorePlugin.type", "kind" : "def"}, {"label" : "derivedProjects", "tail" : "(proj: ProjectDefinition[_]): Seq[Project]", "member" : "sbt.AutoPlugin.derivedProjects", "link" : "sbt\/plugins\/IvyPlugin$.html#derivedProjects(proj:sbt.ProjectDefinition[_]):Seq[sbt.Project]", "kind" : "def"}, {"label" : "extraProjects", "tail" : "(): Seq[Project]", "member" : "sbt.AutoPlugin.extraProjects", "link" : "sbt\/plugins\/IvyPlugin$.html#extraProjects:Seq[sbt.Project]", "kind" : "def"}, {"label" : "buildSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.AutoPlugin.buildSettings", "link" : "sbt\/plugins\/IvyPlugin$.html#buildSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "projectConfigurations", "tail" : "(): Seq[Configuration]", "member" : "sbt.AutoPlugin.projectConfigurations", "link" : "sbt\/plugins\/IvyPlugin$.html#projectConfigurations:Seq[sbt.librarymanagement.Configuration]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.AutoPlugin.toString", "link" : "sbt\/plugins\/IvyPlugin$.html#toString():String", "kind" : "def"}, {"label" : "label", "tail" : ": String", "member" : "sbt.AutoPlugin.label", "link" : "sbt\/plugins\/IvyPlugin$.html#label:String", "kind" : "val"}, {"label" : "noTrigger", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.noTrigger", "link" : "sbt\/plugins\/IvyPlugin$.html#noTrigger:sbt.PluginTrigger", "kind" : "def"}, {"label" : "allRequirements", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.allRequirements", "link" : "sbt\/plugins\/IvyPlugin$.html#allRequirements:sbt.PluginTrigger", "kind" : "def"}, {"label" : "empty", "tail" : "(): Plugins", "member" : "sbt.PluginsFunctions.empty", "link" : "sbt\/plugins\/IvyPlugin$.html#empty:sbt.Plugins", "kind" : "def"}, {"label" : "&&", "tail" : "(o: Basic): Plugins", "member" : "sbt.Plugins.Basic.&&", "link" : "sbt\/plugins\/IvyPlugin$.html#&&(o:sbt.Plugins.Basic):sbt.Plugins", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/plugins\/IvyPlugin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/plugins\/IvyPlugin$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/plugins\/IvyPlugin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/plugins\/IvyPlugin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/plugins\/IvyPlugin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/plugins\/IvyPlugin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/plugins\/IvyPlugin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/IvyPlugin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/IvyPlugin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/IvyPlugin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/plugins\/IvyPlugin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/plugins\/IvyPlugin$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/plugins\/IvyPlugin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/plugins\/IvyPlugin$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/plugins\/IvyPlugin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/plugins\/IvyPlugin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/plugins\/IvyPlugin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/plugins\/IvyPlugin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.plugins.JUnitXmlReportPlugin", "shortDescription" : "An experimental plugin that adds the ability for junit-xml to be generated.", "object" : "sbt\/plugins\/JUnitXmlReportPlugin$.html", "members_object" : [{"label" : "projectSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.plugins.JUnitXmlReportPlugin.projectSettings", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#projectSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "trigger", "tail" : "(): PluginTrigger", "member" : "sbt.plugins.JUnitXmlReportPlugin.trigger", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#trigger:sbt.PluginTrigger", "kind" : "def"}, {"label" : "requires", "tail" : "(): JvmPlugin.type", "member" : "sbt.plugins.JUnitXmlReportPlugin.requires", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#requires:sbt.plugins.JvmPlugin.type", "kind" : "def"}, {"label" : "derivedProjects", "tail" : "(proj: ProjectDefinition[_]): Seq[Project]", "member" : "sbt.AutoPlugin.derivedProjects", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#derivedProjects(proj:sbt.ProjectDefinition[_]):Seq[sbt.Project]", "kind" : "def"}, {"label" : "extraProjects", "tail" : "(): Seq[Project]", "member" : "sbt.AutoPlugin.extraProjects", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#extraProjects:Seq[sbt.Project]", "kind" : "def"}, {"label" : "globalSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.AutoPlugin.globalSettings", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#globalSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "buildSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.AutoPlugin.buildSettings", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#buildSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "projectConfigurations", "tail" : "(): Seq[Configuration]", "member" : "sbt.AutoPlugin.projectConfigurations", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#projectConfigurations:Seq[sbt.librarymanagement.Configuration]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.AutoPlugin.toString", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#toString():String", "kind" : "def"}, {"label" : "label", "tail" : ": String", "member" : "sbt.AutoPlugin.label", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#label:String", "kind" : "val"}, {"label" : "noTrigger", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.noTrigger", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#noTrigger:sbt.PluginTrigger", "kind" : "def"}, {"label" : "allRequirements", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.allRequirements", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#allRequirements:sbt.PluginTrigger", "kind" : "def"}, {"label" : "empty", "tail" : "(): Plugins", "member" : "sbt.PluginsFunctions.empty", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#empty:sbt.Plugins", "kind" : "def"}, {"label" : "&&", "tail" : "(o: Basic): Plugins", "member" : "sbt.Plugins.Basic.&&", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#&&(o:sbt.Plugins.Basic):sbt.Plugins", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/plugins\/JUnitXmlReportPlugin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.plugins.JvmPlugin", "shortDescription" : "A plugin representing the ability to build a JVM project.", "object" : "sbt\/plugins\/JvmPlugin$.html", "members_object" : [{"label" : "projectConfigurations", "tail" : "(): Seq[Configuration]", "member" : "sbt.plugins.JvmPlugin.projectConfigurations", "link" : "sbt\/plugins\/JvmPlugin$.html#projectConfigurations:Seq[sbt.librarymanagement.Configuration]", "kind" : "def"}, {"label" : "globalSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.plugins.JvmPlugin.globalSettings", "link" : "sbt\/plugins\/JvmPlugin$.html#globalSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "projectSettings", "tail" : ": Seq[Def.Setting[_]]", "member" : "sbt.plugins.JvmPlugin.projectSettings", "link" : "sbt\/plugins\/JvmPlugin$.html#projectSettings:Seq[sbt.Def.Setting[_]]", "kind" : "lazy val"}, {"label" : "trigger", "tail" : "(): PluginTrigger", "member" : "sbt.plugins.JvmPlugin.trigger", "link" : "sbt\/plugins\/JvmPlugin$.html#trigger:sbt.PluginTrigger", "kind" : "def"}, {"label" : "requires", "tail" : "(): IvyPlugin.type", "member" : "sbt.plugins.JvmPlugin.requires", "link" : "sbt\/plugins\/JvmPlugin$.html#requires:sbt.plugins.IvyPlugin.type", "kind" : "def"}, {"label" : "derivedProjects", "tail" : "(proj: ProjectDefinition[_]): Seq[Project]", "member" : "sbt.AutoPlugin.derivedProjects", "link" : "sbt\/plugins\/JvmPlugin$.html#derivedProjects(proj:sbt.ProjectDefinition[_]):Seq[sbt.Project]", "kind" : "def"}, {"label" : "extraProjects", "tail" : "(): Seq[Project]", "member" : "sbt.AutoPlugin.extraProjects", "link" : "sbt\/plugins\/JvmPlugin$.html#extraProjects:Seq[sbt.Project]", "kind" : "def"}, {"label" : "buildSettings", "tail" : "(): Seq[Def.Setting[_]]", "member" : "sbt.AutoPlugin.buildSettings", "link" : "sbt\/plugins\/JvmPlugin$.html#buildSettings:Seq[sbt.Def.Setting[_]]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "sbt.AutoPlugin.toString", "link" : "sbt\/plugins\/JvmPlugin$.html#toString():String", "kind" : "def"}, {"label" : "label", "tail" : ": String", "member" : "sbt.AutoPlugin.label", "link" : "sbt\/plugins\/JvmPlugin$.html#label:String", "kind" : "val"}, {"label" : "noTrigger", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.noTrigger", "link" : "sbt\/plugins\/JvmPlugin$.html#noTrigger:sbt.PluginTrigger", "kind" : "def"}, {"label" : "allRequirements", "tail" : "(): PluginTrigger", "member" : "sbt.PluginsFunctions.allRequirements", "link" : "sbt\/plugins\/JvmPlugin$.html#allRequirements:sbt.PluginTrigger", "kind" : "def"}, {"label" : "empty", "tail" : "(): Plugins", "member" : "sbt.PluginsFunctions.empty", "link" : "sbt\/plugins\/JvmPlugin$.html#empty:sbt.Plugins", "kind" : "def"}, {"label" : "&&", "tail" : "(o: Basic): Plugins", "member" : "sbt.Plugins.Basic.&&", "link" : "sbt\/plugins\/JvmPlugin$.html#&&(o:sbt.Plugins.Basic):sbt.Plugins", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/plugins\/JvmPlugin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/plugins\/JvmPlugin$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/plugins\/JvmPlugin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/plugins\/JvmPlugin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/plugins\/JvmPlugin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/plugins\/JvmPlugin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/plugins\/JvmPlugin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/JvmPlugin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/JvmPlugin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/plugins\/JvmPlugin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/plugins\/JvmPlugin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/plugins\/JvmPlugin$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/plugins\/JvmPlugin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/plugins\/JvmPlugin$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/plugins\/JvmPlugin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/plugins\/JvmPlugin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/plugins\/JvmPlugin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/plugins\/JvmPlugin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "sbt.internal.util.logic" : [{"name" : "sbt.internal.util.logic.Atom", "shortDescription" : "A variable with name label.", "members_case class" : [{"label" : "unary_!", "tail" : "(): Negated", "member" : "sbt.internal.util.logic.Atom.unary_!", "link" : "sbt\/internal\/util\/logic\/Atom.html#unary_!:sbt.internal.util.logic.Negated", "kind" : "def"}, {"label" : "atom", "tail" : "(): Atom", "member" : "sbt.internal.util.logic.Atom.atom", "link" : "sbt\/internal\/util\/logic\/Atom.html#atom:sbt.internal.util.logic.Atom", "kind" : "def"}, {"member" : "sbt.internal.util.logic.Atom#<init>", "error" : "unsupported entity"}, {"label" : "label", "tail" : ": String", "member" : "sbt.internal.util.logic.Atom.label", "link" : "sbt\/internal\/util\/logic\/Atom.html#label:String", "kind" : "val"}, {"label" : "&&", "tail" : "(f: Formula): Formula", "member" : "sbt.internal.util.logic.Formula.&&", "link" : "sbt\/internal\/util\/logic\/Atom.html#&&(f:sbt.internal.util.logic.Formula):sbt.internal.util.logic.Formula", "kind" : "def"}, {"label" : "proves", "tail" : "(atom: Atom, atoms: Atom*): Clause", "member" : "sbt.internal.util.logic.Formula.proves", "link" : "sbt\/internal\/util\/logic\/Atom.html#proves(atom:sbt.internal.util.logic.Atom,atoms:sbt.internal.util.logic.Atom*):sbt.internal.util.logic.Clause", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/logic\/Atom.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/logic\/Atom.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/logic\/Atom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/logic\/Atom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/logic\/Atom.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/logic\/Atom.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/logic\/Atom.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Atom.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Atom.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Atom.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/logic\/Atom.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/logic\/Atom.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/logic\/Atom.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/logic\/Atom.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/logic\/Atom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/logic\/Atom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/util\/logic\/Atom.html", "kind" : "case class"}, {"name" : "sbt.internal.util.logic.Clause", "shortDescription" : "When the body Formula succeeds, atoms in head are true.", "members_case class" : [{"member" : "sbt.internal.util.logic.Clause#<init>", "error" : "unsupported entity"}, {"label" : "head", "tail" : ": Set[Atom]", "member" : "sbt.internal.util.logic.Clause.head", "link" : "sbt\/internal\/util\/logic\/Clause.html#head:Set[sbt.internal.util.logic.Atom]", "kind" : "val"}, {"label" : "body", "tail" : ": Formula", "member" : "sbt.internal.util.logic.Clause.body", "link" : "sbt\/internal\/util\/logic\/Clause.html#body:sbt.internal.util.logic.Formula", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/logic\/Clause.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/logic\/Clause.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/logic\/Clause.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/logic\/Clause.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/logic\/Clause.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/logic\/Clause.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/logic\/Clause.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Clause.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Clause.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Clause.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/logic\/Clause.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/logic\/Clause.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/logic\/Clause.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/logic\/Clause.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/logic\/Clause.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/logic\/Clause.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/util\/logic\/Clause.html", "kind" : "case class"}, {"name" : "sbt.internal.util.logic.Clauses", "shortDescription" : "Disjunction (or) of the list of clauses.", "members_case class" : [{"member" : "sbt.internal.util.logic.Clauses#<init>", "error" : "unsupported entity"}, {"label" : "clauses", "tail" : ": List[Clause]", "member" : "sbt.internal.util.logic.Clauses.clauses", "link" : "sbt\/internal\/util\/logic\/Clauses.html#clauses:List[sbt.internal.util.logic.Clause]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/logic\/Clauses.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/logic\/Clauses.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/logic\/Clauses.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/logic\/Clauses.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/logic\/Clauses.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/logic\/Clauses.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/logic\/Clauses.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Clauses.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Clauses.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Clauses.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/logic\/Clauses.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/logic\/Clauses.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/logic\/Clauses.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/logic\/Clauses.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/logic\/Clauses.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/logic\/Clauses.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/util\/logic\/Clauses.html", "kind" : "case class"}, {"name" : "sbt.internal.util.logic.Formula", "shortDescription" : "A formula consists of variables, negation, and conjunction (and).", "object" : "sbt\/internal\/util\/logic\/Formula$.html", "members_class" : [{"label" : "&&", "tail" : "(f: Formula): Formula", "member" : "sbt.internal.util.logic.Formula.&&", "link" : "sbt\/internal\/util\/logic\/Formula.html#&&(f:sbt.internal.util.logic.Formula):sbt.internal.util.logic.Formula", "kind" : "def"}, {"label" : "proves", "tail" : "(atom: Atom, atoms: Atom*): Clause", "member" : "sbt.internal.util.logic.Formula.proves", "link" : "sbt\/internal\/util\/logic\/Formula.html#proves(atom:sbt.internal.util.logic.Atom,atoms:sbt.internal.util.logic.Atom*):sbt.internal.util.logic.Clause", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/logic\/Formula.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/logic\/Formula.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/logic\/Formula.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/logic\/Formula.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/logic\/Formula.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/logic\/Formula.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/logic\/Formula.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Formula.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Formula.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Formula.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/logic\/Formula.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/logic\/Formula.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/logic\/Formula.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/logic\/Formula.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/logic\/Formula.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/logic\/Formula.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/logic\/Formula.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/logic\/Formula.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/logic\/Formula.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "True", "tail" : "", "member" : "sbt.internal.util.logic.Formula.True", "link" : "sbt\/internal\/util\/logic\/Formula$.html#True", "kind" : "object"}, {"label" : "And", "tail" : "", "member" : "sbt.internal.util.logic.Formula.And", "link" : "sbt\/internal\/util\/logic\/Formula$.html#AndextendsFormulawithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/logic\/Formula$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/logic\/Formula$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/logic\/Formula$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/logic\/Formula$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/logic\/Formula$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/logic\/Formula$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/logic\/Formula$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Formula$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Formula$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Formula$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/logic\/Formula$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/logic\/Formula$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/logic\/Formula$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/logic\/Formula$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/logic\/Formula$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/logic\/Formula$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/logic\/Formula$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/logic\/Formula$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/logic\/Formula$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/util\/logic\/Formula.html", "kind" : "class"}, {"name" : "sbt.internal.util.logic.Literal", "shortDescription" : "A literal is an Atom or its negation|Negated.", "members_class" : [{"label" : "&&", "tail" : "(f: Formula): Formula", "member" : "sbt.internal.util.logic.Formula.&&", "link" : "sbt\/internal\/util\/logic\/Literal.html#&&(f:sbt.internal.util.logic.Formula):sbt.internal.util.logic.Formula", "kind" : "def"}, {"label" : "proves", "tail" : "(atom: Atom, atoms: Atom*): Clause", "member" : "sbt.internal.util.logic.Formula.proves", "link" : "sbt\/internal\/util\/logic\/Literal.html#proves(atom:sbt.internal.util.logic.Atom,atoms:sbt.internal.util.logic.Atom*):sbt.internal.util.logic.Clause", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/logic\/Literal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/logic\/Literal.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/logic\/Literal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/logic\/Literal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/logic\/Literal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/logic\/Literal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/logic\/Literal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Literal.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Literal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Literal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/logic\/Literal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/logic\/Literal.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/logic\/Literal.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/logic\/Literal.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/logic\/Literal.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/logic\/Literal.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/logic\/Literal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/logic\/Literal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/logic\/Literal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unary_!", "tail" : "(): Literal", "member" : "sbt.internal.util.logic.Literal.unary_!", "link" : "sbt\/internal\/util\/logic\/Literal.html#unary_!:sbt.internal.util.logic.Literal", "kind" : "abstract def"}, {"label" : "atom", "tail" : "(): Atom", "member" : "sbt.internal.util.logic.Literal.atom", "link" : "sbt\/internal\/util\/logic\/Literal.html#atom:sbt.internal.util.logic.Atom", "kind" : "abstract def"}], "class" : "sbt\/internal\/util\/logic\/Literal.html", "kind" : "class"}, {"name" : "sbt.internal.util.logic.Logic", "shortDescription" : "", "object" : "sbt\/internal\/util\/logic\/Logic$.html", "members_object" : [{"label" : "substitute", "tail" : "(formula: Formula, facts: Set[Literal]): Option[Formula]", "member" : "sbt.internal.util.logic.Logic.substitute", "link" : "sbt\/internal\/util\/logic\/Logic$.html#substitute(formula:sbt.internal.util.logic.Formula,facts:Set[sbt.internal.util.logic.Literal]):Option[sbt.internal.util.logic.Formula]", "kind" : "def"}, {"label" : "applyAll", "tail" : "(c: Clause, facts: Set[Literal]): Option[Clause]", "member" : "sbt.internal.util.logic.Logic.applyAll", "link" : "sbt\/internal\/util\/logic\/Logic$.html#applyAll(c:sbt.internal.util.logic.Clause,facts:Set[sbt.internal.util.logic.Literal]):Option[sbt.internal.util.logic.Clause]", "kind" : "def"}, {"label" : "applyAll", "tail" : "(cs: Clauses, facts: Set[Literal]): Option[Clauses]", "member" : "sbt.internal.util.logic.Logic.applyAll", "link" : "sbt\/internal\/util\/logic\/Logic$.html#applyAll(cs:sbt.internal.util.logic.Clauses,facts:Set[sbt.internal.util.logic.Literal]):Option[sbt.internal.util.logic.Clauses]", "kind" : "def"}, {"label" : "Atoms", "tail" : "", "member" : "sbt.internal.util.logic.Logic.Atoms", "link" : "sbt\/internal\/util\/logic\/Logic$.html#AtomsextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "atoms", "tail" : "(formula: Formula): Set[Atom]", "member" : "sbt.internal.util.logic.Logic.atoms", "link" : "sbt\/internal\/util\/logic\/Logic$.html#atoms(formula:sbt.internal.util.logic.Formula):Set[sbt.internal.util.logic.Atom]", "kind" : "def"}, {"label" : "atoms", "tail" : "(cs: Clauses): Atoms", "member" : "sbt.internal.util.logic.Logic.atoms", "link" : "sbt\/internal\/util\/logic\/Logic$.html#atoms(cs:sbt.internal.util.logic.Clauses):sbt.internal.util.logic.Logic.Atoms", "kind" : "def"}, {"label" : "hasNegatedDependency", "tail" : "(clauses: Seq[Clause], posDeps: Relation[Atom, Atom], negDeps: Relation[Atom, Atom]): List[Atom]", "member" : "sbt.internal.util.logic.Logic.hasNegatedDependency", "link" : "sbt\/internal\/util\/logic\/Logic$.html#hasNegatedDependency(clauses:Seq[sbt.internal.util.logic.Clause],posDeps:sbt.internal.util.Relation[sbt.internal.util.logic.Atom,sbt.internal.util.logic.Atom],negDeps:sbt.internal.util.Relation[sbt.internal.util.logic.Atom,sbt.internal.util.logic.Atom]):List[sbt.internal.util.logic.Atom]", "kind" : "def"}, {"label" : "Matched", "tail" : "", "member" : "sbt.internal.util.logic.Logic.Matched", "link" : "sbt\/internal\/util\/logic\/Logic$.html#Matched", "kind" : "object"}, {"label" : "Matched", "tail" : "", "member" : "sbt.internal.util.logic.Logic.Matched", "link" : "sbt\/internal\/util\/logic\/Logic$.html#MatchedextendsAnyRef", "kind" : "final class"}, {"label" : "CyclicNegation", "tail" : "", "member" : "sbt.internal.util.logic.Logic.CyclicNegation", "link" : "sbt\/internal\/util\/logic\/Logic$.html#CyclicNegationextendsLogic.LogicException", "kind" : "final class"}, {"label" : "InitialOverlap", "tail" : "", "member" : "sbt.internal.util.logic.Logic.InitialOverlap", "link" : "sbt\/internal\/util\/logic\/Logic$.html#InitialOverlapextendsLogic.LogicException", "kind" : "final class"}, {"label" : "InitialContradictions", "tail" : "", "member" : "sbt.internal.util.logic.Logic.InitialContradictions", "link" : "sbt\/internal\/util\/logic\/Logic$.html#InitialContradictionsextendsLogic.LogicException", "kind" : "final class"}, {"label" : "LogicException", "tail" : "", "member" : "sbt.internal.util.logic.Logic.LogicException", "link" : "sbt\/internal\/util\/logic\/Logic$.html#LogicExceptionextendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "reduce", "tail" : "(clauses: Clauses, initialFacts: Set[Literal]): Either[LogicException, Matched]", "member" : "sbt.internal.util.logic.Logic.reduce", "link" : "sbt\/internal\/util\/logic\/Logic$.html#reduce(clauses:sbt.internal.util.logic.Clauses,initialFacts:Set[sbt.internal.util.logic.Literal]):Either[sbt.internal.util.logic.Logic.LogicException,sbt.internal.util.logic.Logic.Matched]", "kind" : "def"}, {"label" : "reduceAll", "tail" : "(clauses: List[Clause], initialFacts: Set[Literal]): Either[LogicException, Matched]", "member" : "sbt.internal.util.logic.Logic.reduceAll", "link" : "sbt\/internal\/util\/logic\/Logic$.html#reduceAll(clauses:List[sbt.internal.util.logic.Clause],initialFacts:Set[sbt.internal.util.logic.Literal]):Either[sbt.internal.util.logic.Logic.LogicException,sbt.internal.util.logic.Logic.Matched]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/logic\/Logic$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/logic\/Logic$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/logic\/Logic$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/logic\/Logic$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/logic\/Logic$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/logic\/Logic$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/logic\/Logic$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Logic$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Logic$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Logic$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/logic\/Logic$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/logic\/Logic$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/util\/logic\/Logic$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/logic\/Logic$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/util\/logic\/Logic$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/util\/logic\/Logic$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/logic\/Logic$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/logic\/Logic$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/logic\/Logic$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.internal.util.logic.Negated", "shortDescription" : "A negated atom, in the sense of negation as failure, not logical negation.", "members_case class" : [{"label" : "unary_!", "tail" : "(): Atom", "member" : "sbt.internal.util.logic.Negated.unary_!", "link" : "sbt\/internal\/util\/logic\/Negated.html#unary_!:sbt.internal.util.logic.Atom", "kind" : "def"}, {"member" : "sbt.internal.util.logic.Negated#<init>", "error" : "unsupported entity"}, {"label" : "atom", "tail" : ": Atom", "member" : "sbt.internal.util.logic.Negated.atom", "link" : "sbt\/internal\/util\/logic\/Negated.html#atom:sbt.internal.util.logic.Atom", "kind" : "val"}, {"label" : "&&", "tail" : "(f: Formula): Formula", "member" : "sbt.internal.util.logic.Formula.&&", "link" : "sbt\/internal\/util\/logic\/Negated.html#&&(f:sbt.internal.util.logic.Formula):sbt.internal.util.logic.Formula", "kind" : "def"}, {"label" : "proves", "tail" : "(atom: Atom, atoms: Atom*): Clause", "member" : "sbt.internal.util.logic.Formula.proves", "link" : "sbt\/internal\/util\/logic\/Negated.html#proves(atom:sbt.internal.util.logic.Atom,atoms:sbt.internal.util.logic.Atom*):sbt.internal.util.logic.Clause", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/util\/logic\/Negated.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/util\/logic\/Negated.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/util\/logic\/Negated.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/util\/logic\/Negated.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/util\/logic\/Negated.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/util\/logic\/Negated.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/util\/logic\/Negated.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Negated.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Negated.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/util\/logic\/Negated.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/util\/logic\/Negated.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/util\/logic\/Negated.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/util\/logic\/Negated.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/util\/logic\/Negated.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/util\/logic\/Negated.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/util\/logic\/Negated.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "sbt\/internal\/util\/logic\/Negated.html", "kind" : "case class"}], "sbt.std" : [{"name" : "sbt.std.BaseTaskLinterDSL", "shortDescription" : "", "members_class" : [{"label" : "runLinter", "tail" : "(ctx: Context)(tree: scala.reflect.macros.blackbox.Context.Tree): Unit", "member" : "sbt.std.BaseTaskLinterDSL.runLinter", "link" : "sbt\/std\/BaseTaskLinterDSL.html#runLinter(ctx:scala.reflect.macros.blackbox.Context)(tree:ctx.Tree):Unit", "kind" : "def"}, {"member" : "sbt.std.BaseTaskLinterDSL#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/BaseTaskLinterDSL.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/BaseTaskLinterDSL.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/BaseTaskLinterDSL.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/BaseTaskLinterDSL.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/BaseTaskLinterDSL.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/BaseTaskLinterDSL.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/BaseTaskLinterDSL.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/BaseTaskLinterDSL.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/BaseTaskLinterDSL.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/BaseTaskLinterDSL.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/BaseTaskLinterDSL.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/BaseTaskLinterDSL.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/BaseTaskLinterDSL.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/BaseTaskLinterDSL.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/BaseTaskLinterDSL.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/BaseTaskLinterDSL.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/BaseTaskLinterDSL.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/BaseTaskLinterDSL.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/BaseTaskLinterDSL.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "convert", "tail" : "(): Convert", "member" : "sbt.std.BaseTaskLinterDSL.convert", "link" : "sbt\/std\/BaseTaskLinterDSL.html#convert:sbt.internal.util.appmacro.Convert", "kind" : "abstract def"}, {"label" : "isDynamicTask", "tail" : "(): Boolean", "member" : "sbt.std.BaseTaskLinterDSL.isDynamicTask", "link" : "sbt\/std\/BaseTaskLinterDSL.html#isDynamicTask:Boolean", "kind" : "abstract def"}], "class" : "sbt\/std\/BaseTaskLinterDSL.html", "kind" : "class"}, {"name" : "sbt.std.BinaryPipe", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/BinaryPipe.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/BinaryPipe.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/BinaryPipe.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/BinaryPipe.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/BinaryPipe.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/BinaryPipe.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/BinaryPipe.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/BinaryPipe.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/BinaryPipe.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/BinaryPipe.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/BinaryPipe.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/BinaryPipe.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/BinaryPipe.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/BinaryPipe.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/BinaryPipe.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/BinaryPipe.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/BinaryPipe.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/BinaryPipe.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/BinaryPipe.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "#>", "tail" : "(sid: String, f: File): Task[Unit]", "member" : "sbt.std.BinaryPipe.#>", "link" : "sbt\/std\/BinaryPipe.html##>(sid:String,f:java.io.File):sbt.Task[Unit]", "kind" : "abstract def"}, {"label" : "#>", "tail" : "(f: File): Task[Unit]", "member" : "sbt.std.BinaryPipe.#>", "link" : "sbt\/std\/BinaryPipe.html##>(f:java.io.File):sbt.Task[Unit]", "kind" : "abstract def"}, {"label" : "binary", "tail" : "(sid: String)(f: (BufferedInputStream) ⇒ T): Task[T]", "member" : "sbt.std.BinaryPipe.binary", "link" : "sbt\/std\/BinaryPipe.html#binary[T](sid:String)(f:java.io.BufferedInputStream=>T):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "binary", "tail" : "(f: (BufferedInputStream) ⇒ T): Task[T]", "member" : "sbt.std.BinaryPipe.binary", "link" : "sbt\/std\/BinaryPipe.html#binary[T](f:java.io.BufferedInputStream=>T):sbt.Task[T]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/std\/BinaryPipe.html", "kind" : "trait"}, {"name" : "sbt.std.CloseableStreams", "members_trait" : [{"label" : "use", "tail" : "(key: Key)(f: (TaskStreams[Key]) ⇒ T): T", "member" : "sbt.std.Streams.use", "link" : "sbt\/std\/CloseableStreams.html#use[T](key:Key)(f:sbt.std.TaskStreams[Key]=>T):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/CloseableStreams.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/CloseableStreams.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/CloseableStreams.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/CloseableStreams.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/CloseableStreams.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/CloseableStreams.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/CloseableStreams.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/CloseableStreams.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/CloseableStreams.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/CloseableStreams.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/CloseableStreams.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/CloseableStreams.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/CloseableStreams.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/CloseableStreams.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/CloseableStreams.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/CloseableStreams.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/CloseableStreams.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/CloseableStreams.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/CloseableStreams.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "close", "tail" : "(): Unit", "member" : "java.io.Closeable.close", "link" : "sbt\/std\/CloseableStreams.html#close():Unit", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(a: Key): ManagedStreams[Key]", "member" : "sbt.std.Streams.apply", "link" : "sbt\/std\/CloseableStreams.html#apply(a:Key):sbt.std.ManagedStreams[Key]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/std\/CloseableStreams.html", "kind" : "trait"}, {"name" : "sbt.std.ForkTask", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/ForkTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/ForkTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/ForkTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/ForkTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/ForkTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/ForkTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/ForkTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ForkTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ForkTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ForkTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/ForkTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/ForkTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/ForkTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/ForkTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/ForkTask.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/ForkTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/ForkTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/ForkTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/ForkTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tasks", "tail" : "(): Seq[Task[S]]", "member" : "sbt.std.ForkTask.tasks", "link" : "sbt\/std\/ForkTask.html#tasks:Seq[sbt.Task[S]]", "kind" : "abstract def"}, {"label" : "fork", "tail" : "(f: (S) ⇒ T): CC[Task[T]]", "member" : "sbt.std.ForkTask.fork", "link" : "sbt\/std\/ForkTask.html#fork[T](f:S=>T):CC[sbt.Task[T]]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/std\/ForkTask.html", "kind" : "trait"}, {"name" : "sbt.std.FullConvert", "shortDescription" : "Converts an input Tree of type Initialize[T], Initialize[Task[T]], or Task[T] into a Tree of type Initialize[Task[T]].", "object" : "sbt\/std\/FullConvert$.html", "members_object" : [{"label" : "apply", "tail" : "(c: Context)(nme: String, in: scala.reflect.macros.blackbox.Context.Tree)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): Converted[c.type]", "member" : "sbt.std.FullConvert.apply", "link" : "sbt\/std\/FullConvert$.html#apply[T](c:scala.reflect.macros.blackbox.Context)(nme:String,in:c.Tree)(implicitevidence$4:c.WeakTypeTag[T]):sbt.internal.util.appmacro.Converted[c.type]", "kind" : "def"}, {"label" : "asPredicate", "tail" : "(c: Context): (String, scala.reflect.macros.blackbox.Context.Type, scala.reflect.macros.blackbox.Context.Tree) ⇒ Boolean", "member" : "sbt.internal.util.appmacro.Convert.asPredicate", "link" : "sbt\/std\/FullConvert$.html#asPredicate(c:scala.reflect.macros.blackbox.Context):(String,c.Type,c.Tree)=>Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/FullConvert$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/FullConvert$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/FullConvert$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/FullConvert$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/FullConvert$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/FullConvert$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/FullConvert$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/FullConvert$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/FullConvert$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/FullConvert$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/FullConvert$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/FullConvert$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/FullConvert$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/FullConvert$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/FullConvert$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/FullConvert$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/FullConvert$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/FullConvert$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/FullConvert$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.FullInstance", "shortDescription" : "Composes the Task and Initialize Instances to provide an Instance for [T] Initialize[Task[T]].", "object" : "sbt\/std\/FullInstance$.html", "members_object" : [{"label" : "flattenFun", "tail" : "(in: Def.Initialize[Task[(S) ⇒ Def.Initialize[Task[T]]]]): Def.Initialize[(S) ⇒ Task[T]]", "member" : "sbt.std.FullInstance.flattenFun", "link" : "sbt\/std\/FullInstance$.html#flattenFun[S,T](in:sbt.Def.Initialize[sbt.Task[S=>sbt.Def.Initialize[sbt.Task[T]]]]):sbt.Def.Initialize[S=>sbt.Task[T]]", "kind" : "def"}, {"label" : "flatten", "tail" : "(in: Def.Initialize[Task[Def.Initialize[Task[T]]]]): Def.Initialize[Task[T]]", "member" : "sbt.std.FullInstance.flatten", "link" : "sbt\/std\/FullInstance$.html#flatten[T](in:sbt.Def.Initialize[sbt.Task[sbt.Def.Initialize[sbt.Task[T]]]]):sbt.Def.Initialize[sbt.Task[T]]", "kind" : "def"}, {"label" : "settingsData", "tail" : ": TaskKey[SS]", "member" : "sbt.std.FullInstance.settingsData", "link" : "sbt\/std\/FullInstance$.html#settingsData:sbt.TaskKey[sbt.std.FullInstance.SS]", "kind" : "val"}, {"label" : "SS", "tail" : "", "member" : "sbt.std.FullInstance.SS", "link" : "sbt\/std\/FullInstance$.html#SS=sbt.internal.util.Settings[sbt.Scope]", "kind" : "type"}, {"label" : "app", "tail" : "(in: K[M], f: (K[internal.util.Types.Id]) ⇒ Z)(alist: AList[K]): Def.Initialize[Task[Z]]", "member" : "sbt.internal.util.appmacro.Instance.Composed.app", "link" : "sbt\/std\/FullInstance$.html#app[K[L[x]],Z](in:K[Composed.this.M],f:K[sbt.internal.util.Types.Id]=>Z)(implicitalist:sbt.internal.util.AList[K]):A[B[Z]]", "kind" : "def"}, {"label" : "map", "tail" : "(in: M[S], f: (S) ⇒ T): M[T]", "member" : "sbt.internal.util.appmacro.Instance.Composed.map", "link" : "sbt\/std\/FullInstance$.html#map[S,T](in:Composed.this.M[S],f:S=>T):Composed.this.M[T]", "kind" : "def"}, {"label" : "pure", "tail" : "(s: () ⇒ S): Def.Initialize[Task[S]]", "member" : "sbt.internal.util.appmacro.Instance.Composed.pure", "link" : "sbt\/std\/FullInstance$.html#pure[S](s:()=>S):A[B[S]]", "kind" : "def"}, {"label" : "M", "tail" : "", "member" : "sbt.internal.util.appmacro.Instance.Composed.M", "link" : "sbt\/std\/FullInstance$.html#M[x]=A[B[x]]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/FullInstance$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/FullInstance$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/FullInstance$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/FullInstance$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/FullInstance$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/FullInstance$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/FullInstance$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/FullInstance$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/FullInstance$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/FullInstance$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/FullInstance$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/FullInstance$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/FullInstance$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/FullInstance$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/FullInstance$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/FullInstance$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/FullInstance$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/FullInstance$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/FullInstance$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.InitializeConvert", "shortDescription" : "", "object" : "sbt\/std\/InitializeConvert$.html", "members_object" : [{"label" : "apply", "tail" : "(c: Context)(nme: String, in: scala.reflect.macros.blackbox.Context.Tree)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): Converted[c.type]", "member" : "sbt.std.InitializeConvert.apply", "link" : "sbt\/std\/InitializeConvert$.html#apply[T](c:scala.reflect.macros.blackbox.Context)(nme:String,in:c.Tree)(implicitevidence$1:c.WeakTypeTag[T]):sbt.internal.util.appmacro.Converted[c.type]", "kind" : "def"}, {"label" : "asPredicate", "tail" : "(c: Context): (String, scala.reflect.macros.blackbox.Context.Type, scala.reflect.macros.blackbox.Context.Tree) ⇒ Boolean", "member" : "sbt.internal.util.appmacro.Convert.asPredicate", "link" : "sbt\/std\/InitializeConvert$.html#asPredicate(c:scala.reflect.macros.blackbox.Context):(String,c.Type,c.Tree)=>Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/InitializeConvert$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/InitializeConvert$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/InitializeConvert$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/InitializeConvert$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/InitializeConvert$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/InitializeConvert$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/InitializeConvert$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InitializeConvert$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InitializeConvert$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InitializeConvert$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/InitializeConvert$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/InitializeConvert$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/InitializeConvert$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/InitializeConvert$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/InitializeConvert$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/InitializeConvert$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/InitializeConvert$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/InitializeConvert$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/InitializeConvert$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.InitializeInstance", "shortDescription" : "", "object" : "sbt\/std\/InitializeInstance$.html", "members_object" : [{"label" : "pure", "tail" : "(t: () ⇒ T): Def.Initialize[T]", "member" : "sbt.std.InitializeInstance.pure", "link" : "sbt\/std\/InitializeInstance$.html#pure[T](t:()=>T):sbt.Def.Initialize[T]", "kind" : "def"}, {"label" : "flatten", "tail" : "(in: Def.Initialize[Def.Initialize[T]]): Def.Initialize[T]", "member" : "sbt.std.InitializeInstance.flatten", "link" : "sbt\/std\/InitializeInstance$.html#flatten[T](in:sbt.Def.Initialize[sbt.Def.Initialize[T]]):sbt.Def.Initialize[T]", "kind" : "def"}, {"label" : "map", "tail" : "(in: Def.Initialize[S], f: (S) ⇒ T): Def.Initialize[T]", "member" : "sbt.std.InitializeInstance.map", "link" : "sbt\/std\/InitializeInstance$.html#map[S,T](in:sbt.Def.Initialize[S],f:S=>T):sbt.Def.Initialize[T]", "kind" : "def"}, {"label" : "app", "tail" : "(in: K[Def.Initialize], f: (K[internal.util.Types.Id]) ⇒ Z)(a: AList[K]): Def.Initialize[Z]", "member" : "sbt.std.InitializeInstance.app", "link" : "sbt\/std\/InitializeInstance$.html#app[K[L[x]],Z](in:K[sbt.Def.Initialize],f:K[sbt.internal.util.Types.Id]=>Z)(implicita:sbt.internal.util.AList[K]):sbt.Def.Initialize[Z]", "kind" : "def"}, {"label" : "M", "tail" : "", "member" : "sbt.std.InitializeInstance.M", "link" : "sbt\/std\/InitializeInstance$.html#M[x]=sbt.Def.Initialize[x]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/InitializeInstance$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/InitializeInstance$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/InitializeInstance$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/InitializeInstance$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/InitializeInstance$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/InitializeInstance$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/InitializeInstance$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InitializeInstance$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InitializeInstance$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InitializeInstance$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/InitializeInstance$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/InitializeInstance$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/InitializeInstance$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/InitializeInstance$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/InitializeInstance$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/InitializeInstance$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/InitializeInstance$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/InitializeInstance$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/InitializeInstance$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.InitParserConvert", "shortDescription" : "Converts an input Tree of type State => Parser[T] or Initialize[State => Parser[T]]into a Tree of type Initialize[State => Parser[T]].", "object" : "sbt\/std\/InitParserConvert$.html", "members_object" : [{"label" : "apply", "tail" : "(c: Context)(nme: String, in: scala.reflect.macros.blackbox.Context.Tree)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): Converted[c.type]", "member" : "sbt.std.InitParserConvert.apply", "link" : "sbt\/std\/InitParserConvert$.html#apply[T](c:scala.reflect.macros.blackbox.Context)(nme:String,in:c.Tree)(implicitevidence$7:c.WeakTypeTag[T]):sbt.internal.util.appmacro.Converted[c.type]", "kind" : "def"}, {"label" : "asPredicate", "tail" : "(c: Context): (String, scala.reflect.macros.blackbox.Context.Type, scala.reflect.macros.blackbox.Context.Tree) ⇒ Boolean", "member" : "sbt.internal.util.appmacro.Convert.asPredicate", "link" : "sbt\/std\/InitParserConvert$.html#asPredicate(c:scala.reflect.macros.blackbox.Context):(String,c.Type,c.Tree)=>Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/InitParserConvert$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/InitParserConvert$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/InitParserConvert$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/InitParserConvert$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/InitParserConvert$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/InitParserConvert$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/InitParserConvert$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InitParserConvert$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InitParserConvert$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InitParserConvert$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/InitParserConvert$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/InitParserConvert$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/InitParserConvert$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/InitParserConvert$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/InitParserConvert$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/InitParserConvert$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/InitParserConvert$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/InitParserConvert$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/InitParserConvert$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.InputEvaluated", "shortDescription" : "", "members_class" : [{"label" : "inputTaskValue", "tail" : "(): InputTask[T]", "member" : "sbt.std.InputEvaluated.inputTaskValue", "link" : "sbt\/std\/InputEvaluated.html#inputTaskValue:sbt.InputTask[T]", "kind" : "macro def"}, {"label" : "evaluated", "tail" : "(): T", "member" : "sbt.std.InputEvaluated.evaluated", "link" : "sbt\/std\/InputEvaluated.html#evaluated:T", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/InputEvaluated.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/InputEvaluated.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/InputEvaluated.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/InputEvaluated.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/InputEvaluated.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/InputEvaluated.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/InputEvaluated.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InputEvaluated.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InputEvaluated.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InputEvaluated.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/InputEvaluated.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/InputEvaluated.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/InputEvaluated.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/InputEvaluated.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/InputEvaluated.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/InputEvaluated.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/InputEvaluated.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/InputEvaluated.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/InputEvaluated.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/std\/InputEvaluated.html", "kind" : "class"}, {"name" : "sbt.std.InputInitConvert", "shortDescription" : "", "object" : "sbt\/std\/InputInitConvert$.html", "members_object" : [{"label" : "apply", "tail" : "(c: Context)(nme: String, in: scala.reflect.macros.blackbox.Context.Tree)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): Converted[c.type]", "member" : "sbt.std.InputInitConvert.apply", "link" : "sbt\/std\/InputInitConvert$.html#apply[T](c:scala.reflect.macros.blackbox.Context)(nme:String,in:c.Tree)(implicitevidence$1:c.WeakTypeTag[T]):sbt.internal.util.appmacro.Converted[c.type]", "kind" : "def"}, {"label" : "asPredicate", "tail" : "(c: Context): (String, scala.reflect.macros.blackbox.Context.Type, scala.reflect.macros.blackbox.Context.Tree) ⇒ Boolean", "member" : "sbt.internal.util.appmacro.Convert.asPredicate", "link" : "sbt\/std\/InputInitConvert$.html#asPredicate(c:scala.reflect.macros.blackbox.Context):(String,c.Type,c.Tree)=>Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/InputInitConvert$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/InputInitConvert$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/InputInitConvert$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/InputInitConvert$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/InputInitConvert$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/InputInitConvert$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/InputInitConvert$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InputInitConvert$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InputInitConvert$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InputInitConvert$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/InputInitConvert$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/InputInitConvert$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/InputInitConvert$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/InputInitConvert$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/InputInitConvert$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/InputInitConvert$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/InputInitConvert$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/InputInitConvert$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/InputInitConvert$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.InputWrapper", "shortDescription" : "Implementation detail.", "object" : "sbt\/std\/InputWrapper$.html", "members_object" : [{"label" : "previousMacroImpl", "tail" : "(c: Context)(format: scala.reflect.macros.blackbox.Context.Expr[JsonFormat[T]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Option[T]]", "member" : "sbt.std.InputWrapper.previousMacroImpl", "link" : "sbt\/std\/InputWrapper$.html#previousMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(format:c.Expr[sjsonnew.JsonFormat[T]])(implicitevidence$11:c.WeakTypeTag[T]):c.Expr[Option[T]]", "kind" : "def"}, {"label" : "taskValueMacroImpl", "tail" : "(c: Context)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Task[T]]", "member" : "sbt.std.InputWrapper.taskValueMacroImpl", "link" : "sbt\/std\/InputWrapper$.html#taskValueMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(implicitevidence$10:c.WeakTypeTag[T]):c.Expr[sbt.Task[T]]", "kind" : "def"}, {"label" : "inputTaskValueMacroImpl", "tail" : "(c: Context)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[InputTask[T]]", "member" : "sbt.std.InputWrapper.inputTaskValueMacroImpl", "link" : "sbt\/std\/InputWrapper$.html#inputTaskValueMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(implicitevidence$9:c.WeakTypeTag[T]):c.Expr[sbt.InputTask[T]]", "kind" : "def"}, {"label" : "valueMacroImpl", "tail" : "(c: Context)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[T]", "member" : "sbt.std.InputWrapper.valueMacroImpl", "link" : "sbt\/std\/InputWrapper$.html#valueMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(implicitevidence$8:c.WeakTypeTag[T]):c.Expr[T]", "kind" : "def"}, {"label" : "wrapImpl", "tail" : "(c: Context, s: S, wrapName: String)(ts: scala.reflect.macros.blackbox.Context.Expr[Any], pos: scala.reflect.macros.blackbox.Context.Position)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T], it: scala.reflect.macros.blackbox.Context.TypeTag[s.type]): scala.reflect.macros.blackbox.Context.Expr[T]", "member" : "sbt.std.InputWrapper.wrapImpl", "link" : "sbt\/std\/InputWrapper$.html#wrapImpl[T,S<:Singleton](c:scala.reflect.macros.blackbox.Context,s:S,wrapName:String)(ts:c.Expr[Any],pos:c.Position)(implicitevidence$7:c.WeakTypeTag[T],implicitit:c.TypeTag[s.type]):c.Expr[T]", "kind" : "def"}, {"label" : "wrapPrevious_☃☃", "tail" : "(in: Any): T", "member" : "sbt.std.InputWrapper.wrapPrevious_☃☃", "link" : "sbt\/std\/InputWrapper$.html#wrapPrevious_☃☃[T](in:Any):T", "kind" : "def"}, {"label" : "wrapInitInputTask_☃☃", "tail" : "(in: Any): T", "member" : "sbt.std.InputWrapper.wrapInitInputTask_☃☃", "link" : "sbt\/std\/InputWrapper$.html#wrapInitInputTask_☃☃[T](in:Any):T", "kind" : "def"}, {"label" : "wrapInputTask_☃☃", "tail" : "(in: Any): T", "member" : "sbt.std.InputWrapper.wrapInputTask_☃☃", "link" : "sbt\/std\/InputWrapper$.html#wrapInputTask_☃☃[T](in:Any):T", "kind" : "def"}, {"label" : "wrapInitTask_☃☃", "tail" : "(in: Any): T", "member" : "sbt.std.InputWrapper.wrapInitTask_☃☃", "link" : "sbt\/std\/InputWrapper$.html#wrapInitTask_☃☃[T](in:Any):T", "kind" : "def"}, {"label" : "wrapInit_☃☃", "tail" : "(in: Any): T", "member" : "sbt.std.InputWrapper.wrapInit_☃☃", "link" : "sbt\/std\/InputWrapper$.html#wrapInit_☃☃[T](in:Any):T", "kind" : "def"}, {"label" : "wrapTask_☃☃", "tail" : "(in: Any): T", "member" : "sbt.std.InputWrapper.wrapTask_☃☃", "link" : "sbt\/std\/InputWrapper$.html#wrapTask_☃☃[T](in:Any):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/InputWrapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/InputWrapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/InputWrapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/InputWrapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/InputWrapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/InputWrapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/InputWrapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InputWrapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InputWrapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/InputWrapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/InputWrapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/InputWrapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/InputWrapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/InputWrapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/InputWrapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/InputWrapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/InputWrapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/InputWrapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/InputWrapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.JoinTask", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/JoinTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/JoinTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/JoinTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/JoinTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/JoinTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/JoinTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/JoinTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/JoinTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/JoinTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/JoinTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/JoinTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/JoinTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/JoinTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/JoinTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/JoinTask.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/JoinTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/JoinTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/JoinTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/JoinTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "reduced", "tail" : "(f: (S, S) ⇒ S): Task[S]", "member" : "sbt.std.JoinTask.reduced", "link" : "sbt\/std\/JoinTask.html#reduced(f:(S,S)=>S):sbt.Task[S]", "kind" : "abstract def"}, {"label" : "join", "tail" : "(): Task[CC[S]]", "member" : "sbt.std.JoinTask.join", "link" : "sbt\/std\/JoinTask.html#join:sbt.Task[CC[S]]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/std\/JoinTask.html", "kind" : "trait"}, {"name" : "sbt.std.MacroPrevious", "shortDescription" : "", "members_class" : [{"label" : "previous", "tail" : "(format: JsonFormat[T]): Option[T]", "member" : "sbt.std.MacroPrevious.previous", "link" : "sbt\/std\/MacroPrevious.html#previous(implicitformat:sjsonnew.JsonFormat[T]):Option[T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/MacroPrevious.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/MacroPrevious.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/MacroPrevious.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/MacroPrevious.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/MacroPrevious.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/MacroPrevious.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/MacroPrevious.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/MacroPrevious.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/MacroPrevious.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/MacroPrevious.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/MacroPrevious.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/MacroPrevious.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/MacroPrevious.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/MacroPrevious.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/MacroPrevious.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/MacroPrevious.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/MacroPrevious.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/MacroPrevious.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/MacroPrevious.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/std\/MacroPrevious.html", "kind" : "class"}, {"name" : "sbt.std.MacroTaskValue", "shortDescription" : "", "members_class" : [{"label" : "taskValue", "tail" : "(): Task[T]", "member" : "sbt.std.MacroTaskValue.taskValue", "link" : "sbt\/std\/MacroTaskValue.html#taskValue:sbt.Task[T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/MacroTaskValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/MacroTaskValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/MacroTaskValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/MacroTaskValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/MacroTaskValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/MacroTaskValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/MacroTaskValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/MacroTaskValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/MacroTaskValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/MacroTaskValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/MacroTaskValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/MacroTaskValue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/MacroTaskValue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/MacroTaskValue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/MacroTaskValue.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/MacroTaskValue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/MacroTaskValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/MacroTaskValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/MacroTaskValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/std\/MacroTaskValue.html", "kind" : "class"}, {"name" : "sbt.std.MacroValue", "shortDescription" : "", "members_class" : [{"label" : "value", "tail" : "(): T", "member" : "sbt.std.MacroValue.value", "link" : "sbt\/std\/MacroValue.html#value:T", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/MacroValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/MacroValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/MacroValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/MacroValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/MacroValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/MacroValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/MacroValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/MacroValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/MacroValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/MacroValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/MacroValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/MacroValue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/MacroValue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/MacroValue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/MacroValue.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/MacroValue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/MacroValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/MacroValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/MacroValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/std\/MacroValue.html", "kind" : "class"}, {"name" : "sbt.std.ManagedStreams", "members_trait" : [{"label" : "log", "tail" : ": ManagedLogger", "member" : "sbt.std.TaskStreams.log", "link" : "sbt\/std\/ManagedStreams.html#log:sbt.internal.util.ManagedLogger", "kind" : "final lazy val"}, {"label" : "readBinary", "tail" : "(a: Key, sid: Option[String]): BufferedInputStream", "member" : "sbt.std.TaskStreams.readBinary", "link" : "sbt\/std\/ManagedStreams.html#readBinary(a:Key,sid:Option[String]):java.io.BufferedInputStream", "kind" : "final def"}, {"label" : "readText", "tail" : "(a: Key, sid: Option[String]): BufferedReader", "member" : "sbt.std.TaskStreams.readText", "link" : "sbt\/std\/ManagedStreams.html#readText(a:Key,sid:Option[String]):java.io.BufferedReader", "kind" : "final def"}, {"label" : "errorID", "tail" : "(): String", "member" : "sbt.std.TaskStreams.errorID", "link" : "sbt\/std\/ManagedStreams.html#errorID:String", "kind" : "def"}, {"label" : "outID", "tail" : "(): String", "member" : "sbt.std.TaskStreams.outID", "link" : "sbt\/std\/ManagedStreams.html#outID:String", "kind" : "def"}, {"label" : "default", "tail" : "(): String", "member" : "sbt.std.TaskStreams.default", "link" : "sbt\/std\/ManagedStreams.html#default:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/ManagedStreams.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/ManagedStreams.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/ManagedStreams.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/ManagedStreams.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/ManagedStreams.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/ManagedStreams.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/ManagedStreams.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ManagedStreams.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ManagedStreams.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ManagedStreams.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/ManagedStreams.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/ManagedStreams.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/ManagedStreams.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/ManagedStreams.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/ManagedStreams.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/ManagedStreams.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/ManagedStreams.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/ManagedStreams.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/ManagedStreams.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isClosed", "tail" : "(): Boolean", "member" : "sbt.std.ManagedStreams.isClosed", "link" : "sbt\/std\/ManagedStreams.html#isClosed:Boolean", "kind" : "abstract def"}, {"label" : "close", "tail" : "(): Unit", "member" : "sbt.std.ManagedStreams.close", "link" : "sbt\/std\/ManagedStreams.html#close():Unit", "kind" : "abstract def"}, {"label" : "open", "tail" : "(): Unit", "member" : "sbt.std.ManagedStreams.open", "link" : "sbt\/std\/ManagedStreams.html#open():Unit", "kind" : "abstract def"}, {"label" : "log", "tail" : "(sid: String): ManagedLogger", "member" : "sbt.std.TaskStreams.log", "link" : "sbt\/std\/ManagedStreams.html#log(sid:String):sbt.internal.util.ManagedLogger", "kind" : "abstract def"}, {"label" : "cacheStoreFactory", "tail" : "(): CacheStoreFactory", "member" : "sbt.std.TaskStreams.cacheStoreFactory", "link" : "sbt\/std\/ManagedStreams.html#cacheStoreFactory:sbt.util.CacheStoreFactory", "kind" : "abstract def"}, {"label" : "cacheDirectory", "tail" : "(): File", "member" : "sbt.std.TaskStreams.cacheDirectory", "link" : "sbt\/std\/ManagedStreams.html#cacheDirectory:java.io.File", "kind" : "abstract def"}, {"label" : "binary", "tail" : "(sid: String): BufferedOutputStream", "member" : "sbt.std.TaskStreams.binary", "link" : "sbt\/std\/ManagedStreams.html#binary(sid:String):java.io.BufferedOutputStream", "kind" : "abstract def"}, {"label" : "text", "tail" : "(sid: String): PrintWriter", "member" : "sbt.std.TaskStreams.text", "link" : "sbt\/std\/ManagedStreams.html#text(sid:String):java.io.PrintWriter", "kind" : "abstract def"}, {"label" : "key", "tail" : "(): Key", "member" : "sbt.std.TaskStreams.key", "link" : "sbt\/std\/ManagedStreams.html#key:Key", "kind" : "abstract def"}, {"label" : "readBinary", "tail" : "(a: Key, sid: String): BufferedInputStream", "member" : "sbt.std.TaskStreams.readBinary", "link" : "sbt\/std\/ManagedStreams.html#readBinary(a:Key,sid:String):java.io.BufferedInputStream", "kind" : "abstract def"}, {"label" : "readText", "tail" : "(key: Key, sid: String): BufferedReader", "member" : "sbt.std.TaskStreams.readText", "link" : "sbt\/std\/ManagedStreams.html#readText(key:Key,sid:String):java.io.BufferedReader", "kind" : "abstract def"}, {"label" : "getOutput", "tail" : "(sid: String): Output", "member" : "sbt.std.TaskStreams.getOutput", "link" : "sbt\/std\/ManagedStreams.html#getOutput(sid:String):sbt.util.Output", "kind" : "abstract def"}, {"label" : "getInput", "tail" : "(key: Key, sid: String): Input", "member" : "sbt.std.TaskStreams.getInput", "link" : "sbt\/std\/ManagedStreams.html#getInput(key:Key,sid:String):sbt.util.Input", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/std\/ManagedStreams.html", "kind" : "trait"}, {"name" : "sbt.std.MultiInTask", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/MultiInTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/MultiInTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/MultiInTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/MultiInTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/MultiInTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/MultiInTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/MultiInTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/MultiInTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/MultiInTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/MultiInTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/MultiInTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/MultiInTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/MultiInTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/MultiInTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/MultiInTask.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/MultiInTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/MultiInTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/MultiInTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/MultiInTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapFailure", "tail" : "(f: (Seq[Incomplete]) ⇒ T): Task[T]", "member" : "sbt.std.MultiInTask.mapFailure", "link" : "sbt\/std\/MultiInTask.html#mapFailure[T](f:Seq[sbt.Incomplete]=>T):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "flatFailure", "tail" : "(f: (Seq[Incomplete]) ⇒ Task[T]): Task[T]", "member" : "sbt.std.MultiInTask.flatFailure", "link" : "sbt\/std\/MultiInTask.html#flatFailure[T](f:Seq[sbt.Incomplete]=>sbt.Task[T]):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "mapR", "tail" : "(f: (K[Result]) ⇒ T): Task[T]", "member" : "sbt.std.MultiInTask.mapR", "link" : "sbt\/std\/MultiInTask.html#mapR[T](f:K[sbt.Result]=>T):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (K[internal.util.Types.Id]) ⇒ T): Task[T]", "member" : "sbt.std.MultiInTask.map", "link" : "sbt\/std\/MultiInTask.html#map[T](f:K[sbt.internal.util.Types.Id]=>T):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "flatMapR", "tail" : "(f: (K[Result]) ⇒ Task[T]): Task[T]", "member" : "sbt.std.MultiInTask.flatMapR", "link" : "sbt\/std\/MultiInTask.html#flatMapR[T](f:K[sbt.Result]=>sbt.Task[T]):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(f: (K[internal.util.Types.Id]) ⇒ Task[T]): Task[T]", "member" : "sbt.std.MultiInTask.flatMap", "link" : "sbt\/std\/MultiInTask.html#flatMap[T](f:K[sbt.internal.util.Types.Id]=>sbt.Task[T]):sbt.Task[T]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/std\/MultiInTask.html", "kind" : "trait"}, {"name" : "sbt.std.OnlyTaskDynLinterDSL", "shortDescription" : "", "object" : "sbt\/std\/OnlyTaskDynLinterDSL$.html", "members_object" : [{"label" : "convert", "tail" : "(): Convert", "member" : "sbt.std.OnlyTaskDynLinterDSL.convert", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#convert:sbt.internal.util.appmacro.Convert", "kind" : "def"}, {"label" : "isDynamicTask", "tail" : ": Boolean", "member" : "sbt.std.OnlyTaskDynLinterDSL.isDynamicTask", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#isDynamicTask:Boolean", "kind" : "val"}, {"label" : "runLinter", "tail" : "(ctx: Context)(tree: scala.reflect.macros.blackbox.Context.Tree): Unit", "member" : "sbt.std.BaseTaskLinterDSL.runLinter", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#runLinter(ctx:scala.reflect.macros.blackbox.Context)(tree:ctx.Tree):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/OnlyTaskDynLinterDSL$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.OnlyTaskLinterDSL", "shortDescription" : "", "object" : "sbt\/std\/OnlyTaskLinterDSL$.html", "members_object" : [{"label" : "convert", "tail" : "(): Convert", "member" : "sbt.std.OnlyTaskLinterDSL.convert", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#convert:sbt.internal.util.appmacro.Convert", "kind" : "def"}, {"label" : "isDynamicTask", "tail" : ": Boolean", "member" : "sbt.std.OnlyTaskLinterDSL.isDynamicTask", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#isDynamicTask:Boolean", "kind" : "val"}, {"label" : "runLinter", "tail" : "(ctx: Context)(tree: scala.reflect.macros.blackbox.Context.Tree): Unit", "member" : "sbt.std.BaseTaskLinterDSL.runLinter", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#runLinter(ctx:scala.reflect.macros.blackbox.Context)(tree:ctx.Tree):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/OnlyTaskLinterDSL$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.ParserConvert", "shortDescription" : "Converts an input Tree of type Parser[T] or State => Parser[T] into a Tree of type State => Parser[T].", "object" : "sbt\/std\/ParserConvert$.html", "members_object" : [{"label" : "apply", "tail" : "(c: Context)(nme: String, in: scala.reflect.macros.blackbox.Context.Tree)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): Converted[c.type]", "member" : "sbt.std.ParserConvert.apply", "link" : "sbt\/std\/ParserConvert$.html#apply[T](c:scala.reflect.macros.blackbox.Context)(nme:String,in:c.Tree)(implicitevidence$2:c.WeakTypeTag[T]):sbt.internal.util.appmacro.Converted[c.type]", "kind" : "def"}, {"label" : "asPredicate", "tail" : "(c: Context): (String, scala.reflect.macros.blackbox.Context.Type, scala.reflect.macros.blackbox.Context.Tree) ⇒ Boolean", "member" : "sbt.internal.util.appmacro.Convert.asPredicate", "link" : "sbt\/std\/ParserConvert$.html#asPredicate(c:scala.reflect.macros.blackbox.Context):(String,c.Type,c.Tree)=>Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/ParserConvert$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/ParserConvert$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/ParserConvert$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/ParserConvert$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/ParserConvert$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/ParserConvert$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/ParserConvert$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserConvert$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserConvert$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserConvert$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/ParserConvert$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/ParserConvert$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/ParserConvert$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/ParserConvert$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/ParserConvert$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/ParserConvert$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/ParserConvert$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/ParserConvert$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/ParserConvert$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.ParserInput", "shortDescription" : "", "object" : "sbt\/std\/ParserInput$.html", "members_class" : [{"label" : "parsed", "tail" : "(): T", "member" : "sbt.std.ParserInput.parsed", "link" : "sbt\/std\/ParserInput.html#parsed:T", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/ParserInput.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/ParserInput.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/ParserInput.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/ParserInput.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/ParserInput.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/ParserInput.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/ParserInput.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserInput.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserInput.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserInput.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/ParserInput.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/ParserInput.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/ParserInput.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/ParserInput.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/ParserInput.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/ParserInput.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/ParserInput.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/ParserInput.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/ParserInput.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "parsedMacroImpl", "tail" : "(c: Context)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[T]", "member" : "sbt.std.ParserInput.parsedMacroImpl", "link" : "sbt\/std\/ParserInput$.html#parsedMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(implicitevidence$18:c.WeakTypeTag[T]):c.Expr[T]", "kind" : "def"}, {"label" : "parsedInputMacroImpl", "tail" : "(c: Context)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Task[T]]", "member" : "sbt.std.ParserInput.parsedInputMacroImpl", "link" : "sbt\/std\/ParserInput$.html#parsedInputMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(implicitevidence$15:c.WeakTypeTag[T]):c.Expr[sbt.Task[T]]", "kind" : "def"}, {"label" : "initParser_☃☃", "tail" : "(i: Any): T", "member" : "sbt.std.ParserInput.initParser_☃☃", "link" : "sbt\/std\/ParserInput$.html#initParser_☃☃[T](i:Any):T", "kind" : "def"}, {"label" : "parser_☃☃", "tail" : "(i: Any): T", "member" : "sbt.std.ParserInput.parser_☃☃", "link" : "sbt\/std\/ParserInput$.html#parser_☃☃[T](i:Any):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/ParserInput$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/ParserInput$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/ParserInput$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/ParserInput$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/ParserInput$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/ParserInput$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/ParserInput$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserInput$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserInput$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserInput$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/ParserInput$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/ParserInput$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/ParserInput$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/ParserInput$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/ParserInput$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/ParserInput$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/ParserInput$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/ParserInput$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/ParserInput$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/std\/ParserInput.html", "kind" : "class"}, {"name" : "sbt.std.ParserInputTask", "shortDescription" : "", "members_class" : [{"label" : "parsed", "tail" : "(): Task[T]", "member" : "sbt.std.ParserInputTask.parsed", "link" : "sbt\/std\/ParserInputTask.html#parsed:sbt.Task[T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/ParserInputTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/ParserInputTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/ParserInputTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/ParserInputTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/ParserInputTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/ParserInputTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/ParserInputTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserInputTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserInputTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserInputTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/ParserInputTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/ParserInputTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/ParserInputTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/ParserInputTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/ParserInputTask.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/ParserInputTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/ParserInputTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/ParserInputTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/ParserInputTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/std\/ParserInputTask.html", "kind" : "class"}, {"name" : "sbt.std.ParserInstance", "shortDescription" : "", "object" : "sbt\/std\/ParserInstance$.html", "members_object" : [{"label" : "pure", "tail" : "(t: () ⇒ T): (State) ⇒ Parser[T]", "member" : "sbt.std.ParserInstance.pure", "link" : "sbt\/std\/ParserInstance$.html#pure[T](t:()=>T):sbt.State=>sbt.internal.util.complete.Parser[T]", "kind" : "def"}, {"label" : "map", "tail" : "(in: M[S], f: (S) ⇒ T): M[T]", "member" : "sbt.std.ParserInstance.map", "link" : "sbt\/std\/ParserInstance$.html#map[S,T](in:sbt.std.ParserInstance.M[S],f:S=>T):sbt.std.ParserInstance.M[T]", "kind" : "def"}, {"label" : "app", "tail" : "(in: K[M], f: (K[internal.util.Types.Id]) ⇒ Z)(a: AList[K]): M[Z]", "member" : "sbt.std.ParserInstance.app", "link" : "sbt\/std\/ParserInstance$.html#app[K[L[x]],Z](in:K[sbt.std.ParserInstance.M],f:K[sbt.internal.util.Types.Id]=>Z)(implicita:sbt.internal.util.AList[K]):sbt.std.ParserInstance.M[Z]", "kind" : "def"}, {"label" : "M", "tail" : "", "member" : "sbt.std.ParserInstance.M", "link" : "sbt\/std\/ParserInstance$.html#M[x]=sbt.State=>sbt.internal.util.complete.Parser[x]", "kind" : "final type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/ParserInstance$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/ParserInstance$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/ParserInstance$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/ParserInstance$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/ParserInstance$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/ParserInstance$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/ParserInstance$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserInstance$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserInstance$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ParserInstance$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/ParserInstance$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/ParserInstance$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/ParserInstance$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/ParserInstance$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/ParserInstance$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/ParserInstance$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/ParserInstance$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/ParserInstance$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/ParserInstance$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.PlainTaskMacro", "shortDescription" : "", "object" : "sbt\/std\/PlainTaskMacro$.html", "members_object" : [{"label" : "taskDynImpl", "tail" : "(c: Context)(t: scala.reflect.macros.blackbox.Context.Expr[Task[T]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Task[T]]", "member" : "sbt.std.PlainTaskMacro.taskDynImpl", "link" : "sbt\/std\/PlainTaskMacro$.html#taskDynImpl[T](c:scala.reflect.macros.blackbox.Context)(t:c.Expr[sbt.Task[T]])(implicitevidence$53:c.WeakTypeTag[T]):c.Expr[sbt.Task[T]]", "kind" : "def"}, {"label" : "taskDyn", "tail" : "(t: Task[T]): Task[T]", "member" : "sbt.std.PlainTaskMacro.taskDyn", "link" : "sbt\/std\/PlainTaskMacro$.html#taskDyn[T](t:sbt.Task[T]):sbt.Task[T]", "kind" : "macro def"}, {"label" : "taskImpl", "tail" : "(c: Context)(t: scala.reflect.macros.blackbox.Context.Expr[T])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Task[T]]", "member" : "sbt.std.PlainTaskMacro.taskImpl", "link" : "sbt\/std\/PlainTaskMacro$.html#taskImpl[T](c:scala.reflect.macros.blackbox.Context)(t:c.Expr[T])(implicitevidence$52:c.WeakTypeTag[T]):c.Expr[sbt.Task[T]]", "kind" : "def"}, {"label" : "task", "tail" : "(t: T): Task[T]", "member" : "sbt.std.PlainTaskMacro.task", "link" : "sbt\/std\/PlainTaskMacro$.html#task[T](t:T):sbt.Task[T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/PlainTaskMacro$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/PlainTaskMacro$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/PlainTaskMacro$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/PlainTaskMacro$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/PlainTaskMacro$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/PlainTaskMacro$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/PlainTaskMacro$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/PlainTaskMacro$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/PlainTaskMacro$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/PlainTaskMacro$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/PlainTaskMacro$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/PlainTaskMacro$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/PlainTaskMacro$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/PlainTaskMacro$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/PlainTaskMacro$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/PlainTaskMacro$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/PlainTaskMacro$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/PlainTaskMacro$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/PlainTaskMacro$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.ProcessPipe", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/ProcessPipe.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/ProcessPipe.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/ProcessPipe.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/ProcessPipe.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/ProcessPipe.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/ProcessPipe.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/ProcessPipe.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ProcessPipe.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ProcessPipe.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/ProcessPipe.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/ProcessPipe.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/ProcessPipe.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/ProcessPipe.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/ProcessPipe.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/ProcessPipe.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/ProcessPipe.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/ProcessPipe.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/ProcessPipe.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/ProcessPipe.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "pipe", "tail" : "(sid: String)(p: ProcessBuilder): Task[Int]", "member" : "sbt.std.ProcessPipe.pipe", "link" : "sbt\/std\/ProcessPipe.html#pipe(sid:String)(p:scala.sys.process.ProcessBuilder):sbt.Task[Int]", "kind" : "abstract def"}, {"label" : "#|", "tail" : "(p: ProcessBuilder): Task[Int]", "member" : "sbt.std.ProcessPipe.#|", "link" : "sbt\/std\/ProcessPipe.html##|(p:scala.sys.process.ProcessBuilder):sbt.Task[Int]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/std\/ProcessPipe.html", "kind" : "trait"}, {"name" : "sbt.std.SettingMacro", "shortDescription" : "", "object" : "sbt\/std\/SettingMacro$.html", "members_object" : [{"label" : "settingDynMacroImpl", "tail" : "(c: Context)(t: scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[T]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[T]]", "member" : "sbt.std.SettingMacro.settingDynMacroImpl", "link" : "sbt\/std\/SettingMacro$.html#settingDynMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(t:c.Expr[sbt.Def.Initialize[T]])(implicitevidence$4:c.WeakTypeTag[T]):c.Expr[sbt.Def.Initialize[T]]", "kind" : "def"}, {"label" : "settingMacroImpl", "tail" : "(c: Context)(t: scala.reflect.macros.blackbox.Context.Expr[T])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[T]]", "member" : "sbt.std.SettingMacro.settingMacroImpl", "link" : "sbt\/std\/SettingMacro$.html#settingMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(t:c.Expr[T])(implicitevidence$3:c.WeakTypeTag[T]):c.Expr[sbt.Def.Initialize[T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/SettingMacro$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/SettingMacro$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/SettingMacro$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/SettingMacro$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/SettingMacro$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/SettingMacro$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/SettingMacro$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/SettingMacro$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/SettingMacro$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/SettingMacro$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/SettingMacro$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/SettingMacro$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/SettingMacro$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/SettingMacro$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/SettingMacro$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/SettingMacro$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/SettingMacro$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/SettingMacro$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/SettingMacro$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.SingleInTask", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/SingleInTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/SingleInTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/SingleInTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/SingleInTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/SingleInTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/SingleInTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/SingleInTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/SingleInTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/SingleInTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/SingleInTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/SingleInTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/SingleInTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/SingleInTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/SingleInTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/SingleInTask.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/SingleInTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/SingleInTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/SingleInTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/SingleInTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "flatMapR", "tail" : "(f: (Result[S]) ⇒ Task[T]): Task[T]", "member" : "sbt.std.SingleInTask.flatMapR", "link" : "sbt\/std\/SingleInTask.html#flatMapR[T](f:sbt.Result[S]=>sbt.Task[T]):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "mapFailure", "tail" : "(f: (Incomplete) ⇒ T): Task[T]", "member" : "sbt.std.SingleInTask.mapFailure", "link" : "sbt\/std\/SingleInTask.html#mapFailure[T](f:sbt.Incomplete=>T):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "flatFailure", "tail" : "(f: (Incomplete) ⇒ Task[T]): Task[T]", "member" : "sbt.std.SingleInTask.flatFailure", "link" : "sbt\/std\/SingleInTask.html#flatFailure[T](f:sbt.Incomplete=>sbt.Task[T]):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "mapR", "tail" : "(f: (Result[S]) ⇒ T): Task[T]", "member" : "sbt.std.SingleInTask.mapR", "link" : "sbt\/std\/SingleInTask.html#mapR[T](f:sbt.Result[S]=>T):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "result", "tail" : "(): Task[Result[S]]", "member" : "sbt.std.SingleInTask.result", "link" : "sbt\/std\/SingleInTask.html#result:sbt.Task[sbt.Result[S]]", "kind" : "abstract def"}, {"label" : "failure", "tail" : "(): Task[Incomplete]", "member" : "sbt.std.SingleInTask.failure", "link" : "sbt\/std\/SingleInTask.html#failure:sbt.Task[sbt.Incomplete]", "kind" : "abstract def"}, {"label" : "&&", "tail" : "(alt: Task[T]): Task[T]", "member" : "sbt.std.SingleInTask.&&", "link" : "sbt\/std\/SingleInTask.html#&&[T](alt:sbt.Task[T]):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "||", "tail" : "(alt: Task[T]): Task[T]", "member" : "sbt.std.SingleInTask.||", "link" : "sbt\/std\/SingleInTask.html#||[T>:S](alt:sbt.Task[T]):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "doFinally", "tail" : "(t: Task[Unit]): Task[S]", "member" : "sbt.std.SingleInTask.doFinally", "link" : "sbt\/std\/SingleInTask.html#doFinally(t:sbt.Task[Unit]):sbt.Task[S]", "kind" : "abstract def"}, {"label" : "andFinally", "tail" : "(fin: ⇒ Unit): Task[S]", "member" : "sbt.std.SingleInTask.andFinally", "link" : "sbt\/std\/SingleInTask.html#andFinally(fin:=>Unit):sbt.Task[S]", "kind" : "abstract def"}, {"label" : "dependsOn", "tail" : "(tasks: Task[_]*): Task[S]", "member" : "sbt.std.SingleInTask.dependsOn", "link" : "sbt\/std\/SingleInTask.html#dependsOn(tasks:sbt.Task[_]*):sbt.Task[S]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (S) ⇒ T): Task[T]", "member" : "sbt.std.SingleInTask.map", "link" : "sbt\/std\/SingleInTask.html#map[T](f:S=>T):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(f: (S) ⇒ Task[T]): Task[T]", "member" : "sbt.std.SingleInTask.flatMap", "link" : "sbt\/std\/SingleInTask.html#flatMap[T](f:S=>sbt.Task[T]):sbt.Task[T]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/std\/SingleInTask.html", "kind" : "trait"}, {"name" : "sbt.std.Streams", "members_trait" : [{"label" : "use", "tail" : "(key: Key)(f: (TaskStreams[Key]) ⇒ T): T", "member" : "sbt.std.Streams.use", "link" : "sbt\/std\/Streams.html#use[T](key:Key)(f:sbt.std.TaskStreams[Key]=>T):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/Streams.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/Streams.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/Streams.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/Streams.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/Streams.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/Streams.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/Streams.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/Streams.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/Streams.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/Streams.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/Streams.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/Streams.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/Streams.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/Streams.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/Streams.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/Streams.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/Streams.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/Streams.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/Streams.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: Key): ManagedStreams[Key]", "member" : "sbt.std.Streams.apply", "link" : "sbt\/std\/Streams.html#apply(a:Key):sbt.std.ManagedStreams[Key]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "sbt\/std\/Streams$.html", "members_object" : [{"label" : "apply", "tail" : "(taskDirectory: (Key) ⇒ File, name: (Key) ⇒ String, mkLogger: (Key, PrintWriter) ⇒ ManagedLogger, converter: SupportConverter[J])(arg0: IsoString[J]): Streams[Key]", "member" : "sbt.std.Streams.apply", "link" : "sbt\/std\/Streams$.html#apply[Key,J](taskDirectory:Key=>java.io.File,name:Key=>String,mkLogger:(Key,java.io.PrintWriter)=>sbt.internal.util.ManagedLogger,converter:sjsonnew.SupportConverter[J])(implicitevidence$1:sjsonnew.IsoString[J]):sbt.std.Streams[Key]", "kind" : "def"}, {"label" : "closeable", "tail" : "(delegate: Streams[Key]): CloseableStreams[Key]", "member" : "sbt.std.Streams.closeable", "link" : "sbt\/std\/Streams$.html#closeable[Key](delegate:sbt.std.Streams[Key]):sbt.std.CloseableStreams[Key]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/Streams$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/Streams$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/Streams$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/Streams$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/Streams$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/Streams$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/Streams$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/Streams$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/Streams$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/Streams$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/Streams$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/Streams$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/Streams$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/Streams$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/Streams$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/Streams$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/Streams$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/Streams$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/Streams$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/std\/Streams.html", "kind" : "trait"}, {"name" : "sbt.std.TaskConvert", "shortDescription" : "Convert instance for plain Tasks not within the settings system.", "object" : "sbt\/std\/TaskConvert$.html", "members_object" : [{"label" : "apply", "tail" : "(c: Context)(nme: String, in: scala.reflect.macros.blackbox.Context.Tree)(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): Converted[c.type]", "member" : "sbt.std.TaskConvert.apply", "link" : "sbt\/std\/TaskConvert$.html#apply[T](c:scala.reflect.macros.blackbox.Context)(nme:String,in:c.Tree)(implicitevidence$3:c.WeakTypeTag[T]):sbt.internal.util.appmacro.Converted[c.type]", "kind" : "def"}, {"label" : "asPredicate", "tail" : "(c: Context): (String, scala.reflect.macros.blackbox.Context.Type, scala.reflect.macros.blackbox.Context.Tree) ⇒ Boolean", "member" : "sbt.internal.util.appmacro.Convert.asPredicate", "link" : "sbt\/std\/TaskConvert$.html#asPredicate(c:scala.reflect.macros.blackbox.Context):(String,c.Type,c.Tree)=>Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/TaskConvert$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/TaskConvert$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/TaskConvert$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/TaskConvert$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/TaskConvert$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/TaskConvert$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/TaskConvert$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskConvert$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskConvert$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskConvert$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/TaskConvert$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/TaskConvert$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/TaskConvert$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/TaskConvert$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/TaskConvert$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/TaskConvert$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/TaskConvert$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/TaskConvert$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/TaskConvert$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.TaskDynLinterDSL", "shortDescription" : "", "object" : "sbt\/std\/TaskDynLinterDSL$.html", "members_object" : [{"label" : "convert", "tail" : "(): Convert", "member" : "sbt.std.TaskDynLinterDSL.convert", "link" : "sbt\/std\/TaskDynLinterDSL$.html#convert:sbt.internal.util.appmacro.Convert", "kind" : "def"}, {"label" : "isDynamicTask", "tail" : ": Boolean", "member" : "sbt.std.TaskDynLinterDSL.isDynamicTask", "link" : "sbt\/std\/TaskDynLinterDSL$.html#isDynamicTask:Boolean", "kind" : "val"}, {"label" : "runLinter", "tail" : "(ctx: Context)(tree: scala.reflect.macros.blackbox.Context.Tree): Unit", "member" : "sbt.std.BaseTaskLinterDSL.runLinter", "link" : "sbt\/std\/TaskDynLinterDSL$.html#runLinter(ctx:scala.reflect.macros.blackbox.Context)(tree:ctx.Tree):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/TaskDynLinterDSL$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/TaskDynLinterDSL$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/TaskDynLinterDSL$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/TaskDynLinterDSL$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/TaskDynLinterDSL$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/TaskDynLinterDSL$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/TaskDynLinterDSL$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskDynLinterDSL$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskDynLinterDSL$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskDynLinterDSL$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/TaskDynLinterDSL$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/TaskDynLinterDSL$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/TaskDynLinterDSL$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/TaskDynLinterDSL$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/TaskDynLinterDSL$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/TaskDynLinterDSL$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/TaskDynLinterDSL$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/TaskDynLinterDSL$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/TaskDynLinterDSL$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.TaskExtra", "members_trait" : [{"label" : "processToTask", "tail" : "(p: ProcessBuilder)(streams: Task[TaskStreams[_]]): Task[Int]", "member" : "sbt.std.TaskExtra.processToTask", "link" : "sbt\/std\/TaskExtra.html#processToTask(p:scala.sys.process.ProcessBuilder)(implicitstreams:sbt.Task[sbt.std.TaskStreams[_]]):sbt.Task[Int]", "kind" : "implicit def"}, {"label" : "linesTask", "tail" : "(in: Task[_])(streams: Task[TaskStreams[Key]], key: (Task[_]) ⇒ Key): TaskLines", "member" : "sbt.std.TaskExtra.linesTask", "link" : "sbt\/std\/TaskExtra.html#linesTask[Key](in:sbt.Task[_])(implicitstreams:sbt.Task[sbt.std.TaskStreams[Key]],implicitkey:sbt.Task[_]=>Key):sbt.std.TaskLines", "kind" : "implicit final def"}, {"label" : "textPipeTask", "tail" : "(in: Task[_])(streams: Task[TaskStreams[Key]], key: (Task[_]) ⇒ Key): TextPipe", "member" : "sbt.std.TaskExtra.textPipeTask", "link" : "sbt\/std\/TaskExtra.html#textPipeTask[Key](in:sbt.Task[_])(implicitstreams:sbt.Task[sbt.std.TaskStreams[Key]],implicitkey:sbt.Task[_]=>Key):sbt.std.TextPipe", "kind" : "implicit final def"}, {"label" : "binaryPipeTask", "tail" : "(in: Task[_])(streams: Task[TaskStreams[Key]], key: (Task[_]) ⇒ Key): BinaryPipe", "member" : "sbt.std.TaskExtra.binaryPipeTask", "link" : "sbt\/std\/TaskExtra.html#binaryPipeTask[Key](in:sbt.Task[_])(implicitstreams:sbt.Task[sbt.std.TaskStreams[Key]],implicitkey:sbt.Task[_]=>Key):sbt.std.BinaryPipe", "kind" : "implicit final def"}, {"label" : "pipeToProcess", "tail" : "(t: Task[_])(streams: Task[TaskStreams[Key]], key: (Task[_]) ⇒ Key): ProcessPipe", "member" : "sbt.std.TaskExtra.pipeToProcess", "link" : "sbt\/std\/TaskExtra.html#pipeToProcess[Key](t:sbt.Task[_])(implicitstreams:sbt.Task[sbt.std.TaskStreams[Key]],implicitkey:sbt.Task[_]=>Key):sbt.std.ProcessPipe", "kind" : "implicit final def"}, {"label" : "toTaskInfo", "tail" : "(in: Task[S]): TaskInfo[S]", "member" : "sbt.std.TaskExtra.toTaskInfo", "link" : "sbt\/std\/TaskExtra.html#toTaskInfo[S](in:sbt.Task[S]):sbt.std.TaskInfo[S]", "kind" : "implicit final def"}, {"label" : "singleInputTask", "tail" : "(in: Task[S]): SingleInTask[S]", "member" : "sbt.std.TaskExtra.singleInputTask", "link" : "sbt\/std\/TaskExtra.html#singleInputTask[S](in:sbt.Task[S]):sbt.std.SingleInTask[S]", "kind" : "implicit final def"}, {"label" : "multInputTask", "tail" : "(tasks: K[Task])(a: AList[K]): MultiInTask[K]", "member" : "sbt.std.TaskExtra.multInputTask", "link" : "sbt\/std\/TaskExtra.html#multInputTask[K[L[X]]](tasks:K[sbt.Task])(implicita:sbt.internal.util.AList[K]):sbt.std.MultiInTask[K]", "kind" : "implicit final def"}, {"label" : "multT2Task", "tail" : "(in: (Task[A], Task[B])): MultiInTask[[L[x]](L[A], L[B])]", "member" : "sbt.std.TaskExtra.multT2Task", "link" : "sbt\/std\/TaskExtra.html#multT2Task[A,B](in:(sbt.Task[A],sbt.Task[B])):sbt.std.MultiInTask[[L[x]](L[A],L[B])]", "kind" : "implicit final def"}, {"label" : "joinTasks", "tail" : "(in: Seq[Task[S]]): JoinTask[S, Seq]", "member" : "sbt.std.TaskExtra.joinTasks", "link" : "sbt\/std\/TaskExtra.html#joinTasks[S](in:Seq[sbt.Task[S]]):sbt.std.JoinTask[S,Seq]", "kind" : "implicit final def"}, {"label" : "joinAnyTasks", "tail" : "(in: Seq[Task[_]]): JoinTask[Any, Seq]", "member" : "sbt.std.TaskExtra.joinAnyTasks", "link" : "sbt\/std\/TaskExtra.html#joinAnyTasks(in:Seq[sbt.Task[_]]):sbt.std.JoinTask[Any,Seq]", "kind" : "implicit final def"}, {"label" : "iterableTask", "tail" : "(in: Seq[S]): ForkTask[S, Seq]", "member" : "sbt.std.TaskExtra.iterableTask", "link" : "sbt\/std\/TaskExtra.html#iterableTask[S](in:Seq[S]):sbt.std.ForkTask[S,Seq]", "kind" : "implicit final def"}, {"label" : "toTasks", "tail" : "(in: Seq[() ⇒ S]): Seq[Task[S]]", "member" : "sbt.std.TaskExtra.toTasks", "link" : "sbt\/std\/TaskExtra.html#toTasks[S](in:Seq[()=>S]):Seq[sbt.Task[S]]", "kind" : "implicit final def"}, {"label" : "upcastTask", "tail" : "(t: Task[B]): Task[A]", "member" : "sbt.std.TaskExtra.upcastTask", "link" : "sbt\/std\/TaskExtra.html#upcastTask[A>:B,B](t:sbt.Task[B]):sbt.Task[A]", "kind" : "implicit final def"}, {"label" : "inlineTask", "tail" : "(value: T): Task[T]", "member" : "sbt.std.TaskExtra.inlineTask", "link" : "sbt\/std\/TaskExtra.html#inlineTask[T](value:T):sbt.Task[T]", "kind" : "final def"}, {"label" : "toTask", "tail" : "(f: () ⇒ T): Task[T]", "member" : "sbt.std.TaskExtra.toTask", "link" : "sbt\/std\/TaskExtra.html#toTask[T](f:()=>T):sbt.Task[T]", "kind" : "implicit final def"}, {"label" : "task", "tail" : "(f: ⇒ T): Task[T]", "member" : "sbt.std.TaskExtra.task", "link" : "sbt\/std\/TaskExtra.html#task[T](f:=>T):sbt.Task[T]", "kind" : "final def"}, {"label" : "constant", "tail" : "(t: T): Task[T]", "member" : "sbt.std.TaskExtra.constant", "link" : "sbt\/std\/TaskExtra.html#constant[T](t:T):sbt.Task[T]", "kind" : "final def"}, {"label" : "nop", "tail" : "(): Task[Unit]", "member" : "sbt.std.TaskExtra.nop", "link" : "sbt\/std\/TaskExtra.html#nop:sbt.Task[Unit]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/TaskExtra.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/TaskExtra.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/TaskExtra.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/TaskExtra.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/TaskExtra.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/TaskExtra.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/TaskExtra.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskExtra.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskExtra.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskExtra.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/TaskExtra.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/TaskExtra.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/TaskExtra.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/TaskExtra.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/TaskExtra.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/TaskExtra.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/TaskExtra.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/TaskExtra.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/TaskExtra.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "sbt\/std\/TaskExtra$.html", "members_object" : [{"label" : "incompleteDeps", "tail" : "(incs: Seq[Incomplete]): Incomplete", "member" : "sbt.std.TaskExtra.incompleteDeps", "link" : "sbt\/std\/TaskExtra$.html#incompleteDeps(incs:Seq[sbt.Incomplete]):sbt.Incomplete", "kind" : "def"}, {"label" : "failures", "tail" : "(results: Seq[Result[A]]): Seq[Incomplete]", "member" : "sbt.std.TaskExtra.failures", "link" : "sbt\/std\/TaskExtra$.html#failures[A](results:Seq[sbt.Result[A]]):Seq[sbt.Incomplete]", "kind" : "def"}, {"label" : "all", "tail" : "(in: Seq[Result[D]]): Seq[D]", "member" : "sbt.std.TaskExtra.all", "link" : "sbt\/std\/TaskExtra$.html#all[D](in:Seq[sbt.Result[D]]):Seq[D]", "kind" : "def"}, {"label" : "failuresM", "tail" : "(a: AList[K]): (K[Result]) ⇒ Seq[Incomplete]", "member" : "sbt.std.TaskExtra.failuresM", "link" : "sbt\/std\/TaskExtra$.html#failuresM[K[L[x]]](implicita:sbt.internal.util.AList[K]):K[sbt.Result]=>Seq[sbt.Incomplete]", "kind" : "def"}, {"label" : "allM", "tail" : "(a: AList[K]): (K[Result]) ⇒ K[internal.util.Types.Id]", "member" : "sbt.std.TaskExtra.allM", "link" : "sbt\/std\/TaskExtra$.html#allM[K[L[x]]](implicita:sbt.internal.util.AList[K]):K[sbt.Result]=>K[sbt.internal.util.Types.Id]", "kind" : "def"}, {"label" : "successM", "tail" : "(): (Result[T]) ⇒ T", "member" : "sbt.std.TaskExtra.successM", "link" : "sbt\/std\/TaskExtra$.html#successM[T]:sbt.Result[T]=>T", "kind" : "def"}, {"label" : "expectedFailure", "tail" : "(): Nothing", "member" : "sbt.std.TaskExtra.expectedFailure", "link" : "sbt\/std\/TaskExtra$.html#expectedFailure:Nothing", "kind" : "def"}, {"label" : "failM", "tail" : "(): (Result[T]) ⇒ Incomplete", "member" : "sbt.std.TaskExtra.failM", "link" : "sbt\/std\/TaskExtra$.html#failM[T]:sbt.Result[T]=>sbt.Incomplete", "kind" : "def"}, {"label" : "anyFailM", "tail" : "(a: AList[K]): (K[Result]) ⇒ Seq[Incomplete]", "member" : "sbt.std.TaskExtra.anyFailM", "link" : "sbt\/std\/TaskExtra$.html#anyFailM[K[L[x]]](implicita:sbt.internal.util.AList[K]):K[sbt.Result]=>Seq[sbt.Incomplete]", "kind" : "def"}, {"label" : "reducePair", "tail" : "(a: Task[S], b: Task[S], f: (S, S) ⇒ S): Task[S]", "member" : "sbt.std.TaskExtra.reducePair", "link" : "sbt\/std\/TaskExtra$.html#reducePair[S](a:sbt.Task[S],b:sbt.Task[S],f:(S,S)=>S):sbt.Task[S]", "kind" : "def"}, {"label" : "reduced", "tail" : "(i: IndexedSeq[Task[S]], f: (S, S) ⇒ S): Task[S]", "member" : "sbt.std.TaskExtra.reduced", "link" : "sbt\/std\/TaskExtra$.html#reduced[S](i:IndexedSeq[sbt.Task[S]],f:(S,S)=>S):sbt.Task[S]", "kind" : "def"}, {"label" : "processIO", "tail" : "(s: TaskStreams[_]): ProcessIO", "member" : "sbt.std.TaskExtra.processIO", "link" : "sbt\/std\/TaskExtra$.html#processIO(s:sbt.std.TaskStreams[_]):scala.sys.process.ProcessIO", "kind" : "def"}, {"label" : "processToTask", "tail" : "(p: ProcessBuilder)(streams: Task[TaskStreams[_]]): Task[Int]", "member" : "sbt.std.TaskExtra.processToTask", "link" : "sbt\/std\/TaskExtra$.html#processToTask(p:scala.sys.process.ProcessBuilder)(implicitstreams:sbt.Task[sbt.std.TaskStreams[_]]):sbt.Task[Int]", "kind" : "implicit def"}, {"label" : "linesTask", "tail" : "(in: Task[_])(streams: Task[TaskStreams[Key]], key: (Task[_]) ⇒ Key): TaskLines", "member" : "sbt.std.TaskExtra.linesTask", "link" : "sbt\/std\/TaskExtra$.html#linesTask[Key](in:sbt.Task[_])(implicitstreams:sbt.Task[sbt.std.TaskStreams[Key]],implicitkey:sbt.Task[_]=>Key):sbt.std.TaskLines", "kind" : "implicit final def"}, {"label" : "textPipeTask", "tail" : "(in: Task[_])(streams: Task[TaskStreams[Key]], key: (Task[_]) ⇒ Key): TextPipe", "member" : "sbt.std.TaskExtra.textPipeTask", "link" : "sbt\/std\/TaskExtra$.html#textPipeTask[Key](in:sbt.Task[_])(implicitstreams:sbt.Task[sbt.std.TaskStreams[Key]],implicitkey:sbt.Task[_]=>Key):sbt.std.TextPipe", "kind" : "implicit final def"}, {"label" : "binaryPipeTask", "tail" : "(in: Task[_])(streams: Task[TaskStreams[Key]], key: (Task[_]) ⇒ Key): BinaryPipe", "member" : "sbt.std.TaskExtra.binaryPipeTask", "link" : "sbt\/std\/TaskExtra$.html#binaryPipeTask[Key](in:sbt.Task[_])(implicitstreams:sbt.Task[sbt.std.TaskStreams[Key]],implicitkey:sbt.Task[_]=>Key):sbt.std.BinaryPipe", "kind" : "implicit final def"}, {"label" : "pipeToProcess", "tail" : "(t: Task[_])(streams: Task[TaskStreams[Key]], key: (Task[_]) ⇒ Key): ProcessPipe", "member" : "sbt.std.TaskExtra.pipeToProcess", "link" : "sbt\/std\/TaskExtra$.html#pipeToProcess[Key](t:sbt.Task[_])(implicitstreams:sbt.Task[sbt.std.TaskStreams[Key]],implicitkey:sbt.Task[_]=>Key):sbt.std.ProcessPipe", "kind" : "implicit final def"}, {"label" : "toTaskInfo", "tail" : "(in: Task[S]): TaskInfo[S]", "member" : "sbt.std.TaskExtra.toTaskInfo", "link" : "sbt\/std\/TaskExtra$.html#toTaskInfo[S](in:sbt.Task[S]):sbt.std.TaskInfo[S]", "kind" : "implicit final def"}, {"label" : "singleInputTask", "tail" : "(in: Task[S]): SingleInTask[S]", "member" : "sbt.std.TaskExtra.singleInputTask", "link" : "sbt\/std\/TaskExtra$.html#singleInputTask[S](in:sbt.Task[S]):sbt.std.SingleInTask[S]", "kind" : "implicit final def"}, {"label" : "multInputTask", "tail" : "(tasks: K[Task])(a: AList[K]): MultiInTask[K]", "member" : "sbt.std.TaskExtra.multInputTask", "link" : "sbt\/std\/TaskExtra$.html#multInputTask[K[L[X]]](tasks:K[sbt.Task])(implicita:sbt.internal.util.AList[K]):sbt.std.MultiInTask[K]", "kind" : "implicit final def"}, {"label" : "multT2Task", "tail" : "(in: (Task[A], Task[B])): MultiInTask[[L[x]](L[A], L[B])]", "member" : "sbt.std.TaskExtra.multT2Task", "link" : "sbt\/std\/TaskExtra$.html#multT2Task[A,B](in:(sbt.Task[A],sbt.Task[B])):sbt.std.MultiInTask[[L[x]](L[A],L[B])]", "kind" : "implicit final def"}, {"label" : "joinTasks", "tail" : "(in: Seq[Task[S]]): JoinTask[S, Seq]", "member" : "sbt.std.TaskExtra.joinTasks", "link" : "sbt\/std\/TaskExtra$.html#joinTasks[S](in:Seq[sbt.Task[S]]):sbt.std.JoinTask[S,Seq]", "kind" : "implicit final def"}, {"label" : "joinAnyTasks", "tail" : "(in: Seq[Task[_]]): JoinTask[Any, Seq]", "member" : "sbt.std.TaskExtra.joinAnyTasks", "link" : "sbt\/std\/TaskExtra$.html#joinAnyTasks(in:Seq[sbt.Task[_]]):sbt.std.JoinTask[Any,Seq]", "kind" : "implicit final def"}, {"label" : "iterableTask", "tail" : "(in: Seq[S]): ForkTask[S, Seq]", "member" : "sbt.std.TaskExtra.iterableTask", "link" : "sbt\/std\/TaskExtra$.html#iterableTask[S](in:Seq[S]):sbt.std.ForkTask[S,Seq]", "kind" : "implicit final def"}, {"label" : "toTasks", "tail" : "(in: Seq[() ⇒ S]): Seq[Task[S]]", "member" : "sbt.std.TaskExtra.toTasks", "link" : "sbt\/std\/TaskExtra$.html#toTasks[S](in:Seq[()=>S]):Seq[sbt.Task[S]]", "kind" : "implicit final def"}, {"label" : "upcastTask", "tail" : "(t: Task[B]): Task[A]", "member" : "sbt.std.TaskExtra.upcastTask", "link" : "sbt\/std\/TaskExtra$.html#upcastTask[A>:B,B](t:sbt.Task[B]):sbt.Task[A]", "kind" : "implicit final def"}, {"label" : "inlineTask", "tail" : "(value: T): Task[T]", "member" : "sbt.std.TaskExtra.inlineTask", "link" : "sbt\/std\/TaskExtra$.html#inlineTask[T](value:T):sbt.Task[T]", "kind" : "final def"}, {"label" : "toTask", "tail" : "(f: () ⇒ T): Task[T]", "member" : "sbt.std.TaskExtra.toTask", "link" : "sbt\/std\/TaskExtra$.html#toTask[T](f:()=>T):sbt.Task[T]", "kind" : "implicit final def"}, {"label" : "task", "tail" : "(f: ⇒ T): Task[T]", "member" : "sbt.std.TaskExtra.task", "link" : "sbt\/std\/TaskExtra$.html#task[T](f:=>T):sbt.Task[T]", "kind" : "final def"}, {"label" : "constant", "tail" : "(t: T): Task[T]", "member" : "sbt.std.TaskExtra.constant", "link" : "sbt\/std\/TaskExtra$.html#constant[T](t:T):sbt.Task[T]", "kind" : "final def"}, {"label" : "nop", "tail" : "(): Task[Unit]", "member" : "sbt.std.TaskExtra.nop", "link" : "sbt\/std\/TaskExtra$.html#nop:sbt.Task[Unit]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/TaskExtra$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/TaskExtra$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/TaskExtra$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/TaskExtra$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/TaskExtra$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/TaskExtra$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/TaskExtra$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskExtra$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskExtra$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskExtra$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/TaskExtra$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/TaskExtra$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/TaskExtra$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/TaskExtra$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/TaskExtra$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/TaskExtra$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/TaskExtra$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/TaskExtra$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/TaskExtra$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "sbt\/std\/TaskExtra.html", "kind" : "trait"}, {"name" : "sbt.std.TaskInfo", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/TaskInfo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/TaskInfo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/TaskInfo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/TaskInfo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/TaskInfo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/TaskInfo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/TaskInfo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskInfo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskInfo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskInfo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/TaskInfo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/TaskInfo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/TaskInfo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/TaskInfo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/TaskInfo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/TaskInfo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/TaskInfo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/TaskInfo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/TaskInfo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "named", "tail" : "(s: String): Task[S]", "member" : "sbt.std.TaskInfo.named", "link" : "sbt\/std\/TaskInfo.html#named(s:String):sbt.Task[S]", "kind" : "abstract def"}, {"label" : "describedAs", "tail" : "(s: String): Task[S]", "member" : "sbt.std.TaskInfo.describedAs", "link" : "sbt\/std\/TaskInfo.html#describedAs(s:String):sbt.Task[S]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/std\/TaskInfo.html", "kind" : "trait"}, {"name" : "sbt.std.TaskInstance", "shortDescription" : "Instance for the monad\/applicative functor for plain Tasks.", "object" : "sbt\/std\/TaskInstance$.html", "members_object" : [{"label" : "pure", "tail" : "(t: () ⇒ T): Task[T]", "member" : "sbt.std.TaskInstance.pure", "link" : "sbt\/std\/TaskInstance$.html#pure[T](t:()=>T):sbt.Task[T]", "kind" : "def"}, {"label" : "flatten", "tail" : "(in: Task[Task[T]]): Task[T]", "member" : "sbt.std.TaskInstance.flatten", "link" : "sbt\/std\/TaskInstance$.html#flatten[T](in:sbt.Task[sbt.Task[T]]):sbt.Task[T]", "kind" : "def"}, {"label" : "map", "tail" : "(in: Task[S], f: (S) ⇒ T): Task[T]", "member" : "sbt.std.TaskInstance.map", "link" : "sbt\/std\/TaskInstance$.html#map[S,T](in:sbt.Task[S],f:S=>T):sbt.Task[T]", "kind" : "def"}, {"label" : "app", "tail" : "(in: K[Task], f: (K[internal.util.Types.Id]) ⇒ Z)(a: AList[K]): Task[Z]", "member" : "sbt.std.TaskInstance.app", "link" : "sbt\/std\/TaskInstance$.html#app[K[L[x]],Z](in:K[sbt.Task],f:K[sbt.internal.util.Types.Id]=>Z)(implicita:sbt.internal.util.AList[K]):sbt.Task[Z]", "kind" : "def"}, {"label" : "M", "tail" : "", "member" : "sbt.std.TaskInstance.M", "link" : "sbt\/std\/TaskInstance$.html#M[x]=sbt.Task[x]", "kind" : "final type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/TaskInstance$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/TaskInstance$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/TaskInstance$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/TaskInstance$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/TaskInstance$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/TaskInstance$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/TaskInstance$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskInstance$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskInstance$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskInstance$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/TaskInstance$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/TaskInstance$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/TaskInstance$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/TaskInstance$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/TaskInstance$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/TaskInstance$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/TaskInstance$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/TaskInstance$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/TaskInstance$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.TaskLines", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/TaskLines.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/TaskLines.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/TaskLines.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/TaskLines.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/TaskLines.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/TaskLines.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/TaskLines.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskLines.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskLines.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskLines.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/TaskLines.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/TaskLines.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/TaskLines.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/TaskLines.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/TaskLines.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/TaskLines.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/TaskLines.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/TaskLines.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/TaskLines.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "lines", "tail" : "(sid: String): Task[List[String]]", "member" : "sbt.std.TaskLines.lines", "link" : "sbt\/std\/TaskLines.html#lines(sid:String):sbt.Task[List[String]]", "kind" : "abstract def"}, {"label" : "lines", "tail" : "(): Task[List[String]]", "member" : "sbt.std.TaskLines.lines", "link" : "sbt\/std\/TaskLines.html#lines:sbt.Task[List[String]]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/std\/TaskLines.html", "kind" : "trait"}, {"name" : "sbt.std.TaskLinterDSL", "shortDescription" : "", "object" : "sbt\/std\/TaskLinterDSL$.html", "members_object" : [{"label" : "convert", "tail" : "(): Convert", "member" : "sbt.std.TaskLinterDSL.convert", "link" : "sbt\/std\/TaskLinterDSL$.html#convert:sbt.internal.util.appmacro.Convert", "kind" : "def"}, {"label" : "isDynamicTask", "tail" : ": Boolean", "member" : "sbt.std.TaskLinterDSL.isDynamicTask", "link" : "sbt\/std\/TaskLinterDSL$.html#isDynamicTask:Boolean", "kind" : "val"}, {"label" : "runLinter", "tail" : "(ctx: Context)(tree: scala.reflect.macros.blackbox.Context.Tree): Unit", "member" : "sbt.std.BaseTaskLinterDSL.runLinter", "link" : "sbt\/std\/TaskLinterDSL$.html#runLinter(ctx:scala.reflect.macros.blackbox.Context)(tree:ctx.Tree):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/TaskLinterDSL$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/TaskLinterDSL$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/TaskLinterDSL$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/TaskLinterDSL$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/TaskLinterDSL$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/TaskLinterDSL$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/TaskLinterDSL$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskLinterDSL$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskLinterDSL$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskLinterDSL$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/TaskLinterDSL$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/TaskLinterDSL$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/TaskLinterDSL$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/TaskLinterDSL$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/TaskLinterDSL$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/TaskLinterDSL$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/TaskLinterDSL$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/TaskLinterDSL$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/TaskLinterDSL$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.TaskLinterDSLFeedback", "shortDescription" : "", "object" : "sbt\/std\/TaskLinterDSLFeedback$.html", "members_object" : [{"label" : "missingValueForKey", "tail" : "(key: String): String", "member" : "sbt.std.TaskLinterDSLFeedback.missingValueForKey", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#missingValueForKey(key:String):String", "kind" : "def"}, {"label" : "useOfValueInsideIfExpression", "tail" : "(task: String): String", "member" : "sbt.std.TaskLinterDSLFeedback.useOfValueInsideIfExpression", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#useOfValueInsideIfExpression(task:String):String", "kind" : "def"}, {"label" : "useOfValueInsideAnon", "tail" : "(task: String): String", "member" : "sbt.std.TaskLinterDSLFeedback.useOfValueInsideAnon", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#useOfValueInsideAnon(task:String):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/TaskLinterDSLFeedback$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.TaskMacro", "shortDescription" : "", "object" : "sbt\/std\/TaskMacro$.html", "members_object" : [{"label" : "inputTaskDynMacroImpl", "tail" : "(c: Context)(t: scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[Task[T]]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[InputTask[T]]]", "member" : "sbt.std.TaskMacro.inputTaskDynMacroImpl", "link" : "sbt\/std\/TaskMacro$.html#inputTaskDynMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(t:c.Expr[sbt.Def.Initialize[sbt.Task[T]]])(implicitevidence$42:c.WeakTypeTag[T]):c.Expr[sbt.Def.Initialize[sbt.InputTask[T]]]", "kind" : "def"}, {"label" : "inputTaskMacroImpl", "tail" : "(c: Context)(t: scala.reflect.macros.blackbox.Context.Expr[T])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[InputTask[T]]]", "member" : "sbt.std.TaskMacro.inputTaskMacroImpl", "link" : "sbt\/std\/TaskMacro$.html#inputTaskMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(t:c.Expr[T])(implicitevidence$41:c.WeakTypeTag[T]):c.Expr[sbt.Def.Initialize[sbt.InputTask[T]]]", "kind" : "def"}, {"label" : "settingRemoveNImpl", "tail" : "(c: Context)(vs: scala.reflect.macros.blackbox.Context.Expr[U])(r: scala.reflect.macros.blackbox.Context.Expr[Values[T, U]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[U]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[T]]", "member" : "sbt.std.TaskMacro.settingRemoveNImpl", "link" : "sbt\/std\/TaskMacro$.html#settingRemoveNImpl[T,U](c:scala.reflect.macros.blackbox.Context)(vs:c.Expr[U])(r:c.Expr[sbt.Remove.Values[T,U]])(implicitevidence$38:c.WeakTypeTag[T],implicitevidence$39:c.WeakTypeTag[U]):c.Expr[sbt.Def.Setting[T]]", "kind" : "def"}, {"label" : "taskRemoveNImpl", "tail" : "(c: Context)(vs: scala.reflect.macros.blackbox.Context.Expr[U])(r: scala.reflect.macros.blackbox.Context.Expr[Values[T, U]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[U]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[Task[T]]]", "member" : "sbt.std.TaskMacro.taskRemoveNImpl", "link" : "sbt\/std\/TaskMacro$.html#taskRemoveNImpl[T,U](c:scala.reflect.macros.blackbox.Context)(vs:c.Expr[U])(r:c.Expr[sbt.Remove.Values[T,U]])(implicitevidence$36:c.WeakTypeTag[T],implicitevidence$37:c.WeakTypeTag[U]):c.Expr[sbt.Def.Setting[sbt.Task[T]]]", "kind" : "def"}, {"label" : "settingRemove1Impl", "tail" : "(c: Context)(v: scala.reflect.macros.blackbox.Context.Expr[U])(r: scala.reflect.macros.blackbox.Context.Expr[Remove.Value[T, U]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[U]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[T]]", "member" : "sbt.std.TaskMacro.settingRemove1Impl", "link" : "sbt\/std\/TaskMacro$.html#settingRemove1Impl[T,U](c:scala.reflect.macros.blackbox.Context)(v:c.Expr[U])(r:c.Expr[sbt.Remove.Value[T,U]])(implicitevidence$34:c.WeakTypeTag[T],implicitevidence$35:c.WeakTypeTag[U]):c.Expr[sbt.Def.Setting[T]]", "kind" : "def"}, {"label" : "taskRemove1Impl", "tail" : "(c: Context)(v: scala.reflect.macros.blackbox.Context.Expr[U])(r: scala.reflect.macros.blackbox.Context.Expr[Remove.Value[T, U]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[U]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[Task[T]]]", "member" : "sbt.std.TaskMacro.taskRemove1Impl", "link" : "sbt\/std\/TaskMacro$.html#taskRemove1Impl[T,U](c:scala.reflect.macros.blackbox.Context)(v:c.Expr[U])(r:c.Expr[sbt.Remove.Value[T,U]])(implicitevidence$32:c.WeakTypeTag[T],implicitevidence$33:c.WeakTypeTag[U]):c.Expr[sbt.Def.Setting[sbt.Task[T]]]", "kind" : "def"}, {"label" : "settingAppendNImpl", "tail" : "(c: Context)(vs: scala.reflect.macros.blackbox.Context.Expr[U])(a: scala.reflect.macros.blackbox.Context.Expr[Values[T, U]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[U]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[T]]", "member" : "sbt.std.TaskMacro.settingAppendNImpl", "link" : "sbt\/std\/TaskMacro$.html#settingAppendNImpl[T,U](c:scala.reflect.macros.blackbox.Context)(vs:c.Expr[U])(a:c.Expr[sbt.Append.Values[T,U]])(implicitevidence$30:c.WeakTypeTag[T],implicitevidence$31:c.WeakTypeTag[U]):c.Expr[sbt.Def.Setting[T]]", "kind" : "def"}, {"label" : "taskAppendNImpl", "tail" : "(c: Context)(vs: scala.reflect.macros.blackbox.Context.Expr[U])(a: scala.reflect.macros.blackbox.Context.Expr[Values[T, U]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[U]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[Task[T]]]", "member" : "sbt.std.TaskMacro.taskAppendNImpl", "link" : "sbt\/std\/TaskMacro$.html#taskAppendNImpl[T,U](c:scala.reflect.macros.blackbox.Context)(vs:c.Expr[U])(a:c.Expr[sbt.Append.Values[T,U]])(implicitevidence$28:c.WeakTypeTag[T],implicitevidence$29:c.WeakTypeTag[U]):c.Expr[sbt.Def.Setting[sbt.Task[T]]]", "kind" : "def"}, {"label" : "settingAppend1Impl", "tail" : "(c: Context)(v: scala.reflect.macros.blackbox.Context.Expr[U])(a: scala.reflect.macros.blackbox.Context.Expr[Append.Value[T, U]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[U]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[T]]", "member" : "sbt.std.TaskMacro.settingAppend1Impl", "link" : "sbt\/std\/TaskMacro$.html#settingAppend1Impl[T,U](c:scala.reflect.macros.blackbox.Context)(v:c.Expr[U])(a:c.Expr[sbt.Append.Value[T,U]])(implicitevidence$26:c.WeakTypeTag[T],implicitevidence$27:c.WeakTypeTag[U]):c.Expr[sbt.Def.Setting[T]]", "kind" : "def"}, {"label" : "taskAppend1Impl", "tail" : "(c: Context)(v: scala.reflect.macros.blackbox.Context.Expr[U])(a: scala.reflect.macros.blackbox.Context.Expr[Append.Value[T, U]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[U]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[Task[T]]]", "member" : "sbt.std.TaskMacro.taskAppend1Impl", "link" : "sbt\/std\/TaskMacro$.html#taskAppend1Impl[T,U](c:scala.reflect.macros.blackbox.Context)(v:c.Expr[U])(a:c.Expr[sbt.Append.Value[T,U]])(implicitevidence$24:c.WeakTypeTag[T],implicitevidence$25:c.WeakTypeTag[U]):c.Expr[sbt.Def.Setting[sbt.Task[T]]]", "kind" : "def"}, {"label" : "inputTaskAssignMacroImpl", "tail" : "(c: Context)(v: scala.reflect.macros.blackbox.Context.Expr[T])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[InputTask[T]]]", "member" : "sbt.std.TaskMacro.inputTaskAssignMacroImpl", "link" : "sbt\/std\/TaskMacro$.html#inputTaskAssignMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(v:c.Expr[T])(implicitevidence$23:c.WeakTypeTag[T]):c.Expr[sbt.Def.Setting[sbt.InputTask[T]]]", "kind" : "def"}, {"label" : "settingAssignPosition", "tail" : "(c: Context)(app: scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[T]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[T]]", "member" : "sbt.std.TaskMacro.settingAssignPosition", "link" : "sbt\/std\/TaskMacro$.html#settingAssignPosition[T](c:scala.reflect.macros.blackbox.Context)(app:c.Expr[sbt.Def.Initialize[T]])(implicitevidence$22:c.WeakTypeTag[T]):c.Expr[sbt.Def.Setting[T]]", "kind" : "def"}, {"label" : "settingAssignPure", "tail" : "(c: Context)(app: scala.reflect.macros.blackbox.Context.Expr[T])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[T]]", "member" : "sbt.std.TaskMacro.settingAssignPure", "link" : "sbt\/std\/TaskMacro$.html#settingAssignPure[T](c:scala.reflect.macros.blackbox.Context)(app:c.Expr[T])(implicitevidence$21:c.WeakTypeTag[T]):c.Expr[sbt.Def.Setting[T]]", "kind" : "def"}, {"label" : "itaskTransformPosition", "tail" : "(c: Context)(f: scala.reflect.macros.blackbox.Context.Expr[(S) ⇒ S])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[S]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[S]]", "member" : "sbt.std.TaskMacro.itaskTransformPosition", "link" : "sbt\/std\/TaskMacro$.html#itaskTransformPosition[S](c:scala.reflect.macros.blackbox.Context)(f:c.Expr[S=>S])(implicitevidence$20:c.WeakTypeTag[S]):c.Expr[sbt.Def.Setting[S]]", "kind" : "def"}, {"label" : "settingTransformPosition", "tail" : "(c: Context)(f: scala.reflect.macros.blackbox.Context.Expr[(S) ⇒ S])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[S]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[S]]", "member" : "sbt.std.TaskMacro.settingTransformPosition", "link" : "sbt\/std\/TaskMacro$.html#settingTransformPosition[S](c:scala.reflect.macros.blackbox.Context)(f:c.Expr[S=>S])(implicitevidence$19:c.WeakTypeTag[S]):c.Expr[sbt.Def.Setting[S]]", "kind" : "def"}, {"label" : "taskTransformPosition", "tail" : "(c: Context)(f: scala.reflect.macros.blackbox.Context.Expr[(S) ⇒ S])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[S]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[Task[S]]]", "member" : "sbt.std.TaskMacro.taskTransformPosition", "link" : "sbt\/std\/TaskMacro$.html#taskTransformPosition[S](c:scala.reflect.macros.blackbox.Context)(f:c.Expr[S=>S])(implicitevidence$18:c.WeakTypeTag[S]):c.Expr[sbt.Def.Setting[sbt.Task[S]]]", "kind" : "def"}, {"label" : "taskAssignPositionPure", "tail" : "(c: Context)(app: scala.reflect.macros.blackbox.Context.Expr[T])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[Task[T]]]", "member" : "sbt.std.TaskMacro.taskAssignPositionPure", "link" : "sbt\/std\/TaskMacro$.html#taskAssignPositionPure[T](c:scala.reflect.macros.blackbox.Context)(app:c.Expr[T])(implicitevidence$17:c.WeakTypeTag[T]):c.Expr[sbt.Def.Setting[sbt.Task[T]]]", "kind" : "def"}, {"label" : "taskAssignPositionT", "tail" : "(c: Context)(app: scala.reflect.macros.blackbox.Context.Expr[Task[T]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[Task[T]]]", "member" : "sbt.std.TaskMacro.taskAssignPositionT", "link" : "sbt\/std\/TaskMacro$.html#taskAssignPositionT[T](c:scala.reflect.macros.blackbox.Context)(app:c.Expr[sbt.Task[T]])(implicitevidence$16:c.WeakTypeTag[T]):c.Expr[sbt.Def.Setting[sbt.Task[T]]]", "kind" : "def"}, {"label" : "itaskAssignPosition", "tail" : "(c: Context)(app: scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[Task[T]]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[Task[T]]]", "member" : "sbt.std.TaskMacro.itaskAssignPosition", "link" : "sbt\/std\/TaskMacro$.html#itaskAssignPosition[T](c:scala.reflect.macros.blackbox.Context)(app:c.Expr[sbt.Def.Initialize[sbt.Task[T]]])(implicitevidence$15:c.WeakTypeTag[T]):c.Expr[sbt.Def.Setting[sbt.Task[T]]]", "kind" : "def"}, {"label" : "fakeTaskAppendNPosition", "tail" : "(c: Context)(vs: scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[Task[V]]])(a: scala.reflect.macros.blackbox.Context.Expr[Values[S, V]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[S], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[V]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[Task[S]]]", "member" : "sbt.std.TaskMacro.fakeTaskAppendNPosition", "link" : "sbt\/std\/TaskMacro$.html#fakeTaskAppendNPosition[S,V](c:scala.reflect.macros.blackbox.Context)(vs:c.Expr[sbt.Def.Initialize[sbt.Task[V]]])(a:c.Expr[sbt.Append.Values[S,V]])(implicitevidence$13:c.WeakTypeTag[S],implicitevidence$14:c.WeakTypeTag[V]):c.Expr[sbt.Def.Setting[sbt.Task[S]]]", "kind" : "def"}, {"label" : "fakeTaskAppend1Position", "tail" : "(c: Context)(v: scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[Task[V]]])(a: scala.reflect.macros.blackbox.Context.Expr[Append.Value[S, V]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[S], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[V]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[Task[S]]]", "member" : "sbt.std.TaskMacro.fakeTaskAppend1Position", "link" : "sbt\/std\/TaskMacro$.html#fakeTaskAppend1Position[S,V](c:scala.reflect.macros.blackbox.Context)(v:c.Expr[sbt.Def.Initialize[sbt.Task[V]]])(a:c.Expr[sbt.Append.Value[S,V]])(implicitevidence$11:c.WeakTypeTag[S],implicitevidence$12:c.WeakTypeTag[V]):c.Expr[sbt.Def.Setting[sbt.Task[S]]]", "kind" : "def"}, {"label" : "fakeItaskAssignPosition", "tail" : "(c: Context)(app: scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[Task[T]]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[Task[T]]]", "member" : "sbt.std.TaskMacro.fakeItaskAssignPosition", "link" : "sbt\/std\/TaskMacro$.html#fakeItaskAssignPosition[T](c:scala.reflect.macros.blackbox.Context)(app:c.Expr[sbt.Def.Initialize[sbt.Task[T]]])(implicitevidence$10:c.WeakTypeTag[T]):c.Expr[sbt.Def.Setting[sbt.Task[T]]]", "kind" : "def"}, {"label" : "fakeSettingAppendNPosition", "tail" : "(c: Context)(vs: scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[V]])(a: scala.reflect.macros.blackbox.Context.Expr[Values[S, V]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[S], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[V]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[S]]", "member" : "sbt.std.TaskMacro.fakeSettingAppendNPosition", "link" : "sbt\/std\/TaskMacro$.html#fakeSettingAppendNPosition[S,V](c:scala.reflect.macros.blackbox.Context)(vs:c.Expr[sbt.Def.Initialize[V]])(a:c.Expr[sbt.Append.Values[S,V]])(implicitevidence$8:c.WeakTypeTag[S],implicitevidence$9:c.WeakTypeTag[V]):c.Expr[sbt.Def.Setting[S]]", "kind" : "def"}, {"label" : "fakeSettingAppend1Position", "tail" : "(c: Context)(v: scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[V]])(a: scala.reflect.macros.blackbox.Context.Expr[Append.Value[S, V]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[S], arg1: scala.reflect.macros.blackbox.Context.WeakTypeTag[V]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[S]]", "member" : "sbt.std.TaskMacro.fakeSettingAppend1Position", "link" : "sbt\/std\/TaskMacro$.html#fakeSettingAppend1Position[S,V](c:scala.reflect.macros.blackbox.Context)(v:c.Expr[sbt.Def.Initialize[V]])(a:c.Expr[sbt.Append.Value[S,V]])(implicitevidence$6:c.WeakTypeTag[S],implicitevidence$7:c.WeakTypeTag[V]):c.Expr[sbt.Def.Setting[S]]", "kind" : "def"}, {"label" : "fakeSettingAssignPosition", "tail" : "(c: Context)(app: scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[T]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[T]]", "member" : "sbt.std.TaskMacro.fakeSettingAssignPosition", "link" : "sbt\/std\/TaskMacro$.html#fakeSettingAssignPosition[T](c:scala.reflect.macros.blackbox.Context)(app:c.Expr[sbt.Def.Initialize[T]])(implicitevidence$5:c.WeakTypeTag[T]):c.Expr[sbt.Def.Setting[T]]", "kind" : "def"}, {"label" : "taskAssignMacroImpl", "tail" : "(c: Context)(v: scala.reflect.macros.blackbox.Context.Expr[T])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[Task[T]]]", "member" : "sbt.std.TaskMacro.taskAssignMacroImpl", "link" : "sbt\/std\/TaskMacro$.html#taskAssignMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(v:c.Expr[T])(implicitevidence$4:c.WeakTypeTag[T]):c.Expr[sbt.Def.Setting[sbt.Task[T]]]", "kind" : "def"}, {"label" : "settingAssignMacroImpl", "tail" : "(c: Context)(v: scala.reflect.macros.blackbox.Context.Expr[T])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Setting[T]]", "member" : "sbt.std.TaskMacro.settingAssignMacroImpl", "link" : "sbt\/std\/TaskMacro$.html#settingAssignMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(v:c.Expr[T])(implicitevidence$3:c.WeakTypeTag[T]):c.Expr[sbt.Def.Setting[T]]", "kind" : "def"}, {"label" : "taskDynMacroImpl", "tail" : "(c: Context)(t: scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[Task[T]]])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[Task[T]]]", "member" : "sbt.std.TaskMacro.taskDynMacroImpl", "link" : "sbt\/std\/TaskMacro$.html#taskDynMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(t:c.Expr[sbt.Def.Initialize[sbt.Task[T]]])(implicitevidence$2:c.WeakTypeTag[T]):c.Expr[sbt.Def.Initialize[sbt.Task[T]]]", "kind" : "def"}, {"label" : "taskMacroImpl", "tail" : "(c: Context)(t: scala.reflect.macros.blackbox.Context.Expr[T])(arg0: scala.reflect.macros.blackbox.Context.WeakTypeTag[T]): scala.reflect.macros.blackbox.Context.Expr[Def.Initialize[Task[T]]]", "member" : "sbt.std.TaskMacro.taskMacroImpl", "link" : "sbt\/std\/TaskMacro$.html#taskMacroImpl[T](c:scala.reflect.macros.blackbox.Context)(t:c.Expr[T])(implicitevidence$1:c.WeakTypeTag[T]):c.Expr[sbt.Def.Initialize[sbt.Task[T]]]", "kind" : "def"}, {"label" : "assignMigration", "tail" : ": String", "member" : "sbt.std.TaskMacro.assignMigration", "link" : "sbt\/std\/TaskMacro$.html#assignMigration:String", "kind" : "final val"}, {"label" : "appendNMigration", "tail" : ": String(\"`<++=` operator is removed. Try `lhs ++= { x.value }`\\n  or see http:\/\/www.scala-sbt.org\/1.0\/docs\/Migrating-from-sbt-012x.html.\")", "member" : "sbt.std.TaskMacro.appendNMigration", "link" : "sbt\/std\/TaskMacro$.html#appendNMigration:String(\"`<++=`operatorisremoved.Try`lhs++={x.value}`\\norseehttp:\/\/www.scala-sbt.org\/1.0\/docs\/Migrating-from-sbt-012x.html.\")", "kind" : "final val"}, {"label" : "append1Migration", "tail" : ": String(\"`<+=` operator is removed. Try `lhs += { x.value }`\\n  or see http:\/\/www.scala-sbt.org\/1.0\/docs\/Migrating-from-sbt-012x.html.\")", "member" : "sbt.std.TaskMacro.append1Migration", "link" : "sbt\/std\/TaskMacro$.html#append1Migration:String(\"`<+=`operatorisremoved.Try`lhs+={x.value}`\\norseehttp:\/\/www.scala-sbt.org\/1.0\/docs\/Migrating-from-sbt-012x.html.\")", "kind" : "final val"}, {"label" : "InputTaskCreateFreeName", "tail" : ": String(\"createFree\")", "member" : "sbt.std.TaskMacro.InputTaskCreateFreeName", "link" : "sbt\/std\/TaskMacro$.html#InputTaskCreateFreeName:String(\"createFree\")", "kind" : "final val"}, {"label" : "InputTaskCreateDynName", "tail" : ": String(\"createDyn\")", "member" : "sbt.std.TaskMacro.InputTaskCreateDynName", "link" : "sbt\/std\/TaskMacro$.html#InputTaskCreateDynName:String(\"createDyn\")", "kind" : "final val"}, {"label" : "TransformInitName", "tail" : ": String(\"transform\")", "member" : "sbt.std.TaskMacro.TransformInitName", "link" : "sbt\/std\/TaskMacro$.html#TransformInitName:String(\"transform\")", "kind" : "final val"}, {"label" : "RemoveNInitName", "tail" : ": String(\"removeN\")", "member" : "sbt.std.TaskMacro.RemoveNInitName", "link" : "sbt\/std\/TaskMacro$.html#RemoveNInitName:String(\"removeN\")", "kind" : "final val"}, {"label" : "Remove1InitName", "tail" : ": String(\"remove1\")", "member" : "sbt.std.TaskMacro.Remove1InitName", "link" : "sbt\/std\/TaskMacro$.html#Remove1InitName:String(\"remove1\")", "kind" : "final val"}, {"label" : "AppendNInitName", "tail" : ": String(\"appendN\")", "member" : "sbt.std.TaskMacro.AppendNInitName", "link" : "sbt\/std\/TaskMacro$.html#AppendNInitName:String(\"appendN\")", "kind" : "final val"}, {"label" : "Append1InitName", "tail" : ": String(\"append1\")", "member" : "sbt.std.TaskMacro.Append1InitName", "link" : "sbt\/std\/TaskMacro$.html#Append1InitName:String(\"append1\")", "kind" : "final val"}, {"label" : "AssignInitName", "tail" : ": String(\"set\")", "member" : "sbt.std.TaskMacro.AssignInitName", "link" : "sbt\/std\/TaskMacro$.html#AssignInitName:String(\"set\")", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/TaskMacro$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/TaskMacro$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/TaskMacro$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/TaskMacro$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/TaskMacro$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/TaskMacro$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/TaskMacro$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskMacro$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskMacro$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskMacro$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/TaskMacro$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/TaskMacro$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/TaskMacro$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/TaskMacro$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/TaskMacro$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/TaskMacro$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/TaskMacro$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/TaskMacro$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/TaskMacro$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "sbt.std.TaskStreams", "members_trait" : [{"label" : "log", "tail" : ": ManagedLogger", "member" : "sbt.std.TaskStreams.log", "link" : "sbt\/std\/TaskStreams.html#log:sbt.internal.util.ManagedLogger", "kind" : "final lazy val"}, {"label" : "readBinary", "tail" : "(a: Key, sid: Option[String]): BufferedInputStream", "member" : "sbt.std.TaskStreams.readBinary", "link" : "sbt\/std\/TaskStreams.html#readBinary(a:Key,sid:Option[String]):java.io.BufferedInputStream", "kind" : "final def"}, {"label" : "readText", "tail" : "(a: Key, sid: Option[String]): BufferedReader", "member" : "sbt.std.TaskStreams.readText", "link" : "sbt\/std\/TaskStreams.html#readText(a:Key,sid:Option[String]):java.io.BufferedReader", "kind" : "final def"}, {"label" : "errorID", "tail" : "(): String", "member" : "sbt.std.TaskStreams.errorID", "link" : "sbt\/std\/TaskStreams.html#errorID:String", "kind" : "def"}, {"label" : "outID", "tail" : "(): String", "member" : "sbt.std.TaskStreams.outID", "link" : "sbt\/std\/TaskStreams.html#outID:String", "kind" : "def"}, {"label" : "default", "tail" : "(): String", "member" : "sbt.std.TaskStreams.default", "link" : "sbt\/std\/TaskStreams.html#default:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/TaskStreams.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/TaskStreams.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/TaskStreams.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/TaskStreams.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/TaskStreams.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/TaskStreams.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/TaskStreams.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskStreams.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskStreams.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TaskStreams.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/TaskStreams.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/TaskStreams.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/TaskStreams.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/TaskStreams.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/TaskStreams.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/TaskStreams.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/TaskStreams.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/TaskStreams.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/TaskStreams.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "log", "tail" : "(sid: String): ManagedLogger", "member" : "sbt.std.TaskStreams.log", "link" : "sbt\/std\/TaskStreams.html#log(sid:String):sbt.internal.util.ManagedLogger", "kind" : "abstract def"}, {"label" : "cacheStoreFactory", "tail" : "(): CacheStoreFactory", "member" : "sbt.std.TaskStreams.cacheStoreFactory", "link" : "sbt\/std\/TaskStreams.html#cacheStoreFactory:sbt.util.CacheStoreFactory", "kind" : "abstract def"}, {"label" : "cacheDirectory", "tail" : "(): File", "member" : "sbt.std.TaskStreams.cacheDirectory", "link" : "sbt\/std\/TaskStreams.html#cacheDirectory:java.io.File", "kind" : "abstract def"}, {"label" : "binary", "tail" : "(sid: String): BufferedOutputStream", "member" : "sbt.std.TaskStreams.binary", "link" : "sbt\/std\/TaskStreams.html#binary(sid:String):java.io.BufferedOutputStream", "kind" : "abstract def"}, {"label" : "text", "tail" : "(sid: String): PrintWriter", "member" : "sbt.std.TaskStreams.text", "link" : "sbt\/std\/TaskStreams.html#text(sid:String):java.io.PrintWriter", "kind" : "abstract def"}, {"label" : "key", "tail" : "(): Key", "member" : "sbt.std.TaskStreams.key", "link" : "sbt\/std\/TaskStreams.html#key:Key", "kind" : "abstract def"}, {"label" : "readBinary", "tail" : "(a: Key, sid: String): BufferedInputStream", "member" : "sbt.std.TaskStreams.readBinary", "link" : "sbt\/std\/TaskStreams.html#readBinary(a:Key,sid:String):java.io.BufferedInputStream", "kind" : "abstract def"}, {"label" : "readText", "tail" : "(key: Key, sid: String): BufferedReader", "member" : "sbt.std.TaskStreams.readText", "link" : "sbt\/std\/TaskStreams.html#readText(key:Key,sid:String):java.io.BufferedReader", "kind" : "abstract def"}, {"label" : "getOutput", "tail" : "(sid: String): Output", "member" : "sbt.std.TaskStreams.getOutput", "link" : "sbt\/std\/TaskStreams.html#getOutput(sid:String):sbt.util.Output", "kind" : "abstract def"}, {"label" : "getInput", "tail" : "(key: Key, sid: String): Input", "member" : "sbt.std.TaskStreams.getInput", "link" : "sbt\/std\/TaskStreams.html#getInput(key:Key,sid:String):sbt.util.Input", "kind" : "abstract def"}], "shortDescription" : "Represents a set of streams associated with a context.", "trait" : "sbt\/std\/TaskStreams.html", "kind" : "trait"}, {"name" : "sbt.std.TextPipe", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/TextPipe.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/TextPipe.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/TextPipe.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/TextPipe.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/TextPipe.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/TextPipe.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/TextPipe.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TextPipe.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TextPipe.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/TextPipe.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/TextPipe.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/TextPipe.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/TextPipe.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/TextPipe.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/TextPipe.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/TextPipe.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/TextPipe.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/TextPipe.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/TextPipe.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "text", "tail" : "(sid: String)(f: (BufferedReader) ⇒ T): Task[T]", "member" : "sbt.std.TextPipe.text", "link" : "sbt\/std\/TextPipe.html#text[T](sid:String)(f:java.io.BufferedReader=>T):sbt.Task[T]", "kind" : "abstract def"}, {"label" : "text", "tail" : "(f: (BufferedReader) ⇒ T): Task[T]", "member" : "sbt.std.TextPipe.text", "link" : "sbt\/std\/TextPipe.html#text[T](f:java.io.BufferedReader=>T):sbt.Task[T]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "sbt\/std\/TextPipe.html", "kind" : "trait"}, {"name" : "sbt.std.Transform", "shortDescription" : "", "object" : "sbt\/std\/Transform$.html", "members_object" : [{"label" : "toNode", "tail" : "(inputs: k[Task])(f: (k[Result]) ⇒ Either[Task[T], T])(a: AList[k]): Node[Task, T]", "member" : "sbt.std.Transform.toNode", "link" : "sbt\/std\/Transform$.html#toNode[T,k[L[x]]](inputs:k[sbt.Task])(f:k[sbt.Result]=>Either[sbt.Task[T],T])(implicita:sbt.internal.util.AList[k]):sbt.Node[sbt.Task,T]", "kind" : "def"}, {"label" : "uniform", "tail" : "(tasks: Seq[Task[D]])(f: (Seq[Result[D]]) ⇒ Either[Task[T], T]): Node[Task, T]", "member" : "sbt.std.Transform.uniform", "link" : "sbt\/std\/Transform$.html#uniform[T,D](tasks:Seq[sbt.Task[D]])(f:Seq[sbt.Result[D]]=>Either[sbt.Task[T],T]):sbt.Node[sbt.Task,T]", "kind" : "def"}, {"label" : "taskToNode", "tail" : "(pre: ~>[Task, Task]): NodeView[Task]", "member" : "sbt.std.Transform.taskToNode", "link" : "sbt\/std\/Transform$.html#taskToNode(pre:sbt.Task~>sbt.Task):sbt.NodeView[sbt.Task]", "kind" : "def"}, {"label" : "apply", "tail" : "(dummies: DummyTaskMap): NodeView[Task]", "member" : "sbt.std.Transform.apply", "link" : "sbt\/std\/Transform$.html#apply(dummies:sbt.std.Transform.DummyTaskMap):sbt.NodeView[sbt.Task]", "kind" : "def"}, {"label" : "getOrId", "tail" : "(map: internal.util.Types.~>|[Task, Task]): ~>[Task, Task]", "member" : "sbt.std.Transform.getOrId", "link" : "sbt\/std\/Transform$.html#getOrId(map:sbt.Task~>|sbt.Task):sbt.Task~>sbt.Task", "kind" : "implicit def"}, {"label" : "dummyMap", "tail" : "(dummyMap: DummyTaskMap): internal.util.Types.~>|[Task, Task]", "member" : "sbt.std.Transform.dummyMap", "link" : "sbt\/std\/Transform$.html#dummyMap(dummyMap:sbt.std.Transform.DummyTaskMap):sbt.Task~>|sbt.Task", "kind" : "def"}, {"label" : "TaskAndValue", "tail" : "", "member" : "sbt.std.Transform.TaskAndValue", "link" : "sbt\/std\/Transform$.html#TaskAndValue[T]extendsAnyRef", "kind" : "final class"}, {"label" : "DummyTaskMap", "tail" : "", "member" : "sbt.std.Transform.DummyTaskMap", "link" : "sbt\/std\/Transform$.html#DummyTaskMapextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "to_~>|", "tail" : "(map: RMap[K, V]): internal.util.Types.~>|[K, V]", "member" : "sbt.std.Transform.to_~>|", "link" : "sbt\/std\/Transform$.html#to_~>|[K[_],V[_]](map:sbt.internal.util.RMap[K,V]):K~>|V", "kind" : "implicit def"}, {"label" : "fromDummyStrict", "tail" : "(original: Task[T], value: T): Task[T]", "member" : "sbt.std.Transform.fromDummyStrict", "link" : "sbt\/std\/Transform$.html#fromDummyStrict[T](original:sbt.Task[T],value:T):sbt.Task[T]", "kind" : "def"}, {"label" : "fromDummy", "tail" : "(original: Task[T])(action: ⇒ T): Task[T]", "member" : "sbt.std.Transform.fromDummy", "link" : "sbt\/std\/Transform$.html#fromDummy[T](original:sbt.Task[T])(action:=>T):sbt.Task[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/std\/Transform$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/std\/Transform$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/std\/Transform$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/std\/Transform$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/std\/Transform$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/std\/Transform$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/std\/Transform$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/Transform$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/Transform$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/std\/Transform$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/std\/Transform$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/std\/Transform$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/std\/Transform$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/std\/Transform$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/std\/Transform$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/std\/Transform$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/std\/Transform$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/std\/Transform$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/std\/Transform$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "sbt.internal.testing" : [{"name" : "sbt.internal.testing.StatusFormats", "members_trait" : [{"label" : "StatusFormat", "tail" : ": JsonFormat[Status]", "member" : "sbt.internal.testing.StatusFormats.StatusFormat", "link" : "sbt\/internal\/testing\/StatusFormats.html#StatusFormat:sjsonnew.JsonFormat[sbt.testing.Status]", "kind" : "implicit lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/testing\/StatusFormats.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/testing\/StatusFormats.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/testing\/StatusFormats.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/testing\/StatusFormats.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/testing\/StatusFormats.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/testing\/StatusFormats.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/testing\/StatusFormats.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/testing\/StatusFormats.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/testing\/StatusFormats.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/testing\/StatusFormats.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/testing\/StatusFormats.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/testing\/StatusFormats.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/testing\/StatusFormats.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/testing\/StatusFormats.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/testing\/StatusFormats.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/testing\/StatusFormats.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/testing\/StatusFormats.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/testing\/StatusFormats.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/testing\/StatusFormats.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "sbt\/internal\/testing\/StatusFormats.html", "kind" : "trait"}, {"name" : "sbt.internal.testing.TestLogger", "shortDescription" : "", "object" : "sbt\/internal\/testing\/TestLogger$.html", "members_class" : [{"label" : "contentLogger", "tail" : "(test: TestDefinition): Option[ContentLogger]", "member" : "sbt.internal.testing.TestLogger.contentLogger", "link" : "sbt\/internal\/testing\/TestLogger.html#contentLogger(test:sbt.TestDefinition):Option[sbt.ContentLogger]", "kind" : "def"}, {"label" : "doComplete", "tail" : "(finalResult: TestResult): Unit", "member" : "sbt.internal.testing.TestLogger.doComplete", "link" : "sbt\/internal\/testing\/TestLogger.html#doComplete(finalResult:sbt.protocol.testing.TestResult):Unit", "kind" : "def"}, {"label" : "endGroup", "tail" : "(name: String, t: Throwable): Unit", "member" : "sbt.internal.testing.TestLogger.endGroup", "link" : "sbt\/internal\/testing\/TestLogger.html#endGroup(name:String,t:Throwable):Unit", "kind" : "def"}, {"label" : "endGroup", "tail" : "(name: String, result: TestResult): Unit", "member" : "sbt.internal.testing.TestLogger.endGroup", "link" : "sbt\/internal\/testing\/TestLogger.html#endGroup(name:String,result:sbt.protocol.testing.TestResult):Unit", "kind" : "def"}, {"label" : "testEvent", "tail" : "(event: TestEvent): Unit", "member" : "sbt.internal.testing.TestLogger.testEvent", "link" : "sbt\/internal\/testing\/TestLogger.html#testEvent(event:sbt.TestEvent):Unit", "kind" : "def"}, {"label" : "startGroup", "tail" : "(name: String): Unit", "member" : "sbt.internal.testing.TestLogger.startGroup", "link" : "sbt\/internal\/testing\/TestLogger.html#startGroup(name:String):Unit", "kind" : "def"}, {"label" : "doInit", "tail" : "(): Unit", "member" : "sbt.internal.testing.TestLogger.doInit", "link" : "sbt\/internal\/testing\/TestLogger.html#doInit():Unit", "kind" : "def"}, {"member" : "sbt.internal.testing.TestLogger#<init>", "error" : "unsupported entity"}, {"label" : "logging", "tail" : ": TestLogging", "member" : "sbt.internal.testing.TestLogger.logging", "link" : "sbt\/internal\/testing\/TestLogger.html#logging:sbt.internal.testing.TestLogging", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/testing\/TestLogger.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/testing\/TestLogger.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/testing\/TestLogger.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/testing\/TestLogger.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/testing\/TestLogger.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/testing\/TestLogger.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/testing\/TestLogger.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/testing\/TestLogger.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/testing\/TestLogger.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/testing\/TestLogger.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/testing\/TestLogger.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/testing\/TestLogger.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/testing\/TestLogger.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/testing\/TestLogger.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/testing\/TestLogger.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/testing\/TestLogger.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/testing\/TestLogger.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/testing\/TestLogger.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/testing\/TestLogger.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "wrap", "tail" : "(logger: ManagedLogger): Logger", "member" : "sbt.internal.testing.TestLogger.wrap", "link" : "sbt\/internal\/testing\/TestLogger$.html#wrap(logger:sbt.internal.util.ManagedLogger):sbt.testing.Logger", "kind" : "def"}, {"label" : "make", "tail" : "(global: ManagedLogger, perTest: (TestDefinition) ⇒ PerTest): TestLogger", "member" : "sbt.internal.testing.TestLogger.make", "link" : "sbt\/internal\/testing\/TestLogger$.html#make(global:sbt.internal.util.ManagedLogger,perTest:sbt.TestDefinition=>sbt.internal.testing.TestLogger.PerTest):sbt.internal.testing.TestLogger", "kind" : "def"}, {"label" : "PerTest", "tail" : "", "member" : "sbt.internal.testing.TestLogger.PerTest", "link" : "sbt\/internal\/testing\/TestLogger$.html#PerTestextendsAnyRef", "kind" : "final class"}, {"label" : "testStringEventShowLines", "tail" : ": ShowLines[TestStringEvent]", "member" : "sbt.internal.testing.TestLogger.testStringEventShowLines", "link" : "sbt\/internal\/testing\/TestLogger$.html#testStringEventShowLines:sbt.util.ShowLines[sbt.protocol.testing.TestStringEvent]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/testing\/TestLogger$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/testing\/TestLogger$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/testing\/TestLogger$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/testing\/TestLogger$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/testing\/TestLogger$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/testing\/TestLogger$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/testing\/TestLogger$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/testing\/TestLogger$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/testing\/TestLogger$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/testing\/TestLogger$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/testing\/TestLogger$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/testing\/TestLogger$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/testing\/TestLogger$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/testing\/TestLogger$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/testing\/TestLogger$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/testing\/TestLogger$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/testing\/TestLogger$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/testing\/TestLogger$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/testing\/TestLogger$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/testing\/TestLogger.html", "kind" : "object"}, {"name" : "sbt.internal.testing.TestLogging", "shortDescription" : "", "members_class" : [{"member" : "sbt.internal.testing.TestLogging#<init>", "error" : "unsupported entity"}, {"label" : "logTest", "tail" : ": (TestDefinition) ⇒ ContentLogger", "member" : "sbt.internal.testing.TestLogging.logTest", "link" : "sbt\/internal\/testing\/TestLogging.html#logTest:sbt.TestDefinition=>sbt.ContentLogger", "kind" : "val"}, {"label" : "managed", "tail" : ": ManagedLogger", "member" : "sbt.internal.testing.TestLogging.managed", "link" : "sbt\/internal\/testing\/TestLogging.html#managed:sbt.internal.util.ManagedLogger", "kind" : "val"}, {"label" : "global", "tail" : ": Logger", "member" : "sbt.internal.testing.TestLogging.global", "link" : "sbt\/internal\/testing\/TestLogging.html#global:sbt.testing.Logger", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "sbt\/internal\/testing\/TestLogging.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "sbt\/internal\/testing\/TestLogging.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "sbt\/internal\/testing\/TestLogging.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "sbt\/internal\/testing\/TestLogging.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "sbt\/internal\/testing\/TestLogging.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "sbt\/internal\/testing\/TestLogging.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "sbt\/internal\/testing\/TestLogging.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/testing\/TestLogging.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/testing\/TestLogging.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "sbt\/internal\/testing\/TestLogging.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "sbt\/internal\/testing\/TestLogging.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "sbt\/internal\/testing\/TestLogging.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "sbt\/internal\/testing\/TestLogging.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "sbt\/internal\/testing\/TestLogging.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "sbt\/internal\/testing\/TestLogging.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "sbt\/internal\/testing\/TestLogging.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "sbt\/internal\/testing\/TestLogging.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "sbt\/internal\/testing\/TestLogging.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "sbt\/internal\/testing\/TestLogging.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "sbt\/internal\/testing\/TestLogging.html", "kind" : "class"}]};